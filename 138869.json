{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,long).mjava","commits":[{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":0,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.\n   *\n   * @param core The Solr core\n   * @param dir The index directory storing the snapshot.\n   * @param gen The generation number of the {@linkplain IndexCommit} to be deleted.\n   * @throws IOException in case of I/O errors.\n   */\n  public static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, final long gen) throws IOException {\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (gen == ic.getGeneration()) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.\n   *\n   * @param core The Solr core\n   * @param dir The index directory storing the snapshot.\n   * @param gen The generation number of the {@linkplain IndexCommit} to be deleted.\n   * @throws IOException in case of I/O errors.\n   */\n  public static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, final long gen) throws IOException {\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (gen == ic.getGeneration()) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,long).mjava","sourceNew":"  /**\n   * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.\n   *\n   * @param core The Solr core\n   * @param dir The index directory storing the snapshot.\n   * @param gen The generation number of the {@linkplain IndexCommit} to be deleted.\n   * @throws IOException in case of I/O errors.\n   */\n  public static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, final long gen) throws IOException {\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (gen == ic.getGeneration()) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            }\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n\n","sourceOld":"  /**\n   * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.\n   *\n   * @param core The Solr core\n   * @param dir The index directory storing the snapshot.\n   * @param gen The generation number of the {@linkplain IndexCommit} to be deleted.\n   * @throws IOException in case of I/O errors.\n   */\n  public static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, final long gen) throws IOException {\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (gen == ic.getGeneration()) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e13696c44d3e2405098726359ab81dab178e7bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["3e13696c44d3e2405098726359ab81dab178e7bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e13696c44d3e2405098726359ab81dab178e7bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"3e13696c44d3e2405098726359ab81dab178e7bc":["140be51d03394488536f4aacedace29f9b318347","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e13696c44d3e2405098726359ab81dab178e7bc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}