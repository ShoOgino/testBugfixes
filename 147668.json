{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPolyApprox(double,double,double,double,double[],double[],double,double,double,double).mjava","commits":[{"id":"04995b00da1e08edb88b14c5a9789d741de5c51d","date":1453863716,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPolyApprox(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes whether a rectangle is within a given polygon (shared boundaries allowed)\n   */\n  public static boolean rectWithinPolyApprox(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // approximation: check if rectangle crosses poly (to handle concave/pacman polys), then check one of the corners\n    // are contained\n\n    // short-cut: if bounding boxes cross, rect is not within\n     if (rectCrosses(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY) == true) {\n       return false;\n     }\n\n     return !(rectCrossesPolyApprox(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY)\n         || !pointInPolygon(shapeX, shapeY, rMinY, rMinX));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectWithinPolyApprox(double,double,double,double,double[],double[],double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectWithinPolyApprox(double,double,double,double,double[],double[],double,double,double,double).mjava","sourceNew":"  /**\n   * Computes whether a rectangle is within a given polygon (shared boundaries allowed)\n   */\n  public static boolean rectWithinPolyApprox(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // approximation: check if rectangle crosses poly (to handle concave/pacman polys), then check one of the corners\n    // are contained\n\n    // short-cut: if bounding boxes cross, rect is not within\n     if (rectCrosses(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY) == true) {\n       return false;\n     }\n\n     return !(rectCrossesPolyApprox(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY)\n         || !pointInPolygon(shapeX, shapeY, rMinY, rMinX));\n  }\n\n","sourceOld":"  /**\n   * Computes whether a rectangle is within a given polygon (shared boundaries allowed)\n   */\n  public static boolean rectWithinPolyApprox(final double rMinX, final double rMinY, final double rMaxX, final double rMaxY,\n                                       final double[] shapeX, final double[] shapeY, final double sMinX,\n                                       final double sMinY, final double sMaxX, final double sMaxY) {\n    // approximation: check if rectangle crosses poly (to handle concave/pacman polys), then check one of the corners\n    // are contained\n\n    // short-cut: if bounding boxes cross, rect is not within\n     if (rectCrosses(rMinX, rMinY, rMaxX, rMaxY, sMinX, sMinY, sMaxX, sMaxY) == true) {\n       return false;\n     }\n\n     return !(rectCrossesPolyApprox(rMinX, rMinY, rMaxX, rMaxY, shapeX, shapeY, sMinX, sMinY, sMaxX, sMaxY)\n         || !pointInPolygon(shapeX, shapeY, rMinY, rMinX));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"937923083e4d137932336fc80f3d78758ff698a6":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"937923083e4d137932336fc80f3d78758ff698a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["937923083e4d137932336fc80f3d78758ff698a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}