{"path":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random.nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      FixedBitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      FixedBitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      BitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery.Builder oq = new BooleanQuery.Builder();\n      FixedBitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq.build(), BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq.build(), hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery oq = new BooleanQuery();\n      FixedBitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery bq = new BooleanQuery();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq, BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq, hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(IndexSearcher,FixedBitSet[],int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doNestedConjunctions(int,int,int).mjava","sourceNew":"  public int doNestedConjunctions(IndexSearcher s,\n                                  FixedBitSet[] sets,\n                                  int iter,\n                                  int maxOuterClauses,\n                                  int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery.Builder oq = new BooleanQuery.Builder();\n      FixedBitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(sets, bq,result);\n      }\n\n      oq.add(bq.build(), BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq.build(), hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","sourceOld":"  public int doNestedConjunctions(int iter, int maxOuterClauses, int maxClauses) throws IOException {\n    int ret=0;\n    long nMatches=0;\n\n    for (int i=0; i<iter; i++) {\n      int oClauses = random().nextInt(maxOuterClauses-1)+2;\n      BooleanQuery.Builder oq = new BooleanQuery.Builder();\n      FixedBitSet result=null;\n\n      for (int o=0; o<oClauses; o++) {\n\n      int nClauses = random().nextInt(maxClauses-1)+2; // min 2 clauses\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      for (int j=0; j<nClauses; j++) {\n        result = addClause(bq,result);\n      }\n\n      oq.add(bq.build(), BooleanClause.Occur.MUST);\n      } // outer\n\n      CountingHitCollector hc = validate ? new MatchingHitCollector(result)\n                                         : new CountingHitCollector();\n      s.search(oq.build(), hc);\n      nMatches += hc.getCount();\n      ret += hc.getSum();\n      if (validate) assertEquals(result.cardinality(), hc.getCount());\n      // System.out.println(hc.getCount());\n    }\n    if (VERBOSE) System.out.println(\"Average number of matches=\"+(nMatches/iter));\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"55980207f1977bd1463465de1659b821347e2fa8":["19275ba31e621f6da1b83bf13af75233876fd3d4","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d77dafd89756a5161d244985903e3487ca109182":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d77dafd89756a5161d244985903e3487ca109182"],"55980207f1977bd1463465de1659b821347e2fa8":[],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","55980207f1977bd1463465de1659b821347e2fa8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["55980207f1977bd1463465de1659b821347e2fa8","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}