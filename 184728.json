{"path":"backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.tvf.length();\n        assert 0 == perThread.doc.tvf.getFilePointer();\n      } else {\n        assert perThread.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#start(Fieldable[],int).mjava","sourceNew":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.tvf.length();\n        assert 0 == perThread.doc.tvf.getFilePointer();\n      } else {\n        assert perThread.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","sourceOld":"  @Override\n  boolean start(Fieldable[] fields, int count) {\n    doVectors = false;\n    doVectorPositions = false;\n    doVectorOffsets = false;\n\n    for(int i=0;i<count;i++) {\n      Fieldable field = fields[i];\n      if (field.isIndexed() && field.isTermVectorStored()) {\n        doVectors = true;\n        doVectorPositions |= field.isStorePositionWithTermVector();\n        doVectorOffsets |= field.isStoreOffsetWithTermVector();\n      }\n    }\n\n    if (doVectors) {\n      if (perThread.doc == null) {\n        perThread.doc = termsWriter.getPerDoc();\n        perThread.doc.docID = docState.docID;\n        assert perThread.doc.numVectorFields == 0;\n        assert 0 == perThread.doc.tvf.length();\n        assert 0 == perThread.doc.tvf.getFilePointer();\n      } else {\n        assert perThread.doc.docID == docState.docID;\n\n        if (termsHashPerField.numPostings != 0)\n          // Only necessary if previous doc hit a\n          // non-aborting exception while writing vectors in\n          // this field:\n          termsHashPerField.reset();\n      }\n    }\n\n    // TODO: only if needed for performance\n    //perThread.postingsCount = 0;\n\n    return doVectors;\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}