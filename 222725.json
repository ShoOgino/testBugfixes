{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#clear(long,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#clear(long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#clear(long,long).mjava","sourceNew":"  /** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }\n\n","sourceOld":"  /** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#clear(long,long).mjava","sourceNew":null,"sourceOld":"  /** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#clear(long,long).mjava","sourceNew":null,"sourceOld":"  /** Clears a range of bits.  Clearing past the end does not change the size of the set.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(long startIndex, long endIndex) {\n    if (endIndex <= startIndex) return;\n\n    int startWord = (int)(startIndex>>6);\n    if (startWord >= wlen) return;\n\n    // since endIndex is one past the end, this is index of the last\n    // word to be changed.\n    int endWord   = (int)((endIndex-1)>>6);\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n\n    int middle = Math.min(wlen, endWord);\n    Arrays.fill(bits, startWord+1, middle, 0L);\n    if (endWord < wlen) {\n      bits[endWord] &= endmask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}