{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","sourceNew":"      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      private GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i).setNextReader(readerContext);\n          comparators[i].setScorer(scorer);\n          comparators[i].copy(0, doc);\n          comparators[i].setBottom(0);\n        }\n      }\n\n","sourceOld":"      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      private GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i).setNextReader(readerContext);\n          comparators[i].setScorer(scorer);\n          comparators[i].copy(0, doc);\n          comparators[i].setBottom(0);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","sourceNew":"      private GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i).setNextReader(readerContext);\n          comparators[i].setScorer(scorer);\n          comparators[i].copy(0, doc);\n          comparators[i].setBottom(0);\n        }\n      }\n\n","sourceOld":"      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      private GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i).setNextReader(readerContext);\n          comparators[i].setScorer(scorer);\n          comparators[i].copy(0, doc);\n          comparators[i].setBottom(0);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","sourceNew":"      private GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        leafComparators = new LeafFieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i);\n          leafComparators[i] = comparators[i].getLeafComparator(readerContext);\n          leafComparators[i].setScorer(scorer);\n          leafComparators[i].copy(0, doc);\n          leafComparators[i].setBottom(0);\n        }\n      }\n\n","sourceOld":"      private GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i).setNextReader(readerContext);\n          comparators[i].setScorer(scorer);\n          comparators[i].copy(0, doc);\n          comparators[i].setBottom(0);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789","date":1439672757,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","sourceNew":"      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        leafComparators = new LeafFieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i);\n          leafComparators[i] = comparators[i].getLeafComparator(readerContext);\n          leafComparators[i].setScorer(scorer);\n          leafComparators[i].copy(0, doc);\n          leafComparators[i].setBottom(0);\n        }\n      }\n\n","sourceOld":"      private GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        leafComparators = new LeafFieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i);\n          leafComparators[i] = comparators[i].getLeafComparator(readerContext);\n          leafComparators[i].setScorer(scorer);\n          leafComparators[i].copy(0, doc);\n          leafComparators[i].setBottom(0);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","sourceNew":null,"sourceOld":"      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        leafComparators = new LeafFieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i);\n          leafComparators[i] = comparators[i].getLeafComparator(readerContext);\n          leafComparators[i].setScorer(scorer);\n          leafComparators[i].copy(0, doc);\n          leafComparators[i].setBottom(0);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead#GroupHead(BytesRef,Sort,int).mjava","sourceNew":null,"sourceOld":"      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      GroupHead(BytesRef groupValue, Sort sort, int doc) throws IOException {\n        super(groupValue, doc + readerContext.docBase);\n        final SortField[] sortFields = sort.getSort();\n        comparators = new FieldComparator[sortFields.length];\n        leafComparators = new LeafFieldComparator[sortFields.length];\n        for (int i = 0; i < sortFields.length; i++) {\n          comparators[i] = sortFields[i].getComparator(1, i);\n          leafComparators[i] = comparators[i].getLeafComparator(readerContext);\n          leafComparators[i].setScorer(scorer);\n          leafComparators[i].copy(0, doc);\n          leafComparators[i].setBottom(0);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789":["901e951cec2e6af4e503209a6721c8834db23279"],"901e951cec2e6af4e503209a6721c8834db23279":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"901e951cec2e6af4e503209a6721c8834db23279":["4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}