{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","commits":[{"id":"30dd96619ff554e5877f9cf49f3f503cd8314c73","date":1249985671,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"/dev/null","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new WhitespaceAnalyzer());\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new WhitespaceAnalyzer());\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testConstantScoreAutoRewrite().mjava","sourceNew":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","sourceOld":"  public void testConstantScoreAutoRewrite() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query q = qp.parse(\"foo*bar\", \"field\");\n    assertTrue(q instanceof WildcardQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"foo*\", \"field\");\n    assertTrue(q instanceof PrefixQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n\n    q = qp.parse(\"[a TO z]\", \"field\");\n    assertTrue(q instanceof TermRangeQuery);\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((MultiTermQuery) q).getRewriteMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30dd96619ff554e5877f9cf49f3f503cd8314c73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["30dd96619ff554e5877f9cf49f3f503cd8314c73"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"30dd96619ff554e5877f9cf49f3f503cd8314c73":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30dd96619ff554e5877f9cf49f3f503cd8314c73"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}