{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestFormatAndBits(int,int,float).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestFormatAndBits(int,int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to find the {@link Format} and number of bits per value that would\n   * restore from disk the fastest reader whose overhead is less than\n   * <code>acceptableOverheadRatio</code>.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter makes sense for\n   * random-access {@link Reader}s. In case you only plan to perform\n   * sequential access on this stream later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   * </p><p>\n   * If you don't know how many values you are going to write, use\n   * <code>valueCount = -1</code>.\n   */\n  public static FormatAndBits fastestFormatAndBits(int valueCount, int bitsPerValue, float acceptableOverheadRatio) {\n    if (valueCount == -1) {\n      valueCount = Integer.MAX_VALUE;\n    }\n\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    int actualBitsPerValue = -1;\n    Format format = Format.PACKED;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      actualBitsPerValue = 8;\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      actualBitsPerValue = 16;\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      actualBitsPerValue = 32;\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      actualBitsPerValue = 64;\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      actualBitsPerValue = 24;\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      actualBitsPerValue = 48;\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Format.PACKED_SINGLE_BLOCK.isSupported(bpv)) {\n          float overhead = Format.PACKED_SINGLE_BLOCK.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            actualBitsPerValue = bpv;\n            format = Format.PACKED_SINGLE_BLOCK;\n            break;\n          }\n        }\n      }\n      if (actualBitsPerValue < 0) {\n        actualBitsPerValue = bitsPerValue;\n      }\n    }\n\n    return new FormatAndBits(format, actualBitsPerValue);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestFormatAndBits(int,int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to find the {@link Format} and number of bits per value that would\n   * restore from disk the fastest reader whose overhead is less than\n   * <code>acceptableOverheadRatio</code>.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter makes sense for\n   * random-access {@link Reader}s. In case you only plan to perform\n   * sequential access on this stream later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   * </p><p>\n   * If you don't know how many values you are going to write, use\n   * <code>valueCount = -1</code>.\n   */\n  public static FormatAndBits fastestFormatAndBits(int valueCount, int bitsPerValue, float acceptableOverheadRatio) {\n    if (valueCount == -1) {\n      valueCount = Integer.MAX_VALUE;\n    }\n\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    int actualBitsPerValue = -1;\n    Format format = Format.PACKED;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      actualBitsPerValue = 8;\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      actualBitsPerValue = 16;\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      actualBitsPerValue = 32;\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      actualBitsPerValue = 64;\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      actualBitsPerValue = 24;\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      actualBitsPerValue = 48;\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Format.PACKED_SINGLE_BLOCK.isSupported(bpv)) {\n          float overhead = Format.PACKED_SINGLE_BLOCK.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            actualBitsPerValue = bpv;\n            format = Format.PACKED_SINGLE_BLOCK;\n            break;\n          }\n        }\n      }\n      if (actualBitsPerValue < 0) {\n        actualBitsPerValue = bitsPerValue;\n      }\n    }\n\n    return new FormatAndBits(format, actualBitsPerValue);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestFormatAndBits(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestFormatAndBits(int,int,float).mjava","sourceNew":"  /**\n   * Try to find the {@link Format} and number of bits per value that would\n   * restore from disk the fastest reader whose overhead is less than\n   * <code>acceptableOverheadRatio</code>.\n   * <p>\n   * The <code>acceptableOverheadRatio</code> parameter makes sense for\n   * random-access {@link Reader}s. In case you only plan to perform\n   * sequential access on this stream later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   * <p>\n   * If you don't know how many values you are going to write, use\n   * <code>valueCount = -1</code>.\n   */\n  public static FormatAndBits fastestFormatAndBits(int valueCount, int bitsPerValue, float acceptableOverheadRatio) {\n    if (valueCount == -1) {\n      valueCount = Integer.MAX_VALUE;\n    }\n\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    int actualBitsPerValue = -1;\n    Format format = Format.PACKED;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      actualBitsPerValue = 8;\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      actualBitsPerValue = 16;\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      actualBitsPerValue = 32;\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      actualBitsPerValue = 64;\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      actualBitsPerValue = 24;\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      actualBitsPerValue = 48;\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Format.PACKED_SINGLE_BLOCK.isSupported(bpv)) {\n          float overhead = Format.PACKED_SINGLE_BLOCK.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            actualBitsPerValue = bpv;\n            format = Format.PACKED_SINGLE_BLOCK;\n            break;\n          }\n        }\n      }\n      if (actualBitsPerValue < 0) {\n        actualBitsPerValue = bitsPerValue;\n      }\n    }\n\n    return new FormatAndBits(format, actualBitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Try to find the {@link Format} and number of bits per value that would\n   * restore from disk the fastest reader whose overhead is less than\n   * <code>acceptableOverheadRatio</code>.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter makes sense for\n   * random-access {@link Reader}s. In case you only plan to perform\n   * sequential access on this stream later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   * </p><p>\n   * If you don't know how many values you are going to write, use\n   * <code>valueCount = -1</code>.\n   */\n  public static FormatAndBits fastestFormatAndBits(int valueCount, int bitsPerValue, float acceptableOverheadRatio) {\n    if (valueCount == -1) {\n      valueCount = Integer.MAX_VALUE;\n    }\n\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    int actualBitsPerValue = -1;\n    Format format = Format.PACKED;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      actualBitsPerValue = 8;\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      actualBitsPerValue = 16;\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      actualBitsPerValue = 32;\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      actualBitsPerValue = 64;\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      actualBitsPerValue = 24;\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      actualBitsPerValue = 48;\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Format.PACKED_SINGLE_BLOCK.isSupported(bpv)) {\n          float overhead = Format.PACKED_SINGLE_BLOCK.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            actualBitsPerValue = bpv;\n            format = Format.PACKED_SINGLE_BLOCK;\n            break;\n          }\n        }\n      }\n      if (actualBitsPerValue < 0) {\n        actualBitsPerValue = bitsPerValue;\n      }\n    }\n\n    return new FormatAndBits(format, actualBitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f440d3f04c39b9b18e8e48a78ef7b9f840674e22","date":1568209549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestFormatAndBits(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestFormatAndBits(int,int,float).mjava","sourceNew":"  /**\n   * Try to find the {@link Format} and number of bits per value that would\n   * restore from disk the fastest reader whose overhead is less than\n   * <code>acceptableOverheadRatio</code>.\n   * <p>\n   * The <code>acceptableOverheadRatio</code> parameter makes sense for\n   * random-access {@link Reader}s. In case you only plan to perform\n   * sequential access on this stream later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   * <p>\n   * If you don't know how many values you are going to write, use\n   * <code>valueCount = -1</code>.\n   */\n  public static FormatAndBits fastestFormatAndBits(int valueCount, int bitsPerValue, float acceptableOverheadRatio) {\n    if (valueCount == -1) {\n      valueCount = Integer.MAX_VALUE;\n    }\n\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    int actualBitsPerValue = -1;\n\n    // rounded number of bits per value are usually the fastest\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      actualBitsPerValue = 8;\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      actualBitsPerValue = 16;\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      actualBitsPerValue = 32;\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      actualBitsPerValue = 64;\n    } else {\n      actualBitsPerValue = bitsPerValue;\n    }\n\n    return new FormatAndBits(Format.PACKED, actualBitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Try to find the {@link Format} and number of bits per value that would\n   * restore from disk the fastest reader whose overhead is less than\n   * <code>acceptableOverheadRatio</code>.\n   * <p>\n   * The <code>acceptableOverheadRatio</code> parameter makes sense for\n   * random-access {@link Reader}s. In case you only plan to perform\n   * sequential access on this stream later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   * <p>\n   * If you don't know how many values you are going to write, use\n   * <code>valueCount = -1</code>.\n   */\n  public static FormatAndBits fastestFormatAndBits(int valueCount, int bitsPerValue, float acceptableOverheadRatio) {\n    if (valueCount == -1) {\n      valueCount = Integer.MAX_VALUE;\n    }\n\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    int actualBitsPerValue = -1;\n    Format format = Format.PACKED;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      actualBitsPerValue = 8;\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      actualBitsPerValue = 16;\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      actualBitsPerValue = 32;\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      actualBitsPerValue = 64;\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      actualBitsPerValue = 24;\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      actualBitsPerValue = 48;\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Format.PACKED_SINGLE_BLOCK.isSupported(bpv)) {\n          float overhead = Format.PACKED_SINGLE_BLOCK.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            actualBitsPerValue = bpv;\n            format = Format.PACKED_SINGLE_BLOCK;\n            break;\n          }\n        }\n      }\n      if (actualBitsPerValue < 0) {\n        actualBitsPerValue = bitsPerValue;\n      }\n    }\n\n    return new FormatAndBits(format, actualBitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["55110eb60c5105294fc2ae7912d82b750865aa58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"]},"commit2Childs":{"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55110eb60c5105294fc2ae7912d82b750865aa58":["fe33227f6805edab2036cbb80645cc4e2d1fa424","14600834a1fbc7c12faf344466e00cca8cc67de4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}