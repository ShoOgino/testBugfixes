{"path":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","commits":[{"id":"5ff676ea3919c34f30df120b9fa469cd439203ec","date":1211576148,"type":1,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse).mjava","sourceNew":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","sourceOld":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp) {\n\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","sourceNew":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","sourceOld":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}