{"path":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3504bc9f986137d6338c4a748d7591f96a376ee","date":1331253508,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<String>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<String>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18c264904f4236696be3696a0d998a37931a8a50","date":1333699995,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<String>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<String>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2396be4785ec8ca6c942dff4d20c1c93dd03db6d","date":1333735663,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    NamedList<NamedList<NamedList<Object>>> cats = getMBeanInfo(req);\n    if(req.getParams().getBool(\"diff\", false)) {\n      ContentStream body = null;\n      try {\n        body = req.getContentStreams().iterator().next();\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing content-stream for diff\");\n      }\n      String content = IOUtils.toString(body.getReader());\n      \n      NamedList<NamedList<NamedList<Object>>> ref = fromXML(content);\n      \n      \n      // Normalize the output \n      SolrQueryResponse wrap = new SolrQueryResponse();\n      wrap.add(\"solr-mbeans\", cats);\n      cats = (NamedList<NamedList<NamedList<Object>>>)\n          BinaryResponseWriter.getParsedResponse(req, wrap).get(\"solr-mbeans\");\n      \n      // Get rid of irrelevant things\n      ref = normalize(ref);\n      cats = normalize(cats);\n      \n      // Only the changes\n      rsp.add(\"solr-mbeans\", getDiff(ref,cats));\n    }\n    else {\n      rsp.add(\"solr-mbeans\", cats);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"src\", m.getSource());\n      \n      // Use an external form\n      URL[] urls = m.getDocs();\n      if(urls!=null) {\n        List<String> docs = new ArrayList<String>(urls.length);\n        for(URL url : urls) {\n          docs.add(url.toExternalForm());\n        }\n        mBeanInfo.add(\"docs\", docs);\n      }\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"599afc501134261328b27d573cd0d4f36c4a20a2","date":1334799976,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    NamedList<NamedList<NamedList<Object>>> cats = getMBeanInfo(req);\n    if(req.getParams().getBool(\"diff\", false)) {\n      ContentStream body = null;\n      try {\n        body = req.getContentStreams().iterator().next();\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing content-stream for diff\");\n      }\n      String content = IOUtils.toString(body.getReader());\n      \n      NamedList<NamedList<NamedList<Object>>> ref = fromXML(content);\n      \n      \n      // Normalize the output \n      SolrQueryResponse wrap = new SolrQueryResponse();\n      wrap.add(\"solr-mbeans\", cats);\n      cats = (NamedList<NamedList<NamedList<Object>>>)\n          BinaryResponseWriter.getParsedResponse(req, wrap).get(\"solr-mbeans\");\n      \n      // Get rid of irrelevant things\n      ref = normalize(ref);\n      cats = normalize(cats);\n      \n      // Only the changes\n      boolean showAll = req.getParams().getBool(\"all\", false);\n      rsp.add(\"solr-mbeans\", getDiff(ref,cats, showAll));\n    }\n    else {\n      rsp.add(\"solr-mbeans\", cats);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    NamedList<NamedList<NamedList<Object>>> cats = getMBeanInfo(req);\n    if(req.getParams().getBool(\"diff\", false)) {\n      ContentStream body = null;\n      try {\n        body = req.getContentStreams().iterator().next();\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"missing content-stream for diff\");\n      }\n      String content = IOUtils.toString(body.getReader());\n      \n      NamedList<NamedList<NamedList<Object>>> ref = fromXML(content);\n      \n      \n      // Normalize the output \n      SolrQueryResponse wrap = new SolrQueryResponse();\n      wrap.add(\"solr-mbeans\", cats);\n      cats = (NamedList<NamedList<NamedList<Object>>>)\n          BinaryResponseWriter.getParsedResponse(req, wrap).get(\"solr-mbeans\");\n      \n      // Get rid of irrelevant things\n      ref = normalize(ref);\n      cats = normalize(cats);\n      \n      // Only the changes\n      rsp.add(\"solr-mbeans\", getDiff(ref,cats));\n    }\n    else {\n      rsp.add(\"solr-mbeans\", cats);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["c26f00b574427b55127e869b935845554afde1fa","b3504bc9f986137d6338c4a748d7591f96a376ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2396be4785ec8ca6c942dff4d20c1c93dd03db6d":["18c264904f4236696be3696a0d998a37931a8a50"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"599afc501134261328b27d573cd0d4f36c4a20a2":["2396be4785ec8ca6c942dff4d20c1c93dd03db6d"],"b3504bc9f986137d6338c4a748d7591f96a376ee":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["599afc501134261328b27d573cd0d4f36c4a20a2"],"18c264904f4236696be3696a0d998a37931a8a50":["b3504bc9f986137d6338c4a748d7591f96a376ee"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["38e3b736c7ca086d61b7dbb841c905ee115490da","b3504bc9f986137d6338c4a748d7591f96a376ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2396be4785ec8ca6c942dff4d20c1c93dd03db6d":["599afc501134261328b27d573cd0d4f36c4a20a2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b3504bc9f986137d6338c4a748d7591f96a376ee":["38e3b736c7ca086d61b7dbb841c905ee115490da","18c264904f4236696be3696a0d998a37931a8a50"],"599afc501134261328b27d573cd0d4f36c4a20a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18c264904f4236696be3696a0d998a37931a8a50":["2396be4785ec8ca6c942dff4d20c1c93dd03db6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}