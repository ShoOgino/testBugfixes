{"path":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","commits":[{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testExpungeMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setExpungeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.expungeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletesMaxSegSize().mjava","sourceNew":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletesMaxSegSize() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    tmp.setMaxMergedSegmentMB(0.01);\n    tmp.setForceMergeDeletesPctAllowed(0.0);\n    conf.setMergePolicy(tmp);\n\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, conf);\n    w.setDoRandomForceMerge(false);\n\n    final int numDocs = atLeast(200);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"aaa \" + i, TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs, r.numDocs());\n    r.close();\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete doc\");\n    }\n\n    w.deleteDocuments(new Term(\"id\", \"\"+(42+17)));\n\n    r = w.getReader();\n    assertEquals(numDocs, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.forceMergeDeletes();\n\n    r = w.getReader();\n    assertEquals(numDocs-1, r.maxDoc());\n    assertEquals(numDocs-1, r.numDocs());\n    r.close();\n\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}