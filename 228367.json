{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#reset(FieldInfo,boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#reset(FieldInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"    void reset(FieldInfo fieldInfo, boolean isFirstField) throws IOException {\n      this.fieldInfo = fieldInfo;\n      if (termEnum == null) {\n        // First time reset is called\n        if (isFirstField) {\n          termEnum = getTermsDict().terms();\n          skipNext = false;\n        } else {\n          termEnum = getTermsDict().terms(new Term(fieldInfo.name, \"\"));\n          skipNext = true;\n        }\n      } else {\n        final Term t = termEnum.term();\n        if (t != null && t.field() == fieldInfo.name) {\n          // No need to seek -- we have already advanced onto\n          // this field.  We must be @ first term because\n          // flex API will not advance this enum further, on\n          // seeing a different field.\n        } else {\n          assert t == null || !t.field().equals(fieldInfo.name);  // make sure field name is interned\n          final TermInfosReader tis = getTermsDict();\n          tis.seekEnum(termEnum, new Term(fieldInfo.name, \"\"));\n        }\n        skipNext = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#reset(FieldInfo,boolean).mjava","sourceNew":null,"sourceOld":"    void reset(FieldInfo fieldInfo, boolean isFirstField) throws IOException {\n      this.fieldInfo = fieldInfo;\n      if (termEnum == null) {\n        // First time reset is called\n        if (isFirstField) {\n          termEnum = getTermsDict().terms();\n          skipNext = false;\n        } else {\n          termEnum = getTermsDict().terms(new Term(fieldInfo.name, \"\"));\n          skipNext = true;\n        }\n      } else {\n        final Term t = termEnum.term();\n        if (t != null && t.field() == fieldInfo.name) {\n          // No need to seek -- we have already advanced onto\n          // this field.  We must be @ first term because\n          // flex API will not advance this enum further, on\n          // seeing a different field.\n        } else {\n          assert t == null || !t.field().equals(fieldInfo.name);  // make sure field name is interned\n          final TermInfosReader tis = getTermsDict();\n          tis.seekEnum(termEnum, new Term(fieldInfo.name, \"\"));\n        }\n        skipNext = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#reset(FieldInfo,boolean).mjava","sourceNew":null,"sourceOld":"    void reset(FieldInfo fieldInfo, boolean isFirstField) throws IOException {\n      this.fieldInfo = fieldInfo;\n      if (termEnum == null) {\n        // First time reset is called\n        if (isFirstField) {\n          termEnum = getTermsDict().terms();\n          skipNext = false;\n        } else {\n          termEnum = getTermsDict().terms(new Term(fieldInfo.name, \"\"));\n          skipNext = true;\n        }\n      } else {\n        final Term t = termEnum.term();\n        if (t != null && t.field() == fieldInfo.name) {\n          // No need to seek -- we have already advanced onto\n          // this field.  We must be @ first term because\n          // flex API will not advance this enum further, on\n          // seeing a different field.\n        } else {\n          assert t == null || !t.field().equals(fieldInfo.name);  // make sure field name is interned\n          final TermInfosReader tis = getTermsDict();\n          tis.seekEnum(termEnum, new Term(fieldInfo.name, \"\"));\n        }\n        skipNext = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08932c793647a36953d1816b1060121f48820d3f"]},"commit2Childs":{"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}