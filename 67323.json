{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,IndexOutput,IndexOutput,String,MutablePointValues).mjava","commits":[{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,IndexOutput,IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private Runnable writeField1Dim(IndexOutput metaOut, IndexOutput indexOut, IndexOutput dataOut, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedIndexBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(metaOut, indexOut, dataOut);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedIndexBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,IndexOutput,IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,IndexOutput,IndexOutput,String,MutablePointValues).mjava","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private Runnable writeField1Dim(IndexOutput metaOut, IndexOutput indexOut, IndexOutput dataOut, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(config, maxDoc, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(metaOut, indexOut, dataOut);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private Runnable writeField1Dim(IndexOutput metaOut, IndexOutput indexOut, IndexOutput dataOut, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedIndexBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(metaOut, indexOut, dataOut);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}