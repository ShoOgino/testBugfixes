{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    public void testPathPointWithin() {\n        // Tests whether we can properly detect whether a point is within a path or not\n        GeoPath p;\n        GeoPoint gp;\n        p = new GeoPath(0.1);\n        // Build a diagonal path crossing the equator\n        p.addPoint(-0.2,-0.2);\n        p.addPoint(0.2,0.2);\n        // Test points on the path\n        gp = new GeoPoint(-0.2,-0.2);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.0,0.0);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.1,0.1);\n        assertTrue(p.isWithin(gp));\n        // Test points off the path\n        gp = new GeoPoint(-0.2,0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(-Math.PI*0.5,0.0);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.2,-0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.0,Math.PI);\n        assertFalse(p.isWithin(gp));\n        // Repeat the test, but across the terminator\n        p = new GeoPath(0.1);\n        // Build a diagonal path crossing the equator\n        p.addPoint(-0.2,Math.PI-0.2);\n        p.addPoint(0.2,-Math.PI+0.2);\n        // Test points on the path\n        gp = new GeoPoint(-0.2,Math.PI-0.2);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.0,Math.PI);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.1,-Math.PI+0.1);\n        assertTrue(p.isWithin(gp));\n        // Test points off the path\n        gp = new GeoPoint(-0.2,-Math.PI+0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(-Math.PI*0.5,0.0);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.2,Math.PI-0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.0,0.0);\n        assertFalse(p.isWithin(gp));\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","sourceNew":"    @Test\n    public void testPathPointWithin() {\n        // Tests whether we can properly detect whether a point is within a path or not\n        GeoPath p;\n        GeoPoint gp;\n        p = new GeoPath(0.1);\n        // Build a diagonal path crossing the equator\n        p.addPoint(-0.2,-0.2);\n        p.addPoint(0.2,0.2);\n        p.done();\n        // Test points on the path\n        gp = new GeoPoint(-0.2,-0.2);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.0,0.0);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.1,0.1);\n        assertTrue(p.isWithin(gp));\n        // Test points off the path\n        gp = new GeoPoint(-0.2,0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(-Math.PI*0.5,0.0);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.2,-0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.0,Math.PI);\n        assertFalse(p.isWithin(gp));\n        // Repeat the test, but across the terminator\n        p = new GeoPath(0.1);\n        // Build a diagonal path crossing the equator\n        p.addPoint(-0.2,Math.PI-0.2);\n        p.addPoint(0.2,-Math.PI+0.2);\n        // Test points on the path\n        gp = new GeoPoint(-0.2,Math.PI-0.2);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.0,Math.PI);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.1,-Math.PI+0.1);\n        assertTrue(p.isWithin(gp));\n        // Test points off the path\n        gp = new GeoPoint(-0.2,-Math.PI+0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(-Math.PI*0.5,0.0);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.2,Math.PI-0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.0,0.0);\n        assertFalse(p.isWithin(gp));\n\n    }\n\n","sourceOld":"    @Test\n    public void testPathPointWithin() {\n        // Tests whether we can properly detect whether a point is within a path or not\n        GeoPath p;\n        GeoPoint gp;\n        p = new GeoPath(0.1);\n        // Build a diagonal path crossing the equator\n        p.addPoint(-0.2,-0.2);\n        p.addPoint(0.2,0.2);\n        // Test points on the path\n        gp = new GeoPoint(-0.2,-0.2);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.0,0.0);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.1,0.1);\n        assertTrue(p.isWithin(gp));\n        // Test points off the path\n        gp = new GeoPoint(-0.2,0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(-Math.PI*0.5,0.0);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.2,-0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.0,Math.PI);\n        assertFalse(p.isWithin(gp));\n        // Repeat the test, but across the terminator\n        p = new GeoPath(0.1);\n        // Build a diagonal path crossing the equator\n        p.addPoint(-0.2,Math.PI-0.2);\n        p.addPoint(0.2,-Math.PI+0.2);\n        // Test points on the path\n        gp = new GeoPoint(-0.2,Math.PI-0.2);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.0,Math.PI);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.1,-Math.PI+0.1);\n        assertTrue(p.isWithin(gp));\n        // Test points off the path\n        gp = new GeoPoint(-0.2,-Math.PI+0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(-Math.PI*0.5,0.0);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.2,Math.PI-0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.0,0.0);\n        assertFalse(p.isWithin(gp));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","sourceNew":"  @Test\n  public void testPathPointWithin() {\n    // Tests whether we can properly detect whether a point is within a path or not\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, -0.2);\n    p.addPoint(0.2, 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(-0.2, -0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.0, 0.0);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.1, 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(-0.2, 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(-Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.2, -0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.0, Math.PI);\n    assertFalse(p.isWithin(gp));\n    // Repeat the test, but across the terminator\n    p = new GeoPath(0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, Math.PI - 0.2);\n    p.addPoint(0.2, -Math.PI + 0.2);\n    // Test points on the path\n    gp = new GeoPoint(-0.2, Math.PI - 0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.0, Math.PI);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.1, -Math.PI + 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(-0.2, -Math.PI + 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(-Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.2, Math.PI - 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.0, 0.0);\n    assertFalse(p.isWithin(gp));\n\n  }\n\n","sourceOld":"    @Test\n    public void testPathPointWithin() {\n        // Tests whether we can properly detect whether a point is within a path or not\n        GeoPath p;\n        GeoPoint gp;\n        p = new GeoPath(0.1);\n        // Build a diagonal path crossing the equator\n        p.addPoint(-0.2,-0.2);\n        p.addPoint(0.2,0.2);\n        p.done();\n        // Test points on the path\n        gp = new GeoPoint(-0.2,-0.2);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.0,0.0);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.1,0.1);\n        assertTrue(p.isWithin(gp));\n        // Test points off the path\n        gp = new GeoPoint(-0.2,0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(-Math.PI*0.5,0.0);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.2,-0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.0,Math.PI);\n        assertFalse(p.isWithin(gp));\n        // Repeat the test, but across the terminator\n        p = new GeoPath(0.1);\n        // Build a diagonal path crossing the equator\n        p.addPoint(-0.2,Math.PI-0.2);\n        p.addPoint(0.2,-Math.PI+0.2);\n        // Test points on the path\n        gp = new GeoPoint(-0.2,Math.PI-0.2);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.0,Math.PI);\n        assertTrue(p.isWithin(gp));\n        gp = new GeoPoint(0.1,-Math.PI+0.1);\n        assertTrue(p.isWithin(gp));\n        // Test points off the path\n        gp = new GeoPoint(-0.2,-Math.PI+0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(-Math.PI*0.5,0.0);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.2,Math.PI-0.2);\n        assertFalse(p.isWithin(gp));\n        gp = new GeoPoint(0.0,0.0);\n        assertFalse(p.isWithin(gp));\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPathPointWithin() {\n    // Tests whether we can properly detect whether a point is within a path or not\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, -0.2);\n    p.addPoint(0.2, 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(-0.2, -0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.0, 0.0);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.1, 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(-0.2, 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(-Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.2, -0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.0, Math.PI);\n    assertFalse(p.isWithin(gp));\n    // Repeat the test, but across the terminator\n    p = new GeoPath(0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, Math.PI - 0.2);\n    p.addPoint(0.2, -Math.PI + 0.2);\n    // Test points on the path\n    gp = new GeoPoint(-0.2, Math.PI - 0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.0, Math.PI);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.1, -Math.PI + 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(-0.2, -Math.PI + 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(-Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.2, Math.PI - 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.0, 0.0);\n    assertFalse(p.isWithin(gp));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","sourceNew":"  @Test\n  public void testPathPointWithin() {\n    // Tests whether we can properly detect whether a point is within a path or not\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, -0.2);\n    p.addPoint(0.2, 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, -0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.2, -0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(p.isWithin(gp));\n    // Repeat the test, but across the terminator\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, Math.PI - 0.2);\n    p.addPoint(0.2, -Math.PI + 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, Math.PI - 0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI + 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, -Math.PI + 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.2, Math.PI - 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(p.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPathPointWithin() {\n    // Tests whether we can properly detect whether a point is within a path or not\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, -0.2);\n    p.addPoint(0.2, 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(-0.2, -0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.0, 0.0);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.1, 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(-0.2, 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(-Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.2, -0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.0, Math.PI);\n    assertFalse(p.isWithin(gp));\n    // Repeat the test, but across the terminator\n    p = new GeoPath(0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, Math.PI - 0.2);\n    p.addPoint(0.2, -Math.PI + 0.2);\n    // Test points on the path\n    gp = new GeoPoint(-0.2, Math.PI - 0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.0, Math.PI);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.1, -Math.PI + 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(-0.2, -Math.PI + 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(-Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.2, Math.PI - 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.0, 0.0);\n    assertFalse(p.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","sourceNew":"  @Test\n  public void testPathPointWithin() {\n    // Tests whether we can properly detect whether a point is within a path or not\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, -0.2);\n    p.addPoint(0.2, 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, -0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.2, -0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(p.isWithin(gp));\n    // Repeat the test, but across the terminator\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, Math.PI - 0.2);\n    p.addPoint(0.2, -Math.PI + 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, Math.PI - 0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI + 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, -Math.PI + 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.2, Math.PI - 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(p.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPathPointWithin() {\n    // Tests whether we can properly detect whether a point is within a path or not\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, -0.2);\n    p.addPoint(0.2, 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(-0.2, -0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.0, 0.0);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.1, 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(-0.2, 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(-Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.2, -0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.0, Math.PI);\n    assertFalse(p.isWithin(gp));\n    // Repeat the test, but across the terminator\n    p = new GeoPath(0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, Math.PI - 0.2);\n    p.addPoint(0.2, -Math.PI + 0.2);\n    // Test points on the path\n    gp = new GeoPoint(-0.2, Math.PI - 0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.0, Math.PI);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(0.1, -Math.PI + 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(-0.2, -Math.PI + 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(-Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.2, Math.PI - 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(0.0, 0.0);\n    assertFalse(p.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoPathTest#testPathPointWithin().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPathTest#testPathPointWithin().mjava","sourceNew":"  @Test\n  public void testPathPointWithin() {\n    // Tests whether we can properly detect whether a point is within a path or not\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, -0.2);\n    p.addPoint(0.2, 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, -0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.2, -0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(p.isWithin(gp));\n    // Repeat the test, but across the terminator\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, Math.PI - 0.2);\n    p.addPoint(0.2, -Math.PI + 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, Math.PI - 0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI + 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, -Math.PI + 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.2, Math.PI - 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(p.isWithin(gp));\n\n  }\n\n","sourceOld":"  @Test\n  public void testPathPointWithin() {\n    // Tests whether we can properly detect whether a point is within a path or not\n    GeoPath p;\n    GeoPoint gp;\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, -0.2);\n    p.addPoint(0.2, 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, -0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.2, -0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertFalse(p.isWithin(gp));\n    // Repeat the test, but across the terminator\n    p = new GeoPath(PlanetModel.SPHERE, 0.1);\n    // Build a diagonal path crossing the equator\n    p.addPoint(-0.2, Math.PI - 0.2);\n    p.addPoint(0.2, -Math.PI + 0.2);\n    p.done();\n    // Test points on the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, Math.PI - 0.2);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, Math.PI);\n    assertTrue(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.1, -Math.PI + 0.1);\n    assertTrue(p.isWithin(gp));\n    // Test points off the path\n    gp = new GeoPoint(PlanetModel.SPHERE, -0.2, -Math.PI + 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, -Math.PI * 0.5, 0.0);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.2, Math.PI - 0.2);\n    assertFalse(p.isWithin(gp));\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertFalse(p.isWithin(gp));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}