{"path":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31fd188d5e34d3af6691f8428fecc2d4665e2d56","date":1309225455,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          noAnalyzer)\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          noAnalyzer)\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          noAnalyzer)\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          new WhitespaceAnalyzer(Version.LUCENE_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a045054ae144972f58092f8a3d398c30f12fa21f","date":1310880650,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          null)\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          noAnalyzer)\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#clearIndex().mjava","sourceNew":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          null)\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes all terms from the spell check index.\n   * @throws IOException\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   */\n  public void clearIndex() throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          Version.LUCENE_CURRENT,\n          null)\n          .setOpenMode(OpenMode.CREATE));\n      writer.close();\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31fd188d5e34d3af6691f8428fecc2d4665e2d56":["e230a61047bc041516c811baa08a7174d6f8322a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a045054ae144972f58092f8a3d398c30f12fa21f"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"a045054ae144972f58092f8a3d398c30f12fa21f":["31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e230a61047bc041516c811baa08a7174d6f8322a","31fd188d5e34d3af6691f8428fecc2d4665e2d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"31fd188d5e34d3af6691f8428fecc2d4665e2d56":["2553b00f699380c64959ccb27991289aae87be2e","a045054ae144972f58092f8a3d398c30f12fa21f","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["31fd188d5e34d3af6691f8428fecc2d4665e2d56","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d083e83f225b11e5fdd900e83d26ddb385b6955c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"2553b00f699380c64959ccb27991289aae87be2e":[],"a045054ae144972f58092f8a3d398c30f12fa21f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}