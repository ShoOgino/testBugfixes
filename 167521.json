{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","sourceNew":"  @Test \n  public void testGetComponent() {\n    CategoryPath p = new CategoryPath(1000,1000);\n    // When the category is empty, we expect a null\n    assertNull(p.getComponent(0));\n    assertNull(p.getComponent(1));\n    assertNull(p.getComponent(-1));\n    for (int i=0; i<=100; i++) {\n      p.add(Integer.toString(i));\n      for (int j=0; j<=i; j++) {\n        assertEquals(j, Integer.parseInt(p.getComponent(j)));\n      }\n      assertNull(p.getComponent(-1));\n      assertNull(p.getComponent(i+1));\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testGetComponent() {\n    CategoryPath p = new CategoryPath(1000,1000);\n    // When the category is empty, we expect a null\n    assertNull(p.getComponent(0));\n    assertNull(p.getComponent(1));\n    assertNull(p.getComponent(-1));\n    for (int i=0; i<=100; i++) {\n      p.add(Integer.toString(i));\n      for (int j=0; j<=i; j++) {\n        assertEquals(j, Integer.parseInt(p.getComponent(j)));\n      }\n      assertNull(p.getComponent(-1));\n      assertNull(p.getComponent(i+1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","sourceNew":"  @Test \n  public void testGetComponent() {\n    String[] components = new String[atLeast(10)];\n    for (int i = 0; i < components.length; i++) {\n      components[i] = Integer.toString(i);\n    }\n    CategoryPath cp = new CategoryPath(components);\n    for (int i = 0; i < components.length; i++) {\n      assertEquals(i, Integer.parseInt(cp.components[i]));\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testGetComponent() {\n    CategoryPath p = new CategoryPath(1000,1000);\n    // When the category is empty, we expect a null\n    assertNull(p.getComponent(0));\n    assertNull(p.getComponent(1));\n    assertNull(p.getComponent(-1));\n    for (int i=0; i<=100; i++) {\n      p.add(Integer.toString(i));\n      for (int j=0; j<=i; j++) {\n        assertEquals(j, Integer.parseInt(p.getComponent(j)));\n      }\n      assertNull(p.getComponent(-1));\n      assertNull(p.getComponent(i+1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","sourceNew":"  @Test \n  public void testGetComponent() {\n    String[] components = new String[atLeast(10)];\n    for (int i = 0; i < components.length; i++) {\n      components[i] = Integer.toString(i);\n    }\n    CategoryPath cp = new CategoryPath(components);\n    for (int i = 0; i < components.length; i++) {\n      assertEquals(i, Integer.parseInt(cp.components[i]));\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testGetComponent() {\n    CategoryPath p = new CategoryPath(1000,1000);\n    // When the category is empty, we expect a null\n    assertNull(p.getComponent(0));\n    assertNull(p.getComponent(1));\n    assertNull(p.getComponent(-1));\n    for (int i=0; i<=100; i++) {\n      p.add(Integer.toString(i));\n      for (int j=0; j<=i; j++) {\n        assertEquals(j, Integer.parseInt(p.getComponent(j)));\n      }\n      assertNull(p.getComponent(-1));\n      assertNull(p.getComponent(i+1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","sourceNew":"  @Test \n  public void testGetComponent() {\n    String[] components = new String[atLeast(10)];\n    for (int i = 0; i < components.length; i++) {\n      components[i] = Integer.toString(i);\n    }\n    FacetLabel cp = new FacetLabel(components);\n    for (int i = 0; i < components.length; i++) {\n      assertEquals(i, Integer.parseInt(cp.components[i]));\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testGetComponent() {\n    String[] components = new String[atLeast(10)];\n    for (int i = 0; i < components.length; i++) {\n      components[i] = Integer.toString(i);\n    }\n    CategoryPath cp = new CategoryPath(components);\n    for (int i = 0; i < components.length; i++) {\n      assertEquals(i, Integer.parseInt(cp.components[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testGetComponent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","sourceNew":"  @Test \n  public void testGetComponent() {\n    String[] components = new String[atLeast(10)];\n    for (int i = 0; i < components.length; i++) {\n      components[i] = Integer.toString(i);\n    }\n    FacetLabel cp = new FacetLabel(components);\n    for (int i = 0; i < components.length; i++) {\n      assertEquals(i, Integer.parseInt(cp.components[i]));\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testGetComponent() {\n    String[] components = new String[atLeast(10)];\n    for (int i = 0; i < components.length; i++) {\n      components[i] = Integer.toString(i);\n    }\n    FacetLabel cp = new FacetLabel(components);\n    for (int i = 0; i < components.length; i++) {\n      assertEquals(i, Integer.parseInt(cp.components[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testGetComponent().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testGetComponent() {\n    String[] components = new String[atLeast(10)];\n    for (int i = 0; i < components.length; i++) {\n      components[i] = Integer.toString(i);\n    }\n    CategoryPath cp = new CategoryPath(components);\n    for (int i = 0; i < components.length; i++) {\n      assertEquals(i, Integer.parseInt(cp.components[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78522aad83283ca58fae08fd89406b65429d0229":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"78522aad83283ca58fae08fd89406b65429d0229":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}