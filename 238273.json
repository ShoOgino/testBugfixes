{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      // if there is only one conf, use that\n      List<String> configNames = zkClient.getChildren(CONFIGS_ZKNODE, null, true);\n      if (configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n      Thread.sleep(2000);\n    }\n    if (retry == 6) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      // if there is only one conf, use that\n      List<String> configNames = zkClient.getChildren(CONFIGS_ZKNODE, null, true);\n      if (configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n      Thread.sleep(2000);\n    }\n    if (retry == 6) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      // if there is only one conf, use that\n      List<String> configNames = zkClient.getChildren(CONFIGS_ZKNODE, null, true);\n      if (configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n      Thread.sleep(2000);\n    }\n    if (retry == 6) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9896f063d7e42373599b68eb61b173bdb11411c5","date":1330354201,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      List<String> configNames = null;\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n      Thread.sleep(2000);\n    }\n    if (retry == 6) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      // if there is only one conf, use that\n      List<String> configNames = zkClient.getChildren(CONFIGS_ZKNODE, null, true);\n      if (configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n      Thread.sleep(2000);\n    }\n    if (retry == 6) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc803c59f69ef7c55c80bfb2ff3ab3dc1bd74cb6","date":1330806660,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      List<String> configNames = null;\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == 10) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      List<String> configNames = null;\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n      Thread.sleep(2000);\n    }\n    if (retry == 6) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      List<String> configNames = null;\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == 10) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      // if there is only one conf, use that\n      List<String> configNames = zkClient.getChildren(CONFIGS_ZKNODE, null, true);\n      if (configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n      Thread.sleep(2000);\n    }\n    if (retry == 6) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a310821021b36f0fb7ca09f493c12b20120e8b","date":1336404950,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    int retry = 1;\n    for (; retry < 6; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n      List<String> configNames = null;\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == 10) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","date":1337273259,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,String]).mjava","sourceNew":"  private void getConfName(String collection, String collectionPath,\n      Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n      Map<String,String> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.info(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n     \n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP,  configNames.get(0));\n        break;\n      }\n      \n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP,  collection);\n        break;\n      }\n      \n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","fc803c59f69ef7c55c80bfb2ff3ab3dc1bd74cb6"],"fa64435b5902ce266c23755a4a00691a3285dab8":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16a310821021b36f0fb7ca09f493c12b20120e8b":["fc803c59f69ef7c55c80bfb2ff3ab3dc1bd74cb6"],"fc803c59f69ef7c55c80bfb2ff3ab3dc1bd74cb6":["9896f063d7e42373599b68eb61b173bdb11411c5"],"9896f063d7e42373599b68eb61b173bdb11411c5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ef0d8a69209261514c5739c770bba706c2308450":["16a310821021b36f0fb7ca09f493c12b20120e8b","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa64435b5902ce266c23755a4a00691a3285dab8"],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["16a310821021b36f0fb7ca09f493c12b20120e8b"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","9896f063d7e42373599b68eb61b173bdb11411c5"],"fc803c59f69ef7c55c80bfb2ff3ab3dc1bd74cb6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","16a310821021b36f0fb7ca09f493c12b20120e8b"],"16a310821021b36f0fb7ca09f493c12b20120e8b":["ef0d8a69209261514c5739c770bba706c2308450","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"9896f063d7e42373599b68eb61b173bdb11411c5":["fc803c59f69ef7c55c80bfb2ff3ab3dc1bd74cb6"],"ef0d8a69209261514c5739c770bba706c2308450":[],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["fa64435b5902ce266c23755a4a00691a3285dab8","ef0d8a69209261514c5739c770bba706c2308450"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}