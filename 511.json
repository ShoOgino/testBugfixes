{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.ComparablePivotField#equals(Object).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.ComparablePivotField#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (obj == null) return false;\n      if (!obj.getClass().isAssignableFrom(PivotField.class)) return false;\n      PivotField other = (PivotField) obj;\n      if (getCount() != other.getCount()) return false;\n      if (getField() == null) {\n        if (other.getField() != null) return false;\n      } else if (!getField().equals(other.getField())) return false;\n      if (getPivot() == null) {\n        if (other.getPivot() != null) return false;\n      } else if (!getPivot().equals(other.getPivot())) return false;\n      if (getValue() == null) {\n        if (other.getValue() != null) return false;\n      } else if (!getValue().equals(other.getValue())) return false;\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.ComparablePivotField#equals(Object).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.ComparablePivotField#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (obj == null) return false;\n      if (!obj.getClass().isAssignableFrom(PivotField.class)) return false;\n      PivotField other = (PivotField) obj;\n      if (getCount() != other.getCount()) return false;\n      if (getField() == null) {\n        if (other.getField() != null) return false;\n      } else if (!getField().equals(other.getField())) return false;\n      if (getPivot() == null) {\n        if (other.getPivot() != null) return false;\n      } else if (!getPivot().equals(other.getPivot())) return false;\n      if (getValue() == null) {\n        if (other.getValue() != null) return false;\n      } else if (!getValue().equals(other.getValue())) return false;\n      if (getFacetRanges() == null) {\n        if (other.getFacetRanges() != null) return false;\n      } else {\n        if (getFacetRanges().size() != other.getFacetRanges().size()) return false;\n        for (RangeFacet entry : getFacetRanges()) {\n          boolean found = false;\n          for (RangeFacet otherRange : other.getFacetRanges()) {\n            if (otherRange.getName().equals(entry.getName())) {\n              found = true;\n\n              if (!entry.getGap().equals(otherRange.getGap()))  return false;\n              if (!entry.getStart().equals(otherRange.getStart()))  return false;\n              if (!entry.getEnd().equals(otherRange.getEnd()))  return false;\n\n              List<RangeFacet.Count> myCounts = entry.getCounts();\n              List<RangeFacet.Count> otherRangeCounts = otherRange.getCounts();\n              if ( (myCounts == null && otherRangeCounts != null)\n                  || (myCounts != null && otherRangeCounts == null)\n                  || (myCounts.size() != otherRangeCounts.size()))  return false;\n\n              for (int i=0; i<myCounts.size(); i++) {\n                if (!myCounts.get(i).getValue().equals(otherRangeCounts.get(i).getValue())) return false;\n                if (myCounts.get(i).getCount() != otherRangeCounts.get(i).getCount())  return false;\n              }\n            }\n          }\n          if (!found) return false;\n        }\n      }\n      if (getFacetQuery() == null) {\n        if (other.getFacetQuery() != null) return false;\n      } else {\n        if (getFacetQuery().size() != other.getFacetQuery().size()) return false;\n        for (Map.Entry<String,Integer> entry : getFacetQuery().entrySet()) {\n          Integer otherQCount = other.getFacetQuery().get(entry.getKey());\n          if (otherQCount == null || otherQCount != entry.getValue()) return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (obj == null) return false;\n      if (!obj.getClass().isAssignableFrom(PivotField.class)) return false;\n      PivotField other = (PivotField) obj;\n      if (getCount() != other.getCount()) return false;\n      if (getField() == null) {\n        if (other.getField() != null) return false;\n      } else if (!getField().equals(other.getField())) return false;\n      if (getPivot() == null) {\n        if (other.getPivot() != null) return false;\n      } else if (!getPivot().equals(other.getPivot())) return false;\n      if (getValue() == null) {\n        if (other.getValue() != null) return false;\n      } else if (!getValue().equals(other.getValue())) return false;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.ComparablePivotField#equals(Object).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.ComparablePivotField#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (obj == null) return false;\n      if (!obj.getClass().isAssignableFrom(PivotField.class)) return false;\n      PivotField other = (PivotField) obj;\n      if (getCount() != other.getCount()) return false;\n      if (getField() == null) {\n        if (other.getField() != null) return false;\n      } else if (!getField().equals(other.getField())) return false;\n      if (getPivot() == null) {\n        if (other.getPivot() != null) return false;\n      } else if (!getPivot().equals(other.getPivot())) return false;\n      if (getValue() == null) {\n        if (other.getValue() != null) return false;\n      } else if (!getValue().equals(other.getValue())) return false;\n      if (getFacetRanges() == null) {\n        if (other.getFacetRanges() != null) return false;\n      } else {\n        if (getFacetRanges().size() != other.getFacetRanges().size()) return false;\n        for (@SuppressWarnings({\"rawtypes\"})RangeFacet entry : getFacetRanges()) {\n          boolean found = false;\n          for (@SuppressWarnings({\"rawtypes\"})RangeFacet otherRange : other.getFacetRanges()) {\n            if (otherRange.getName().equals(entry.getName())) {\n              found = true;\n\n              if (!entry.getGap().equals(otherRange.getGap()))  return false;\n              if (!entry.getStart().equals(otherRange.getStart()))  return false;\n              if (!entry.getEnd().equals(otherRange.getEnd()))  return false;\n\n              @SuppressWarnings({\"unchecked\"})\n              List<RangeFacet.Count> myCounts = entry.getCounts();\n              @SuppressWarnings({\"unchecked\"})\n              List<RangeFacet.Count> otherRangeCounts = otherRange.getCounts();\n              if ( (myCounts == null && otherRangeCounts != null)\n                  || (myCounts != null && otherRangeCounts == null)\n                  || (myCounts.size() != otherRangeCounts.size()))  return false;\n\n              for (int i=0; i<myCounts.size(); i++) {\n                if (!myCounts.get(i).getValue().equals(otherRangeCounts.get(i).getValue())) return false;\n                if (myCounts.get(i).getCount() != otherRangeCounts.get(i).getCount())  return false;\n              }\n            }\n          }\n          if (!found) return false;\n        }\n      }\n      if (getFacetQuery() == null) {\n        if (other.getFacetQuery() != null) return false;\n      } else {\n        if (getFacetQuery().size() != other.getFacetQuery().size()) return false;\n        for (Map.Entry<String,Integer> entry : getFacetQuery().entrySet()) {\n          Integer otherQCount = other.getFacetQuery().get(entry.getKey());\n          if (otherQCount == null || otherQCount != entry.getValue()) return false;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (obj == null) return false;\n      if (!obj.getClass().isAssignableFrom(PivotField.class)) return false;\n      PivotField other = (PivotField) obj;\n      if (getCount() != other.getCount()) return false;\n      if (getField() == null) {\n        if (other.getField() != null) return false;\n      } else if (!getField().equals(other.getField())) return false;\n      if (getPivot() == null) {\n        if (other.getPivot() != null) return false;\n      } else if (!getPivot().equals(other.getPivot())) return false;\n      if (getValue() == null) {\n        if (other.getValue() != null) return false;\n      } else if (!getValue().equals(other.getValue())) return false;\n      if (getFacetRanges() == null) {\n        if (other.getFacetRanges() != null) return false;\n      } else {\n        if (getFacetRanges().size() != other.getFacetRanges().size()) return false;\n        for (RangeFacet entry : getFacetRanges()) {\n          boolean found = false;\n          for (RangeFacet otherRange : other.getFacetRanges()) {\n            if (otherRange.getName().equals(entry.getName())) {\n              found = true;\n\n              if (!entry.getGap().equals(otherRange.getGap()))  return false;\n              if (!entry.getStart().equals(otherRange.getStart()))  return false;\n              if (!entry.getEnd().equals(otherRange.getEnd()))  return false;\n\n              List<RangeFacet.Count> myCounts = entry.getCounts();\n              List<RangeFacet.Count> otherRangeCounts = otherRange.getCounts();\n              if ( (myCounts == null && otherRangeCounts != null)\n                  || (myCounts != null && otherRangeCounts == null)\n                  || (myCounts.size() != otherRangeCounts.size()))  return false;\n\n              for (int i=0; i<myCounts.size(); i++) {\n                if (!myCounts.get(i).getValue().equals(otherRangeCounts.get(i).getValue())) return false;\n                if (myCounts.get(i).getCount() != otherRangeCounts.get(i).getCount())  return false;\n              }\n            }\n          }\n          if (!found) return false;\n        }\n      }\n      if (getFacetQuery() == null) {\n        if (other.getFacetQuery() != null) return false;\n      } else {\n        if (getFacetQuery().size() != other.getFacetQuery().size()) return false;\n        for (Map.Entry<String,Integer> entry : getFacetQuery().entrySet()) {\n          Integer otherQCount = other.getFacetQuery().get(entry.getKey());\n          if (otherQCount == null || otherQCount != entry.getValue()) return false;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}