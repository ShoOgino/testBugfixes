{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#init(long,long,long,long,int).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#init(long,long,long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, df);\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#init(long,long,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#init(long,long,long,long,int).mjava","sourceNew":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","sourceOld":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, df);\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedSkipReader#init(long,long,long,long,int).mjava","sourceNew":null,"sourceOld":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["0e3359210474c12c0b79e6400450313e3d7ef2bb"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}