{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlockReaderIterator#advance(int).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlockReaderIterator#advance(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public long advance(int ord) throws IOException {\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final long nextBlock = (position + valuesPerBlock) / valuesPerBlock;\n    final long targetBlock = ord / valuesPerBlock;\n    final long blocksToSkip = targetBlock - nextBlock;\n    if (blocksToSkip > 0) {\n      final long skip = blocksToSkip << 3;\n      final long filePointer = in.getFilePointer();\n\n      in.seek(filePointer + skip);\n      shift = 64;\n\n      final int offsetInBlock = ord % valuesPerBlock;\n      for (int i = 0; i < offsetInBlock; ++i) {\n        next();\n      }\n    } else {\n      for (int i = position; i < ord - 1; ++i) {\n        next();\n      }\n    }\n\n    position = ord - 1;\n    return next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlockReaderIterator#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public long advance(int ord) throws IOException {\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final long nextBlock = (position + valuesPerBlock) / valuesPerBlock;\n    final long targetBlock = ord / valuesPerBlock;\n    final long blocksToSkip = targetBlock - nextBlock;\n    if (blocksToSkip > 0) {\n      final long skip = blocksToSkip << 3;\n      final long filePointer = in.getFilePointer();\n\n      in.seek(filePointer + skip);\n      shift = 64;\n\n      final int offsetInBlock = ord % valuesPerBlock;\n      for (int i = 0; i < offsetInBlock; ++i) {\n        next();\n      }\n    } else {\n      for (int i = position; i < ord - 1; ++i) {\n        next();\n      }\n    }\n\n    position = ord - 1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64SingleBlockReaderIterator#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public long advance(int ord) throws IOException {\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n\n    final int valuesPerBlock = 64 / bitsPerValue;\n    final long nextBlock = (position + valuesPerBlock) / valuesPerBlock;\n    final long targetBlock = ord / valuesPerBlock;\n    final long blocksToSkip = targetBlock - nextBlock;\n    if (blocksToSkip > 0) {\n      final long skip = blocksToSkip << 3;\n      final long filePointer = in.getFilePointer();\n\n      in.seek(filePointer + skip);\n      shift = 64;\n\n      final int offsetInBlock = ord % valuesPerBlock;\n      for (int i = 0; i < offsetInBlock; ++i) {\n        next();\n      }\n    } else {\n      for (int i = position; i < ord - 1; ++i) {\n        next();\n      }\n    }\n\n    position = ord - 1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55110eb60c5105294fc2ae7912d82b750865aa58":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55110eb60c5105294fc2ae7912d82b750865aa58"]},"commit2Childs":{"55110eb60c5105294fc2ae7912d82b750865aa58":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}