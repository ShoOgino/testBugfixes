{"path":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","sourceNew":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<String,String>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<String,String>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","sourceNew":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<String,String>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<String,String>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","sourceNew":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<String,String>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<String,String>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","sourceNew":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<String,String>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","sourceNew":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.addResponse(sdl);\n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.add(\"response\", sdl); \n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestPHPSerializedResponseWriter#testSolrDocuments().mjava","sourceNew":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.addResponse(sdl);\n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:4:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:13:\\\"numFoundExact\\\";b:1;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrDocuments() throws IOException {\n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PHPSerializedResponseWriter();\n    StringWriter buf = new StringWriter();\n\n    SolrDocument d = new SolrDocument();\n\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"data1\",\"hello\");\n    d.addField(\"data2\",42);\n    d.addField(\"data3\",true);\n\n    // multivalued fields: \n\n    // extremely odd edge case: value is a map\n\n    // we use LinkedHashMap because we are doing a string comparison \n    // later and we need predictible ordering\n    LinkedHashMap<String,String> nl = new LinkedHashMap<>();\n    nl.put(\"data4.1\", \"hashmap\");\n    nl.put(\"data4.2\", \"hello\");\n    d.addField(\"data4\",nl);\n    // array value \n    d.addField(\"data5\",Arrays.asList(\"data5.1\", \"data5.2\", \"data5.3\"));\n\n    // adding one more document to test array indexes\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    rsp.addResponse(sdl);\n    \n    w.write(buf, req, rsp);\n    assertEquals(\"a:1:{s:8:\\\"response\\\";a:3:{s:8:\\\"numFound\\\";i:0;s:5:\\\"start\\\";i:0;s:4:\\\"docs\\\";a:2:{i:0;a:6:{s:2:\\\"id\\\";s:1:\\\"1\\\";s:5:\\\"data1\\\";s:5:\\\"hello\\\";s:5:\\\"data2\\\";i:42;s:5:\\\"data3\\\";b:1;s:5:\\\"data4\\\";a:2:{s:7:\\\"data4.1\\\";s:7:\\\"hashmap\\\";s:7:\\\"data4.2\\\";s:5:\\\"hello\\\";}s:5:\\\"data5\\\";a:3:{i:0;s:7:\\\"data5.1\\\";i:1;s:7:\\\"data5.2\\\";i:2;s:7:\\\"data5.3\\\";}}i:1;a:1:{s:2:\\\"id\\\";s:1:\\\"2\\\";}}}}\", \n                 buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}