{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","pathOld":"/dev/null","sourceNew":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {}. Got response {}\", req, rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request\", e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request\", e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","sourceNew":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {} to target: {}. Got response {}\", req, state.getTargetCollection(), rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request to target: \" + state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request to target: \" + state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","sourceOld":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {}. Got response {}\", req, rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request\", e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request\", e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","sourceNew":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {} to target: {}. Got response {}\", req, state.getTargetCollection(), rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request to target: \" + state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request to target: \" + state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","sourceOld":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {}. Got response {}\", req, rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request\", e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request\", e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","sourceNew":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {} to target: {}. Got response {}\", req, state.getTargetCollection(), rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request to target: \" + state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request to target: \" + state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","sourceOld":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {}. Got response {}\", req, rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request\", e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request\", e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","sourceNew":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {} to target: {}. Got response {}\", req, state.getTargetCollection(), rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request to target: {}\", state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request to target: {}\", state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","sourceOld":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {} to target: {}. Got response {}\", req, state.getTargetCollection(), rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request to target: \" + state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request to target: \" + state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#handleException(Exception).mjava","sourceNew":null,"sourceOld":"  private void handleException(Exception e) {\n    if (e instanceof CdcrReplicatorException) {\n      UpdateRequest req = ((CdcrReplicatorException) e).req;\n      UpdateResponse rsp = ((CdcrReplicatorException) e).rsp;\n      log.warn(\"Failed to forward update request {} to target: {}. Got response {}\", req, state.getTargetCollection(), rsp);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else if (e instanceof CloudSolrClient.RouteException) {\n      log.warn(\"Failed to forward update request to target: {}\", state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.BAD_REQUEST);\n    } else {\n      log.warn(\"Failed to forward update request to target: {}\", state.getTargetCollection(), e);\n      state.reportError(CdcrReplicatorState.ErrorType.INTERNAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}