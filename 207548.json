{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), false);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, false);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addAddresses(field, docToOrdCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), false);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, false);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addAddresses(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), false);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, false);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addAddresses(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), false);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, false);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addAddresses(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene50DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), false);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, false);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addAddresses(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a870f9917149dc600c4ad4417d615c1795de5864","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["a870f9917149dc600c4ad4417d615c1795de5864"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}