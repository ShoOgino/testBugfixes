{"path":"src/test/org/apache/lucene/index/TestMultiSegmentReader#testMultiTermDocs().mjava","commits":[{"id":"051915b28d4a808379648fb9290ffef5901286eb","date":1242402612,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiSegmentReader#testMultiTermDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiTermDocs() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    RAMDirectory ramDir3=new RAMDirectory();\n    addDoc(ramDir3, \"test wow\", true);\n\n    IndexReader[] readers1 = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir3)};\n    IndexReader[] readers2 = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2), IndexReader.open(ramDir3)};\n    MultiReader mr2 = new MultiReader(readers1);\n    MultiReader mr3 = new MultiReader(readers2);\n\n    // test mixing up TermDocs and TermEnums from different readers.\n    TermDocs td2 = mr2.termDocs();\n    TermEnum te3 = mr3.terms(new Term(\"body\",\"wow\"));\n    td2.seek(te3);\n    int ret = 0;\n\n    // This should blow up if we forget to check that the TermEnum is from the same\n    // reader as the TermDocs.\n    while (td2.next()) ret += td2.doc();\n    td2.close();\n    te3.close();\n\n    // really a dummy assert to ensure that we got some docs and to ensure that\n    // nothing is optimized out.\n    assertTrue(ret > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDirectoryReader#testMultiTermDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiSegmentReader#testMultiTermDocs().mjava","sourceNew":"  public void testMultiTermDocs() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    RAMDirectory ramDir3=new RAMDirectory();\n    addDoc(ramDir3, \"test wow\", true);\n\n    IndexReader[] readers1 = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir3)};\n    IndexReader[] readers2 = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2), IndexReader.open(ramDir3)};\n    MultiReader mr2 = new MultiReader(readers1);\n    MultiReader mr3 = new MultiReader(readers2);\n\n    // test mixing up TermDocs and TermEnums from different readers.\n    TermDocs td2 = mr2.termDocs();\n    TermEnum te3 = mr3.terms(new Term(\"body\",\"wow\"));\n    td2.seek(te3);\n    int ret = 0;\n\n    // This should blow up if we forget to check that the TermEnum is from the same\n    // reader as the TermDocs.\n    while (td2.next()) ret += td2.doc();\n    td2.close();\n    te3.close();\n\n    // really a dummy assert to ensure that we got some docs and to ensure that\n    // nothing is optimized out.\n    assertTrue(ret > 0);\n  }\n\n","sourceOld":"  public void testMultiTermDocs() throws IOException {\n    RAMDirectory ramDir1=new RAMDirectory();\n    addDoc(ramDir1, \"test foo\", true);\n    RAMDirectory ramDir2=new RAMDirectory();\n    addDoc(ramDir2, \"test blah\", true);\n    RAMDirectory ramDir3=new RAMDirectory();\n    addDoc(ramDir3, \"test wow\", true);\n\n    IndexReader[] readers1 = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir3)};\n    IndexReader[] readers2 = new IndexReader[]{IndexReader.open(ramDir1), IndexReader.open(ramDir2), IndexReader.open(ramDir3)};\n    MultiReader mr2 = new MultiReader(readers1);\n    MultiReader mr3 = new MultiReader(readers2);\n\n    // test mixing up TermDocs and TermEnums from different readers.\n    TermDocs td2 = mr2.termDocs();\n    TermEnum te3 = mr3.terms(new Term(\"body\",\"wow\"));\n    td2.seek(te3);\n    int ret = 0;\n\n    // This should blow up if we forget to check that the TermEnum is from the same\n    // reader as the TermDocs.\n    while (td2.next()) ret += td2.doc();\n    td2.close();\n    te3.close();\n\n    // really a dummy assert to ensure that we got some docs and to ensure that\n    // nothing is optimized out.\n    assertTrue(ret > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["051915b28d4a808379648fb9290ffef5901286eb"],"051915b28d4a808379648fb9290ffef5901286eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"051915b28d4a808379648fb9290ffef5901286eb":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["051915b28d4a808379648fb9290ffef5901286eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}