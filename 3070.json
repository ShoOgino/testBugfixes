{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (byte[] bytes : payloadToMatch) {\n      ToStringUtils.byteArray(buffer, bytes);\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (byte[] bytes : payloadToMatch) {\n      ToStringUtils.byteArray(buffer, bytes);\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (byte[] bytes : payloadToMatch) {\n      ToStringUtils.byteArray(buffer, bytes);\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (byte[] bytes : payloadToMatch) {\n      ToStringUtils.byteArray(buffer, bytes);\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    buffer.append(ToStringUtils.boost(getBoost()));\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8dd51777c3f17c83f8aac170bd0f68a029d174","date":1442220758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(bytes.utf8ToString());\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (byte[] bytes : payloadToMatch) {\n      ToStringUtils.byteArray(buffer, bytes);\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03b3a479c631a24c8abc755a1f203bf7c0ac6135","date":1442221826,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(bytes.utf8ToString());\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"spanPayCheck(\");\n    buffer.append(match.toString(field));\n    buffer.append(\", payloadRef: \");\n    for (BytesRef bytes : payloadToMatch) {\n      buffer.append(Term.toString(bytes));\n      buffer.append(';');\n    }\n    buffer.append(\")\");\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["03b3a479c631a24c8abc755a1f203bf7c0ac6135"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"03b3a479c631a24c8abc755a1f203bf7c0ac6135":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["03b3a479c631a24c8abc755a1f203bf7c0ac6135"],"03b3a479c631a24c8abc755a1f203bf7c0ac6135":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}