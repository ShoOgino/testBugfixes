{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = 100 * 1000;\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95535508327351a4c38a0dc7711075dfabe5941f","date":1309882395,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = 100 * 1000;\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random.nextBytes(buffer);\n      int size = 1 + random.nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random.nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCompactLabelToOrdinal#testL2O().mjava","sourceNew":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testL2O() throws Exception {\n    LabelToOrdinal map = new LabelToOrdinalMap();\n\n    CompactLabelToOrdinal compact = new CompactLabelToOrdinal(2000000, 0.15f, 3);\n\n    final int n = atLeast(10 * 1000);\n    final int numUniqueValues = 50 * 1000;\n\n    String[] uniqueValues = new String[numUniqueValues];\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < numUniqueValues;) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      uniqueValues[i] = new String(buffer, 0, size);\n      if (uniqueValues[i].indexOf(CompactLabelToOrdinal.TerminatorChar) == -1) {\n        i++;\n      }\n    }\n\n    TEMP_DIR.mkdirs();\n    File f = new File(TEMP_DIR, \"CompactLabelToOrdinalTest.tmp\");\n    int flushInterval = 10;\n\n    for (int i = 0; i < n * 10; i++) {\n      if (i > 0 && i % flushInterval == 0) {\n        compact.flush(f);    \n        compact = CompactLabelToOrdinal.open(f, 0.15f, 3);\n        assertTrue(f.delete());\n        if (flushInterval < (n / 10)) {\n          flushInterval *= 10;\n        }\n      }\n\n      int index = random().nextInt(numUniqueValues);\n      CategoryPath label = new CategoryPath(uniqueValues[index], '/');\n\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n\n      //System.err.println(ord1+\" \"+ord2);\n\n      assertEquals(ord1, ord2);\n\n      if (ord1 == LabelToOrdinal.InvalidOrdinal) {\n        ord1 = compact.getNextOrdinal();\n\n        map.addLabel(label, ord1);\n        compact.addLabel(label, ord1);\n      }\n    }\n\n    for (int i = 0; i < numUniqueValues; i++) {\n      CategoryPath label = new CategoryPath(uniqueValues[i], '/');\n      int ord1 = map.getOrdinal(label);\n      int ord2 = compact.getOrdinal(label);\n      assertEquals(ord1, ord2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"95535508327351a4c38a0dc7711075dfabe5941f":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["95535508327351a4c38a0dc7711075dfabe5941f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95535508327351a4c38a0dc7711075dfabe5941f"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95535508327351a4c38a0dc7711075dfabe5941f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95535508327351a4c38a0dc7711075dfabe5941f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["95535508327351a4c38a0dc7711075dfabe5941f"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}