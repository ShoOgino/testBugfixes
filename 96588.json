{"path":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","commits":[{"id":"c41356c8a19fd7493940c7a1d798ede2fe03ddf8","date":1260481087,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"/dev/null","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n   // todo consider seeking and skipping some too\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ee09e8ed433ed7fb920a873015c62f00776d15","date":1260487597,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API one is supposed to\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n   // todo consider seeking and skipping some too\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":["ca75cdde6e5e850942d30e1f718130192704c510"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca75cdde6e5e850942d30e1f718130192704c510","date":1260546448,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n//    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n//        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API one is supposed to\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":["b2ee09e8ed433ed7fb920a873015c62f00776d15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testTermDocsSomeMore(Directory,InstantiatedIndex).mjava","sourceNew":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n//    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n//        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","sourceOld":"  private void testTermDocsSomeMore(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    // test seek\n\n    Term t = new Term(\"c\", \"danny\");\n    TermEnum aprioriTermEnum = aprioriReader.terms(t);\n    TermEnum testTermEnum = testReader.terms(t);\n\n    assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n\n    t = aprioriTermEnum.term();\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    TermDocs aprioriTermDocs = aprioriReader.termDocs(t);\n    TermDocs testTermDocs = testReader.termDocs(t);\n\n    assertEquals(aprioriTermDocs.next(), testTermDocs.next());\n    assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n    assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n\n    if (aprioriTermDocs.skipTo(4)) {\n      assertTrue(testTermDocs.skipTo(4));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(4));\n    }\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n\n    // beyond this point all next and skipto will return false\n\n    if (aprioriTermDocs.skipTo(100)) {\n      assertTrue(testTermDocs.skipTo(100));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(100));\n    }\n\n\n    if (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.next());\n    }\n\n    if (aprioriTermDocs.skipTo(110)) {\n      assertTrue(testTermDocs.skipTo(110));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(110));\n    }\n\n    if (aprioriTermDocs.skipTo(10)) {\n      assertTrue(testTermDocs.skipTo(10));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(10));\n    }\n\n\n    if (aprioriTermDocs.skipTo(210)) {\n      assertTrue(testTermDocs.skipTo(210));\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    } else {\n      assertFalse(testTermDocs.skipTo(210));\n    }\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n\n    // test seek null (AllTermDocs)\n    aprioriTermDocs = aprioriReader.termDocs(null);\n    testTermDocs = testReader.termDocs(null);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // test seek default\n    aprioriTermDocs = aprioriReader.termDocs();\n    testTermDocs = testReader.termDocs();\n\n    // this is invalid use of the API,\n    // but if the response differs then it's an indication that something might have changed.\n    // in 2.9 and 3.0 the two TermDocs-implementations returned different values at this point.\n//    assertEquals(\"Descripency during invalid use of the TermDocs API, see comments in test code for details.\",\n//        aprioriTermDocs.next(), testTermDocs.next());\n\n    // start using the API the way one is supposed to use it\n\n    t = new Term(\"\", \"\");\n    aprioriTermDocs.seek(t);\n    testTermDocs.seek(t);\n\n    while (aprioriTermDocs.next()) {\n      assertTrue(testTermDocs.next());\n      assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n    }\n    assertFalse(testTermDocs.next());\n\n    aprioriTermDocs.close();\n    testTermDocs.close();\n\n\n    // clean up\n    aprioriReader.close();\n    testReader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2ee09e8ed433ed7fb920a873015c62f00776d15":["c41356c8a19fd7493940c7a1d798ede2fe03ddf8"],"c41356c8a19fd7493940c7a1d798ede2fe03ddf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca75cdde6e5e850942d30e1f718130192704c510":["b2ee09e8ed433ed7fb920a873015c62f00776d15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ca75cdde6e5e850942d30e1f718130192704c510"]},"commit2Childs":{"b2ee09e8ed433ed7fb920a873015c62f00776d15":["ca75cdde6e5e850942d30e1f718130192704c510"],"c41356c8a19fd7493940c7a1d798ede2fe03ddf8":["b2ee09e8ed433ed7fb920a873015c62f00776d15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c41356c8a19fd7493940c7a1d798ede2fe03ddf8"],"ca75cdde6e5e850942d30e1f718130192704c510":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}