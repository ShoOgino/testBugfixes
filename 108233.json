{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testURLs().mjava","commits":[{"id":"351c452f1c3ded97338e6d3db2b585c5f89b0410","date":1291733593,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testURLs().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStandardAnalyzer#testURLs().mjava","sourceNew":"  public void testURLs() throws Exception {\n    Reader reader = null;\n    String randomTextWithURLs;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"random.text.with.urls.txt\"), \"UTF-8\");\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithURLs = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithURLs \n               && randomTextWithURLs.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<String>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream\n          (\"urls.from.random.text.with.urls.txt\"), \"UTF-8\"));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, randomTextWithURLs, urls);\n  }\n\n","sourceOld":"  public void testURLs() throws Exception {\n    Reader reader = null;\n    String randomTextWithURLs;\n    try {\n      reader = new InputStreamReader\n        (getClass().getResourceAsStream(\"random.text.with.urls.txt\"), \"UTF-8\");\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithURLs = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithURLs \n               && randomTextWithURLs.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<String>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream(\"urls.from.random.text.with.urls.txt\"), \"UTF-8\"));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, randomTextWithURLs, urls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8c4bb144102e537495ae5b321f77a9898f7b0b8","date":1291834816,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testURLs().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStandardAnalyzer#testURLs().mjava","sourceNew":"  public void testURLs() throws Exception {\n    Reader reader = null;\n    String randomTextWithURLs;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"random.text.with.urls.txt\"), \"UTF-8\");\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithURLs = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithURLs \n               && randomTextWithURLs.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<String>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream\n          (\"urls.from.random.text.with.urls.txt\"), \"UTF-8\"));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, randomTextWithURLs, urls);\n  }\n\n","sourceOld":"  public void testURLs() throws Exception {\n    Reader reader = null;\n    String randomTextWithURLs;\n    try {\n      reader = new InputStreamReader\n        (getClass().getResourceAsStream(\"random.text.with.urls.txt\"), \"UTF-8\");\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithURLs = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithURLs \n               && randomTextWithURLs.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<String>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream(\"urls.from.random.text.with.urls.txt\"), \"UTF-8\"));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, randomTextWithURLs, urls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testURLs().mjava","pathOld":"/dev/null","sourceNew":"  public void testURLs() throws Exception {\n    Reader reader = null;\n    String randomTextWithURLs;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"random.text.with.urls.txt\"), \"UTF-8\");\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithURLs = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithURLs \n               && randomTextWithURLs.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<String>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream\n          (\"urls.from.random.text.with.urls.txt\"), \"UTF-8\"));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, randomTextWithURLs, urls);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testURLs().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestUAX29URLEmailTokenizer#testURLs().mjava","sourceNew":"  public void testURLs() throws Exception {\n    Reader reader = null;\n    String randomTextWithURLs;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"random.text.with.urls.txt\"), \"UTF-8\");\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithURLs = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithURLs \n               && randomTextWithURLs.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<String>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream\n          (\"urls.from.random.text.with.urls.txt\"), \"UTF-8\"));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, randomTextWithURLs, urls);\n  }\n\n","sourceOld":"  public void testURLs() throws Exception {\n    Reader reader = null;\n    String randomTextWithURLs;\n    try {\n      reader = new InputStreamReader(getClass().getResourceAsStream\n        (\"random.text.with.urls.txt\"), \"UTF-8\");\n      StringBuilder builder = new StringBuilder();\n      char[] buffer = new char[1024];\n      int numCharsRead;\n      while (-1 != (numCharsRead = reader.read(buffer))) {\n        builder.append(buffer, 0, numCharsRead);\n      }\n      randomTextWithURLs = builder.toString(); \n    } finally {\n      if (null != reader) {\n        reader.close();\n      }\n    }\n    assertTrue(null != randomTextWithURLs \n               && randomTextWithURLs.length() > 0);\n    BufferedReader bufferedReader = null;\n    String[] urls;\n    try {\n      List<String> urlList = new ArrayList<String>();\n      bufferedReader = new BufferedReader(new InputStreamReader\n        (getClass().getResourceAsStream\n          (\"urls.from.random.text.with.urls.txt\"), \"UTF-8\"));\n      String line;\n      while (null != (line = bufferedReader.readLine())) {\n        line = line.trim();\n        if (line.length() > 0) {\n          urlList.add(line);\n        }\n      }\n      urls = urlList.toArray(new String[urlList.size()]);\n    } finally {\n      if (null != bufferedReader) {\n        bufferedReader.close();\n      }\n    }\n    assertTrue(null != urls && urls.length > 0);\n    BaseTokenStreamTestCase.assertAnalyzesTo\n      (urlAnalyzer, randomTextWithURLs, urls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["351c452f1c3ded97338e6d3db2b585c5f89b0410"],"351c452f1c3ded97338e6d3db2b585c5f89b0410":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","351c452f1c3ded97338e6d3db2b585c5f89b0410"],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","351c452f1c3ded97338e6d3db2b585c5f89b0410"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"351c452f1c3ded97338e6d3db2b585c5f89b0410":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["351c452f1c3ded97338e6d3db2b585c5f89b0410","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}