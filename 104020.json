{"path":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    create.setCollectionName(collectionName);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setCreateNodeSet(overseerNode);\n    ModifiableSolrParams params = new ModifiableSolrParams(create.getParams());\n    params.set(\"stateFormat\", \"2\");\n    QueryRequest req = new QueryRequest(params);\n    req.setPath(\"/admin/collections\");\n    NamedList<Object> request = cloudClient.request(req);\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create();\n      create.setCollectionName(collectionName);\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.setCreateNodeSet(notOverseerNode);\n      params = new ModifiableSolrParams(create.getParams());\n      params.set(\"stateFormat\", \"2\");\n      req = new QueryRequest(params);\n      req.setPath(\"/admin/collections\");\n      request = cloudClient.request(req);\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    String overseerNode = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    create.setCollectionName(collectionName);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setCreateNodeSet(overseerNode);\n    ModifiableSolrParams params = new ModifiableSolrParams(create.getParams());\n    params.set(\"stateFormat\", \"2\");\n    QueryRequest req = new QueryRequest(params);\n    req.setPath(\"/admin/collections\");\n    NamedList<Object> request = cloudClient.request(req);\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create();\n      create.setCollectionName(collectionName);\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.setCreateNodeSet(notOverseerNode);\n      params = new ModifiableSolrParams(create.getParams());\n      params.set(\"stateFormat\", \"2\");\n      req = new QueryRequest(params);\n      req.setPath(\"/admin/collections\");\n      request = cloudClient.request(req);\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setReplicationFactor(1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create()\n              .setCollectionName(collectionName)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    create.setCollectionName(collectionName);\n    create.setNumShards(1);\n    create.setReplicationFactor(1);\n    create.setCreateNodeSet(overseerNode);\n    ModifiableSolrParams params = new ModifiableSolrParams(create.getParams());\n    params.set(\"stateFormat\", \"2\");\n    QueryRequest req = new QueryRequest(params);\n    req.setPath(\"/admin/collections\");\n    NamedList<Object> request = cloudClient.request(req);\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create();\n      create.setCollectionName(collectionName);\n      create.setNumShards(1);\n      create.setReplicationFactor(1);\n      create.setCreateNodeSet(notOverseerNode);\n      params = new ModifiableSolrParams(create.getParams());\n      params.set(\"stateFormat\", \"2\");\n      req = new QueryRequest(params);\n      req.setPath(\"/admin/collections\");\n      request = cloudClient.request(req);\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setReplicationFactor(1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create()\n              .setCollectionName(collectionName)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setReplicationFactor(1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create()\n              .setCollectionName(collectionName)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setReplicationFactor(1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create()\n              .setCollectionName(collectionName)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setReplicationFactor(1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create()\n              .setCollectionName(collectionName)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setReplicationFactor(1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create()\n              .setCollectionName(collectionName)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setReplicationFactor(1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n      delete.setCollectionName(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = new CollectionAdminRequest.Create()\n              .setCollectionName(collectionName)\n              .setNumShards(1)\n              .setReplicationFactor(1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3217321f3e1d7922898c6c633d17acfa840d6875","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2209af2c265d2258ec4b29c8cc78622d36994a15","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["3217321f3e1d7922898c6c633d17acfa840d6875"],"3217321f3e1d7922898c6c633d17acfa840d6875":["2209af2c265d2258ec4b29c8cc78622d36994a15","ac97ea104d893f16aab430d9904473bc1f233f3c"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["abb23fcc2461782ab204e61213240feb77d355aa"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["2209af2c265d2258ec4b29c8cc78622d36994a15","3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"abb23fcc2461782ab204e61213240feb77d355aa":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3217321f3e1d7922898c6c633d17acfa840d6875":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}