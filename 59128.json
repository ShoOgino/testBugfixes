{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#waitForValue(String,String,int).mjava","commits":[{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#waitForValue(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForValue(String propertyName, String expectedValue, int timeout) throws InterruptedException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    for (int i = 0; i < timeout; i += 10) {\n      final Object value = zkStateReader.getCollectionProperties(collectionName).get(propertyName);\n      if ((expectedValue == null && value == null) ||\n          (expectedValue != null && expectedValue.equals(value))) {\n        return;\n      }\n      Thread.sleep(10);\n    }\n\n    fail(String.format(Locale.ROOT, \"Could not see value change after setting collection property. Name: %s, current value: %s, expected value: %s\",\n            propertyName, zkStateReader.getCollectionProperties(collectionName).get(propertyName), expectedValue));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["14ad5f6d86e47603e934be859694ffbba27cd436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14ad5f6d86e47603e934be859694ffbba27cd436","date":1522709785,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#waitForValue(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest#waitForValue(String,String,int).mjava","sourceNew":"  private void waitForValue(String propertyName, String expectedValue, int timeout) throws InterruptedException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    Object lastValueSeen = null;\n    for (int i = 0; i < timeout; i += 10) {\n      final Object value = zkStateReader.getCollectionProperties(collectionName).get(propertyName);\n      if ((expectedValue == null && value == null) ||\n          (expectedValue != null && expectedValue.equals(value))) {\n        return;\n      }\n      lastValueSeen = value;\n      Thread.sleep(10);\n    }\n    String collectionpropsInZk = null;\n    try {\n      collectionpropsInZk = new String(cluster.getZkClient().getData(\"/collections/\" + collectionName + \"/collectionprops.json\", null, null, true), StandardCharsets.UTF_8);\n    } catch (Exception e) {\n      collectionpropsInZk = \"Could not get file from ZooKeeper: \" + e.getMessage();\n      log.error(\"Could not get collectionprops from ZooKeeper for assertion mesage\", e);\n    }\n    \n    String propertiesInZkReader = cluster.getSolrClient().getZkStateReader().getCollectionProperties(collectionName).toString();\n\n    fail(String.format(Locale.ROOT, \"Could not see value change after setting collection property. Name: %s, current value: %s, expected value: %s. \" +\n                                    \"\\ncollectionprops.json file in ZooKeeper: %s\" +\n                                    \"\\nCollectionProperties in zkStateReader: %s\",\n            propertyName, lastValueSeen, expectedValue, collectionpropsInZk, propertiesInZkReader));\n  }\n\n","sourceOld":"  private void waitForValue(String propertyName, String expectedValue, int timeout) throws InterruptedException {\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    for (int i = 0; i < timeout; i += 10) {\n      final Object value = zkStateReader.getCollectionProperties(collectionName).get(propertyName);\n      if ((expectedValue == null && value == null) ||\n          (expectedValue != null && expectedValue.equals(value))) {\n        return;\n      }\n      Thread.sleep(10);\n    }\n\n    fail(String.format(Locale.ROOT, \"Could not see value change after setting collection property. Name: %s, current value: %s, expected value: %s\",\n            propertyName, zkStateReader.getCollectionProperties(collectionName).get(propertyName), expectedValue));\n  }\n\n","bugFix":["de3459a54b4c8751d9ef19b035577e2418064be7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de3459a54b4c8751d9ef19b035577e2418064be7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14ad5f6d86e47603e934be859694ffbba27cd436":["de3459a54b4c8751d9ef19b035577e2418064be7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14ad5f6d86e47603e934be859694ffbba27cd436"]},"commit2Childs":{"de3459a54b4c8751d9ef19b035577e2418064be7":["14ad5f6d86e47603e934be859694ffbba27cd436"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de3459a54b4c8751d9ef19b035577e2418064be7"],"14ad5f6d86e47603e934be859694ffbba27cd436":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}