{"path":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the field doesn't match any schema field or dynamic field,\n   *           or if the matched field's type is BoolField\n   */\n  @Override\n  public FieldMutatingUpdateProcessor.FieldNameSelector\n  getDefaultSelector(final SolrCore core) {\n\n    return new FieldMutatingUpdateProcessor.FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(final String fieldName) {\n        final IndexSchema schema = core.getLatestSchema();\n        FieldType type = schema.getFieldTypeNoEx(fieldName);\n        return (null == type) || type instanceof DateValueFieldType;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the field doesn't match any schema field or dynamic field,\n   *           or if the matched field's type is BoolField\n   */\n  @Override\n  public FieldMutatingUpdateProcessor.FieldNameSelector\n  getDefaultSelector(final SolrCore core) {\n\n    return new FieldMutatingUpdateProcessor.FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(final String fieldName) {\n        final IndexSchema schema = core.getLatestSchema();\n        FieldType type = schema.getFieldTypeNoEx(fieldName);\n        return (null == type) || type instanceof DateValueFieldType;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ad8cb078811acf9ef38ece78171f1bfe5786de","date":1474538499,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","sourceNew":"  /**\n   * Returns true if the field doesn't match any schema field or dynamic field,\n   *           or if the matched field's type is BoolField\n   */\n  @Override\n  public FieldMutatingUpdateProcessor.FieldNameSelector\n  getDefaultSelector(final SolrCore core) {\n\n    return fieldName -> {\n      final IndexSchema schema = core.getLatestSchema();\n      FieldType type = schema.getFieldTypeNoEx(fieldName);\n      return (null == type) || type instanceof DateValueFieldType;\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns true if the field doesn't match any schema field or dynamic field,\n   *           or if the matched field's type is BoolField\n   */\n  @Override\n  public FieldMutatingUpdateProcessor.FieldNameSelector\n  getDefaultSelector(final SolrCore core) {\n\n    return new FieldMutatingUpdateProcessor.FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(final String fieldName) {\n        final IndexSchema schema = core.getLatestSchema();\n        FieldType type = schema.getFieldTypeNoEx(fieldName);\n        return (null == type) || type instanceof DateValueFieldType;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","sourceNew":"  /**\n   * Returns true if the field doesn't match any schema field or dynamic field,\n   *           or if the matched field's type is BoolField\n   */\n  @Override\n  public FieldMutatingUpdateProcessor.FieldNameSelector\n  getDefaultSelector(final SolrCore core) {\n\n    return fieldName -> {\n      final IndexSchema schema = core.getLatestSchema();\n      FieldType type = schema.getFieldTypeNoEx(fieldName);\n      return (null == type) || type instanceof DateValueFieldType;\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns true if the field doesn't match any schema field or dynamic field,\n   *           or if the matched field's type is BoolField\n   */\n  @Override\n  public FieldMutatingUpdateProcessor.FieldNameSelector\n  getDefaultSelector(final SolrCore core) {\n\n    return new FieldMutatingUpdateProcessor.FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(final String fieldName) {\n        final IndexSchema schema = core.getLatestSchema();\n        FieldType type = schema.getFieldTypeNoEx(fieldName);\n        return (null == type) || type instanceof DateValueFieldType;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getDefaultSelector(SolrCore).mjava","sourceNew":"  /**\n   * Returns true if the field doesn't match any schema field or dynamic field,\n   *           or if the matched field's type is BoolField\n   */\n  @Override\n  public FieldMutatingUpdateProcessor.FieldNameSelector\n  getDefaultSelector(final SolrCore core) {\n\n    return fieldName -> {\n      final IndexSchema schema = core.getLatestSchema();\n      FieldType type = schema.getFieldTypeNoEx(fieldName);\n      return (null == type) || type instanceof DateValueFieldType;\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns true if the field doesn't match any schema field or dynamic field,\n   *           or if the matched field's type is BoolField\n   */\n  @Override\n  public FieldMutatingUpdateProcessor.FieldNameSelector\n  getDefaultSelector(final SolrCore core) {\n\n    return new FieldMutatingUpdateProcessor.FieldNameSelector() {\n      @Override\n      public boolean shouldMutate(final String fieldName) {\n        final IndexSchema schema = core.getLatestSchema();\n        FieldType type = schema.getFieldTypeNoEx(fieldName);\n        return (null == type) || type instanceof DateValueFieldType;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","c5ad8cb078811acf9ef38ece78171f1bfe5786de"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5ad8cb078811acf9ef38ece78171f1bfe5786de":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","c5ad8cb078811acf9ef38ece78171f1bfe5786de","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c5ad8cb078811acf9ef38ece78171f1bfe5786de":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}