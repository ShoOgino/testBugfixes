{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testEscaped().mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testEscaped().mjava","pathOld":"/dev/null","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertParseException(\"XY\\\\\"); // there must be a character after the escape\n                                  // char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertParseException(\"XY\\\\u005G\"); // test non-hex character in escaped\n                                       // unicode sequence\n    assertParseException(\"XY\\\\u005\"); // test incomplete escaped unicode\n                                      // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n                                                        // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testEscaped().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertParseException(\"XY\\\\\"); // there must be a character after the escape\n                                  // char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertParseException(\"XY\\\\u005G\"); // test non-hex character in escaped\n                                       // unicode sequence\n    assertParseException(\"XY\\\\u005\"); // test incomplete escaped unicode\n                                      // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n                                                        // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer();\n\n    /*\n     * assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n     * assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n     * assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\"); assertQueryEquals(\"\\\\+blah\", a,\n     * \"\\\\+blah\"); assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n     * \n     * assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\"); assertQueryEquals(\"\\\\!blah\",\n     * a, \"\\\\!blah\"); assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n     * assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\"); assertQueryEquals(\"\\\\:blah\",\n     * a, \"\\\\:blah\"); assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n     * assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\"); assertQueryEquals(\"\\\\]blah\",\n     * a, \"\\\\]blah\"); assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n     * assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\"); assertQueryEquals(\"\\\\)blah\",\n     * a, \"\\\\)blah\"); assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n     * assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\"); assertQueryEquals(\"\\\\?blah\",\n     * a, \"\\\\?blah\"); //assertQueryEquals(\"foo \\\\&\\\\& bar\", a,\n     * \"foo \\\\&\\\\& bar\"); //assertQueryEquals(\"foo \\\\|| bar\", a,\n     * \"foo \\\\|| bar\"); //assertQueryEquals(\"foo \\\\AND bar\", a,\n     * \"foo \\\\AND bar\");\n     */\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~0.5\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~0.5\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~0.5\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~0.5\");\n\n    // TODO: implement Range queries on QueryParser\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\n        \"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\",\n        a, \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n\n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n\n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n\n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n\n    assertParseException(\"XY\\\\\"); // there must be a character after the escape\n                                  // char\n\n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n\n    assertParseException(\"XY\\\\u005G\"); // test non-hex character in escaped\n                                       // unicode sequence\n    assertParseException(\"XY\\\\u005\"); // test incomplete escaped unicode\n                                      // sequence\n\n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing\n                                                        // paranthesis\n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\"); // escaped backslash\n\n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n\n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a, \"a\\\\ or b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}