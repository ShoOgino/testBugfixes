{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedReuseAfterRecreate().mjava","commits":[{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedReuseAfterRecreate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOpenIfChangedReuseAfterRecreate() throws Exception {\n    // tests that if the taxonomy is recreated, no data is reused from the previous taxonomy\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n    CategoryPath cp_a = new CategoryPath(\"a\");\n    writer.addCategory(cp_a);\n    writer.close();\n    \n    DirectoryTaxonomyReader r1 = new DirectoryTaxonomyReader(dir);\n    // fill r1's caches\n    assertEquals(1, r1.getOrdinal(cp_a));\n    assertEquals(cp_a, r1.getPath(1));\n    \n    // now recreate, add a different category\n    writer = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n    CategoryPath cp_b = new CategoryPath(\"b\");\n    writer.addCategory(cp_b);\n    writer.close();\n    \n    DirectoryTaxonomyReader r2 = TaxonomyReader.openIfChanged(r1);\n    assertNotNull(r2);\n    \n    // fill r2's caches\n    assertEquals(1, r2.getOrdinal(cp_b));\n    assertEquals(cp_b, r2.getPath(1));\n    \n    // check that r1 doesn't see cp_b\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r1.getOrdinal(cp_b));\n    assertEquals(cp_a, r1.getPath(1));\n\n    // check that r2 doesn't see cp_a\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r2.getOrdinal(cp_a));\n    assertEquals(cp_b, r2.getPath(1));\n\n    r2.close();\n    r1.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedReuseAfterRecreate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOpenIfChangedReuseAfterRecreate() throws Exception {\n    // tests that if the taxonomy is recreated, no data is reused from the previous taxonomy\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n    CategoryPath cp_a = new CategoryPath(\"a\");\n    writer.addCategory(cp_a);\n    writer.close();\n    \n    DirectoryTaxonomyReader r1 = new DirectoryTaxonomyReader(dir);\n    // fill r1's caches\n    assertEquals(1, r1.getOrdinal(cp_a));\n    assertEquals(cp_a, r1.getPath(1));\n    \n    // now recreate, add a different category\n    writer = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n    CategoryPath cp_b = new CategoryPath(\"b\");\n    writer.addCategory(cp_b);\n    writer.close();\n    \n    DirectoryTaxonomyReader r2 = TaxonomyReader.openIfChanged(r1);\n    assertNotNull(r2);\n    \n    // fill r2's caches\n    assertEquals(1, r2.getOrdinal(cp_b));\n    assertEquals(cp_b, r2.getPath(1));\n    \n    // check that r1 doesn't see cp_b\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r1.getOrdinal(cp_b));\n    assertEquals(cp_a, r1.getPath(1));\n\n    // check that r2 doesn't see cp_a\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r2.getOrdinal(cp_a));\n    assertEquals(cp_b, r2.getPath(1));\n\n    r2.close();\n    r1.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedReuseAfterRecreate().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedReuseAfterRecreate().mjava","sourceNew":"  @Test\n  public void testOpenIfChangedReuseAfterRecreate() throws Exception {\n    // tests that if the taxonomy is recreated, no data is reused from the previous taxonomy\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n    FacetLabel cp_a = new FacetLabel(\"a\");\n    writer.addCategory(cp_a);\n    writer.close();\n    \n    DirectoryTaxonomyReader r1 = new DirectoryTaxonomyReader(dir);\n    // fill r1's caches\n    assertEquals(1, r1.getOrdinal(cp_a));\n    assertEquals(cp_a, r1.getPath(1));\n    \n    // now recreate, add a different category\n    writer = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n    FacetLabel cp_b = new FacetLabel(\"b\");\n    writer.addCategory(cp_b);\n    writer.close();\n    \n    DirectoryTaxonomyReader r2 = TaxonomyReader.openIfChanged(r1);\n    assertNotNull(r2);\n    \n    // fill r2's caches\n    assertEquals(1, r2.getOrdinal(cp_b));\n    assertEquals(cp_b, r2.getPath(1));\n    \n    // check that r1 doesn't see cp_b\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r1.getOrdinal(cp_b));\n    assertEquals(cp_a, r1.getPath(1));\n\n    // check that r2 doesn't see cp_a\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r2.getOrdinal(cp_a));\n    assertEquals(cp_b, r2.getPath(1));\n\n    r2.close();\n    r1.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testOpenIfChangedReuseAfterRecreate() throws Exception {\n    // tests that if the taxonomy is recreated, no data is reused from the previous taxonomy\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n    CategoryPath cp_a = new CategoryPath(\"a\");\n    writer.addCategory(cp_a);\n    writer.close();\n    \n    DirectoryTaxonomyReader r1 = new DirectoryTaxonomyReader(dir);\n    // fill r1's caches\n    assertEquals(1, r1.getOrdinal(cp_a));\n    assertEquals(cp_a, r1.getPath(1));\n    \n    // now recreate, add a different category\n    writer = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n    CategoryPath cp_b = new CategoryPath(\"b\");\n    writer.addCategory(cp_b);\n    writer.close();\n    \n    DirectoryTaxonomyReader r2 = TaxonomyReader.openIfChanged(r1);\n    assertNotNull(r2);\n    \n    // fill r2's caches\n    assertEquals(1, r2.getOrdinal(cp_b));\n    assertEquals(cp_b, r2.getPath(1));\n    \n    // check that r1 doesn't see cp_b\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r1.getOrdinal(cp_b));\n    assertEquals(cp_a, r1.getPath(1));\n\n    // check that r2 doesn't see cp_a\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r2.getOrdinal(cp_a));\n    assertEquals(cp_b, r2.getPath(1));\n\n    r2.close();\n    r1.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedReuseAfterRecreate().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedReuseAfterRecreate().mjava","sourceNew":"  @Test\n  public void testOpenIfChangedReuseAfterRecreate() throws Exception {\n    // tests that if the taxonomy is recreated, no data is reused from the previous taxonomy\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n    FacetLabel cp_a = new FacetLabel(\"a\");\n    writer.addCategory(cp_a);\n    writer.close();\n    \n    DirectoryTaxonomyReader r1 = new DirectoryTaxonomyReader(dir);\n    // fill r1's caches\n    assertEquals(1, r1.getOrdinal(cp_a));\n    assertEquals(cp_a, r1.getPath(1));\n    \n    // now recreate, add a different category\n    writer = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n    FacetLabel cp_b = new FacetLabel(\"b\");\n    writer.addCategory(cp_b);\n    writer.close();\n    \n    DirectoryTaxonomyReader r2 = TaxonomyReader.openIfChanged(r1);\n    assertNotNull(r2);\n    \n    // fill r2's caches\n    assertEquals(1, r2.getOrdinal(cp_b));\n    assertEquals(cp_b, r2.getPath(1));\n    \n    // check that r1 doesn't see cp_b\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r1.getOrdinal(cp_b));\n    assertEquals(cp_a, r1.getPath(1));\n\n    // check that r2 doesn't see cp_a\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r2.getOrdinal(cp_a));\n    assertEquals(cp_b, r2.getPath(1));\n\n    r2.close();\n    r1.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testOpenIfChangedReuseAfterRecreate() throws Exception {\n    // tests that if the taxonomy is recreated, no data is reused from the previous taxonomy\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n    CategoryPath cp_a = new CategoryPath(\"a\");\n    writer.addCategory(cp_a);\n    writer.close();\n    \n    DirectoryTaxonomyReader r1 = new DirectoryTaxonomyReader(dir);\n    // fill r1's caches\n    assertEquals(1, r1.getOrdinal(cp_a));\n    assertEquals(cp_a, r1.getPath(1));\n    \n    // now recreate, add a different category\n    writer = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n    CategoryPath cp_b = new CategoryPath(\"b\");\n    writer.addCategory(cp_b);\n    writer.close();\n    \n    DirectoryTaxonomyReader r2 = TaxonomyReader.openIfChanged(r1);\n    assertNotNull(r2);\n    \n    // fill r2's caches\n    assertEquals(1, r2.getOrdinal(cp_b));\n    assertEquals(cp_b, r2.getPath(1));\n    \n    // check that r1 doesn't see cp_b\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r1.getOrdinal(cp_b));\n    assertEquals(cp_a, r1.getPath(1));\n\n    // check that r2 doesn't see cp_a\n    assertEquals(TaxonomyReader.INVALID_ORDINAL, r2.getOrdinal(cp_a));\n    assertEquals(cp_b, r2.getPath(1));\n\n    r2.close();\n    r1.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["407687e67faf6e1f02a211ca078d8e3eed631027","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}