{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStarParsing().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStarParsing().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // QueryParser qp = new QueryParserWrapper(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the future\n    // too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // QueryParser qp = new QueryParserWrapper(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the future\n    // too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStarParsing().mjava","sourceNew":null,"sourceOld":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // QueryParser qp = new QueryParserWrapper(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the future\n    // too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStarParsing().mjava","sourceNew":null,"sourceOld":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // QueryParser qp = new QueryParserWrapper(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the future\n    // too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testStarParsing().mjava","sourceNew":null,"sourceOld":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // QueryParser qp = new QueryParserWrapper(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the future\n    // too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}