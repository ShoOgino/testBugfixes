{"path":"src/java/org/apache/solr/util/BitUtil#ntz3(long).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/BitUtil#ntz3(long).mjava","pathOld":"/dev/null","sourceNew":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108097d840f85a1779a41d0e412efb8130546e6","date":1228575321,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/BitUtil#ntz3(long).mjava","sourceNew":null,"sourceOld":"  /** returns 0 based index of first set bit\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz3(long x) {\n   // another implementation taken from Hackers Delight, extended to 64 bits\n   // and converted to Java.\n   // Many 32 bit ntz algorithms are at http://www.hackersdelight.org/HDcode/ntz.cc\n   int n = 1;\n\n   // do the first step as a long, all others as ints.\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   if ((y & 0x0000000F) == 0) { n+=4; y>>>=4; }\n   if ((y & 0x00000003) == 0) { n+=2; y>>>=2; }\n   return n - (y & 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5108097d840f85a1779a41d0e412efb8130546e6":["21400778a0bf704d187a4848279049f5d90276c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["5108097d840f85a1779a41d0e412efb8130546e6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5108097d840f85a1779a41d0e412efb8130546e6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5108097d840f85a1779a41d0e412efb8130546e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}