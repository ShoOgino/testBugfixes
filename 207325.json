{"path":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","commits":[{"id":"71b83dcf02fe2854488bc83d70dee29c5baa7e5c","date":1383232808,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<String>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = \"org.apache.\" + artifactId.substring(0, artifactId.indexOf('-'));\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = \"org.apache.\" + artifactId.substring(0, artifactId.indexOf('-'));\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<String>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = \"org.apache.\" + artifactId.substring(0, artifactId.indexOf('-'));\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ca373a146e4fe32f6cd700238c38dab4fc26a9","date":1487082464,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = \"org.apache.\" + artifactId.substring(0, artifactId.indexOf('-'));\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = \"org.apache.\" + artifactId.substring(0, artifactId.indexOf('-'));\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = \"org.apache.\" + artifactId.substring(0, artifactId.indexOf('-'));\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = \"org.apache.\" + artifactId.substring(0, artifactId.indexOf('-'));\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (Map.Entry<String, SortedSet<String>> entry : internalCompileScopeDependencies.entrySet()) {\n      String artifactId = entry.getKey();\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(entry.getValue());\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (Map.Entry<String, SortedSet<String>> entry : internalCompileScopeDependencies.entrySet()) {\n      String artifactId = entry.getKey();\n      List<String> exclusions = new ArrayList<>(entry.getValue());\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (Map.Entry<String, SortedSet<String>> entry : internalCompileScopeDependencies.entrySet()) {\n      String artifactId = entry.getKey();\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(entry.getValue());\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (Map.Entry<String, SortedSet<String>> entry : internalCompileScopeDependencies.entrySet()) {\n      String artifactId = entry.getKey();\n      List<String> exclusions = new ArrayList<>(entry.getValue());\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (String artifactId : internalCompileScopeDependencies.keySet()) {\n      List<String> exclusions = new ArrayList<>();\n      exclusions.addAll(internalCompileScopeDependencies.get(artifactId));\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendAllInternalDependencies(StringBuilder).mjava","sourceNew":null,"sourceOld":"  /**\n   * For each artifact in the project, append a dependency with version\n   * ${project.version} to the grandparent POM's &lt;dependencyManagement&gt;\n   * section.  An &lt;exclusion&gt; is added for each of the artifact's\n   * dependencies.\n   */\n  private void appendAllInternalDependencies(StringBuilder builder) {\n    for (Map.Entry<String, SortedSet<String>> entry : internalCompileScopeDependencies.entrySet()) {\n      String artifactId = entry.getKey();\n      List<String> exclusions = new ArrayList<>(entry.getValue());\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(artifactId);\n      if (null != extDeps) {\n        for (ExternalDependency externalDependency : extDeps) {\n          if ( ! externalDependency.isTestDependency && ! externalDependency.isOptional) {\n            exclusions.add(externalDependency.groupId + ':' + externalDependency.artifactId);\n          }\n        }\n      }\n      String groupId = ivyModuleInfo.get(artifactId);\n      appendDependencyXml(builder, groupId, artifactId, \"      \", \"${project.version}\", false, false, null, exclusions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","44ca373a146e4fe32f6cd700238c38dab4fc26a9"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca373a146e4fe32f6cd700238c38dab4fc26a9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"b0b597c65628ca9e73913a07e81691f8229bae35":["897b06b1364bd1f658a8be7591e43f0851458e7f","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["e025cf1c07150c8db28879d785db17eb3a66ca9f","b0b597c65628ca9e73913a07e81691f8229bae35"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["022a4de90e0479b604264ca9c2e134c996454ab3","44ca373a146e4fe32f6cd700238c38dab4fc26a9"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"44ca373a146e4fe32f6cd700238c38dab4fc26a9":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}