{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(LightAutomaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","sourceNew":"  private static void assertAutomaton(LightAutomaton a) {\n    a = BasicOperations.determinize(a);\n\n    // complement(complement(a)) = a\n    LightAutomaton equivalent = BasicOperations.complementLight(BasicOperations.complementLight(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.determinize(BasicOperations.unionLight(a, a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.determinize(BasicOperations.intersectionLight(a, a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    LightAutomaton empty = BasicOperations.minusLight(a, a);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      LightAutomaton optional = BasicOperations.optionalLight(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minusLight(optional, BasicAutomata.makeEmptyStringLight());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":"  private static void assertAutomaton(Automaton a) {\n    Automaton clone = a.clone();\n    // complement(complement(a)) = a\n    Automaton equivalent = BasicOperations.complement(BasicOperations.complement(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.union(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.intersection(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = BasicOperations.minus(a, clone);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = BasicOperations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minus(optional, BasicAutomata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(LightAutomaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(LightAutomaton).mjava","sourceNew":"  private static void assertAutomaton(LightAutomaton a) {\n    a = BasicOperations.determinize(BasicOperations.removeDeadStates(a));\n\n    // complement(complement(a)) = a\n    LightAutomaton equivalent = BasicOperations.complementLight(BasicOperations.complementLight(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.determinize(BasicOperations.removeDeadStates(BasicOperations.unionLight(a, a)));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.determinize(BasicOperations.removeDeadStates(BasicOperations.intersectionLight(a, a)));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    LightAutomaton empty = BasicOperations.minusLight(a, a);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      LightAutomaton optional = BasicOperations.optionalLight(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minusLight(optional, BasicAutomata.makeEmptyStringLight());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":"  private static void assertAutomaton(LightAutomaton a) {\n    a = BasicOperations.determinize(a);\n\n    // complement(complement(a)) = a\n    LightAutomaton equivalent = BasicOperations.complementLight(BasicOperations.complementLight(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.determinize(BasicOperations.unionLight(a, a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.determinize(BasicOperations.intersectionLight(a, a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    LightAutomaton empty = BasicOperations.minusLight(a, a);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      LightAutomaton optional = BasicOperations.optionalLight(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minusLight(optional, BasicAutomata.makeEmptyStringLight());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(LightAutomaton).mjava","sourceNew":null,"sourceOld":"  private static void assertAutomaton(LightAutomaton a) {\n    a = BasicOperations.determinize(BasicOperations.removeDeadStates(a));\n\n    // complement(complement(a)) = a\n    LightAutomaton equivalent = BasicOperations.complementLight(BasicOperations.complementLight(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.determinize(BasicOperations.removeDeadStates(BasicOperations.unionLight(a, a)));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.determinize(BasicOperations.removeDeadStates(BasicOperations.intersectionLight(a, a)));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    LightAutomaton empty = BasicOperations.minusLight(a, a);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      LightAutomaton optional = BasicOperations.optionalLight(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minusLight(optional, BasicAutomata.makeEmptyStringLight());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}