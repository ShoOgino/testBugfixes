{"path":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","commits":[{"id":"612521de57bdf68711c68b6d8565e4a80ca0d7f6","date":1333716414,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],SolrQueryResponse,GroupingSpecification,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.add(\"response\", docList);\n    }\n  }\n\n","sourceOld":"  public void transform(Map<String, ?> result, SolrQueryResponse response, GroupingSpecification groupingSpecification, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(groupingSpecification.getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(groupingSpecification.getOffset());\n      docList.setNumFound(topGroups.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      response.add(\"response\", docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.add(\"response\", docList);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.add(\"response\", docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.add(\"response\", docList);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.add(\"response\", docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.add(\"response\", docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1313c74c6d619d0d98d1284bc17513c9a4b40345","date":1562035273,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    String[] entries = groupingSpec.getFields();\n    if (ArrayUtils.isEmpty(entries)) {\n      entries = groupingSpec.getQueries();\n      if (ArrayUtils.isEmpty(entries)) {\n        // group.func is not supported in distributed mode\n        // so when group.field or group.query is not specified return\n        return;\n      }\n    }\n    Object value = result.get(entries[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          SolrDocument solrDocument = solrDocumentSource.retrieve(scoreDoc);\n          if (solrDocument != null) {\n            docList.add(solrDocument);\n          }\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    } else if (value instanceof QueryCommandResult) {\n      QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      TopDocs topDocs = queryCommandResult.getTopDocs();\n\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(topDocs.totalHits.value);\n      if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n        docList.setMaxScore(queryCommandResult.getMaxScore());\n      }\n      for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n        SolrDocument solrDocument = solrDocumentSource.retrieve(scoreDoc);\n        if (solrDocument != null) {\n          docList.add(solrDocument);\n        }\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    Object value = result.get(rb.getGroupingSpec().getFields()[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      Float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          docList.add(solrDocumentSource.retrieve(scoreDoc));\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85bef26bbc598445704c1f9c6d7953f3942d5426","date":1562162588,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/MainEndResultTransformer#transform(Map[String,#],ResponseBuilder,SolrDocumentSource).mjava","sourceNew":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    String[] entries = groupingSpec.getFields();\n    if (ArrayUtils.isEmpty(entries)) {\n      entries = groupingSpec.getQueries();\n      if (ArrayUtils.isEmpty(entries)) {\n        // group.func is not supported in distributed mode\n        // so when group.field or group.query is not specified return\n        return;\n      }\n    }\n    Object value = result.get(entries[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getGroupSortSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          SolrDocument solrDocument = solrDocumentSource.retrieve(scoreDoc);\n          if (solrDocument != null) {\n            docList.add(solrDocument);\n          }\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    } else if (value instanceof QueryCommandResult) {\n      QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      TopDocs topDocs = queryCommandResult.getTopDocs();\n\n      docList.setStart(rb.getGroupingSpec().getGroupSortSpec().getOffset());\n      docList.setNumFound(topDocs.totalHits.value);\n      if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n        docList.setMaxScore(queryCommandResult.getMaxScore());\n      }\n      for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n        SolrDocument solrDocument = solrDocumentSource.retrieve(scoreDoc);\n        if (solrDocument != null) {\n          docList.add(solrDocument);\n        }\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    String[] entries = groupingSpec.getFields();\n    if (ArrayUtils.isEmpty(entries)) {\n      entries = groupingSpec.getQueries();\n      if (ArrayUtils.isEmpty(entries)) {\n        // group.func is not supported in distributed mode\n        // so when group.field or group.query is not specified return\n        return;\n      }\n    }\n    Object value = result.get(entries[0]);\n    if (TopGroups.class.isInstance(value)) {\n      @SuppressWarnings(\"unchecked\")\n      TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(rb.totalHitCount);\n\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (GroupDocs<BytesRef> group : topGroups.groups) {\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (maxScore < scoreDoc.score) {\n            maxScore = scoreDoc.score;\n          }\n          SolrDocument solrDocument = solrDocumentSource.retrieve(scoreDoc);\n          if (solrDocument != null) {\n            docList.add(solrDocument);\n          }\n        }\n      }\n      if (maxScore != Float.NEGATIVE_INFINITY) {\n        docList.setMaxScore(maxScore);\n      }\n      rb.rsp.addResponse(docList);\n    } else if (value instanceof QueryCommandResult) {\n      QueryCommandResult queryCommandResult = (QueryCommandResult) value;\n      SolrDocumentList docList = new SolrDocumentList();\n      TopDocs topDocs = queryCommandResult.getTopDocs();\n\n      docList.setStart(rb.getGroupingSpec().getOffset());\n      docList.setNumFound(topDocs.totalHits.value);\n      if (!Float.isNaN(queryCommandResult.getMaxScore())) {\n        docList.setMaxScore(queryCommandResult.getMaxScore());\n      }\n      for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n        SolrDocument solrDocument = solrDocumentSource.retrieve(scoreDoc);\n        if (solrDocument != null) {\n          docList.add(solrDocument);\n        }\n      }\n      rb.rsp.addResponse(docList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["612521de57bdf68711c68b6d8565e4a80ca0d7f6","7530de27b87b961b51f01bd1299b7004d46e8823"],"1313c74c6d619d0d98d1284bc17513c9a4b40345":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["ecd75942508378ccc92c3a26f71db6cba9f25784","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["1313c74c6d619d0d98d1284bc17513c9a4b40345"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["7530de27b87b961b51f01bd1299b7004d46e8823"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85bef26bbc598445704c1f9c6d7953f3942d5426"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"1313c74c6d619d0d98d1284bc17513c9a4b40345":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1313c74c6d619d0d98d1284bc17513c9a4b40345"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ecd75942508378ccc92c3a26f71db6cba9f25784"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}