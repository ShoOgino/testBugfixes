{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","commits":[{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f));\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n\n    assertEquals(0, cache.getCacheCount());\n\n    final CountDownLatch[] latch = { new CountDownLatch(1)};\n    cache = new LRUQueryCache(2, 10000,\n        new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY) {\n        @Override\n        protected void onDocIdSetCache(Object readerCoreKey, long ramBytesUsed) {\n          super.onDocIdSetCache(readerCoreKey, ramBytesUsed);\n          latch[0].countDown();\n        }\n      };\n\n    searcher.setQueryCache(cache);\n\n    searcher.count(new DummyQuery());\n\n    latch[0].await();\n    assertEquals(1, cache.getCacheCount());\n\n    latch[0] = new CountDownLatch(1);\n    cache = new LRUQueryCache(2, 10000,\n        new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY) {\n      @Override\n      protected void onDocIdSetCache(Object readerCoreKey, long ramBytesUsed) {\n        super.onDocIdSetCache(readerCoreKey, ramBytesUsed);\n        latch[0].countDown();\n      }\n    };\n\n    searcher.setQueryCache(cache);\n\n    searcher.count(new DummyQuery());\n\n    latch[0].await();\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testMinSegmentSizePredicate().mjava","sourceNew":"  public void testMinSegmentSizePredicate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMinSegmentSizePredicate() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(2, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n\n    assertEquals(0, cache.getCacheCount());\n\n    final CountDownLatch[] latch = { new CountDownLatch(1)};\n    cache = new LRUQueryCache(2, 10000,\n        new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY) {\n        @Override\n        protected void onDocIdSetCache(Object readerCoreKey, long ramBytesUsed) {\n          super.onDocIdSetCache(readerCoreKey, ramBytesUsed);\n          latch[0].countDown();\n        }\n      };\n\n    searcher.setQueryCache(cache);\n\n    searcher.count(new DummyQuery());\n\n    latch[0].await();\n    assertEquals(1, cache.getCacheCount());\n\n    latch[0] = new CountDownLatch(1);\n    cache = new LRUQueryCache(2, 10000,\n        new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY) {\n      @Override\n      protected void onDocIdSetCache(Object readerCoreKey, long ramBytesUsed) {\n        super.onDocIdSetCache(readerCoreKey, ramBytesUsed);\n        latch[0].countDown();\n      }\n    };\n\n    searcher.setQueryCache(cache);\n\n    searcher.count(new DummyQuery());\n\n    latch[0].await();\n    assertEquals(1, cache.getCacheCount());\n\n    w.addDocument(new Document());\n    reader.close();\n    reader = w.getReader();\n    searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n    cache = new LRUQueryCache(2, 10000, new LRUQueryCache.MinSegmentSizePredicate(0, .6f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.count(new DummyQuery());\n    assertEquals(0, cache.getCacheCount());\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["aac61ee5b4492f174e60bd54939aba9539906edf"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["aac61ee5b4492f174e60bd54939aba9539906edf","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"aac61ee5b4492f174e60bd54939aba9539906edf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"aac61ee5b4492f174e60bd54939aba9539906edf":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aac61ee5b4492f174e60bd54939aba9539906edf"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}