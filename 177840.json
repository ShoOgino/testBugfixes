{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(GroupSelector[T],Sort,int).mjava","commits":[{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(GroupSelector[T],Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   * @param groupSelector a GroupSelector used to defined groups\n   * @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   * @param topNGroups How many top groups to keep.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public FirstPassGroupingCollector(GroupSelector<T> groupSelector, Sort groupSort, int topNGroups) {\n    this.groupSelector = groupSelector;\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n    this.needsScores = groupSort.needsScores();\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public FirstPassGroupingCollector(Sort groupSort, int topNGroups) {\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n    this.needsScores = groupSort.needsScores();\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#FirstPassGroupingCollector(GroupSelector[T],Sort,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   * @param groupSelector a GroupSelector used to defined groups\n   * @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   * @param topNGroups How many top groups to keep.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public FirstPassGroupingCollector(GroupSelector<T> groupSelector, Sort groupSort, int topNGroups) {\n    this.groupSelector = groupSelector;\n    if (topNGroups < 1) {\n      throw new IllegalArgumentException(\"topNGroups must be >= 1 (got \" + topNGroups + \")\");\n    }\n\n    // TODO: allow null groupSort to mean \"by relevance\",\n    // and specialize it?\n\n    this.topNGroups = topNGroups;\n    this.needsScores = groupSort.needsScores();\n    final SortField[] sortFields = groupSort.getSort();\n    comparators = new FieldComparator[sortFields.length];\n    leafComparators = new LeafFieldComparator[sortFields.length];\n    compIDXEnd = comparators.length - 1;\n    reversed = new int[sortFields.length];\n    for (int i = 0; i < sortFields.length; i++) {\n      final SortField sortField = sortFields[i];\n\n      // use topNGroups + 1 so we have a spare slot to use for comparing (tracked by this.spareSlot):\n      comparators[i] = sortField.getComparator(topNGroups + 1, i);\n      reversed[i] = sortField.getReverse() ? -1 : 1;\n    }\n\n    spareSlot = topNGroups;\n    groupMap = new HashMap<>(topNGroups);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}