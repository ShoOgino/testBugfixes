{"path":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(SolrConfig,Map[String,String]).mjava","commits":[{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(SolrConfig,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(SolrConfig solrConfig, Map<String,String> args) {\n    super.init( solrConfig, args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilterFactory#init(SolrConfig,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> args) {\n    super.init( args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(SolrConfig solrConfig, Map<String,String> args) {\n    super.init( solrConfig, args );\n    \n    if( args.get( \"inject\" ) != null ) {\n      inject = Boolean.getBoolean( args.get( INJECT ) );\n    }\n    \n    String name = args.get( ENCODER );\n    if( name == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Missing required parameter: \"+ENCODER\n          +\" [\"+registry.keySet()+\"]\" );\n    }\n    Class<? extends Encoder> clazz = registry.get(name.toUpperCase());\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Unknown encoder: \"+name +\" [\"+registry.keySet()+\"]\" );\n    }\n    \n    try {\n      encoder = clazz.newInstance();\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}