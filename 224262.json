{"path":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"/dev/null","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<T>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"/dev/null","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<T>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<T>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}