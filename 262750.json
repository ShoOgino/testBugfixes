{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","commits":[{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,SolrCore).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  } \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, SolrCore core)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"leader\", ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  } \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n    \n    // TODO: above we make it looks like leaderProps could be true, but here\n    // you would get an NPE if it was.\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"leader\", ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  } \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"leader\", ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n    \n    // TODO: above we make it looks like leaderProps could be true, but here\n    // you would get an NPE if it was.\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"leader\", ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  } \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"leader\", ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    // this pause is important (and seems to work also at 100ms to 1 second in\n    // many cases),\n    // but I don't know why yet :*( - it must come before this publish call\n    // and can happen at the start of leader election process even\n    Thread.sleep(500);\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n    \n    // TODO: above we make it looks like leaderProps could be true, but here\n    // you would get an NPE if it was.\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"leader\", ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    // this pause is important (and seems to work also at 100ms to 1 second in\n    // many cases),\n    // but I don't know why yet :*( - it must come before this publish call\n    // and can happen at the start of leader election process even\n    Thread.sleep(500);\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n\n    try {\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          leaderProps == null ? null : ZkStateReader.toJSON(leaderProps),\n          CreateMode.EPHEMERAL, true);\n    }\n    \n    // TODO: above we make it looks like leaderProps could be true, but here\n    // you would get an NPE if it was.\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        \"leader\", ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1046cb50e4eebb45938ae68ab5282b529443d246","date":1346632666,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    // this pause is important\n    // but I don't know why yet :*( - it must come before this publish call\n    // and can happen at the start of leader election process even\n    Thread.sleep(100);\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    // this pause is important (and seems to work also at 100ms to 1 second in\n    // many cases),\n    // but I don't know why yet :*( - it must come before this publish call\n    // and can happen at the start of leader election process even\n    Thread.sleep(500);\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    // this pause is important\n    // but I don't know why yet :*( - it must come before this publish call\n    // and can happen at the start of leader election process even\n    Thread.sleep(100);\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n        .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n        .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":["fa64435b5902ce266c23755a4a00691a3285dab8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    \n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, ZkStateReader.LEADER_PROP,\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, ZkStateReader.LEADER_PROP,\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, \"leader\",\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dedd8b6e67b7ac7a77554562fddcf90e0031a95c","date":1391930936,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, ZkStateReader.LEADER_PROP,\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, ZkStateReader.LEADER_PROP,\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a5093a9e893633cc091cf2f729d7863671c2b715"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["1046cb50e4eebb45938ae68ab5282b529443d246"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"fa64435b5902ce266c23755a4a00691a3285dab8":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["33d0ed80b7b47e34ad3ff033a77544563aba3085","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a6378064655e76cd7b908b1cab4ce425b384b508":["fa64435b5902ce266c23755a4a00691a3285dab8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"dedd8b6e67b7ac7a77554562fddcf90e0031a95c":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"1046cb50e4eebb45938ae68ab5282b529443d246":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dedd8b6e67b7ac7a77554562fddcf90e0031a95c"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["05a14b2611ead08655a2b2bdc61632eb31316e57","6013b4c7388f1627659c8f96c44abd10a294d3a6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["fa64435b5902ce266c23755a4a00691a3285dab8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["a6378064655e76cd7b908b1cab4ce425b384b508"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","1046cb50e4eebb45938ae68ab5282b529443d246"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","dedd8b6e67b7ac7a77554562fddcf90e0031a95c"],"a6378064655e76cd7b908b1cab4ce425b384b508":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9813dd0748537c429b7c0a9b4723ea1ba496c047","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a5093a9e893633cc091cf2f729d7863671c2b715":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"dedd8b6e67b7ac7a77554562fddcf90e0031a95c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1046cb50e4eebb45938ae68ab5282b529443d246":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","05a14b2611ead08655a2b2bdc61632eb31316e57","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}