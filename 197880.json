{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000));\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUFilterCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1 + random().nextInt(5), 1 + random().nextInt(10000));\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Filter) {\n          return filterCache.ramBytesUsed((Filter) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUFilterCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUFilterCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = new IndexSearcher(reader);\n        for (int i = 0; i < 3; ++i) {\n          final Filter filter = new QueryWrapperFilter(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors))));\n          searcher.search(new ConstantScoreQuery(filterCache.doCache(filter, MAYBE_CACHE_POLICY)), 1);\n        }\n      }\n      filterCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(filterCache, acc), filterCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1819ab1d201f538fe7ac29b376864835e03b6730","date":1425074703,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000));\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000));\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"/dev/null","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000));\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000));\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"772af34227438013872590cf48fd0a96c4057704","date":1482972983,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31781f87f2e572b5c28caf2f83400abe6c05fe7","date":1511944192,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return queryCache.ramBytesUsed((Query) o);\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71ca10e7131e1f01868c80d228f26a855e79dd0","date":1562166223,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return LRUQueryCache.QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LRUQueryCache.LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : LRUQueryCache.HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testRamBytesUsedAgreesWithRamUsageTester().mjava","sourceNew":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test makes sure that by making the same assumptions as LRUQueryCache, RAMUsageTester\n  // computes the same memory usage.\n  public void testRamBytesUsedAgreesWithRamUsageTester() throws IOException {\n    assumeFalse(\"LUCENE-7595: RamUsageTester does not work exact in Java 9 (estimations for maps and lists)\", Constants.JRE_IS_MINIMUM_JAVA9);\n    \n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(10000), context -> random().nextBoolean());\n    // an accumulator that only sums up memory usage of referenced filters and doc id sets\n    final RamUsageTester.Accumulator acc = new RamUsageTester.Accumulator() {\n      @Override\n      public long accumulateObject(Object o, long shallowSize, Map<Field,Object> fieldValues, Collection<Object> queue) {\n        if (o instanceof DocIdSet) {\n          return ((DocIdSet) o).ramBytesUsed();\n        }\n        if (o instanceof Query) {\n          return QUERY_DEFAULT_RAM_BYTES_USED;\n        }\n        if (o instanceof IndexReader || o.getClass().getSimpleName().equals(\"SegmentCoreReaders\")) {\n          // do not take readers or core cache keys into account\n          return 0;\n        }\n        if (o instanceof Map) {\n          Map<?,?> map = (Map<?,?>) o;\n          queue.addAll(map.keySet());\n          queue.addAll(map.values());\n          final long sizePerEntry = o instanceof LinkedHashMap\n              ? LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY\n              : HASHTABLE_RAM_BYTES_PER_ENTRY;\n          return sizePerEntry * map.size();\n        }\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateObject(o, shallowSize, fieldValues, queue);\n        return  0;\n      }\n      @Override\n      public long accumulateArray(Object array, long shallowSize, List<Object> values, Collection<Object> queue) {\n        // follow links to other objects, but ignore their memory usage\n        super.accumulateArray(array, shallowSize, values, queue);\n        return 0;\n      }\n    };\n\n    Directory dir = newDirectory();\n    // serial merges so that segments do not get closed while we are measuring ram usage\n    // with RamUsageTester\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergeScheduler(new SerialMergeScheduler());\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    final List<String> colors = Arrays.asList(\"blue\", \"red\", \"green\", \"yellow\");\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = atLeast(10);\n      for (int i = 0; i < numDocs; ++i) {\n        f.setStringValue(RandomPicks.randomFrom(random(), colors));\n        w.addDocument(doc);\n      }\n      try (final DirectoryReader reader = w.getReader()) {\n        final IndexSearcher searcher = newSearcher(reader);\n        searcher.setQueryCache(queryCache);\n        searcher.setQueryCachingPolicy(MAYBE_CACHE_POLICY);\n        for (int i = 0; i < 3; ++i) {\n          final Query query = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), colors)));\n          searcher.search(new ConstantScoreQuery(query), 1);\n        }\n      }\n      queryCache.assertConsistent();\n      assertEquals(RamUsageTester.sizeOf(queryCache, acc), queryCache.ramBytesUsed());\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"b31781f87f2e572b5c28caf2f83400abe6c05fe7":["772af34227438013872590cf48fd0a96c4057704"],"aac61ee5b4492f174e60bd54939aba9539906edf":["1819ab1d201f538fe7ac29b376864835e03b6730"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"772af34227438013872590cf48fd0a96c4057704":["aac61ee5b4492f174e60bd54939aba9539906edf"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["aac61ee5b4492f174e60bd54939aba9539906edf","772af34227438013872590cf48fd0a96c4057704"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["b31781f87f2e572b5c28caf2f83400abe6c05fe7"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["772af34227438013872590cf48fd0a96c4057704","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1819ab1d201f538fe7ac29b376864835e03b6730"],"1819ab1d201f538fe7ac29b376864835e03b6730":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"b31781f87f2e572b5c28caf2f83400abe6c05fe7":["c7732a106554be0db3e03ac5211e46f6e0c285b8"],"aac61ee5b4492f174e60bd54939aba9539906edf":["772af34227438013872590cf48fd0a96c4057704","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["1819ab1d201f538fe7ac29b376864835e03b6730"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"772af34227438013872590cf48fd0a96c4057704":["b31781f87f2e572b5c28caf2f83400abe6c05fe7","f03e4bed5023ec3ef93a771b8888cae991cf448d","1aad05eeff7818b0833c02ac6b743aa72054963b"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1819ab1d201f538fe7ac29b376864835e03b6730":["aac61ee5b4492f174e60bd54939aba9539906edf","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}