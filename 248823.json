{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testRealTimeGet().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testRealTimeGet().mjava","pathOld":"/dev/null","sourceNew":"  public void testRealTimeGet() throws SolrServerException, IOException, KeeperException, InterruptedException {\n    // should be redirected to Replica.Type.NRT\n    int numReplicas = random().nextBoolean()?1:2;\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, numReplicas, 0, numReplicas)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Unexpected replica count\", collectionName, activeReplicaCount(numReplicas, 0, numReplicas));\n    DocCollection docCollection = assertNumberOfReplicas(numReplicas, 0, numReplicas, false, true);\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    int id = 0;\n    Slice slice = docCollection.getSlice(\"shard1\");\n    List<String> ids = new ArrayList<>(slice.getReplicas().size());\n    for (Replica rAdd:slice.getReplicas()) {\n      try (HttpSolrClient client = getHttpSolrClient(rAdd.getCoreUrl(), httpClient)) {\n        client.add(new SolrInputDocument(\"id\", String.valueOf(id), \"foo_s\", \"bar\"));\n      }\n      SolrDocument docCloudClient = cluster.getSolrClient().getById(collectionName, String.valueOf(id));\n      assertEquals(\"bar\", docCloudClient.getFieldValue(\"foo_s\"));\n      for (Replica rGet:slice.getReplicas()) {\n        try (HttpSolrClient client = getHttpSolrClient(rGet.getCoreUrl(), httpClient)) {\n          SolrDocument doc = client.getById(String.valueOf(id));\n          assertEquals(\"bar\", doc.getFieldValue(\"foo_s\"));\n        }\n      }\n      ids.add(String.valueOf(id));\n      id++;\n    }\n    SolrDocumentList previousAllIdsResult = null;\n    for (Replica rAdd:slice.getReplicas()) {\n      try (HttpSolrClient client = getHttpSolrClient(rAdd.getCoreUrl(), httpClient)) {\n        SolrDocumentList allIdsResult = client.getById(ids);\n        if (previousAllIdsResult != null) {\n          assertTrue(compareSolrDocumentList(previousAllIdsResult, allIdsResult));\n        } else {\n          // set the first response here\n          previousAllIdsResult = allIdsResult;\n          assertEquals(\"Unexpected number of documents\", ids.size(), allIdsResult.getNumFound());\n        }\n      }\n      id++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testRealTimeGet().mjava","pathOld":"/dev/null","sourceNew":"  public void testRealTimeGet() throws SolrServerException, IOException, KeeperException, InterruptedException {\n    // should be redirected to Replica.Type.NRT\n    int numReplicas = random().nextBoolean()?1:2;\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, numReplicas, 0, numReplicas)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Unexpected replica count\", collectionName, activeReplicaCount(numReplicas, 0, numReplicas));\n    DocCollection docCollection = assertNumberOfReplicas(numReplicas, 0, numReplicas, false, true);\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    int id = 0;\n    Slice slice = docCollection.getSlice(\"shard1\");\n    List<String> ids = new ArrayList<>(slice.getReplicas().size());\n    for (Replica rAdd:slice.getReplicas()) {\n      try (HttpSolrClient client = getHttpSolrClient(rAdd.getCoreUrl(), httpClient)) {\n        client.add(new SolrInputDocument(\"id\", String.valueOf(id), \"foo_s\", \"bar\"));\n      }\n      SolrDocument docCloudClient = cluster.getSolrClient().getById(collectionName, String.valueOf(id));\n      assertEquals(\"bar\", docCloudClient.getFieldValue(\"foo_s\"));\n      for (Replica rGet:slice.getReplicas()) {\n        try (HttpSolrClient client = getHttpSolrClient(rGet.getCoreUrl(), httpClient)) {\n          SolrDocument doc = client.getById(String.valueOf(id));\n          assertEquals(\"bar\", doc.getFieldValue(\"foo_s\"));\n        }\n      }\n      ids.add(String.valueOf(id));\n      id++;\n    }\n    SolrDocumentList previousAllIdsResult = null;\n    for (Replica rAdd:slice.getReplicas()) {\n      try (HttpSolrClient client = getHttpSolrClient(rAdd.getCoreUrl(), httpClient)) {\n        SolrDocumentList allIdsResult = client.getById(ids);\n        if (previousAllIdsResult != null) {\n          assertTrue(compareSolrDocumentList(previousAllIdsResult, allIdsResult));\n        } else {\n          // set the first response here\n          previousAllIdsResult = allIdsResult;\n          assertEquals(\"Unexpected number of documents\", ids.size(), allIdsResult.getNumFound());\n        }\n      }\n      id++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testRealTimeGet().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testRealTimeGet().mjava","sourceNew":"  public void testRealTimeGet() throws SolrServerException, IOException, KeeperException, InterruptedException {\n    // should be redirected to Replica.Type.NRT\n    int numReplicas = random().nextBoolean()?1:2;\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, numReplicas, 0, numReplicas)\n      .process(cluster.getSolrClient());\n    waitForState(\"Unexpected replica count\", collectionName, activeReplicaCount(numReplicas, 0, numReplicas));\n    DocCollection docCollection = assertNumberOfReplicas(numReplicas, 0, numReplicas, false, true);\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    int id = 0;\n    Slice slice = docCollection.getSlice(\"shard1\");\n    List<String> ids = new ArrayList<>(slice.getReplicas().size());\n    for (Replica rAdd:slice.getReplicas()) {\n      try (HttpSolrClient client = getHttpSolrClient(rAdd.getCoreUrl(), httpClient)) {\n        client.add(new SolrInputDocument(\"id\", String.valueOf(id), \"foo_s\", \"bar\"));\n      }\n      SolrDocument docCloudClient = cluster.getSolrClient().getById(collectionName, String.valueOf(id));\n      assertEquals(\"bar\", docCloudClient.getFieldValue(\"foo_s\"));\n      for (Replica rGet:slice.getReplicas()) {\n        try (HttpSolrClient client = getHttpSolrClient(rGet.getCoreUrl(), httpClient)) {\n          SolrDocument doc = client.getById(String.valueOf(id));\n          assertEquals(\"bar\", doc.getFieldValue(\"foo_s\"));\n        }\n      }\n      ids.add(String.valueOf(id));\n      id++;\n    }\n    SolrDocumentList previousAllIdsResult = null;\n    for (Replica rAdd:slice.getReplicas()) {\n      try (HttpSolrClient client = getHttpSolrClient(rAdd.getCoreUrl(), httpClient)) {\n        SolrDocumentList allIdsResult = client.getById(ids);\n        if (previousAllIdsResult != null) {\n          assertTrue(compareSolrDocumentList(previousAllIdsResult, allIdsResult));\n        } else {\n          // set the first response here\n          previousAllIdsResult = allIdsResult;\n          assertEquals(\"Unexpected number of documents\", ids.size(), allIdsResult.getNumFound());\n        }\n      }\n      id++;\n    }\n  }\n\n","sourceOld":"  public void testRealTimeGet() throws SolrServerException, IOException, KeeperException, InterruptedException {\n    // should be redirected to Replica.Type.NRT\n    int numReplicas = random().nextBoolean()?1:2;\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, numReplicas, 0, numReplicas)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n    waitForState(\"Unexpected replica count\", collectionName, activeReplicaCount(numReplicas, 0, numReplicas));\n    DocCollection docCollection = assertNumberOfReplicas(numReplicas, 0, numReplicas, false, true);\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    int id = 0;\n    Slice slice = docCollection.getSlice(\"shard1\");\n    List<String> ids = new ArrayList<>(slice.getReplicas().size());\n    for (Replica rAdd:slice.getReplicas()) {\n      try (HttpSolrClient client = getHttpSolrClient(rAdd.getCoreUrl(), httpClient)) {\n        client.add(new SolrInputDocument(\"id\", String.valueOf(id), \"foo_s\", \"bar\"));\n      }\n      SolrDocument docCloudClient = cluster.getSolrClient().getById(collectionName, String.valueOf(id));\n      assertEquals(\"bar\", docCloudClient.getFieldValue(\"foo_s\"));\n      for (Replica rGet:slice.getReplicas()) {\n        try (HttpSolrClient client = getHttpSolrClient(rGet.getCoreUrl(), httpClient)) {\n          SolrDocument doc = client.getById(String.valueOf(id));\n          assertEquals(\"bar\", doc.getFieldValue(\"foo_s\"));\n        }\n      }\n      ids.add(String.valueOf(id));\n      id++;\n    }\n    SolrDocumentList previousAllIdsResult = null;\n    for (Replica rAdd:slice.getReplicas()) {\n      try (HttpSolrClient client = getHttpSolrClient(rAdd.getCoreUrl(), httpClient)) {\n        SolrDocumentList allIdsResult = client.getById(ids);\n        if (previousAllIdsResult != null) {\n          assertTrue(compareSolrDocumentList(previousAllIdsResult, allIdsResult));\n        } else {\n          // set the first response here\n          previousAllIdsResult = allIdsResult;\n          assertEquals(\"Unexpected number of documents\", ids.size(), allIdsResult.getNumFound());\n        }\n      }\n      id++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}