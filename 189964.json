{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrClient aClient = createNewSolrClient(\"\", baseUrl);\n      res.setResponse(aClient.request(request));\n      aClient.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      res.setResponse(aClient.request(request));\n      aClient.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrClient aClient = createNewSolrClient(\"\", baseUrl);\n      res.setResponse(aClient.request(request));\n      aClient.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  @Override\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, String configSetName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    params.set(\"collection.configName\", configSetName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":"  @Override\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, String configSetName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    params.set(\"collection.configName\", configSetName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","sourceNew":null,"sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"197bbedf08450ade98a11f4a0001448059666bec":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","197bbedf08450ade98a11f4a0001448059666bec"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}