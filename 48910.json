{"path":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommened to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommened to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommened to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","sourceNew":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommened to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","sourceNew":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommened to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","sourceNew":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommened to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T-extends-Comparable[#-super-T]]_insertionSort(T[]).mjava","sourceNew":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array in natural order. This method uses the insertion sort\n   * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!\n   */\n  public static <T extends Comparable<? super T>> void insertionSort(T[] a) {\n    insertionSort(a, 0, a.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","c7235f072992928845d8cfd2dfc1c90362360e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7235f072992928845d8cfd2dfc1c90362360e1e":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c7235f072992928845d8cfd2dfc1c90362360e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["c7235f072992928845d8cfd2dfc1c90362360e1e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}