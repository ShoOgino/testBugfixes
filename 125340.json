{"path":"backwards/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","pathOld":"/dev/null","sourceNew":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","sourceNew":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","sourceOld":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","sourceNew":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","sourceOld":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}