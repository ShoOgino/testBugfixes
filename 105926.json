{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveDeadNodes().mjava","commits":[{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveDeadNodes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove all replica information related to dead nodes.\n   */\n  public void simRemoveDeadNodes() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> myNodes = new HashSet<>(nodeReplicaMap.keySet());\n      myNodes.removeAll(liveNodes.get());\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveDeadNodes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove all replica information related to dead nodes.\n   */\n  public void simRemoveDeadNodes() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> myNodes = new HashSet<>(nodeReplicaMap.keySet());\n      myNodes.removeAll(liveNodes.get());\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveDeadNodes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove all replica information related to dead nodes.\n   */\n  public void simRemoveDeadNodes() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> myNodes = new HashSet<>(nodeReplicaMap.keySet());\n      myNodes.removeAll(liveNodes.get());\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveDeadNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveDeadNodes().mjava","sourceNew":"  /**\n   * Remove all replica information related to dead nodes.\n   */\n  public void simRemoveDeadNodes() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> myNodes = new HashSet<>(nodeReplicaMap.keySet());\n      myNodes.removeAll(liveNodes.get());\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove all replica information related to dead nodes.\n   */\n  public void simRemoveDeadNodes() throws Exception {\n    lock.lockInterruptibly();\n    try {\n      Set<String> myNodes = new HashSet<>(nodeReplicaMap.keySet());\n      myNodes.removeAll(liveNodes.get());\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["b70042a8a492f7054d480ccdd2be9796510d4327","9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}