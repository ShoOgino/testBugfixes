{"path":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76c5c188431927c412f7c71546c5cfcccdc327f8","date":1333289294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        BytesRef payload = new BytesRef(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f4ad0129ad3f60268f3df42c238366082da936","date":1341666620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        BytesRef payload = new BytesRef(\"This is a test!\");\n        assertEquals(\"Wrong payload length.\", \"This is a test!\".length(), payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        BytesRef payload = new BytesRef(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        BytesRef payload = new BytesRef(\"This is a test!\");\n        assertEquals(\"Wrong payload length.\", \"This is a test!\".length(), payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        BytesRef payload = new BytesRef(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        BytesRef payload = new BytesRef(\"This is a test!\");\n        assertEquals(\"Wrong payload length.\", \"This is a test!\".length(), payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        BytesRef payload = new BytesRef(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        BytesRef payload = new BytesRef(\"This is a test!\");\n        assertEquals(\"Wrong payload length.\", \"This is a test!\".length(), payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        BytesRef payload = new BytesRef(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"  // Simple tests to test the Payload class\n  public void testPayload() throws Exception {\n    BytesRef payload = new BytesRef(\"This is a test!\");\n    assertEquals(\"Wrong payload length.\", \"This is a test!\".length(), payload.length);\n        \n    BytesRef clone = payload.clone();\n    assertEquals(payload.length, clone.length);\n    for (int i = 0; i < payload.length; i++) {\n      assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n    }\n        \n  }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        BytesRef payload = new BytesRef(\"This is a test!\");\n        assertEquals(\"Wrong payload length.\", \"This is a test!\".length(), payload.length);\n        \n        BytesRef clone = payload.clone();\n        assertEquals(payload.length, clone.length);\n        for (int i = 0; i < payload.length; i++) {\n          assertEquals(payload.bytes[i + payload.offset], clone.bytes[i + clone.offset]);\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76c5c188431927c412f7c71546c5cfcccdc327f8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68f4ad0129ad3f60268f3df42c238366082da936":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["76c5c188431927c412f7c71546c5cfcccdc327f8"],"2acf500f78aa12b92e371fd89c719291986b6b90":["76fa9933adb0556e752e8af9734c4d0ae14622ff","68f4ad0129ad3f60268f3df42c238366082da936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"76c5c188431927c412f7c71546c5cfcccdc327f8":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76c5c188431927c412f7c71546c5cfcccdc327f8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"68f4ad0129ad3f60268f3df42c238366082da936":["2acf500f78aa12b92e371fd89c719291986b6b90"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["fe33227f6805edab2036cbb80645cc4e2d1fa424","68f4ad0129ad3f60268f3df42c238366082da936","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}