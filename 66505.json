{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedField(int,IndexInput,FieldInfos).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedField(int,IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedField(int,IndexInput,FieldInfos).mjava","sourceNew":"  private void readSortedField(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n    \n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(fieldNumber, n);\n  }\n\n","sourceOld":"  private void readSortedField(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n    \n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(fieldNumber, n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedField(int,IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedField(int,IndexInput,FieldInfos).mjava","sourceNew":"  private void readSortedField(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n    \n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(fieldNumber, n);\n  }\n\n","sourceOld":"  private void readSortedField(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n    \n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(fieldNumber, n);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedField(FieldInfo,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedField(int,IndexInput,FieldInfos).mjava","sourceNew":"  private void readSortedField(FieldInfo info, IndexInput meta) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n    \n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(info.name, n);\n  }\n\n","sourceOld":"  private void readSortedField(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sorted = binary + numeric\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n    \n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n = readNumericEntry(meta);\n    ords.put(fieldNumber, n);\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}