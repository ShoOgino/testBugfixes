{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","commits":[{"id":"56584ae6fa4912e4dd6e818a7da3799cf807234f","date":1339586560,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","pathOld":"/dev/null","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abe5a5b55ce06226629251ec4c197c1d08c70b18","date":1341826007,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22659e4b60cbbd3c13216360578240ddeca2d8b4","date":1341827398,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","sourceNew":null,"sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04e7f30683f53928b2fce016e6430c9795caff22":["56584ae6fa4912e4dd6e818a7da3799cf807234f","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"abe5a5b55ce06226629251ec4c197c1d08c70b18":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["56584ae6fa4912e4dd6e818a7da3799cf807234f","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22659e4b60cbbd3c13216360578240ddeca2d8b4":["56584ae6fa4912e4dd6e818a7da3799cf807234f","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abe5a5b55ce06226629251ec4c197c1d08c70b18"]},"commit2Childs":{"04e7f30683f53928b2fce016e6430c9795caff22":[],"abe5a5b55ce06226629251ec4c197c1d08c70b18":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"22659e4b60cbbd3c13216360578240ddeca2d8b4":[],"56584ae6fa4912e4dd6e818a7da3799cf807234f":["04e7f30683f53928b2fce016e6430c9795caff22","abe5a5b55ce06226629251ec4c197c1d08c70b18","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}