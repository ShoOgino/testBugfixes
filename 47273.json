{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursiveLight(LightAutomaton,int).mjava","commits":[{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursiveLight(LightAutomaton,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursiveLight(LightAutomaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (!getFiniteStringsLight(a, 0, new HashSet<Integer>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursive(Automaton,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getFiniteStringsRecursiveLight(LightAutomaton,int).mjava","sourceNew":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursive(Automaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (!getFiniteStrings(a, 0, new HashSet<Integer>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","sourceOld":"  /**\n   * Simple, original implementation of getFiniteStrings.\n   *\n   * <p>Returns the set of accepted strings, assuming that at most\n   * <code>limit</code> strings are accepted. If more than <code>limit</code> \n   * strings are accepted, the first limit strings found are returned. If <code>limit</code>&lt;0, then \n   * the limit is infinite.\n   *\n   * <p>This implementation is recursive: it uses one stack\n   * frame for each digit in the returned strings (ie, max\n   * is the max length returned string).\n   */\n  public static Set<IntsRef> getFiniteStringsRecursiveLight(LightAutomaton a, int limit) {\n    HashSet<IntsRef> strings = new HashSet<>();\n    if (!getFiniteStringsLight(a, 0, new HashSet<Integer>(), strings, new IntsRef(), limit)) {\n      return strings;\n    }\n    return strings;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2de8b489026711e8edde133418a7cacfd2ce4d3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}