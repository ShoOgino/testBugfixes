{"path":"solr/core/src/java/org/apache/solr/legacy/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private int lastDocID = -1;\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      private double getDocValue(NumericDocValues values, int doc) throws IOException {\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        // make sure it has minX and area\n        double x = getDocValue(ptX, doc);\n        if (ptX.docID() == doc) {\n          double y = getDocValue(ptY, doc);\n          assert ptY.docID() == doc;\n          return calculator.distance(from, x, y) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private int lastDocID = -1;\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      private double getDocValue(NumericDocValues values, int doc) throws IOException {\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        // make sure it has minX and area\n        double x = getDocValue(ptX, doc);\n        if (ptX.docID() == doc) {\n          double y = getDocValue(ptY, doc);\n          assert ptY.docID() == doc;\n          return calculator.distance(from, x, y) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private int lastDocID = -1;\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      private double getDocValue(NumericDocValues values, int doc) throws IOException {\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        // make sure it has minX and area\n        double x = getDocValue(ptX, doc);\n        if (ptX.docID() == doc) {\n          double y = getDocValue(ptY, doc);\n          assert ptY.docID() == doc;\n          return calculator.distance(from, x, y) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/legacy/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private int lastDocID = -1;\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      private double getDocValue(NumericDocValues values, int doc) throws IOException {\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        // make sure it has minX and area\n        double x = getDocValue(ptX, doc);\n        if (ptX.docID() == doc) {\n          double y = getDocValue(ptY, doc);\n          assert ptY.docID() == doc;\n          return calculator.distance(from, x, y) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/legacy/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private int lastDocID = -1;\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      private double getDocValue(NumericDocValues values, int doc) throws IOException {\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        // make sure it has minX and area\n        double x = getDocValue(ptX, doc);\n        if (ptX.docID() == doc) {\n          double y = getDocValue(ptY, doc);\n          assert ptY.docID() == doc;\n          return calculator.distance(from, x, y) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/legacy/DistanceValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the FunctionValues used by the function query.\n   */\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    LeafReader reader = readerContext.reader();\n\n    final NumericDocValues ptX = DocValues.getNumeric(reader, strategy.getFieldNameX());\n    final NumericDocValues ptY = DocValues.getNumeric(reader, strategy.getFieldNameY());\n\n    return new FunctionValues() {\n\n      private int lastDocID = -1;\n\n      private final Point from = DistanceValueSource.this.from;\n      private final DistanceCalculator calculator = strategy.getSpatialContext().getDistCalc();\n      private final double nullValue =\n          (strategy.getSpatialContext().isGeo() ? 180 * multiplier : Double.MAX_VALUE);\n\n      private double getDocValue(NumericDocValues values, int doc) throws IOException {\n        int curDocID = values.docID();\n        if (doc > curDocID) {\n          curDocID = values.advance(doc);\n        }\n        if (doc == curDocID) {\n          return Double.longBitsToDouble(values.longValue());\n        } else {\n          return 0.0;\n        }\n      }\n\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (float) doubleVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) throws IOException {\n        // make sure it has minX and area\n        double x = getDocValue(ptX, doc);\n        if (ptX.docID() == doc) {\n          double y = getDocValue(ptY, doc);\n          assert ptY.docID() == doc;\n          return calculator.distance(from, x, y) * multiplier;\n        }\n        return nullValue;\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        return description() + \"=\" + floatVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["a178ac3dec643551e66363c457a9074f55545f86"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["32b9119890a8e82252b6cc341ac491d18fa1e49b","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}