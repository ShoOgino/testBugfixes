{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937d1992553892661e4efbb659656cc565a9e621","date":1330719427,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWilcards().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testWilcards() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    rf = new ReturnFields( req(\"fl\", \" * \") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaxxx\" ) );\n    assertFalse(rf.wantsField(\"xxxaaa\"));\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse(rf.wantsField(\"bbbxxx\"));\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","937d1992553892661e4efbb659656cc565a9e621"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"937d1992553892661e4efbb659656cc565a9e621":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937d1992553892661e4efbb659656cc565a9e621"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","937d1992553892661e4efbb659656cc565a9e621"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"937d1992553892661e4efbb659656cc565a9e621":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}