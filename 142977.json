{"path":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapMangled(String,NamedList).mjava","commits":[{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapMangled(String,NamedList).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeNamedListAsMapMangled(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * Map null to \"\" and name mangle any repeated keys to avoid repeats in the\n   * output.\n   */\n  protected void writeNamedListAsMapMangled(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    // In JSON objects (maps) we can't have null keys or duplicates...\n    // map null to \"\" and append a qualifier to duplicates.\n    //\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\n    // Disad: this is ambiguous since a real key could be called a__1\n    //\n    // Another possible mapping could aggregate multiple keys to an array:\n    // a=123,a=456 maps to a=[123,456]\n    // Disad: this is ambiguous with a real single value that happens to be an array\n    //\n    // Both of these mappings have ambiguities.\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\n\n    boolean first=true;\n    for (int i=0; i<sz; i++) {\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n\n      if (first) {\n        first=false;\n        repeats.put(key,0);\n      } else {\n        writeMapSeparator();\n\n        Integer repeatCount = repeats.get(key);\n        if (repeatCount==null) {\n          repeats.put(key,0);\n        } else {\n          String newKey = key;\n          int newCount = repeatCount;\n          do {  // avoid generated key clashing with a real key\n            newKey = key + ' ' + (++newCount);\n            repeatCount = repeats.get(newKey);\n          } while (repeatCount != null);\n\n          repeats.put(key,newCount);\n          key = newKey;\n        }\n      }\n\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * Map null to \"\" and name mangle any repeated keys to avoid repeats in the\n   * output.\n   */\n  protected void writeNamedListAsMapMangled(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    // In JSON objects (maps) we can't have null keys or duplicates...\n    // map null to \"\" and append a qualifier to duplicates.\n    //\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\n    // Disad: this is ambiguous since a real key could be called a__1\n    //\n    // Another possible mapping could aggregate multiple keys to an array:\n    // a=123,a=456 maps to a=[123,456]\n    // Disad: this is ambiguous with a real single value that happens to be an array\n    //\n    // Both of these mappings have ambiguities.\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\n\n    boolean first=true;\n    for (int i=0; i<sz; i++) {\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n\n      if (first) {\n        first=false;\n        repeats.put(key,0);\n      } else {\n        writeMapSeparator();\n\n        Integer repeatCount = repeats.get(key);\n        if (repeatCount==null) {\n          repeats.put(key,0);\n        } else {\n          String newKey = key;\n          int newCount = repeatCount;\n          do {  // avoid generated key clashing with a real key\n            newKey = key + ' ' + (++newCount);\n            repeatCount = repeats.get(newKey);\n          } while (repeatCount != null);\n\n          repeats.put(key,newCount);\n          key = newKey;\n        }\n      }\n\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapMangled(String,NamedList).mjava","pathOld":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapMangled(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * Map null to \"\" and name mangle any repeated keys to avoid repeats in the\n   * output.\n   */\n  protected void writeNamedListAsMapMangled(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    // In JSON objects (maps) we can't have null keys or duplicates...\n    // map null to \"\" and append a qualifier to duplicates.\n    //\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\n    // Disad: this is ambiguous since a real key could be called a__1\n    //\n    // Another possible mapping could aggregate multiple keys to an array:\n    // a=123,a=456 maps to a=[123,456]\n    // Disad: this is ambiguous with a real single value that happens to be an array\n    //\n    // Both of these mappings have ambiguities.\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\n\n    boolean first=true;\n    for (int i=0; i<sz; i++) {\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n\n      if (first) {\n        first=false;\n        repeats.put(key,0);\n      } else {\n        writeMapSeparator();\n\n        Integer repeatCount = repeats.get(key);\n        if (repeatCount==null) {\n          repeats.put(key,0);\n        } else {\n          String newKey = key;\n          int newCount = repeatCount;\n          do {  // avoid generated key clashing with a real key\n            newKey = key + ' ' + (++newCount);\n            repeatCount = repeats.get(newKey);\n          } while (repeatCount != null);\n\n          repeats.put(key,newCount);\n          key = newKey;\n        }\n      }\n\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * Map null to \"\" and name mangle any repeated keys to avoid repeats in the\n   * output.\n   */\n  protected void writeNamedListAsMapMangled(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    // In JSON objects (maps) we can't have null keys or duplicates...\n    // map null to \"\" and append a qualifier to duplicates.\n    //\n    // a=123,a=456 will be mapped to {a=1,a__1=456}\n    // Disad: this is ambiguous since a real key could be called a__1\n    //\n    // Another possible mapping could aggregate multiple keys to an array:\n    // a=123,a=456 maps to a=[123,456]\n    // Disad: this is ambiguous with a real single value that happens to be an array\n    //\n    // Both of these mappings have ambiguities.\n    HashMap<String,Integer> repeats = new HashMap<String,Integer>(4);\n\n    boolean first=true;\n    for (int i=0; i<sz; i++) {\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n\n      if (first) {\n        first=false;\n        repeats.put(key,0);\n      } else {\n        writeMapSeparator();\n\n        Integer repeatCount = repeats.get(key);\n        if (repeatCount==null) {\n          repeats.put(key,0);\n        } else {\n          String newKey = key;\n          int newCount = repeatCount;\n          do {  // avoid generated key clashing with a real key\n            newKey = key + ' ' + (++newCount);\n            repeatCount = repeats.get(newKey);\n          } while (repeatCount != null);\n\n          repeats.put(key,newCount);\n          key = newKey;\n        }\n      }\n\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}