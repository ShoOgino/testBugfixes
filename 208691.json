{"path":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testNextValidUTF16String().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testNextValidUTF16String().mjava","pathOld":"/dev/null","sourceNew":"  public void testNextValidUTF16String() {\n    // valid UTF-16\n    assertEquals(\"dogs\", UnicodeUtil.nextValidUTF16String(\"dogs\"));\n    assertEquals(\"dogs\\uD802\\uDC02\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD802\\uDC02\"));\n    \n    // an illegal combination, where we have not yet enumerated into the supp\n    // plane so we increment to H + \\uDC00 (the lowest possible trail surrogate)\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\"));\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801b\"));\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\\uD800\"));\n    \n    // an illegal combination where we have already enumerated the trail\n    // we must increment the lead and start the trail back at the beginning.\n    assertEquals(\"dogs\\uD802\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\\uE001\"));\n    \n    // an illegal combination where we have exhausted the supp plane\n    // we must now move to the lower bmp.\n    assertEquals(\"dogs\\uE000\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uDBFF\\uE001\"));\n\n    // an unpaired trail surrogate. this is invalid when not preceded by a lead\n    // surrogate. in this case we have to bump to \\uE000 (the lowest possible\n    // \"upper BMP\")\n    assertEquals(\"dogs\\uE000\", UnicodeUtil.nextValidUTF16String(\"dogs\\uDC00\"));\n    assertEquals(\"\\uE000\", UnicodeUtil.nextValidUTF16String(\"\\uDC00dogs\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testNextValidUTF16String().mjava","sourceNew":null,"sourceOld":"  public void testNextValidUTF16String() {\n    // valid UTF-16\n    assertEquals(\"dogs\", UnicodeUtil.nextValidUTF16String(\"dogs\"));\n    assertEquals(\"dogs\\uD802\\uDC02\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD802\\uDC02\"));\n    \n    // an illegal combination, where we have not yet enumerated into the supp\n    // plane so we increment to H + \\uDC00 (the lowest possible trail surrogate)\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\"));\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801b\"));\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\\uD800\"));\n    \n    // an illegal combination where we have already enumerated the trail\n    // we must increment the lead and start the trail back at the beginning.\n    assertEquals(\"dogs\\uD802\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\\uE001\"));\n    \n    // an illegal combination where we have exhausted the supp plane\n    // we must now move to the lower bmp.\n    assertEquals(\"dogs\\uE000\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uDBFF\\uE001\"));\n\n    // an unpaired trail surrogate. this is invalid when not preceded by a lead\n    // surrogate. in this case we have to bump to \\uE000 (the lowest possible\n    // \"upper BMP\")\n    assertEquals(\"dogs\\uE000\", UnicodeUtil.nextValidUTF16String(\"dogs\\uDC00\"));\n    assertEquals(\"\\uE000\", UnicodeUtil.nextValidUTF16String(\"\\uDC00dogs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testNextValidUTF16String().mjava","sourceNew":null,"sourceOld":"  public void testNextValidUTF16String() {\n    // valid UTF-16\n    assertEquals(\"dogs\", UnicodeUtil.nextValidUTF16String(\"dogs\"));\n    assertEquals(\"dogs\\uD802\\uDC02\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD802\\uDC02\"));\n    \n    // an illegal combination, where we have not yet enumerated into the supp\n    // plane so we increment to H + \\uDC00 (the lowest possible trail surrogate)\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\"));\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801b\"));\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\\uD800\"));\n    \n    // an illegal combination where we have already enumerated the trail\n    // we must increment the lead and start the trail back at the beginning.\n    assertEquals(\"dogs\\uD802\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\\uE001\"));\n    \n    // an illegal combination where we have exhausted the supp plane\n    // we must now move to the lower bmp.\n    assertEquals(\"dogs\\uE000\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uDBFF\\uE001\"));\n\n    // an unpaired trail surrogate. this is invalid when not preceded by a lead\n    // surrogate. in this case we have to bump to \\uE000 (the lowest possible\n    // \"upper BMP\")\n    assertEquals(\"dogs\\uE000\", UnicodeUtil.nextValidUTF16String(\"dogs\\uDC00\"));\n    assertEquals(\"\\uE000\", UnicodeUtil.nextValidUTF16String(\"\\uDC00dogs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testNextValidUTF16String().mjava","sourceNew":null,"sourceOld":"  public void testNextValidUTF16String() {\n    // valid UTF-16\n    assertEquals(\"dogs\", UnicodeUtil.nextValidUTF16String(\"dogs\"));\n    assertEquals(\"dogs\\uD802\\uDC02\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD802\\uDC02\"));\n    \n    // an illegal combination, where we have not yet enumerated into the supp\n    // plane so we increment to H + \\uDC00 (the lowest possible trail surrogate)\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\"));\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801b\"));\n    assertEquals(\"dogs\\uD801\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\\uD800\"));\n    \n    // an illegal combination where we have already enumerated the trail\n    // we must increment the lead and start the trail back at the beginning.\n    assertEquals(\"dogs\\uD802\\uDC00\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uD801\\uE001\"));\n    \n    // an illegal combination where we have exhausted the supp plane\n    // we must now move to the lower bmp.\n    assertEquals(\"dogs\\uE000\", UnicodeUtil\n        .nextValidUTF16String(\"dogs\\uDBFF\\uE001\"));\n\n    // an unpaired trail surrogate. this is invalid when not preceded by a lead\n    // surrogate. in this case we have to bump to \\uE000 (the lowest possible\n    // \"upper BMP\")\n    assertEquals(\"dogs\\uE000\", UnicodeUtil.nextValidUTF16String(\"dogs\\uDC00\"));\n    assertEquals(\"\\uE000\", UnicodeUtil.nextValidUTF16String(\"\\uDC00dogs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}