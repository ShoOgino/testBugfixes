{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    try {\n                                      values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                    } catch (IOException ioe) {\n                                      throw new RuntimeException(ioe);\n                                    }\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger;\n                              try {\n                                docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                              } catch (IOException ioe) {\n                                throw new RuntimeException(ioe);\n                              }\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    try {\n                                      values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                    } catch (IOException ioe) {\n                                      throw new RuntimeException(ioe);\n                                    }\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger;\n                              try {\n                                docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                              } catch (IOException ioe) {\n                                throw new RuntimeException(ioe);\n                              }\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    try {\n                                      values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                    } catch (IOException ioe) {\n                                      throw new RuntimeException(ioe);\n                                    }\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger;\n                              try {\n                                docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                              } catch (IOException ioe) {\n                                throw new RuntimeException(ioe);\n                              }\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653128722fb3b4713ac331c621491a93f34a4a22","date":1479841816,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e7e4423e7d831cd160f8300224431f499947de","date":1588858081,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedNumericField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric();\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","sourceOld":"  /**\n   * Merges the sorted docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedNumericField}, passing\n   * iterables that filter deleted documents.\n   */\n  public void mergeSortedNumericField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n    \n    addSortedNumericField(mergeFieldInfo,\n                          new EmptyDocValuesProducer() {\n                            @Override\n                            public SortedNumericDocValues getSortedNumeric(FieldInfo fieldInfo) throws IOException {\n                              if (fieldInfo != mergeFieldInfo) {\n                                throw new IllegalArgumentException(\"wrong FieldInfo\");\n                              }\n                              \n                              // We must make new iterators + DocIDMerger for each iterator:\n                              List<SortedNumericDocValuesSub> subs = new ArrayList<>();\n                              long cost = 0;\n                              for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                                DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                                SortedNumericDocValues values = null;\n                                if (docValuesProducer != null) {\n                                  FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                                  if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_NUMERIC) {\n                                    values = docValuesProducer.getSortedNumeric(readerFieldInfo);\n                                  }\n                                }\n                                if (values == null) {\n                                  values = DocValues.emptySortedNumeric(mergeState.maxDocs[i]);\n                                }\n                                cost += values.cost();\n                                subs.add(new SortedNumericDocValuesSub(mergeState.docMaps[i], values));\n                              }\n\n                              final long finalCost = cost;\n\n                              final DocIDMerger<SortedNumericDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n\n                              return new SortedNumericDocValues() {\n\n                                private int docID = -1;\n                                private SortedNumericDocValuesSub currentSub;\n\n                                @Override\n                                public int docID() {\n                                  return docID;\n                                }\n                                \n                                @Override\n                                public int nextDoc() throws IOException {\n                                  currentSub = docIDMerger.next();\n                                  if (currentSub == null) {\n                                    docID = NO_MORE_DOCS;\n                                  } else {\n                                    docID = currentSub.mappedDocID;\n                                  }\n\n                                  return docID;\n                                }\n\n                                @Override\n                                public int advance(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public boolean advanceExact(int target) throws IOException {\n                                  throw new UnsupportedOperationException();\n                                }\n\n                                @Override\n                                public int docValueCount() {\n                                  return currentSub.values.docValueCount();\n                                }\n\n                                @Override\n                                public long cost() {\n                                  return finalCost;\n                                }\n\n                                @Override\n                                public long nextValue() throws IOException {\n                                  return currentSub.values.nextValue();\n                                }\n                              };\n                            }\n                          });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["653128722fb3b4713ac331c621491a93f34a4a22"],"69e7e4423e7d831cd160f8300224431f499947de":["d85b6e22926e7564c040d2a864f4887f6c59fa92"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["727bb765ff2542275f6d31f67be18d7104bae148","d85b6e22926e7564c040d2a864f4887f6c59fa92"],"727bb765ff2542275f6d31f67be18d7104bae148":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","653128722fb3b4713ac331c621491a93f34a4a22"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"653128722fb3b4713ac331c621491a93f34a4a22":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["23e44daeaa8b89694d10df5999956c8e14a7dd09","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e7e4423e7d831cd160f8300224431f499947de"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["69e7e4423e7d831cd160f8300224431f499947de","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"69e7e4423e7d831cd160f8300224431f499947de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"727bb765ff2542275f6d31f67be18d7104bae148":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["727bb765ff2542275f6d31f67be18d7104bae148"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"653128722fb3b4713ac331c621491a93f34a4a22":["d85b6e22926e7564c040d2a864f4887f6c59fa92","727bb765ff2542275f6d31f67be18d7104bae148"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","653128722fb3b4713ac331c621491a93f34a4a22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}