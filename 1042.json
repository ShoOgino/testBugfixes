{"path":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,boolean).mjava","commits":[{"id":"3ee70799f6a87a250e98ce10a7bc3e28d41eac23","date":1242826192,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,boolean).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void checkCluster(NamedList cluster, boolean hasSubclusters) {\n\t\tNamedList docs = (NamedList) cluster.get(\"docs\");\n\t\tassertNotNull(\"docs is null and it shouldn't be\", docs);\n\t\tfor (int j = 0; j < docs.size(); j++) {\n\t\t\tString id = (String) docs.getVal(j);\n\t\t\tassertNotNull(\"id is null and it shouldn't be\", id);\n\t\t}\n\n\t\tNamedList labels = (NamedList) cluster.get(\"labels\");\n\t\tassertNotNull(\"labels is null but it shouldn't be\", labels);\n\n\t\tif (hasSubclusters) {\n\t\t\tNamedList subclusters = (NamedList) cluster.get(\"clusters\");\n\t\t\tassertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,boolean).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,boolean).mjava","sourceNew":"\tprivate void checkCluster(NamedList cluster, boolean hasSubclusters) {\n\t\tList docs = (List)cluster.get(\"docs\");\n\t\tassertNotNull(\"docs is null and it shouldn't be\", docs);\n\t\tfor (int j = 0; j < docs.size(); j++) {\n\t\t\tString id = (String) docs.get(j);\n\t\t\tassertNotNull(\"id is null and it shouldn't be\", id);\n\t\t}\n\n\t\tList labels = (List) cluster.get(\"labels\");\n\t\tassertNotNull(\"labels is null but it shouldn't be\", labels);\n\n\t\tif (hasSubclusters) {\n\t\t\tList subclusters = (List) cluster.get(\"clusters\");\n\t\t\tassertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void checkCluster(NamedList cluster, boolean hasSubclusters) {\n\t\tNamedList docs = (NamedList) cluster.get(\"docs\");\n\t\tassertNotNull(\"docs is null and it shouldn't be\", docs);\n\t\tfor (int j = 0; j < docs.size(); j++) {\n\t\t\tString id = (String) docs.getVal(j);\n\t\t\tassertNotNull(\"id is null and it shouldn't be\", id);\n\t\t}\n\n\t\tNamedList labels = (NamedList) cluster.get(\"labels\");\n\t\tassertNotNull(\"labels is null but it shouldn't be\", labels);\n\n\t\tif (hasSubclusters) {\n\t\t\tNamedList subclusters = (NamedList) cluster.get(\"clusters\");\n\t\t\tassertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8","date":1246543717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,boolean).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,boolean).mjava","sourceNew":"  private void checkCluster(NamedList cluster, boolean hasSubclusters) {\n    List docs = (List) cluster.get(\"docs\");\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List labels = (List) cluster.get(\"labels\");\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","sourceOld":"\tprivate void checkCluster(NamedList cluster, boolean hasSubclusters) {\n\t\tList docs = (List)cluster.get(\"docs\");\n\t\tassertNotNull(\"docs is null and it shouldn't be\", docs);\n\t\tfor (int j = 0; j < docs.size(); j++) {\n\t\t\tString id = (String) docs.get(j);\n\t\t\tassertNotNull(\"id is null and it shouldn't be\", id);\n\t\t}\n\n\t\tList labels = (List) cluster.get(\"labels\");\n\t\tassertNotNull(\"labels is null but it shouldn't be\", labels);\n\n\t\tif (hasSubclusters) {\n\t\t\tList subclusters = (List) cluster.get(\"clusters\");\n\t\t\tassertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,boolean).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList,boolean).mjava","sourceNew":"  private void checkCluster(NamedList cluster, boolean hasSubclusters) {\n    List docs = (List) cluster.get(\"docs\");\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List labels = (List) cluster.get(\"labels\");\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","sourceOld":"  private void checkCluster(NamedList cluster, boolean hasSubclusters) {\n    List docs = (List) cluster.get(\"docs\");\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List labels = (List) cluster.get(\"labels\");\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List subclusters = (List) cluster.get(\"clusters\");\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}