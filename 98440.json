{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #MIN_BUFFER_SIZE_MB}. However if current heap allocation \n     * is insufficient for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      long max = rt.maxMemory();\n      long total = rt.totalMemory();\n      long free = rt.freeMemory();\n\n      // by free mem (attempting to not grow the heap for this)\n      long half = free/2;\n      if (half >= ABSOLUTE_MIN_SORT_BUFFER_SIZE) { \n        return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n      }\n      \n      // by max mem (heap will grow)\n      half = (max - total) / 2;\n      return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #MIN_BUFFER_SIZE_MB}. However if current heap allocation \n     * is insufficient for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      long max = rt.maxMemory();\n      long total = rt.totalMemory();\n      long free = rt.freeMemory();\n\n      // by free mem (attempting to not grow the heap for this)\n      long half = free/2;\n      if (half >= ABSOLUTE_MIN_SORT_BUFFER_SIZE) { \n        return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n      }\n      \n      // by max mem (heap will grow)\n      half = (max - total) / 2;\n      return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"448e3697f1d27a496bfdfa77169d70f63cedf945","date":1336585280,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min(Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #MIN_BUFFER_SIZE_MB}. However if current heap allocation \n     * is insufficient for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      long max = rt.maxMemory();\n      long total = rt.totalMemory();\n      long free = rt.freeMemory();\n\n      // by free mem (attempting to not grow the heap for this)\n      long half = free/2;\n      if (half >= ABSOLUTE_MIN_SORT_BUFFER_SIZE) { \n        return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n      }\n      \n      // by max mem (heap will grow)\n      half = (max - total) / 2;\n      return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n    }\n\n","bugFix":["88a13515f526b44e05ab4be039e01bd40272e9f0"],"bugIntro":["363c827acabcdf749ab543fe459e291e7acc1f1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"363c827acabcdf749ab543fe459e291e7acc1f1e","date":1337801906,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min(Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","bugFix":["448e3697f1d27a496bfdfa77169d70f63cedf945"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52dd493156fb4023d158d49e1ea92dbf3c20871","date":1337893063,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min(Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/Sort.BufferSize#automatic().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort.BufferSize#automatic().mjava","sourceNew":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","sourceOld":"    /** \n     * Approximately half of the currently available free heap, but no less\n     * than {@link #ABSOLUTE_MIN_SORT_BUFFER_SIZE}. However if current heap allocation \n     * is insufficient or if there is a large portion of unallocated heap-space available \n     * for sorting consult with max allowed heap size. \n     */\n    public static BufferSize automatic() {\n      Runtime rt = Runtime.getRuntime();\n      \n      // take sizes in \"conservative\" order\n      final long max = rt.maxMemory(); // max allocated\n      final long total = rt.totalMemory(); // currently allocated\n      final long free = rt.freeMemory(); // unused portion of currently allocated\n      final long totalAvailableBytes = max - total + free;\n      \n      // by free mem (attempting to not grow the heap for this)\n      long sortBufferByteSize = free/2;\n      final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\n      if (sortBufferByteSize <  minBufferSizeBytes\n          || totalAvailableBytes > 10 * minBufferSizeBytes) { // lets see if we need/should to grow the heap \n        if (totalAvailableBytes/2 > minBufferSizeBytes){ // there is enough mem for a reasonable buffer\n          sortBufferByteSize = totalAvailableBytes/2; // grow the heap\n        } else {\n          //heap seems smallish lets be conservative fall back to the free/2 \n          sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\n        }\n      }\n      return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"363c827acabcdf749ab543fe459e291e7acc1f1e":["448e3697f1d27a496bfdfa77169d70f63cedf945"],"448e3697f1d27a496bfdfa77169d70f63cedf945":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["363c827acabcdf749ab543fe459e291e7acc1f1e","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["363c827acabcdf749ab543fe459e291e7acc1f1e"],"b52dd493156fb4023d158d49e1ea92dbf3c20871":["448e3697f1d27a496bfdfa77169d70f63cedf945","363c827acabcdf749ab543fe459e291e7acc1f1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["448e3697f1d27a496bfdfa77169d70f63cedf945"],"363c827acabcdf749ab543fe459e291e7acc1f1e":["d4d69c535930b5cce125cff868d40f6373dc27d4","847d1294c8ff2f0172af20892ef98a1c6a952e09","b52dd493156fb4023d158d49e1ea92dbf3c20871"],"448e3697f1d27a496bfdfa77169d70f63cedf945":["363c827acabcdf749ab543fe459e291e7acc1f1e","b52dd493156fb4023d158d49e1ea92dbf3c20871"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b52dd493156fb4023d158d49e1ea92dbf3c20871":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b52dd493156fb4023d158d49e1ea92dbf3c20871","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}