{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","commits":[{"id":"5d1e9a21218cf0ffd81625a2f105dc388aa3097d","date":1476967652,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","date":1476974235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption(\"h\")) {\n        new HelpFormatter().printHelp(\"bin/solr utils [OPTIONS]\", getToolOptions(this));\n        return 1;\n      }\n      if (cli.hasOption(\"s\")) {\n        serverPath = Paths.get(cli.getOptionValue(\"s\"));\n      }\n      if (cli.hasOption(\"l\")) {\n        logsPath = Paths.get(cli.getOptionValue(\"l\"));\n      }\n      if (cli.hasOption(\"q\")) {\n        beQuiet = cli.hasOption(\"q\");\n      }\n      if (cli.hasOption(\"remove_old_solr_logs\")) {\n        if (removeOldSolrLogs(Integer.parseInt(cli.getOptionValue(\"remove_old_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"rotate_solr_logs\")) {\n        if (rotateSolrLogs(Integer.parseInt(cli.getOptionValue(\"rotate_solr_logs\"))) > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_gc_logs\")) {\n        if (archiveGcLogs() > 0) return 1;\n      }\n      if (cli.hasOption(\"archive_console_logs\")) {\n        if (archiveConsoleLogs() > 0) return 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d1e9a21218cf0ffd81625a2f105dc388aa3097d","c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}