{"path":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","commits":[{"id":"9e98927024757b7944e3ab5bf88134d5f7f30600","date":1097059223,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"/dev/null","sourceNew":"\tprivate void testTermVectors() throws Exception {\n\t\t// check:\n\t\tint numDocs = reader.numDocs();\n\t\tlong start = 0L;\n\t\tfor (int docId = 0; docId < numDocs; docId++) {\n\t\t\tstart = System.currentTimeMillis();\n\t\t\tTermFreqVector [] vectors = reader.getTermFreqVectors(docId);\n\t\t\ttimeElapsed += System.currentTimeMillis()-start;\n\t\t\t\n\t\t\t// verify vectors result\n\t\t\tverifyVectors(vectors, docId);\n\t\t\t\n\t\t\tstart = System.currentTimeMillis();\n\t\t\tTermFreqVector vector = reader.getTermFreqVector(docId, \"field\");\n\t\t\ttimeElapsed += System.currentTimeMillis()-start;\n\t\t\t\n\t\t\tvectors = new TermFreqVector[1];\n\t\t\tvectors[0] = vector;\n\t\t\t\n\t\t\tverifyVectors(vectors, docId);\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde91cb86cf36b45603c6dfa1c27379a591a17e7","date":1166314240,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      TermFreqVector [] vectors = reader.getTermFreqVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      TermFreqVector vector = reader.getTermFreqVector(docId, \"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      vectors = new TermFreqVector[1];\n      vectors[0] = vector;\n      \n      verifyVectors(vectors, docId);\n      \n    }\n  }\n\n","sourceOld":"\tprivate void testTermVectors() throws Exception {\n\t\t// check:\n\t\tint numDocs = reader.numDocs();\n\t\tlong start = 0L;\n\t\tfor (int docId = 0; docId < numDocs; docId++) {\n\t\t\tstart = System.currentTimeMillis();\n\t\t\tTermFreqVector [] vectors = reader.getTermFreqVectors(docId);\n\t\t\ttimeElapsed += System.currentTimeMillis()-start;\n\t\t\t\n\t\t\t// verify vectors result\n\t\t\tverifyVectors(vectors, docId);\n\t\t\t\n\t\t\tstart = System.currentTimeMillis();\n\t\t\tTermFreqVector vector = reader.getTermFreqVector(docId, \"field\");\n\t\t\ttimeElapsed += System.currentTimeMillis()-start;\n\t\t\t\n\t\t\tvectors = new TermFreqVector[1];\n\t\t\tvectors[0] = vector;\n\t\t\t\n\t\t\tverifyVectors(vectors, docId);\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      TermFreqVector [] vectors = reader.getTermFreqVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      TermFreqVector vector = reader.getTermFreqVector(docId, \"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      vectors = new TermFreqVector[1];\n      vectors[0] = vector;\n      \n      verifyVectors(vectors, docId);\n      \n    }\n  }\n\n","sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      TermFreqVector [] vectors = reader.getTermFreqVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      TermFreqVector vector = reader.getTermFreqVector(docId, \"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      vectors = new TermFreqVector[1];\n      vectors[0] = vector;\n      \n      verifyVectors(vectors, docId);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bde91cb86cf36b45603c6dfa1c27379a591a17e7":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["bde91cb86cf36b45603c6dfa1c27379a591a17e7"]},"commit2Childs":{"bde91cb86cf36b45603c6dfa1c27379a591a17e7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9e98927024757b7944e3ab5bf88134d5f7f30600":["bde91cb86cf36b45603c6dfa1c27379a591a17e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e98927024757b7944e3ab5bf88134d5f7f30600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}