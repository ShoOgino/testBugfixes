{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanWeight,int,List[Spans],Similarity.SimScorer).mjava","commits":[{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanWeight,int,List[Spans],Similarity.SimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,List[Spans]).mjava","sourceNew":"  public NearSpansUnordered(SpanWeight weight, int allowedSlop, List<Spans> subSpans, Similarity.SimScorer simScorer)\n  throws IOException {\n    super(subSpans, weight, simScorer);\n\n    this.subSpanCells = new ArrayList<>(subSpans.size());\n    for (Spans subSpan : subSpans) { // sub spans in query order\n      this.subSpanCells.add(new SpansCell(subSpan));\n    }\n    spanPositionQueue = new SpanPositionQueue(subSpans.size());\n    singleCellToPositionQueue(); // -1 startPosition/endPosition also at doc -1\n    this.allowedSlop = allowedSlop;\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanNearQuery query, List<Spans> subSpans)\n  throws IOException {\n    super(query, subSpans);\n\n    this.subSpanCells = new ArrayList<>(subSpans.size());\n    for (Spans subSpan : subSpans) { // sub spans in query order\n      this.subSpanCells.add(new SpansCell(subSpan));\n    }\n    spanPositionQueue = new SpanPositionQueue(subSpans.size());\n    singleCellToPositionQueue(); // -1 startPosition/endPosition also at doc -1\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(int,List[Spans]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanWeight,int,List[Spans],Similarity.SimScorer).mjava","sourceNew":"  public NearSpansUnordered(int allowedSlop, List<Spans> subSpans)\n  throws IOException {\n    super(subSpans);\n\n    this.subSpanCells = new ArrayList<>(subSpans.size());\n    for (Spans subSpan : subSpans) { // sub spans in query order\n      this.subSpanCells.add(new SpansCell(subSpan));\n    }\n    spanPositionQueue = new SpanPositionQueue(subSpans.size());\n    singleCellToPositionQueue(); // -1 startPosition/endPosition also at doc -1\n    this.allowedSlop = allowedSlop;\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanWeight weight, int allowedSlop, List<Spans> subSpans, Similarity.SimScorer simScorer)\n  throws IOException {\n    super(subSpans, weight, simScorer);\n\n    this.subSpanCells = new ArrayList<>(subSpans.size());\n    for (Spans subSpan : subSpans) { // sub spans in query order\n      this.subSpanCells.add(new SpansCell(subSpan));\n    }\n    spanPositionQueue = new SpanPositionQueue(subSpans.size());\n    singleCellToPositionQueue(); // -1 startPosition/endPosition also at doc -1\n    this.allowedSlop = allowedSlop;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}