{"path":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap#grow().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap#grow().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#grow().mjava","sourceNew":"  /**\n   * Grows the map. Allocates a new map of double the capacity, and\n   * fast-insert the old key-value pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected void grow() {\n    ObjectToIntMap<K> that = new ObjectToIntMap<K>(\n        this.capacity * 2);\n\n    // Iterates fast over the collection. Any valid pair is put into the new\n    // map without checking for duplicates or if there's enough space for\n    // it.\n    for (IndexIterator iterator = new IndexIterator(); iterator.hasNext();) {\n      int index = iterator.next();\n      that.prvt_put((K) this.keys[index], this.values[index]);\n    }\n\n    // Copy that's data into this.\n    this.capacity = that.capacity;\n    this.size = that.size;\n    this.firstEmpty = that.firstEmpty;\n    this.values = that.values;\n    this.keys = that.keys;\n    this.next = that.next;\n    this.baseHash = that.baseHash;\n    this.hashFactor = that.hashFactor;\n  }\n\n","sourceOld":"  /**\n   * Grows the map. Allocates a new map of double the capacity, and\n   * fast-insert the old key-value pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected void grow() {\n    ObjectToIntMap<K> that = new ObjectToIntMap<K>(\n        this.capacity * 2);\n\n    // Iterates fast over the collection. Any valid pair is put into the new\n    // map without checking for duplicates or if there's enough space for\n    // it.\n    for (IndexIterator iterator = new IndexIterator(); iterator.hasNext();) {\n      int index = iterator.next();\n      that.prvt_put((K) this.keys[index], this.values[index]);\n    }\n\n    // Copy that's data into this.\n    this.capacity = that.capacity;\n    this.size = that.size;\n    this.firstEmpty = that.firstEmpty;\n    this.values = that.values;\n    this.keys = that.keys;\n    this.next = that.next;\n    this.baseHash = that.baseHash;\n    this.hashFactor = that.hashFactor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap#grow().mjava","sourceNew":null,"sourceOld":"  /**\n   * Grows the map. Allocates a new map of double the capacity, and\n   * fast-insert the old key-value pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected void grow() {\n    ObjectToIntMap<K> that = new ObjectToIntMap<K>(\n        this.capacity * 2);\n\n    // Iterates fast over the collection. Any valid pair is put into the new\n    // map without checking for duplicates or if there's enough space for\n    // it.\n    for (IndexIterator iterator = new IndexIterator(); iterator.hasNext();) {\n      int index = iterator.next();\n      that.prvt_put((K) this.keys[index], this.values[index]);\n    }\n\n    // Copy that's data into this.\n    this.capacity = that.capacity;\n    this.size = that.size;\n    this.firstEmpty = that.firstEmpty;\n    this.values = that.values;\n    this.keys = that.keys;\n    this.next = that.next;\n    this.baseHash = that.baseHash;\n    this.hashFactor = that.hashFactor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap#grow().mjava","sourceNew":null,"sourceOld":"  /**\n   * Grows the map. Allocates a new map of double the capacity, and\n   * fast-insert the old key-value pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected void grow() {\n    ObjectToIntMap<K> that = new ObjectToIntMap<K>(\n        this.capacity * 2);\n\n    // Iterates fast over the collection. Any valid pair is put into the new\n    // map without checking for duplicates or if there's enough space for\n    // it.\n    for (IndexIterator iterator = new IndexIterator(); iterator.hasNext();) {\n      int index = iterator.next();\n      that.prvt_put((K) this.keys[index], this.values[index]);\n    }\n\n    // Copy that's data into this.\n    this.capacity = that.capacity;\n    this.size = that.size;\n    this.firstEmpty = that.firstEmpty;\n    this.values = that.values;\n    this.keys = that.keys;\n    this.next = that.next;\n    this.baseHash = that.baseHash;\n    this.hashFactor = that.hashFactor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}