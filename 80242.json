{"path":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT), new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT), new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT), new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"084b18e2b1c84d66746d1a94b6668766d357c2d4","date":1270935846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { lookupRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (lookupRemote());\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { lookupRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (lookupRemote());\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { lookupRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (lookupRemote());\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { lookupRemote() });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":null,"sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (lookupRemote());\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":null,"sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (lookupRemote());\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#testNormalizedScores().mjava","sourceNew":null,"sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  @Test\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (lookupRemote());\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"int\", SortField.INT), new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["084b18e2b1c84d66746d1a94b6668766d357c2d4","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"084b18e2b1c84d66746d1a94b6668766d357c2d4":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["084b18e2b1c84d66746d1a94b6668766d357c2d4","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"084b18e2b1c84d66746d1a94b6668766d357c2d4":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}