{"path":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","commits":[{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(new FixedBitDocIdSet((FixedBitSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9894774b78ca9dcb109a9a80a671311c8a2cf41d","date":1414082957,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(new FixedBitDocIdSet((FixedBitSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          return advance(doc + 1);\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (acceptDocs.get(doc) && matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(new FixedBitDocIdSet((FixedBitSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(new BitDocIdSet((FixedBitSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          return advance(doc + 1);\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (acceptDocs.get(doc) && matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(new FixedBitDocIdSet((FixedBitSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          return advance(doc + 1);\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (acceptDocs.get(doc) && matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c7008f8acbfb300764a3beb039bb69797d910e0","date":1465388440,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(new BitDocIdSet((FixedBitSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          return advance(doc + 1);\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (acceptDocs.get(doc) && matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet) {\n      // special case for FixedBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(new BitDocIdSet((FixedBitSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          return advance(doc + 1);\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (acceptDocs.get(doc) && matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["93dd449115a9247533e44bab47e8429e5dccbc6d","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9894774b78ca9dcb109a9a80a671311c8a2cf41d":["80c55596a764e2d397e982828e75fcac5ce430a0"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"4c7008f8acbfb300764a3beb039bb69797d910e0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"80c55596a764e2d397e982828e75fcac5ce430a0":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["9894774b78ca9dcb109a9a80a671311c8a2cf41d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","4c7008f8acbfb300764a3beb039bb69797d910e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c7008f8acbfb300764a3beb039bb69797d910e0"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"9894774b78ca9dcb109a9a80a671311c8a2cf41d":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","80c55596a764e2d397e982828e75fcac5ce430a0"],"80c55596a764e2d397e982828e75fcac5ce430a0":["9894774b78ca9dcb109a9a80a671311c8a2cf41d"],"4c7008f8acbfb300764a3beb039bb69797d910e0":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["4c7008f8acbfb300764a3beb039bb69797d910e0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}