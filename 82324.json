{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#populateScores(ScoreDoc[],IndexSearcher,Query).mjava","commits":[{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#populateScores(ScoreDoc[],IndexSearcher,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Populate {@link ScoreDoc#score scores} of the given {@code topDocs}.\n   * @param topDocs   the top docs to populate\n   * @param searcher  the index searcher that has been used to compute {@code topDocs}\n   * @param query     the query that has been used to compute {@code topDocs}\n   * @throws IllegalArgumentException if there is evidence that {@code topDocs}\n   *             have been computed against a different searcher or a different query.\n   * @lucene.experimental\n   */\n  public static void populateScores(ScoreDoc[] topDocs, IndexSearcher searcher, Query query) throws IOException {\n    // Get the score docs sorted in doc id order\n    topDocs = topDocs.clone();\n    Arrays.sort(topDocs, Comparator.comparingInt(scoreDoc -> scoreDoc.doc));\n\n    final Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    List<LeafReaderContext> contexts = searcher.getIndexReader().leaves();\n    LeafReaderContext currentContext = null;\n    Scorer currentScorer = null;\n    for (ScoreDoc scoreDoc : topDocs) {\n      if (currentContext == null || scoreDoc.doc >= currentContext.docBase + currentContext.reader().maxDoc()) {\n        FutureObjects.checkIndex(scoreDoc.doc, searcher.getIndexReader().maxDoc());\n        int newContextIndex = ReaderUtil.subIndex(scoreDoc.doc, contexts);\n        currentContext = contexts.get(newContextIndex);\n        final ScorerSupplier scorerSupplier = weight.scorerSupplier(currentContext);\n        if (scorerSupplier == null) {\n          throw new IllegalArgumentException(\"Doc id \" + scoreDoc.doc + \" doesn't match the query\");\n        }\n        currentScorer = scorerSupplier.get(1); // random-access\n      }\n      final int leafDoc = scoreDoc.doc - currentContext.docBase;\n      assert leafDoc >= 0;\n      final int advanced = currentScorer.iterator().advance(leafDoc);\n      if (leafDoc != advanced) {\n        throw new IllegalArgumentException(\"Doc id \" + scoreDoc.doc + \" doesn't match the query\");\n      }\n      scoreDoc.score = currentScorer.score();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#populateScores(ScoreDoc[],IndexSearcher,Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#populateScores(ScoreDoc[],IndexSearcher,Query).mjava","sourceNew":"  /**\n   * Populate {@link ScoreDoc#score scores} of the given {@code topDocs}.\n   * @param topDocs   the top docs to populate\n   * @param searcher  the index searcher that has been used to compute {@code topDocs}\n   * @param query     the query that has been used to compute {@code topDocs}\n   * @throws IllegalArgumentException if there is evidence that {@code topDocs}\n   *             have been computed against a different searcher or a different query.\n   * @lucene.experimental\n   */\n  public static void populateScores(ScoreDoc[] topDocs, IndexSearcher searcher, Query query) throws IOException {\n    // Get the score docs sorted in doc id order\n    topDocs = topDocs.clone();\n    Arrays.sort(topDocs, Comparator.comparingInt(scoreDoc -> scoreDoc.doc));\n\n    final Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    List<LeafReaderContext> contexts = searcher.getIndexReader().leaves();\n    LeafReaderContext currentContext = null;\n    Scorer currentScorer = null;\n    for (ScoreDoc scoreDoc : topDocs) {\n      if (currentContext == null || scoreDoc.doc >= currentContext.docBase + currentContext.reader().maxDoc()) {\n        Objects.checkIndex(scoreDoc.doc, searcher.getIndexReader().maxDoc());\n        int newContextIndex = ReaderUtil.subIndex(scoreDoc.doc, contexts);\n        currentContext = contexts.get(newContextIndex);\n        final ScorerSupplier scorerSupplier = weight.scorerSupplier(currentContext);\n        if (scorerSupplier == null) {\n          throw new IllegalArgumentException(\"Doc id \" + scoreDoc.doc + \" doesn't match the query\");\n        }\n        currentScorer = scorerSupplier.get(1); // random-access\n      }\n      final int leafDoc = scoreDoc.doc - currentContext.docBase;\n      assert leafDoc >= 0;\n      final int advanced = currentScorer.iterator().advance(leafDoc);\n      if (leafDoc != advanced) {\n        throw new IllegalArgumentException(\"Doc id \" + scoreDoc.doc + \" doesn't match the query\");\n      }\n      scoreDoc.score = currentScorer.score();\n    }\n  }\n\n","sourceOld":"  /**\n   * Populate {@link ScoreDoc#score scores} of the given {@code topDocs}.\n   * @param topDocs   the top docs to populate\n   * @param searcher  the index searcher that has been used to compute {@code topDocs}\n   * @param query     the query that has been used to compute {@code topDocs}\n   * @throws IllegalArgumentException if there is evidence that {@code topDocs}\n   *             have been computed against a different searcher or a different query.\n   * @lucene.experimental\n   */\n  public static void populateScores(ScoreDoc[] topDocs, IndexSearcher searcher, Query query) throws IOException {\n    // Get the score docs sorted in doc id order\n    topDocs = topDocs.clone();\n    Arrays.sort(topDocs, Comparator.comparingInt(scoreDoc -> scoreDoc.doc));\n\n    final Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    List<LeafReaderContext> contexts = searcher.getIndexReader().leaves();\n    LeafReaderContext currentContext = null;\n    Scorer currentScorer = null;\n    for (ScoreDoc scoreDoc : topDocs) {\n      if (currentContext == null || scoreDoc.doc >= currentContext.docBase + currentContext.reader().maxDoc()) {\n        FutureObjects.checkIndex(scoreDoc.doc, searcher.getIndexReader().maxDoc());\n        int newContextIndex = ReaderUtil.subIndex(scoreDoc.doc, contexts);\n        currentContext = contexts.get(newContextIndex);\n        final ScorerSupplier scorerSupplier = weight.scorerSupplier(currentContext);\n        if (scorerSupplier == null) {\n          throw new IllegalArgumentException(\"Doc id \" + scoreDoc.doc + \" doesn't match the query\");\n        }\n        currentScorer = scorerSupplier.get(1); // random-access\n      }\n      final int leafDoc = scoreDoc.doc - currentContext.docBase;\n      assert leafDoc >= 0;\n      final int advanced = currentScorer.iterator().advance(leafDoc);\n      if (leafDoc != advanced) {\n        throw new IllegalArgumentException(\"Doc id \" + scoreDoc.doc + \" doesn't match the query\");\n      }\n      scoreDoc.score = currentScorer.score();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}