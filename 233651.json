{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"33eef98c565ee21b199f04b92acd6e00b842bd1e","date":1514538360,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity(scoreMode.needsScores());\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.scorer(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity(scoreMode.needsScores());\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermStates ts = termStates.get(term);\n          if (ts == null) {\n            ts = TermStates.build(context, term, scoreMode.needsScores());\n            termStates.put(term, ts);\n          }\n          if (scoreMode.needsScores()) {\n            TermStatistics termStatistics = searcher.termStatistics(term, ts);\n            if (termStatistics != null) {\n              allTermStats.add(termStatistics);\n            }\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.scorer(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.scorer(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermStates ts = termStates.get(term);\n          if (ts == null) {\n            ts = TermStates.build(context, term, scoreMode.needsScores());\n            termStates.put(term, ts);\n          }\n          if (scoreMode.needsScores()) {\n            TermStatistics termStatistics = searcher.termStatistics(term, ts);\n            if (termStatistics != null) {\n              allTermStats.add(termStatistics);\n            }\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.scorer(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity(scoreMode.needsScores());\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          TermStatistics termStatistics = searcher.termStatistics(term, termContext);\n          if (termStatistics != null) {\n            allTermStats.add(termStatistics);\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":null,"sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.scoreMode = scoreMode;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermStates ts = termStates.get(term);\n          if (ts == null) {\n            ts = TermStates.build(context, term, scoreMode.needsScores());\n            termStates.put(term, ts);\n          }\n          if (scoreMode.needsScores()) {\n            TermStatistics termStatistics = searcher.termStatistics(term, ts);\n            if (termStatistics != null) {\n              allTermStats.add(termStatistics);\n            }\n          }\n        }\n      }\n      if (allTermStats.isEmpty()) {\n        stats = null; // none of the terms were found, we won't use sim at all\n      } else {\n        stats = similarity.scorer(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["33eef98c565ee21b199f04b92acd6e00b842bd1e","a6e9f769521480a623f897c0d59089b919fa4239"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"a6e9f769521480a623f897c0d59089b919fa4239":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"33eef98c565ee21b199f04b92acd6e00b842bd1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b11b9d5eaf9707760ca5151530830a825197023":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3b11b9d5eaf9707760ca5151530830a825197023"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"33eef98c565ee21b199f04b92acd6e00b842bd1e":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33eef98c565ee21b199f04b92acd6e00b842bd1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}