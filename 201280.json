{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","commits":[{"id":"9767eba84e83b05b2a675421e190f4a4c15dad44","date":1508967004,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","pathOld":"/dev/null","sourceNew":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","sourceNew":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","sourceNew":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","sourceNew":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#indexDocs(CloudSolrClient,String,int).mjava","sourceNew":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  private int indexDocs(CloudSolrClient sourceSolrClient, String collection, int batches) throws IOException, SolrServerException {\n    sourceSolrClient.setDefaultCollection(collection);\n    int numDocs = 0;\n    for (int k = 0; k < batches; k++) {\n      UpdateRequest req = new UpdateRequest();\n      for (; numDocs < (k + 1) * 100; numDocs++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"source_\" + numDocs);\n        doc.addField(\"xyz\", numDocs);\n        req.add(doc);\n      }\n      req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n      req.process(sourceSolrClient);\n    }\n    log.info(\"Adding numDocs=\" + numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9767eba84e83b05b2a675421e190f4a4c15dad44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["9767eba84e83b05b2a675421e190f4a4c15dad44"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"9767eba84e83b05b2a675421e190f4a4c15dad44":["e7da9d8536c11576df10e348efa79d2739170936"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9767eba84e83b05b2a675421e190f4a4c15dad44"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}