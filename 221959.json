{"path":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","commits":[{"id":"d0e70591e1e23afedf79324b42591f71a3e711b5","date":1355181494,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBootstrapWithChroot() throws Exception {\n    String chroot = \"/foo/bar\";\n    assertFalse(zkClient.exists(chroot, true));\n    \n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress() + chroot,\n        \"-cmd\", \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    \n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(chroot + ZkController.CONFIGS_ZKNODE\n        + \"/collection1\", true));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBootstrapWithChroot() throws Exception {\n    String chroot = \"/foo/bar\";\n    assertFalse(zkClient.exists(chroot, true));\n    \n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress() + chroot,\n        \"-cmd\", \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    \n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(chroot + ZkController.CONFIGS_ZKNODE\n        + \"/collection1\", true));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","date":1366986755,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","sourceNew":"  @Test\n  public void testBootstrapWithChroot() throws Exception {\n    String chroot = \"/foo/bar\";\n    assertFalse(zkClient.exists(chroot, true));\n    \n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress() + chroot,\n        \"-cmd\", \"bootstrap\", \"-solrhome\", this.solrHome};\n    \n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(chroot + ZkController.CONFIGS_ZKNODE\n        + \"/collection1\", true));\n  }\n\n","sourceOld":"  @Test\n  public void testBootstrapWithChroot() throws Exception {\n    String chroot = \"/foo/bar\";\n    assertFalse(zkClient.exists(chroot, true));\n    \n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress() + chroot,\n        \"-cmd\", \"bootstrap\", \"-solrhome\", ExternalPaths.EXAMPLE_HOME};\n    \n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(chroot + ZkController.CONFIGS_ZKNODE\n        + \"/collection1\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","sourceNew":"  @Test\n  public void testBootstrapWithChroot() throws Exception {\n    String chroot = \"/foo/bar\";\n    assertFalse(zkClient.exists(chroot, true));\n    \n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress() + chroot,\n        \"-cmd\", \"bootstrap\", \"-solrhome\", this.solrHome};\n    \n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(chroot + ZkConfigManager.CONFIGS_ZKNODE\n        + \"/collection1\", true));\n  }\n\n","sourceOld":"  @Test\n  public void testBootstrapWithChroot() throws Exception {\n    String chroot = \"/foo/bar\";\n    assertFalse(zkClient.exists(chroot, true));\n    \n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress() + chroot,\n        \"-cmd\", \"bootstrap\", \"-solrhome\", this.solrHome};\n    \n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(chroot + ZkController.CONFIGS_ZKNODE\n        + \"/collection1\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testBootstrapWithChroot().mjava","sourceNew":"  @Test\n  public void testBootstrapWithChroot() throws Exception {\n    String chroot = \"/foo/bar\";\n    assertFalse(zkClient.exists(chroot, true));\n\n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress() + chroot,\n        \"-cmd\", \"bootstrap\", \"-solrhome\", this.solrHome};\n\n    ZkCLI.main(args);\n\n    assertTrue(zkClient.exists(chroot + ZkConfigManager.CONFIGS_ZKNODE\n        + \"/collection1\", true));\n  }\n\n","sourceOld":"  @Test\n  public void testBootstrapWithChroot() throws Exception {\n    String chroot = \"/foo/bar\";\n    assertFalse(zkClient.exists(chroot, true));\n    \n    String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress() + chroot,\n        \"-cmd\", \"bootstrap\", \"-solrhome\", this.solrHome};\n    \n    ZkCLI.main(args);\n    \n    assertTrue(zkClient.exists(chroot + ZkConfigManager.CONFIGS_ZKNODE\n        + \"/collection1\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0e70591e1e23afedf79324b42591f71a3e711b5"],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["d0e70591e1e23afedf79324b42591f71a3e711b5"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0e70591e1e23afedf79324b42591f71a3e711b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d0e70591e1e23afedf79324b42591f71a3e711b5"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"d0e70591e1e23afedf79324b42591f71a3e711b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}