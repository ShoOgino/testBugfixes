{"path":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantTopScorer#wrapCollector(Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantBulkScorer#wrapCollector(Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#wrapCollector(Collector).mjava","sourceNew":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, weight, theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","sourceOld":"    private Collector wrapCollector(final Collector collector) {\n      return new Collector() {\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          // we must wrap again here, but using the scorer passed in as parameter:\n          collector.setScorer(new ConstantScorer(scorer, ConstantScorer.this.weight, ConstantScorer.this.theScore));\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          collector.collect(doc);\n        }\n        \n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {\n          collector.setNextReader(context);\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return collector.acceptsDocsOutOfOrder();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}