{"path":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","commits":[{"id":"7a62481aacca928b5c069e6f825ef49c7b6586d8","date":1333048447,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = getParam(params.get(PARAM_RATES_FILE_LOCATION), DEFAULT_RATES_FILE_LOCATION);\n      refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error initializing\", e);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5500c5115c2ccc55ff23f7f96adcb1857cd4bff","date":1362189123,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = getParam(params.get(PARAM_RATES_FILE_LOCATION), DEFAULT_RATES_FILE_LOCATION);\n      refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error initializing\", e);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98f865ee54dfb817d8df8da1de0a2432a4a54daf","date":1378244391,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","bugFix":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.debug(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.debug(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.debug(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.debug(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.info(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.debug(\"Initialized with rates={}, refreshInterval={}.\", ratesFileLocation, refreshInterval);\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> params) throws SolrException {\n    try {\n      ratesFileLocation = params.get(PARAM_RATES_FILE_LOCATION);\n      if (null == ratesFileLocation) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Init param must be specified: \" + PARAM_RATES_FILE_LOCATION);\n      }\n      int refreshInterval = Integer.parseInt(getParam(params.get(PARAM_REFRESH_INTERVAL), DEFAULT_REFRESH_INTERVAL));\n      // Force a refresh interval of minimum one hour, since the API does not offer better resolution\n      if (refreshInterval < 60) {\n        refreshInterval = 60;\n        log.warn(\"Specified refreshInterval was too small. Setting to 60 minutes which is the update rate of openexchangerates.org\");\n      }\n      log.debug(\"Initialized with rates=\"+ratesFileLocation+\", refreshInterval=\"+refreshInterval+\".\");\n      refreshIntervalSeconds = refreshInterval * 60;\n    } catch (SolrException e1) {\n      throw e1;\n    } catch (Exception e2) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error initializing: \" + \n                              e2.getMessage(), e2);\n    } finally {\n      // Removing config params custom to us\n      params.remove(PARAM_RATES_FILE_LOCATION);\n      params.remove(PARAM_REFRESH_INTERVAL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"126d6ad24eed13163ba0959435d5a80e5672837c":["98f865ee54dfb817d8df8da1de0a2432a4a54daf","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["98f865ee54dfb817d8df8da1de0a2432a4a54daf","126d6ad24eed13163ba0959435d5a80e5672837c"],"98f865ee54dfb817d8df8da1de0a2432a4a54daf":["e5500c5115c2ccc55ff23f7f96adcb1857cd4bff"],"e5500c5115c2ccc55ff23f7f96adcb1857cd4bff":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["98f865ee54dfb817d8df8da1de0a2432a4a54daf","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["e5500c5115c2ccc55ff23f7f96adcb1857cd4bff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9df8125ba9193a2e2e285ed92157810b1952a244"],"98f865ee54dfb817d8df8da1de0a2432a4a54daf":["126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e5500c5115c2ccc55ff23f7f96adcb1857cd4bff":["98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}