{"path":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doAnalytics || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n    \n    reqManager.sendShards = false;\n    \n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doAnalytics || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n    \n    reqManager.sendShards = false;\n    \n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doAnalytics || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n    \n    reqManager.sendShards = false;\n    \n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doAnalytics || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n\n    reqManager.sendShards = false;\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doAnalytics || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n    \n    reqManager.sendShards = false;\n    \n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e08bb61edd9d68a03a42f70b0001ceb136f122e","date":1564373911,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.isAnalytics() || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = getAnalyticsRequestManager(rb);\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n\n    reqManager.sendShards = false;\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doAnalytics || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n\n    reqManager.sendShards = false;\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#distributedProcess(ResponseBuilder).mjava","sourceNew":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.isAnalytics() || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = getAnalyticsRequestManager(rb);\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n\n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n\n    reqManager.sendShards = false;\n\n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","sourceOld":"  @Override\n  public int distributedProcess(ResponseBuilder rb) throws IOException {\n    if (!rb.doAnalytics || rb.stage != ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      return ResponseBuilder.STAGE_DONE;\n    }\n    AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n    if (!reqManager.sendShards){\n      return ResponseBuilder.STAGE_DONE;\n    }\n    \n    // Send out a request to each shard and merge the responses into our AnalyticsRequestManager\n    reqManager.shardStream.sendRequests(rb.req.getCore().getCoreDescriptor().getCollectionName(),\n        rb.req.getCore().getCoreContainer().getZkController().getZkServerAddress());\n    \n    reqManager.sendShards = false;\n    \n    return ResponseBuilder.STAGE_DONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"4e08bb61edd9d68a03a42f70b0001ceb136f122e":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","4e08bb61edd9d68a03a42f70b0001ceb136f122e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e08bb61edd9d68a03a42f70b0001ceb136f122e"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["4e08bb61edd9d68a03a42f70b0001ceb136f122e"],"4e08bb61edd9d68a03a42f70b0001ceb136f122e":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}