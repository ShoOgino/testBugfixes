{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","commits":[{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @deprecated use {@link Builder} instead.  This will soon be a 'protected'\n   * method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","sourceOld":"  public HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @deprecated use {@link Builder} instead.  This will soon be a 'protected'\n   * method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","sourceOld":"  public HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","sourceOld":"  /**\n   * @deprecated use {@link Builder} instead.  This will soon be a 'protected'\n   * method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","sourceOld":"  /**\n   * @deprecated use {@link Builder} instead.  This will soon be a 'protected'\n   * method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","sourceOld":"  /**\n   * @deprecated use {@link Builder} instead.  This will soon be a 'protected'\n   * method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @deprecated use {@link HttpSolrClient#HttpSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this(new Builder(baseURL)\n        .withHttpClient(client)\n        .withResponseParser(parser)\n        .allowCompression(allowCompression));\n  }\n\n","sourceOld":"  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","bugFix":["859081acf00749f5dd462772c571d611d4a4d2db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @deprecated use {@link HttpSolrClient#HttpSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this(new Builder(baseURL)\n        .withHttpClient(client)\n        .withResponseParser(parser)\n        .allowCompression(allowCompression));\n  }\n\n","sourceOld":"  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(String,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @deprecated use {@link HttpSolrClient#HttpSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this(new Builder(baseURL)\n        .withHttpClient(client)\n        .withResponseParser(parser)\n        .allowCompression(allowCompression));\n  }\n\n","sourceOld":"  protected HttpSolrClient(String baseURL, HttpClient client, ResponseParser parser, boolean allowCompression) {\n    this.baseUrl = baseURL;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (client != null) {\n      httpClient = client;\n      internalClient = false;\n    } else {\n      internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, allowCompression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","63a1978c6710c767fa084741e3d6424840003a62"],"859081acf00749f5dd462772c571d611d4a4d2db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a1978c6710c767fa084741e3d6424840003a62":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","63a1978c6710c767fa084741e3d6424840003a62"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["63a1978c6710c767fa084741e3d6424840003a62"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["859081acf00749f5dd462772c571d611d4a4d2db"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}