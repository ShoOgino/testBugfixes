{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolverImpl resolver = (VariableResolverImpl) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<Map<String, Object>>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              @SuppressWarnings({\"rawtypes\"})\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            @SuppressWarnings({\"rawtypes\"})\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = (VariableResolver) context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#applyTransformer(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected Map<String, Object> applyTransformer(Map<String, Object> row) {\n    if(row == null) return null;\n    if (transformers == null)\n      loadTransformers();\n    if (transformers == Collections.EMPTY_LIST)\n      return row;\n    Map<String, Object> transformedRow = row;\n    List<Map<String, Object>> rows = null;\n    boolean stopTransform = checkStopTransform(row);\n    VariableResolver resolver = context.getVariableResolver();\n    for (Transformer t : transformers) {\n      if (stopTransform) break;\n      try {\n        if (rows != null) {\n          List<Map<String, Object>> tmpRows = new ArrayList<>();\n          for (Map<String, Object> map : rows) {\n            resolver.addNamespace(entityName, map);\n            Object o = t.transformRow(map, context);\n            if (o == null)\n              continue;\n            if (o instanceof Map) {\n              @SuppressWarnings({\"rawtypes\"})\n              Map oMap = (Map) o;\n              stopTransform = checkStopTransform(oMap);\n              tmpRows.add((Map) o);\n            } else if (o instanceof List) {\n              tmpRows.addAll((List) o);\n            } else {\n              log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n            }\n          }\n          rows = tmpRows;\n        } else {\n          resolver.addNamespace(entityName, transformedRow);\n          Object o = t.transformRow(transformedRow, context);\n          if (o == null)\n            return null;\n          if (o instanceof Map) {\n            @SuppressWarnings({\"rawtypes\"})\n            Map oMap = (Map) o;\n            stopTransform = checkStopTransform(oMap);\n            transformedRow = (Map) o;\n          } else if (o instanceof List) {\n            rows = (List) o;\n          } else {\n            log.error(\"Transformer must return Map<String, Object> or a List<Map<String, Object>>\");\n          }\n        }\n      } catch (Exception e) {\n        log.warn(\"transformer threw error\", e);\n        if (ABORT.equals(onError)) {\n          wrapAndThrow(SEVERE, e);\n        } else if (SKIP.equals(onError)) {\n          wrapAndThrow(DataImportHandlerException.SKIP, e);\n        }\n        // onError = continue\n      }\n    }\n    if (rows == null) {\n      return transformedRow;\n    } else {\n      rowcache = rows;\n      return getFromRowCache();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}