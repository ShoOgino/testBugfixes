{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {\n    RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;\n\n    RegexpQuery q = new RegexpQuery(new Term(regexpNode.getFieldAsString(),\n        regexpNode.textToBytesRef()));\n\n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod) queryNode\n        .getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      q.setRewriteMethod(method);\n    }\n\n    return q;\n  }\n\n","sourceOld":"  public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {\n    RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;\n\n    RegexpQuery q = new RegexpQuery(new Term(regexpNode.getFieldAsString(),\n        regexpNode.textToBytesRef()));\n\n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod) queryNode\n        .getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      q.setRewriteMethod(method);\n    }\n\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {\n    RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;\n\n    RegexpQuery q = new RegexpQuery(new Term(regexpNode.getFieldAsString(),\n        regexpNode.textToBytesRef()));\n\n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod) queryNode\n        .getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      q.setRewriteMethod(method);\n    }\n\n    return q;\n  }\n\n","sourceOld":"  public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {\n    RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;\n\n    RegexpQuery q = new RegexpQuery(new Term(regexpNode.getFieldAsString(),\n        regexpNode.textToBytesRef()));\n\n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod) queryNode\n        .getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      q.setRewriteMethod(method);\n    }\n\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {\n    RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;\n\n    RegexpQuery q = new RegexpQuery(new Term(regexpNode.getFieldAsString(),\n        regexpNode.textToBytesRef()));\n\n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod) queryNode\n        .getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      q.setRewriteMethod(method);\n    }\n\n    return q;\n  }\n\n","sourceOld":"  public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {\n    RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;\n\n    RegexpQuery q = new RegexpQuery(new Term(regexpNode.getFieldAsString(),\n        regexpNode.textToBytesRef()));\n\n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod) queryNode\n        .getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      q.setRewriteMethod(method);\n    }\n\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  @Override\n  public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {\n    RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;\n\n    // TODO: make the maxStates configurable w/ a reasonable default (QueryParserBase uses 10000)\n    RegexpQuery q = new RegexpQuery(new Term(regexpNode.getFieldAsString(),\n        regexpNode.textToBytesRef()));\n\n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod) queryNode\n        .getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      q.setRewriteMethod(method);\n    }\n\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public RegexpQuery build(QueryNode queryNode) throws QueryNodeException {\n    RegexpQueryNode regexpNode = (RegexpQueryNode) queryNode;\n\n    RegexpQuery q = new RegexpQuery(new Term(regexpNode.getFieldAsString(),\n        regexpNode.textToBytesRef()));\n\n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod) queryNode\n        .getTag(MultiTermRewriteMethodProcessor.TAG_ID);\n    if (method != null) {\n      q.setRewriteMethod(method);\n    }\n\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}