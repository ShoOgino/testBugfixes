{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyDocValuesUpdates(Iterable[#-extends-DocValuesUpdate],ReadersAndUpdates,SegmentReader,DocValuesFieldUpdates.Container).mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyDocValuesUpdates(Iterable[#-extends-DocValuesUpdate],ReadersAndUpdates,SegmentReader,DocValuesFieldUpdates.Container).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyNumericDocValuesUpdates(Iterable[NumericUpdate],ReadersAndUpdates,SegmentReader,Map[String,NumericFieldUpdates]).mjava","sourceNew":"  // DocValues updates\n  private synchronized void applyDocValuesUpdates(Iterable<? extends DocValuesUpdate> updates, \n      ReadersAndUpdates rld, SegmentReader reader, DocValuesFieldUpdates.Container dvUpdatesContainer) throws IOException {\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return;\n    }\n\n    // TODO: we can process the updates per DV field, from last to first so that\n    // if multiple terms affect same document for the same field, we add an update\n    // only once (that of the last term). To do that, we can keep a bitset which\n    // marks which documents have already been updated. So e.g. if term T1\n    // updates doc 7, and then we process term T2 and it updates doc 7 as well,\n    // we don't apply the update since we know T1 came last and therefore wins\n    // the update.\n    // We can also use that bitset as 'liveDocs' to pass to TermEnum.docs(), so\n    // that these documents aren't even returned.\n    \n    String currentField = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    \n    //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate reader=\" + reader);\n    for (DocValuesUpdate update : updates) {\n      Term term = update.term;\n      int limit = update.docIDUpto;\n      \n      // TODO: we traverse the terms in update order (not term order) so that we\n      // apply the updates in the correct order, i.e. if two terms udpate the\n      // same document, the last one that came in wins, irrespective of the\n      // terms lexical order.\n      // we can apply the updates in terms order if we keep an updatesGen (and\n      // increment it with every update) and attach it to each NumericUpdate. Note\n      // that we cannot rely only on docIDUpto because an app may send two updates\n      // which will get same docIDUpto, yet will still need to respect the order\n      // those updates arrived.\n      \n      if (!term.field().equals(currentField)) {\n        // if we change the code to process updates in terms order, enable this assert\n//        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n        } else {\n          termsEnum = null;\n          continue; // no terms in that field\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes())) {\n        // we don't need term frequencies for this\n        DocsEnum docsEnum = termsEnum.docs(rld.getLiveDocs(), docs, DocsEnum.FLAG_NONE);\n      \n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        DocValuesFieldUpdates dvUpdates = dvUpdatesContainer.getUpdates(update.field, update.type);\n        if (dvUpdates == null) {\n          dvUpdates = dvUpdatesContainer.newUpdates(update.field, update.type, reader.maxDoc());\n        }\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate term=\" + term + \" doc=\" + docID);\n          if (doc >= limit) {\n            break; // no more docs that can be updated for this term\n          }\n          dvUpdates.add(doc, update.value);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // NumericDocValues Updates\n  // If otherFieldUpdates != null, we need to merge the updates into them\n  private synchronized Map<String,NumericFieldUpdates> applyNumericDocValuesUpdates(Iterable<NumericUpdate> updates, \n      ReadersAndUpdates rld, SegmentReader reader, Map<String,NumericFieldUpdates> otherFieldUpdates) throws IOException {\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return Collections.emptyMap();\n    }\n\n    // TODO: we can process the updates per DV field, from last to first so that\n    // if multiple terms affect same document for the same field, we add an update\n    // only once (that of the last term). To do that, we can keep a bitset which\n    // marks which documents have already been updated. So e.g. if term T1\n    // updates doc 7, and then we process term T2 and it updates doc 7 as well,\n    // we don't apply the update since we know T1 came last and therefore wins\n    // the update.\n    // We can also use that bitset as 'liveDocs' to pass to TermEnum.docs(), so\n    // that these documents aren't even returned.\n    \n    String currentField = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    final Map<String,NumericFieldUpdates> result = otherFieldUpdates == null ? new HashMap<String,NumericFieldUpdates>() : otherFieldUpdates;\n    //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate reader=\" + reader);\n    for (NumericUpdate update : updates) {\n      Term term = update.term;\n      int limit = update.docIDUpto;\n      \n      // TODO: we traverse the terms in update order (not term order) so that we\n      // apply the updates in the correct order, i.e. if two terms udpate the\n      // same document, the last one that came in wins, irrespective of the\n      // terms lexical order.\n      // we can apply the updates in terms order if we keep an updatesGen (and\n      // increment it with every update) and attach it to each NumericUpdate. Note\n      // that we cannot rely only on docIDUpto because an app may send two updates\n      // which will get same docIDUpto, yet will still need to respect the order\n      // those updates arrived.\n      \n      if (!term.field().equals(currentField)) {\n        // if we change the code to process updates in terms order, enable this assert\n//        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n        } else {\n          termsEnum = null;\n          continue; // no terms in that field\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes())) {\n        // we don't need term frequencies for this\n        DocsEnum docsEnum = termsEnum.docs(rld.getLiveDocs(), docs, DocsEnum.FLAG_NONE);\n      \n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        NumericFieldUpdates fieldUpdates = result.get(update.field);\n        if (fieldUpdates == null) {\n          fieldUpdates = new NumericFieldUpdates.PackedNumericFieldUpdates(reader.maxDoc());\n          result.put(update.field, fieldUpdates);\n        }\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate term=\" + term + \" doc=\" + docID);\n          if (doc >= limit) {\n            break; // no more docs that can be updated for this term\n          }\n          fieldUpdates.add(doc, update.value);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyDocValuesUpdates(Iterable[#-extends-DocValuesUpdate],ReadersAndUpdates,SegmentReader,DocValuesFieldUpdates.Container).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyDocValuesUpdates(Iterable[#-extends-DocValuesUpdate],ReadersAndUpdates,SegmentReader,DocValuesFieldUpdates.Container).mjava","sourceNew":"  // DocValues updates\n  private synchronized void applyDocValuesUpdates(Iterable<? extends DocValuesUpdate> updates, \n      ReadersAndUpdates rld, SegmentReader reader, DocValuesFieldUpdates.Container dvUpdatesContainer) throws IOException {\n    Fields fields = reader.fields();\n\n    // TODO: we can process the updates per DV field, from last to first so that\n    // if multiple terms affect same document for the same field, we add an update\n    // only once (that of the last term). To do that, we can keep a bitset which\n    // marks which documents have already been updated. So e.g. if term T1\n    // updates doc 7, and then we process term T2 and it updates doc 7 as well,\n    // we don't apply the update since we know T1 came last and therefore wins\n    // the update.\n    // We can also use that bitset as 'liveDocs' to pass to TermEnum.docs(), so\n    // that these documents aren't even returned.\n    \n    String currentField = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    \n    //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate reader=\" + reader);\n    for (DocValuesUpdate update : updates) {\n      Term term = update.term;\n      int limit = update.docIDUpto;\n      \n      // TODO: we traverse the terms in update order (not term order) so that we\n      // apply the updates in the correct order, i.e. if two terms udpate the\n      // same document, the last one that came in wins, irrespective of the\n      // terms lexical order.\n      // we can apply the updates in terms order if we keep an updatesGen (and\n      // increment it with every update) and attach it to each NumericUpdate. Note\n      // that we cannot rely only on docIDUpto because an app may send two updates\n      // which will get same docIDUpto, yet will still need to respect the order\n      // those updates arrived.\n      \n      if (!term.field().equals(currentField)) {\n        // if we change the code to process updates in terms order, enable this assert\n//        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n        } else {\n          termsEnum = null;\n          continue; // no terms in that field\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes())) {\n        // we don't need term frequencies for this\n        DocsEnum docsEnum = termsEnum.docs(rld.getLiveDocs(), docs, DocsEnum.FLAG_NONE);\n      \n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        DocValuesFieldUpdates dvUpdates = dvUpdatesContainer.getUpdates(update.field, update.type);\n        if (dvUpdates == null) {\n          dvUpdates = dvUpdatesContainer.newUpdates(update.field, update.type, reader.maxDoc());\n        }\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate term=\" + term + \" doc=\" + docID);\n          if (doc >= limit) {\n            break; // no more docs that can be updated for this term\n          }\n          dvUpdates.add(doc, update.value);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // DocValues updates\n  private synchronized void applyDocValuesUpdates(Iterable<? extends DocValuesUpdate> updates, \n      ReadersAndUpdates rld, SegmentReader reader, DocValuesFieldUpdates.Container dvUpdatesContainer) throws IOException {\n    Fields fields = reader.fields();\n    if (fields == null) {\n      // This reader has no postings\n      return;\n    }\n\n    // TODO: we can process the updates per DV field, from last to first so that\n    // if multiple terms affect same document for the same field, we add an update\n    // only once (that of the last term). To do that, we can keep a bitset which\n    // marks which documents have already been updated. So e.g. if term T1\n    // updates doc 7, and then we process term T2 and it updates doc 7 as well,\n    // we don't apply the update since we know T1 came last and therefore wins\n    // the update.\n    // We can also use that bitset as 'liveDocs' to pass to TermEnum.docs(), so\n    // that these documents aren't even returned.\n    \n    String currentField = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    \n    //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate reader=\" + reader);\n    for (DocValuesUpdate update : updates) {\n      Term term = update.term;\n      int limit = update.docIDUpto;\n      \n      // TODO: we traverse the terms in update order (not term order) so that we\n      // apply the updates in the correct order, i.e. if two terms udpate the\n      // same document, the last one that came in wins, irrespective of the\n      // terms lexical order.\n      // we can apply the updates in terms order if we keep an updatesGen (and\n      // increment it with every update) and attach it to each NumericUpdate. Note\n      // that we cannot rely only on docIDUpto because an app may send two updates\n      // which will get same docIDUpto, yet will still need to respect the order\n      // those updates arrived.\n      \n      if (!term.field().equals(currentField)) {\n        // if we change the code to process updates in terms order, enable this assert\n//        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n        } else {\n          termsEnum = null;\n          continue; // no terms in that field\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes())) {\n        // we don't need term frequencies for this\n        DocsEnum docsEnum = termsEnum.docs(rld.getLiveDocs(), docs, DocsEnum.FLAG_NONE);\n      \n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        DocValuesFieldUpdates dvUpdates = dvUpdatesContainer.getUpdates(update.field, update.type);\n        if (dvUpdates == null) {\n          dvUpdates = dvUpdatesContainer.newUpdates(update.field, update.type, reader.maxDoc());\n        }\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate term=\" + term + \" doc=\" + docID);\n          if (doc >= limit) {\n            break; // no more docs that can be updated for this term\n          }\n          dvUpdates.add(doc, update.value);\n        }\n      }\n    }\n  }\n\n","bugFix":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe","06805da26538ed636bd89b10c2699cc3834032ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2636148e70acf2722b6fc6179449e118bb1a0cea","date":1420480398,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyDocValuesUpdates(Iterable[#-extends-DocValuesUpdate],ReadersAndUpdates,SegmentReader,DocValuesFieldUpdates.Container).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyDocValuesUpdates(Iterable[#-extends-DocValuesUpdate],ReadersAndUpdates,SegmentReader,DocValuesFieldUpdates.Container).mjava","sourceNew":"  // DocValues updates\n  private synchronized void applyDocValuesUpdates(Iterable<? extends DocValuesUpdate> updates, \n      ReadersAndUpdates rld, SegmentReader reader, DocValuesFieldUpdates.Container dvUpdatesContainer) throws IOException {\n    Fields fields = reader.fields();\n\n    // TODO: we can process the updates per DV field, from last to first so that\n    // if multiple terms affect same document for the same field, we add an update\n    // only once (that of the last term). To do that, we can keep a bitset which\n    // marks which documents have already been updated. So e.g. if term T1\n    // updates doc 7, and then we process term T2 and it updates doc 7 as well,\n    // we don't apply the update since we know T1 came last and therefore wins\n    // the update.\n    // We can also use that bitset as 'liveDocs' to pass to TermEnum.docs(), so\n    // that these documents aren't even returned.\n    \n    String currentField = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docsEnum = null;\n    \n    //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate reader=\" + reader);\n    for (DocValuesUpdate update : updates) {\n      Term term = update.term;\n      int limit = update.docIDUpto;\n      \n      // TODO: we traverse the terms in update order (not term order) so that we\n      // apply the updates in the correct order, i.e. if two terms udpate the\n      // same document, the last one that came in wins, irrespective of the\n      // terms lexical order.\n      // we can apply the updates in terms order if we keep an updatesGen (and\n      // increment it with every update) and attach it to each NumericUpdate. Note\n      // that we cannot rely only on docIDUpto because an app may send two updates\n      // which will get same docIDUpto, yet will still need to respect the order\n      // those updates arrived.\n      \n      if (!term.field().equals(currentField)) {\n        // if we change the code to process updates in terms order, enable this assert\n//        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        // no terms in this field\n        continue;\n      }\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes())) {\n        // we don't need term frequencies for this\n        docsEnum = termsEnum.docs(rld.getLiveDocs(), docsEnum, DocsEnum.FLAG_NONE);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        DocValuesFieldUpdates dvUpdates = dvUpdatesContainer.getUpdates(update.field, update.type);\n        if (dvUpdates == null) {\n          dvUpdates = dvUpdatesContainer.newUpdates(update.field, update.type, reader.maxDoc());\n        }\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate term=\" + term + \" doc=\" + docID);\n          if (doc >= limit) {\n            break; // no more docs that can be updated for this term\n          }\n          dvUpdates.add(doc, update.value);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // DocValues updates\n  private synchronized void applyDocValuesUpdates(Iterable<? extends DocValuesUpdate> updates, \n      ReadersAndUpdates rld, SegmentReader reader, DocValuesFieldUpdates.Container dvUpdatesContainer) throws IOException {\n    Fields fields = reader.fields();\n\n    // TODO: we can process the updates per DV field, from last to first so that\n    // if multiple terms affect same document for the same field, we add an update\n    // only once (that of the last term). To do that, we can keep a bitset which\n    // marks which documents have already been updated. So e.g. if term T1\n    // updates doc 7, and then we process term T2 and it updates doc 7 as well,\n    // we don't apply the update since we know T1 came last and therefore wins\n    // the update.\n    // We can also use that bitset as 'liveDocs' to pass to TermEnum.docs(), so\n    // that these documents aren't even returned.\n    \n    String currentField = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    \n    //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate reader=\" + reader);\n    for (DocValuesUpdate update : updates) {\n      Term term = update.term;\n      int limit = update.docIDUpto;\n      \n      // TODO: we traverse the terms in update order (not term order) so that we\n      // apply the updates in the correct order, i.e. if two terms udpate the\n      // same document, the last one that came in wins, irrespective of the\n      // terms lexical order.\n      // we can apply the updates in terms order if we keep an updatesGen (and\n      // increment it with every update) and attach it to each NumericUpdate. Note\n      // that we cannot rely only on docIDUpto because an app may send two updates\n      // which will get same docIDUpto, yet will still need to respect the order\n      // those updates arrived.\n      \n      if (!term.field().equals(currentField)) {\n        // if we change the code to process updates in terms order, enable this assert\n//        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n        } else {\n          termsEnum = null;\n          continue; // no terms in that field\n        }\n      }\n\n      if (termsEnum == null) {\n        continue;\n      }\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes())) {\n        // we don't need term frequencies for this\n        DocsEnum docsEnum = termsEnum.docs(rld.getLiveDocs(), docs, DocsEnum.FLAG_NONE);\n      \n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        DocValuesFieldUpdates dvUpdates = dvUpdatesContainer.getUpdates(update.field, update.type);\n        if (dvUpdates == null) {\n          dvUpdates = dvUpdatesContainer.newUpdates(update.field, update.type, reader.maxDoc());\n        }\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate term=\" + term + \" doc=\" + docID);\n          if (doc >= limit) {\n            break; // no more docs that can be updated for this term\n          }\n          dvUpdates.add(doc, update.value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyDocValuesUpdates(Iterable[#-extends-DocValuesUpdate],SegmentState,DocValuesFieldUpdates.Container).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyDocValuesUpdates(Iterable[#-extends-DocValuesUpdate],ReadersAndUpdates,SegmentReader,DocValuesFieldUpdates.Container).mjava","sourceNew":"  // DocValues updates\n  private synchronized void applyDocValuesUpdates(Iterable<? extends DocValuesUpdate> updates, \n      SegmentState segState, DocValuesFieldUpdates.Container dvUpdatesContainer) throws IOException {\n    Fields fields = segState.reader.fields();\n\n    // TODO: we can process the updates per DV field, from last to first so that\n    // if multiple terms affect same document for the same field, we add an update\n    // only once (that of the last term). To do that, we can keep a bitset which\n    // marks which documents have already been updated. So e.g. if term T1\n    // updates doc 7, and then we process term T2 and it updates doc 7 as well,\n    // we don't apply the update since we know T1 came last and therefore wins\n    // the update.\n    // We can also use that bitset as 'liveDocs' to pass to TermEnum.docs(), so\n    // that these documents aren't even returned.\n    \n    String currentField = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docsEnum = null;\n    \n    for (DocValuesUpdate update : updates) {\n      Term term = update.term;\n      int limit = update.docIDUpto;\n      \n      // TODO: we traverse the terms in update order (not term order) so that we\n      // apply the updates in the correct order, i.e. if two terms udpate the\n      // same document, the last one that came in wins, irrespective of the\n      // terms lexical order.\n      // we can apply the updates in terms order if we keep an updatesGen (and\n      // increment it with every update) and attach it to each NumericUpdate. Note\n      // that we cannot rely only on docIDUpto because an app may send two updates\n      // which will get same docIDUpto, yet will still need to respect the order\n      // those updates arrived.\n      \n      if (!term.field().equals(currentField)) {\n        // if we change the code to process updates in terms order, enable this assert\n//        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        // no terms in this field\n        continue;\n      }\n\n      if (termsEnum.seekExact(term.bytes())) {\n        // we don't need term frequencies for this\n        docsEnum = termsEnum.docs(segState.rld.getLiveDocs(), docsEnum, DocsEnum.FLAG_NONE);\n\n        DocValuesFieldUpdates dvUpdates = dvUpdatesContainer.getUpdates(update.field, update.type);\n        if (dvUpdates == null) {\n          dvUpdates = dvUpdatesContainer.newUpdates(update.field, update.type, segState.reader.maxDoc());\n        }\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (doc >= limit) {\n            break; // no more docs that can be updated for this term\n          }\n          dvUpdates.add(doc, update.value);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // DocValues updates\n  private synchronized void applyDocValuesUpdates(Iterable<? extends DocValuesUpdate> updates, \n      ReadersAndUpdates rld, SegmentReader reader, DocValuesFieldUpdates.Container dvUpdatesContainer) throws IOException {\n    Fields fields = reader.fields();\n\n    // TODO: we can process the updates per DV field, from last to first so that\n    // if multiple terms affect same document for the same field, we add an update\n    // only once (that of the last term). To do that, we can keep a bitset which\n    // marks which documents have already been updated. So e.g. if term T1\n    // updates doc 7, and then we process term T2 and it updates doc 7 as well,\n    // we don't apply the update since we know T1 came last and therefore wins\n    // the update.\n    // We can also use that bitset as 'liveDocs' to pass to TermEnum.docs(), so\n    // that these documents aren't even returned.\n    \n    String currentField = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docsEnum = null;\n    \n    //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate reader=\" + reader);\n    for (DocValuesUpdate update : updates) {\n      Term term = update.term;\n      int limit = update.docIDUpto;\n      \n      // TODO: we traverse the terms in update order (not term order) so that we\n      // apply the updates in the correct order, i.e. if two terms udpate the\n      // same document, the last one that came in wins, irrespective of the\n      // terms lexical order.\n      // we can apply the updates in terms order if we keep an updatesGen (and\n      // increment it with every update) and attach it to each NumericUpdate. Note\n      // that we cannot rely only on docIDUpto because an app may send two updates\n      // which will get same docIDUpto, yet will still need to respect the order\n      // those updates arrived.\n      \n      if (!term.field().equals(currentField)) {\n        // if we change the code to process updates in terms order, enable this assert\n//        assert currentField == null || currentField.compareTo(term.field()) < 0;\n        currentField = term.field();\n        Terms terms = fields.terms(currentField);\n        if (terms != null) {\n          termsEnum = terms.iterator(termsEnum);\n        } else {\n          termsEnum = null;\n        }\n      }\n\n      if (termsEnum == null) {\n        // no terms in this field\n        continue;\n      }\n\n      // System.out.println(\"  term=\" + term);\n\n      if (termsEnum.seekExact(term.bytes())) {\n        // we don't need term frequencies for this\n        docsEnum = termsEnum.docs(rld.getLiveDocs(), docsEnum, DocsEnum.FLAG_NONE);\n        //System.out.println(\"BDS: got docsEnum=\" + docsEnum);\n\n        DocValuesFieldUpdates dvUpdates = dvUpdatesContainer.getUpdates(update.field, update.type);\n        if (dvUpdates == null) {\n          dvUpdates = dvUpdatesContainer.newUpdates(update.field, update.type, reader.maxDoc());\n        }\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          //System.out.println(Thread.currentThread().getName() + \" numericDVUpdate term=\" + term + \" doc=\" + docID);\n          if (doc >= limit) {\n            break; // no more docs that can be updated for this term\n          }\n          dvUpdates.add(doc, update.value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8028ab7a24273833d53d35eb160dba5b57283cf5":["06805da26538ed636bd89b10c2699cc3834032ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["2636148e70acf2722b6fc6179449e118bb1a0cea"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"2636148e70acf2722b6fc6179449e118bb1a0cea":["8028ab7a24273833d53d35eb160dba5b57283cf5"]},"commit2Childs":{"8028ab7a24273833d53d35eb160dba5b57283cf5":["2636148e70acf2722b6fc6179449e118bb1a0cea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"06805da26538ed636bd89b10c2699cc3834032ae":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2636148e70acf2722b6fc6179449e118bb1a0cea":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}