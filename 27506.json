{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object...).mjava","commits":[{"id":"2eedfdeb748f47574ced45245973cdb5931d5cf1","date":1511749925,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException{\n\n    Object first = null;\n    Object second = null;\n    Object third = null;\n\n    if(values.length == 2) {\n      first = values[0];\n      second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof IntegerDistribution)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a IntegerDistributionm for probability at a specific value.\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      IntegerDistribution d = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return d.probability(predictOver.intValue());\n\n    } else if(values.length == 3) {\n      first = values[0];\n      second = values[1];\n      third = values[2];\n\n      if (!(first instanceof AbstractRealDistribution)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RealDistribution for probability ranges\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (!(third instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      AbstractRealDistribution realDistribution = (AbstractRealDistribution)first;\n      Number start = (Number) second;\n      Number end = (Number) third;\n      return realDistribution.probability(start.doubleValue(), end.doubleValue());\n    } else {\n      throw new IOException(\"The probability function expects 2 or 3 parameters\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException{\n\n    Object first = null;\n    Object second = null;\n    Object third = null;\n\n    if(values.length == 2) {\n      first = values[0];\n      second = values[1];\n\n      if (null == first) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n      }\n      if (null == second) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n      }\n      if (!(first instanceof IntegerDistribution)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a IntegerDistributionm for probability at a specific value.\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      IntegerDistribution d = (IntegerDistribution) first;\n      Number predictOver = (Number) second;\n      return d.probability(predictOver.intValue());\n\n    } else if(values.length == 3) {\n      first = values[0];\n      second = values[1];\n      third = values[2];\n\n      if (!(first instanceof AbstractRealDistribution)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RealDistribution for probability ranges\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n      if (!(second instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      if (!(third instanceof Number)) {\n        throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n      }\n\n      AbstractRealDistribution realDistribution = (AbstractRealDistribution)first;\n      Number start = (Number) second;\n      Number end = (Number) third;\n      return realDistribution.probability(start.doubleValue(), end.doubleValue());\n    } else {\n      throw new IOException(\"The probability function expects 2 or 3 parameters\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2eedfdeb748f47574ced45245973cdb5931d5cf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2eedfdeb748f47574ced45245973cdb5931d5cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"]},"commit2Childs":{"2eedfdeb748f47574ced45245973cdb5931d5cf1":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2eedfdeb748f47574ced45245973cdb5931d5cf1","f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}