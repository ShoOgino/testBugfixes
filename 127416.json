{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","pathOld":"/dev/null","sourceNew":"  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","pathOld":"/dev/null","sourceNew":"  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","pathOld":"/dev/null","sourceNew":"  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","pathOld":"/dev/null","sourceNew":"  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3102a9c9032617766c43974e7ec8b7a3148fb91","date":1519273763,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","sourceNew":"  /**\n   * Wait for all Solr nodes to be live\n   *\n   * @param timeout number of seconds to wait before throwing an IllegalStateException\n   * @throws IOException if there was an error communicating with ZooKeeper\n   * @throws InterruptedException if the calling thread is interrupted during the wait operation\n   */\n  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","sourceOld":"  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c252a8291191876badb5f6235f62895d6e36b33e","date":1519309955,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","sourceNew":"  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","sourceOld":"  /**\n   * Wait for all Solr nodes to be live\n   *\n   * @param timeout number of seconds to wait before throwing an IllegalStateException\n   * @throws IOException if there was an error communicating with ZooKeeper\n   * @throws InterruptedException if the calling thread is interrupted during the wait operation\n   */\n  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1dec9417ffbde1f9d7317d78c151248cb8f6af88","date":1520019381,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","sourceNew":"  /**\n   * Wait for all Solr nodes to be live\n   *\n   * @param timeout number of seconds to wait before throwing an IllegalStateException\n   * @throws IOException if there was an error communicating with ZooKeeper\n   * @throws InterruptedException if the calling thread is interrupted during the wait operation\n   */\n  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","sourceOld":"  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForAllNodes(int).mjava","sourceNew":"  /**\n   * This method wait till all Solr JVMs ( Jettys ) are running . It waits up to the timeout (in seconds) for the JVMs to\n   * be up before throwing IllegalStateException. This is called automatically on cluster startup and so is only needed\n   * when starting additional Jetty instances.\n   *\n   * @param timeout\n   *          number of seconds to wait before throwing an IllegalStateException\n   * @throws IOException\n   *           if there was an error communicating with ZooKeeper\n   * @throws InterruptedException\n   *           if the calling thread is interrupted during the wait operation\n   * @throws TimeoutException on timeout before all nodes being ready\n   */\n  public void waitForAllNodes(int timeout) throws IOException, InterruptedException, TimeoutException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","sourceOld":"  /**\n   * Wait for all Solr nodes to be live\n   *\n   * @param timeout number of seconds to wait before throwing an IllegalStateException\n   * @throws IOException if there was an error communicating with ZooKeeper\n   * @throws InterruptedException if the calling thread is interrupted during the wait operation\n   */\n  public void waitForAllNodes(int timeout) throws IOException, InterruptedException {\n    waitForAllNodes(jettys.size(), timeout);\n  }\n\n","bugFix":["1dec9417ffbde1f9d7317d78c151248cb8f6af88","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"c252a8291191876badb5f6235f62895d6e36b33e":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["c252a8291191876badb5f6235f62895d6e36b33e"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c252a8291191876badb5f6235f62895d6e36b33e":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["c252a8291191876badb5f6235f62895d6e36b33e"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d3102a9c9032617766c43974e7ec8b7a3148fb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}