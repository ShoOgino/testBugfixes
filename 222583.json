{"path":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#readFile(Directory,String).mjava","commits":[{"id":"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5","date":1196805804,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#readFile(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  private void readFile(Directory dir, String name) throws IOException {\n    IndexInput input = dir.openInput(name);\n    try {\n      long size = dir.fileLength(name);\n      long bytesLeft = size;\n      while (bytesLeft > 0) {\n        final int numToRead;\n        if (bytesLeft < buffer.length)\n          numToRead = (int) bytesLeft;\n        else\n          numToRead = buffer.length;\n        input.readBytes(buffer, 0, numToRead, false);\n        bytesLeft -= numToRead;\n      }\n      // Don't do this in your real backups!  This is just\n      // to force a backup to take a somewhat long time, to\n      // make sure we are exercising the fact that the\n      // IndexWriter should not delete this file even when I\n      // take my time reading it.\n      try {\n        Thread.sleep(1);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#readFile(Directory,String).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#readFile(Directory,String).mjava","sourceNew":"  private void readFile(Directory dir, String name) throws Exception {\n    IndexInput input = dir.openInput(name);\n    try {\n      long size = dir.fileLength(name);\n      long bytesLeft = size;\n      while (bytesLeft > 0) {\n        final int numToRead;\n        if (bytesLeft < buffer.length)\n          numToRead = (int) bytesLeft;\n        else\n          numToRead = buffer.length;\n        input.readBytes(buffer, 0, numToRead, false);\n        bytesLeft -= numToRead;\n      }\n      // Don't do this in your real backups!  This is just\n      // to force a backup to take a somewhat long time, to\n      // make sure we are exercising the fact that the\n      // IndexWriter should not delete this file even when I\n      // take my time reading it.\n      Thread.sleep(1);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void readFile(Directory dir, String name) throws IOException {\n    IndexInput input = dir.openInput(name);\n    try {\n      long size = dir.fileLength(name);\n      long bytesLeft = size;\n      while (bytesLeft > 0) {\n        final int numToRead;\n        if (bytesLeft < buffer.length)\n          numToRead = (int) bytesLeft;\n        else\n          numToRead = buffer.length;\n        input.readBytes(buffer, 0, numToRead, false);\n        bytesLeft -= numToRead;\n      }\n      // Don't do this in your real backups!  This is just\n      // to force a backup to take a somewhat long time, to\n      // make sure we are exercising the fact that the\n      // IndexWriter should not delete this file even when I\n      // take my time reading it.\n      try {\n        Thread.sleep(1);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#readFile(Directory,String).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#readFile(Directory,String).mjava","sourceNew":"  private void readFile(Directory dir, String name) throws Exception {\n    IndexInput input = dir.openInput(name);\n    try {\n      long size = dir.fileLength(name);\n      long bytesLeft = size;\n      while (bytesLeft > 0) {\n        final int numToRead;\n        if (bytesLeft < buffer.length)\n          numToRead = (int) bytesLeft;\n        else\n          numToRead = buffer.length;\n        input.readBytes(buffer, 0, numToRead, false);\n        bytesLeft -= numToRead;\n      }\n      // Don't do this in your real backups!  This is just\n      // to force a backup to take a somewhat long time, to\n      // make sure we are exercising the fact that the\n      // IndexWriter should not delete this file even when I\n      // take my time reading it.\n      Thread.sleep(1);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  private void readFile(Directory dir, String name) throws Exception {\n    IndexInput input = dir.openInput(name);\n    try {\n      long size = dir.fileLength(name);\n      long bytesLeft = size;\n      while (bytesLeft > 0) {\n        final int numToRead;\n        if (bytesLeft < buffer.length)\n          numToRead = (int) bytesLeft;\n        else\n          numToRead = buffer.length;\n        input.readBytes(buffer, 0, numToRead, false);\n        bytesLeft -= numToRead;\n      }\n      // Don't do this in your real backups!  This is just\n      // to force a backup to take a somewhat long time, to\n      // make sure we are exercising the fact that the\n      // IndexWriter should not delete this file even when I\n      // take my time reading it.\n      Thread.sleep(1);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"]},"commit2Childs":{"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}