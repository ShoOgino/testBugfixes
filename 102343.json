{"path":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","commits":[{"id":"5391288921372c32bf6096df320497ad2d05757f","date":1200634221,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"/dev/null","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    \n    IndexReader reader = core.getSearcher().get().getReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5391288921372c32bf6096df320497ad2d05757f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5391288921372c32bf6096df320497ad2d05757f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5391288921372c32bf6096df320497ad2d05757f":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5391288921372c32bf6096df320497ad2d05757f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}