{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#dumpIterator(String,Iterator[#],PrintStream).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#dumpIterator(String,Iterator[#],PrintStream).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#dumpIterator(String,Iterator[#],PrintStream).mjava","sourceNew":"  /**\n   * Convenience method for logging an iterator.\n   *\n   * @param label  String logged before/after the items in the iterator\n   * @param iter   Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator<?> iter,\n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \" + label + \" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \" + label + \" ***\");\n  }\n\n","sourceOld":"  /**\n   * Convenience method for logging an iterator.\n   *\n   * @param label  String logged before/after the items in the iterator\n   * @param iter   Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator<?> iter,\n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \" + label + \" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \" + label + \" ***\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c342e04e879b5c549539944338f5ec0ff3000f3","date":1539630497,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#dumpIterator(String,Iterator[#],PrintStream).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#dumpIterator(String,Iterator[#],PrintStream).mjava","sourceNew":"  /**\n   * Convenience method for logging an iterator.\n   *\n   * @param label  String logged before/after the items in the iterator\n   * @param iter   Each next() is toString()ed and logged on its own line. If iter is null this is logged differently then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator<?> iter,\n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \" + label + \" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \" + label + \" ***\");\n  }\n\n","sourceOld":"  /**\n   * Convenience method for logging an iterator.\n   *\n   * @param label  String logged before/after the items in the iterator\n   * @param iter   Each next() is toString()ed and logged on it's own line. If iter is null this is logged differnetly then an empty iterator.\n   * @param stream Stream to log messages to.\n   */\n  public static void dumpIterator(String label, Iterator<?> iter,\n                                  PrintStream stream) {\n    stream.println(\"*** BEGIN \" + label + \" ***\");\n    if (null == iter) {\n      stream.println(\" ... NULL ...\");\n    } else {\n      while (iter.hasNext()) {\n        stream.println(iter.next().toString());\n      }\n    }\n    stream.println(\"*** END \" + label + \" ***\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c342e04e879b5c549539944338f5ec0ff3000f3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c342e04e879b5c549539944338f5ec0ff3000f3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c342e04e879b5c549539944338f5ec0ff3000f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c342e04e879b5c549539944338f5ec0ff3000f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}