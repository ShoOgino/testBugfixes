{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene50PostingsReader#decodeTerm(long[], DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsReader#decodeTerm(long[], DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","sourceOld":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene50PostingsReader#decodeTerm(long[], DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsReader#decodeTerm(DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","sourceOld":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsReader#decodeTerm(long[], DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsReader#decodeTerm(long[], DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","sourceOld":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsReader#decodeTerm(DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer#readTermState(long,long,long,DataInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsReader#decodeTerm(DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","sourceOld":"  /**\n   * Reads a {@link BlockTermState} from the provided {@link DataInput}.\n   * <p>\n   * Simpler variant of {@link Lucene84PostingsReader#decodeTerm(long[], DataInput, FieldInfo, BlockTermState, boolean)}.\n   *\n   * @param reuse {@link BlockTermState} to reuse; or null to create a new one.\n   */\n  public BlockTermState readTermState(long baseDocStartFP, long basePosStartFP, long basePayStartFP,\n                                      DataInput termStatesInput, FieldInfo fieldInfo, BlockTermState reuse) throws IOException {\n    IndexOptions indexOptions = fieldInfo.getIndexOptions();\n    boolean hasFreqs = indexOptions != IndexOptions.DOCS;\n    boolean hasPositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n\n    IntBlockTermState intTermState = reuse != null ? reset((IntBlockTermState) reuse) : new IntBlockTermState();\n\n    intTermState.docFreq = termStatesInput.readVInt();\n    intTermState.totalTermFreq = hasFreqs ?\n        intTermState.docFreq + termStatesInput.readVLong() : intTermState.docFreq;\n    assert intTermState.totalTermFreq >= intTermState.docFreq;\n\n    if (intTermState.docFreq == 1) {\n      intTermState.singletonDocID = termStatesInput.readVInt();\n    } else {\n      intTermState.docStartFP = baseDocStartFP + termStatesInput.readVLong();\n    }\n\n    if (hasPositions) {\n      intTermState.posStartFP = basePosStartFP + termStatesInput.readVLong();\n      boolean hasOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      if (hasOffsets || fieldInfo.hasPayloads()) {\n        intTermState.payStartFP = basePayStartFP + termStatesInput.readVLong();\n      }\n      if (intTermState.totalTermFreq > BLOCK_SIZE) {\n        intTermState.lastPosBlockOffset = termStatesInput.readVLong();\n      }\n    }\n    if (intTermState.docFreq > BLOCK_SIZE) {\n      intTermState.skipOffset = termStatesInput.readVLong();\n    }\n    return intTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}