{"path":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","pathOld":"modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","sourceNew":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = scratch.length = chs.length();\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars;\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(charUtils.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch;\n  }\n\n","sourceOld":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = scratch.length = chs.length();\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars;\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(charUtils.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","sourceNew":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = chs.length();\n    scratch.setLength(length);\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars();\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(charUtils.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch.get();\n  }\n\n","sourceOld":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = scratch.length = chs.length();\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars;\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(charUtils.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch;\n  }\n\n","bugFix":["c9372469b09ed273740e18f76520c99aa075358b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","sourceNew":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = chs.length();\n    scratch.setLength(length);\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars();\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(Character.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch.get();\n  }\n\n","sourceOld":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = chs.length();\n    scratch.setLength(length);\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars();\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(charUtils.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","sourceNew":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = chs.length();\n    scratch.setLength(length);\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars();\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(Character.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch.get();\n  }\n\n","sourceOld":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = chs.length();\n    scratch.setLength(length);\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars();\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(charUtils.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#toLowercase(CharSequence).mjava","sourceNew":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = chs.length();\n    scratch.setLength(length);\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars();\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(Character.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch.get();\n  }\n\n","sourceOld":"  /**\n   * Convert to lowercase in-place.\n   */\n  private CharSequence toLowercase(CharSequence chs) {\n    final int length = chs.length();\n    scratch.setLength(length);\n    scratch.grow(length);\n\n    char buffer[] = scratch.chars();\n    for (int i = 0; i < length;) {\n      i += Character.toChars(\n          Character.toLowerCase(charUtils.codePointAt(chs, i)), buffer, i);      \n    }\n\n    return scratch.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}