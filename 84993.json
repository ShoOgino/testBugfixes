{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = q.clone();\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"not_in_index\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    qq.add(new BoostQuery(phrase, 0f), BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"b\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"not_in_index\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    qq.add(new BoostQuery(phrase, 0f), BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"b\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"not_in_index\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    qq.add(new BoostQuery(phrase, 0f), BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"b\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"not_in_index\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    qq.add(new BoostQuery(phrase, 0f), BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"b\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"field\", \"a\")), pq),\n        1.0f);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"not_in_index\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    qq.add(new BoostQuery(phrase, 0f), BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"b\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"field\", \"a\")), pq),\n        1.0f);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"not_in_index\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    qq.add(new BoostQuery(phrase, 0f), BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"b\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"field\", \"a\")), pq),\n        1.0f);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"field\", \"a\")), pq),\n        1.0f);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q.build(), 10).getMaxScore();\n    Query subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"not_in_index\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery.Builder qq = new BooleanQuery.Builder();\n    for (BooleanClause clause : q.build()) {\n      qq.add(clause);\n    }\n    PhraseQuery phrase = new PhraseQuery(\"field\", \"not_in_index\", \"another_not_in_index\");\n    qq.add(new BoostQuery(phrase, 0f), BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq.build(), 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new BoostQuery(new TermQuery(new Term(\"field\", \"b\")), 0f);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q.build(), 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"field\", \"a\")), pq),\n        1.0f);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits.value);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits.value);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"field\", \"a\")), pq),\n        1.0f);\n    assertEquals(1, s.search(dmq, 10).totalHits.value);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new ClassicSimilarity());\n\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q.build(), 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery.Builder();\n    pq = new PhraseQuery(\"field\", new String[0]);\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q.build(), 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"field\", \"a\")), pq),\n        1.0f);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a5d3ee590efa5b1f764e8ce985d9125bc97af483","c8a0e442f7b61f811680273b25da95994a724466"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["25f698887111a682424e759ba36083180899a1fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c8a0e442f7b61f811680273b25da95994a724466":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["c8a0e442f7b61f811680273b25da95994a724466"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"25f698887111a682424e759ba36083180899a1fd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["25f698887111a682424e759ba36083180899a1fd"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","83788ad129a5154d5c6562c4e8ce3db48793aada"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f698887111a682424e759ba36083180899a1fd":["e9e1499c5d26c936238506df90a3c02c76707722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}