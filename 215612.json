{"path":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#init(SolrConfig,Map[String,String]).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    ignoreCase = getBoolean(\"ignoreCase\",false);\n    expand = getBoolean(\"expand\",true);\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        wlist = loader.getLines(synonyms);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap();\n      parseRules(wlist, synMap, \"=>\", \",\", ignoreCase,expand);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(SolrConfig solrConfig, Map<String, String> args) {\n    super.init(solrConfig, args);\n    String synonyms = args.get(\"synonyms\");\n\n    ignoreCase = getBoolean(\"ignoreCase\",false);\n    expand = getBoolean(\"expand\",true);\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        wlist = solrConfig.getLines(synonyms);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap();\n      parseRules(wlist, synMap, \"=>\", \",\", ignoreCase,expand);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","date":1201149698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        wlist = loader.getLines(synonyms);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    ignoreCase = getBoolean(\"ignoreCase\",false);\n    expand = getBoolean(\"expand\",true);\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        wlist = loader.getLines(synonyms);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap();\n      parseRules(wlist, synMap, \"=>\", \",\", ignoreCase,expand);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed0158ac307bee4b81f4c26ebe88cddc950f46db","date":1211204318,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        wlist = loader.getLines(synonyms);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        wlist = loader.getLines(synonyms);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"460ea70a086b1e40166cc236947edc7e52a3ddf9","date":1217405516,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new java.io.File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          for (String file : files) {\n            wlist = loader.getLines(file.trim());\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        wlist = loader.getLines(synonyms);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2118892924e69f824c9ce655af5811d81cde904b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"172459b18e9f43d0e4960197108f0b8a615ad5be","date":1217406247,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          for (String file : files) {\n            wlist = loader.getLines(file.trim());\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new java.io.File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          for (String file : files) {\n            wlist = loader.getLines(file.trim());\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n      if (wlist.size()<=20) {\n        SolrCore.log.fine(\"SynonymMap \"+synonyms +\":\"+synMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2118892924e69f824c9ce655af5811d81cde904b","date":1226193851,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          for (String file : files) {\n            wlist = loader.getLines(file.trim());\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","bugFix":["460ea70a086b1e40166cc236947edc7e52a3ddf9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"460ea70a086b1e40166cc236947edc7e52a3ddf9":["ed0158ac307bee4b81f4c26ebe88cddc950f46db"],"ed0158ac307bee4b81f4c26ebe88cddc950f46db":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2118892924e69f824c9ce655af5811d81cde904b":["172459b18e9f43d0e4960197108f0b8a615ad5be"],"ad94625fb8d088209f46650c8097196fec67f00c":["2118892924e69f824c9ce655af5811d81cde904b"],"172459b18e9f43d0e4960197108f0b8a615ad5be":["460ea70a086b1e40166cc236947edc7e52a3ddf9"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["ed0158ac307bee4b81f4c26ebe88cddc950f46db"],"460ea70a086b1e40166cc236947edc7e52a3ddf9":["172459b18e9f43d0e4960197108f0b8a615ad5be"],"ed0158ac307bee4b81f4c26ebe88cddc950f46db":["460ea70a086b1e40166cc236947edc7e52a3ddf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"2118892924e69f824c9ce655af5811d81cde904b":["ad94625fb8d088209f46650c8097196fec67f00c"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"172459b18e9f43d0e4960197108f0b8a615ad5be":["2118892924e69f824c9ce655af5811d81cde904b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}