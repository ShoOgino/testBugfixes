{"path":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#repeatableSample(ScoredDocIDs,int,int,Algorithm,Sorted).mjava","commits":[{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#repeatableSample(ScoredDocIDs,int,int,Algorithm,Sorted).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/RandomSample#repeatableSample(ScoredDocIDs,int,int,Algorithm,Sorted).mjava","sourceNew":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using <code>algorithm</code>.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @param algorithm Which algorithm to use.\n   * @param sorted Sorted.YES to sort the sample values in ascending order before returning;\n   * Sorted.NO to return them in essentially random order.\n   * @return An array of values chosen from the collection.\n   */\n  private static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize,\n      Algorithm algorithm, Sorted sorted)\n  throws IOException {\n    if (collection == null) {\n      throw new IOException(\"docIdSet is null\");\n    }\n    if (sampleSize < 1) {\n      throw new IOException(\"sampleSize < 1 (\" + sampleSize + \")\");\n    }\n    if (collectionSize < sampleSize) {\n      throw new IOException(\"collectionSize (\" + collectionSize + \") less than sampleSize (\" + sampleSize + \")\");\n    }\n    int[] sample = new int[sampleSize];\n    long[] times = new long[4];\n    if (algorithm == Algorithm.TRAVERSAL) {\n      sample1(collection, collectionSize, sample, times);\n    } else if (algorithm == Algorithm.HASHING) {\n      sample2(collection, collectionSize, sample, times);\n    } else {\n      throw new IllegalArgumentException(\"Invalid algorithm selection\");\n    }\n    if (sorted == Sorted.YES) {\n      Arrays.sort(sample);\n    }\n    if (returnTimings) {\n      times[3] = System.currentTimeMillis();\n      if (logger.isLoggable(Level.FINEST)) {\n        logger.finest(\"Times: \" + (times[1] - times[0]) + \"ms, \"\n            + (times[2] - times[1]) + \"ms, \" + (times[3] - times[2])+\"ms\");\n      }\n    }\n    return sample;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using <code>algorithm</code>.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @param algorithm Which algorithm to use.\n   * @param sorted Sorted.YES to sort the sample values in ascending order before returning;\n   * Sorted.NO to return them in essentially random order.\n   * @return An array of values chosen from the collection.\n   */\n  public static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize,\n      Algorithm algorithm, Sorted sorted)\n  throws IOException {\n    if (collection == null) {\n      throw new IOException(\"docIdSet is null\");\n    }\n    if (sampleSize < 1) {\n      throw new IOException(\"sampleSize < 1 (\" + sampleSize + \")\");\n    }\n    if (collectionSize < sampleSize) {\n      throw new IOException(\"collectionSize (\" + collectionSize + \") less than sampleSize (\" + sampleSize + \")\");\n    }\n    int[] sample = new int[sampleSize];\n    long[] times = new long[4];\n    if (algorithm == Algorithm.TRAVERSAL) {\n      RandomSample.sample1(collection, collectionSize, sample, times);\n    } else if (algorithm == Algorithm.HASHING) {\n      RandomSample.sample2(collection, collectionSize, sample, times);\n    } else {\n      throw new IllegalArgumentException(\"Invalid algorithm selection\");\n    }\n    if (sorted == Sorted.YES) {\n      Arrays.sort(sample);\n    }\n    if (RandomSample.returnTimings) {\n      times[3] = System.currentTimeMillis();\n      if (logger.isLoggable(Level.FINEST)) {\n        logger.finest(\"Times: \" + (times[1] - times[0]) + \"ms, \"\n            + (times[2] - times[1]) + \"ms, \" + (times[3] - times[2])+\"ms\");\n      }\n    }\n    return sample;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#repeatableSample(ScoredDocIDs,int,int,Algorithm,Sorted).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RepeatableSampler#repeatableSample(ScoredDocIDs,int,int,Algorithm,Sorted).mjava","sourceNew":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using <code>algorithm</code>.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @param algorithm Which algorithm to use.\n   * @param sorted Sorted.YES to sort the sample values in ascending order before returning;\n   * Sorted.NO to return them in essentially random order.\n   * @return An array of values chosen from the collection.\n   */\n  private static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize,\n      Algorithm algorithm, Sorted sorted)\n  throws IOException {\n    if (collection == null) {\n      throw new IOException(\"docIdSet is null\");\n    }\n    if (sampleSize < 1) {\n      throw new IOException(\"sampleSize < 1 (\" + sampleSize + \")\");\n    }\n    if (collectionSize < sampleSize) {\n      throw new IOException(\"collectionSize (\" + collectionSize + \") less than sampleSize (\" + sampleSize + \")\");\n    }\n    int[] sample = new int[sampleSize];\n    long[] times = new long[4];\n    if (algorithm == Algorithm.TRAVERSAL) {\n      sample1(collection, collectionSize, sample, times);\n    } else if (algorithm == Algorithm.HASHING) {\n      sample2(collection, collectionSize, sample, times);\n    } else {\n      throw new IllegalArgumentException(\"Invalid algorithm selection\");\n    }\n    if (sorted == Sorted.YES) {\n      Arrays.sort(sample);\n    }\n    if (returnTimings) {\n      times[3] = System.currentTimeMillis();\n      if (logger.isLoggable(Level.FINEST)) {\n        logger.finest(\"Times: \" + (times[1] - times[0]) + \"ms, \"\n            + (times[2] - times[1]) + \"ms, \" + (times[3] - times[2])+\"ms\");\n      }\n    }\n    return sample;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>sampleSize</code> values from the first <code>collectionSize</code>\n   * locations of <code>collection</code>, chosen using <code>algorithm</code>.\n   * @param collection The values from which a sample is wanted.\n   * @param collectionSize The number of values (from the first) from which to draw the sample.\n   * @param sampleSize The number of values to return.\n   * @param algorithm Which algorithm to use.\n   * @param sorted Sorted.YES to sort the sample values in ascending order before returning;\n   * Sorted.NO to return them in essentially random order.\n   * @return An array of values chosen from the collection.\n   */\n  private static int[] repeatableSample(ScoredDocIDs collection,\n      int collectionSize, int sampleSize,\n      Algorithm algorithm, Sorted sorted)\n  throws IOException {\n    if (collection == null) {\n      throw new IOException(\"docIdSet is null\");\n    }\n    if (sampleSize < 1) {\n      throw new IOException(\"sampleSize < 1 (\" + sampleSize + \")\");\n    }\n    if (collectionSize < sampleSize) {\n      throw new IOException(\"collectionSize (\" + collectionSize + \") less than sampleSize (\" + sampleSize + \")\");\n    }\n    int[] sample = new int[sampleSize];\n    long[] times = new long[4];\n    if (algorithm == Algorithm.TRAVERSAL) {\n      sample1(collection, collectionSize, sample, times);\n    } else if (algorithm == Algorithm.HASHING) {\n      sample2(collection, collectionSize, sample, times);\n    } else {\n      throw new IllegalArgumentException(\"Invalid algorithm selection\");\n    }\n    if (sorted == Sorted.YES) {\n      Arrays.sort(sample);\n    }\n    if (returnTimings) {\n      times[3] = System.currentTimeMillis();\n      if (logger.isLoggable(Level.FINEST)) {\n        logger.finest(\"Times: \" + (times[1] - times[0]) + \"ms, \"\n            + (times[2] - times[1]) + \"ms, \" + (times[3] - times[2])+\"ms\");\n      }\n    }\n    return sample;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["99b17503f4e360f8140fe80a593268486cd718b4"],"99b17503f4e360f8140fe80a593268486cd718b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99b17503f4e360f8140fe80a593268486cd718b4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b17503f4e360f8140fe80a593268486cd718b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}