{"path":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testNestedDisjunction().mjava","commits":[{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testNestedDisjunction().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedDisjunction() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n    TermQuery q3 = new TermQuery(t3);\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(q1, Occur.SHOULD);\n    bq1.add(q2, Occur.SHOULD);\n\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(bq1, Occur.SHOULD);\n    bq2.add(q3, Occur.SHOULD);\n\n    BooleanQuery bq3 = new BooleanQuery();\n    bq3.add(new RandomApproximationQuery(q1, random()), Occur.SHOULD);\n    bq3.add(new RandomApproximationQuery(q2, random()), Occur.SHOULD);\n\n    BooleanQuery bq4 = new BooleanQuery();\n    bq4.add(bq3, Occur.SHOULD);\n    bq4.add(q3, Occur.SHOULD);\n\n    assertSameScores(bq2, bq4);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testNestedDisjunction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testNestedDisjunction().mjava","sourceNew":"  public void testNestedDisjunction() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n    TermQuery q3 = new TermQuery(t3);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.SHOULD);\n    bq1.add(q2, Occur.SHOULD);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(bq1.build(), Occur.SHOULD);\n    bq2.add(q3, Occur.SHOULD);\n\n    BooleanQuery.Builder bq3 = new BooleanQuery.Builder();\n    bq3.add(new RandomApproximationQuery(q1, random()), Occur.SHOULD);\n    bq3.add(new RandomApproximationQuery(q2, random()), Occur.SHOULD);\n\n    BooleanQuery.Builder bq4 = new BooleanQuery.Builder();\n    bq4.add(bq3.build(), Occur.SHOULD);\n    bq4.add(q3, Occur.SHOULD);\n\n    assertSameScores(bq2.build(), bq4.build());\n  }\n\n","sourceOld":"  public void testNestedDisjunction() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n    TermQuery q3 = new TermQuery(t3);\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(q1, Occur.SHOULD);\n    bq1.add(q2, Occur.SHOULD);\n\n    BooleanQuery bq2 = new BooleanQuery();\n    bq2.add(bq1, Occur.SHOULD);\n    bq2.add(q3, Occur.SHOULD);\n\n    BooleanQuery bq3 = new BooleanQuery();\n    bq3.add(new RandomApproximationQuery(q1, random()), Occur.SHOULD);\n    bq3.add(new RandomApproximationQuery(q2, random()), Occur.SHOULD);\n\n    BooleanQuery bq4 = new BooleanQuery();\n    bq4.add(bq3, Occur.SHOULD);\n    bq4.add(q3, Occur.SHOULD);\n\n    assertSameScores(bq2, bq4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d5fe59615222476b9beeeb4e3fbdc153114a3a","date":1523262173,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testNestedDisjunction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testNestedDisjunction().mjava","sourceNew":"  public void testNestedDisjunction() throws Exception {\n    Term t1 = randomTerm();\n    Term t2;\n    do {\n      t2 = randomTerm();\n    } while (t1.equals(t2));\n    Term t3 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n    TermQuery q3 = new TermQuery(t3);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.SHOULD);\n    bq1.add(q2, Occur.SHOULD);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(bq1.build(), Occur.SHOULD);\n    bq2.add(q3, Occur.SHOULD);\n\n    BooleanQuery.Builder bq3 = new BooleanQuery.Builder();\n    bq3.add(new RandomApproximationQuery(q1, random()), Occur.SHOULD);\n    bq3.add(new RandomApproximationQuery(q2, random()), Occur.SHOULD);\n\n    BooleanQuery.Builder bq4 = new BooleanQuery.Builder();\n    bq4.add(bq3.build(), Occur.SHOULD);\n    bq4.add(q3, Occur.SHOULD);\n\n    assertSameScores(bq2.build(), bq4.build());\n  }\n\n","sourceOld":"  public void testNestedDisjunction() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n    TermQuery q3 = new TermQuery(t3);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.SHOULD);\n    bq1.add(q2, Occur.SHOULD);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(bq1.build(), Occur.SHOULD);\n    bq2.add(q3, Occur.SHOULD);\n\n    BooleanQuery.Builder bq3 = new BooleanQuery.Builder();\n    bq3.add(new RandomApproximationQuery(q1, random()), Occur.SHOULD);\n    bq3.add(new RandomApproximationQuery(q2, random()), Occur.SHOULD);\n\n    BooleanQuery.Builder bq4 = new BooleanQuery.Builder();\n    bq4.add(bq3.build(), Occur.SHOULD);\n    bq4.add(q3, Occur.SHOULD);\n\n    assertSameScores(bq2.build(), bq4.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testNestedDisjunction().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestApproximationSearchEquivalence#testNestedDisjunction().mjava","sourceNew":"  public void testNestedDisjunction() throws Exception {\n    Term t1 = randomTerm();\n    Term t2;\n    do {\n      t2 = randomTerm();\n    } while (t1.equals(t2));\n    Term t3 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n    TermQuery q3 = new TermQuery(t3);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.SHOULD);\n    bq1.add(q2, Occur.SHOULD);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(bq1.build(), Occur.SHOULD);\n    bq2.add(q3, Occur.SHOULD);\n\n    BooleanQuery.Builder bq3 = new BooleanQuery.Builder();\n    bq3.add(new RandomApproximationQuery(q1, random()), Occur.SHOULD);\n    bq3.add(new RandomApproximationQuery(q2, random()), Occur.SHOULD);\n\n    BooleanQuery.Builder bq4 = new BooleanQuery.Builder();\n    bq4.add(bq3.build(), Occur.SHOULD);\n    bq4.add(q3, Occur.SHOULD);\n\n    assertSameScores(bq2.build(), bq4.build());\n  }\n\n","sourceOld":"  public void testNestedDisjunction() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    TermQuery q1 = new TermQuery(t1);\n    TermQuery q2 = new TermQuery(t2);\n    TermQuery q3 = new TermQuery(t3);\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(q1, Occur.SHOULD);\n    bq1.add(q2, Occur.SHOULD);\n\n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    bq2.add(bq1.build(), Occur.SHOULD);\n    bq2.add(q3, Occur.SHOULD);\n\n    BooleanQuery.Builder bq3 = new BooleanQuery.Builder();\n    bq3.add(new RandomApproximationQuery(q1, random()), Occur.SHOULD);\n    bq3.add(new RandomApproximationQuery(q2, random()), Occur.SHOULD);\n\n    BooleanQuery.Builder bq4 = new BooleanQuery.Builder();\n    bq4.add(bq3.build(), Occur.SHOULD);\n    bq4.add(q3, Occur.SHOULD);\n\n    assertSameScores(bq2.build(), bq4.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","b7d5fe59615222476b9beeeb4e3fbdc153114a3a"],"b7d5fe59615222476b9beeeb4e3fbdc153114a3a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d58e44159788900f4a2113b84463dc3fbbf80f20","b7d5fe59615222476b9beeeb4e3fbdc153114a3a"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7d5fe59615222476b9beeeb4e3fbdc153114a3a":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}