{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","pathOld":"/dev/null","sourceNew":"    // $ANTLR start \"bitwise_xor\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n    public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n        JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_BIT_XOR18=null;\n        JavascriptParser.bitwise_and_return bitwise_and17 =null;\n\n        JavascriptParser.bitwise_and_return bitwise_and19 =null;\n\n\n        CommonTree AT_BIT_XOR18_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n            bitwise_and17=bitwise_and();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, bitwise_and17.getTree());\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n            loop5:\n            do {\n                int alt5=2;\n                int LA5_0 = input.LA(1);\n\n                if ( (LA5_0==AT_BIT_XOR) ) {\n                    alt5=1;\n                }\n\n\n                switch (alt5) {\n            \tcase 1 :\n            \t    // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n            \t    {\n            \t    AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n            \t    AT_BIT_XOR18_tree = \n            \t    (CommonTree)adaptor.create(AT_BIT_XOR18)\n            \t    ;\n            \t    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n\n            \t    pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n            \t    bitwise_and19=bitwise_and();\n\n            \t    state._fsp--;\n\n            \t    adaptor.addChild(root_0, bitwise_and19.getTree());\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop5;\n                }\n            } while (true);\n\n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"bitwise_xor\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3623d67605fbbdfce2fadea678e2f4bbe2ab2310","date":1379042933,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","sourceNew":"    // $ANTLR start \"bitwise_xor\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n    public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n        JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_BIT_XOR18=null;\n        JavascriptParser.bitwise_and_return bitwise_and17 =null;\n\n        JavascriptParser.bitwise_and_return bitwise_and19 =null;\n\n\n        CommonTree AT_BIT_XOR18_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n            bitwise_and17=bitwise_and();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, bitwise_and17.getTree());\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n            loop5:\n            do {\n                int alt5=2;\n                int LA5_0 = input.LA(1);\n\n                if ( (LA5_0==AT_BIT_XOR) ) {\n                    alt5=1;\n                }\n\n\n                switch (alt5) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n                    {\n                    AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n                    AT_BIT_XOR18_tree = \n                    (CommonTree)adaptor.create(AT_BIT_XOR18)\n                    ;\n                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n\n                    pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n                    bitwise_and19=bitwise_and();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, bitwise_and19.getTree());\n\n                    }\n                    break;\n\n                default :\n                    break loop5;\n                }\n            } while (true);\n\n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"bitwise_xor\"\n\n","sourceOld":"    // $ANTLR start \"bitwise_xor\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n    public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n        JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_BIT_XOR18=null;\n        JavascriptParser.bitwise_and_return bitwise_and17 =null;\n\n        JavascriptParser.bitwise_and_return bitwise_and19 =null;\n\n\n        CommonTree AT_BIT_XOR18_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n            bitwise_and17=bitwise_and();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, bitwise_and17.getTree());\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n            loop5:\n            do {\n                int alt5=2;\n                int LA5_0 = input.LA(1);\n\n                if ( (LA5_0==AT_BIT_XOR) ) {\n                    alt5=1;\n                }\n\n\n                switch (alt5) {\n            \tcase 1 :\n            \t    // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n            \t    {\n            \t    AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n            \t    AT_BIT_XOR18_tree = \n            \t    (CommonTree)adaptor.create(AT_BIT_XOR18)\n            \t    ;\n            \t    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n\n            \t    pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n            \t    bitwise_and19=bitwise_and();\n\n            \t    state._fsp--;\n\n            \t    adaptor.addChild(root_0, bitwise_and19.getTree());\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop5;\n                }\n            } while (true);\n\n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"bitwise_xor\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","sourceNew":"    // $ANTLR start \"bitwise_xor\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n    public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n        JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token AT_BIT_XOR18=null;\n        ParserRuleReturnScope bitwise_and17 =null;\n        ParserRuleReturnScope bitwise_and19 =null;\n\n        CommonTree AT_BIT_XOR18_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n            bitwise_and17=bitwise_and();\n            state._fsp--;\n\n            adaptor.addChild(root_0, bitwise_and17.getTree());\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n            loop5:\n            while (true) {\n                int alt5=2;\n                int LA5_0 = input.LA(1);\n                if ( (LA5_0==AT_BIT_XOR) ) {\n                    alt5=1;\n                }\n\n                switch (alt5) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n                    {\n                    AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n                    AT_BIT_XOR18_tree = (CommonTree)adaptor.create(AT_BIT_XOR18);\n                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n                    pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n                    bitwise_and19=bitwise_and();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, bitwise_and19.getTree());\n\n                    }\n                    break;\n\n                default :\n                    break loop5;\n                }\n            }\n\n            }\n\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"bitwise_xor\"\n\n","sourceOld":"    // $ANTLR start \"bitwise_xor\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n    public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n        JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token AT_BIT_XOR18=null;\n        JavascriptParser.bitwise_and_return bitwise_and17 =null;\n\n        JavascriptParser.bitwise_and_return bitwise_and19 =null;\n\n\n        CommonTree AT_BIT_XOR18_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n            bitwise_and17=bitwise_and();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, bitwise_and17.getTree());\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n            loop5:\n            do {\n                int alt5=2;\n                int LA5_0 = input.LA(1);\n\n                if ( (LA5_0==AT_BIT_XOR) ) {\n                    alt5=1;\n                }\n\n\n                switch (alt5) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n                    {\n                    AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n                    AT_BIT_XOR18_tree = \n                    (CommonTree)adaptor.create(AT_BIT_XOR18)\n                    ;\n                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n\n                    pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n                    bitwise_and19=bitwise_and();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, bitwise_and19.getTree());\n\n                    }\n                    break;\n\n                default :\n                    break loop5;\n                }\n            } while (true);\n\n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"bitwise_xor\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","sourceNew":"  // $ANTLR start \"bitwise_xor\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n  public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n    JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_BIT_XOR18=null;\n    ParserRuleReturnScope bitwise_and17 =null;\n    ParserRuleReturnScope bitwise_and19 =null;\n\n    CommonTree AT_BIT_XOR18_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n      bitwise_and17=bitwise_and();\n      state._fsp--;\n\n      adaptor.addChild(root_0, bitwise_and17.getTree());\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n      loop5:\n      while (true) {\n        int alt5=2;\n        int LA5_0 = input.LA(1);\n        if ( (LA5_0==AT_BIT_XOR) ) {\n          alt5=1;\n        }\n\n        switch (alt5) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n          {\n          AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n          AT_BIT_XOR18_tree = (CommonTree)adaptor.create(AT_BIT_XOR18);\n          root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n          pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n          bitwise_and19=bitwise_and();\n          state._fsp--;\n\n          adaptor.addChild(root_0, bitwise_and19.getTree());\n\n          }\n          break;\n\n        default :\n          break loop5;\n        }\n      }\n\n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"bitwise_xor\"\n\n","sourceOld":"    // $ANTLR start \"bitwise_xor\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n    public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n        JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token AT_BIT_XOR18=null;\n        ParserRuleReturnScope bitwise_and17 =null;\n        ParserRuleReturnScope bitwise_and19 =null;\n\n        CommonTree AT_BIT_XOR18_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n            bitwise_and17=bitwise_and();\n            state._fsp--;\n\n            adaptor.addChild(root_0, bitwise_and17.getTree());\n\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n            loop5:\n            while (true) {\n                int alt5=2;\n                int LA5_0 = input.LA(1);\n                if ( (LA5_0==AT_BIT_XOR) ) {\n                    alt5=1;\n                }\n\n                switch (alt5) {\n                case 1 :\n                    // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n                    {\n                    AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n                    AT_BIT_XOR18_tree = (CommonTree)adaptor.create(AT_BIT_XOR18);\n                    root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n                    pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n                    bitwise_and19=bitwise_and();\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, bitwise_and19.getTree());\n\n                    }\n                    break;\n\n                default :\n                    break loop5;\n                }\n            }\n\n            }\n\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"bitwise_xor\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","pathOld":"/dev/null","sourceNew":"  // $ANTLR start \"bitwise_xor\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n  public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n    JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_BIT_XOR18=null;\n    ParserRuleReturnScope bitwise_and17 =null;\n    ParserRuleReturnScope bitwise_and19 =null;\n\n    CommonTree AT_BIT_XOR18_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n      bitwise_and17=bitwise_and();\n      state._fsp--;\n\n      adaptor.addChild(root_0, bitwise_and17.getTree());\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n      loop5:\n      while (true) {\n        int alt5=2;\n        int LA5_0 = input.LA(1);\n        if ( (LA5_0==AT_BIT_XOR) ) {\n          alt5=1;\n        }\n\n        switch (alt5) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n          {\n          AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n          AT_BIT_XOR18_tree = (CommonTree)adaptor.create(AT_BIT_XOR18);\n          root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n          pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n          bitwise_and19=bitwise_and();\n          state._fsp--;\n\n          adaptor.addChild(root_0, bitwise_and19.getTree());\n\n          }\n          break;\n\n        default :\n          break loop5;\n        }\n      }\n\n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"bitwise_xor\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#bitwise_xor().mjava","sourceNew":null,"sourceOld":"  // $ANTLR start \"bitwise_xor\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:270:1: bitwise_xor : bitwise_and ( AT_BIT_XOR ^ bitwise_and )* ;\n  public final JavascriptParser.bitwise_xor_return bitwise_xor() throws RecognitionException {\n    JavascriptParser.bitwise_xor_return retval = new JavascriptParser.bitwise_xor_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token AT_BIT_XOR18=null;\n    ParserRuleReturnScope bitwise_and17 =null;\n    ParserRuleReturnScope bitwise_and19 =null;\n\n    CommonTree AT_BIT_XOR18_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:5: ( bitwise_and ( AT_BIT_XOR ^ bitwise_and )* )\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:7: bitwise_and ( AT_BIT_XOR ^ bitwise_and )*\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);\n      bitwise_and17=bitwise_and();\n      state._fsp--;\n\n      adaptor.addChild(root_0, bitwise_and17.getTree());\n\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:271:19: ( AT_BIT_XOR ^ bitwise_and )*\n      loop5:\n      while (true) {\n        int alt5=2;\n        int LA5_0 = input.LA(1);\n        if ( (LA5_0==AT_BIT_XOR) ) {\n          alt5=1;\n        }\n\n        switch (alt5) {\n        case 1 :\n          // src/java/org/apache/lucene/expressions/js/Javascript.g:271:20: AT_BIT_XOR ^ bitwise_and\n          {\n          AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865); \n          AT_BIT_XOR18_tree = (CommonTree)adaptor.create(AT_BIT_XOR18);\n          root_0 = (CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree, root_0);\n\n          pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);\n          bitwise_and19=bitwise_and();\n          state._fsp--;\n\n          adaptor.addChild(root_0, bitwise_and19.getTree());\n\n          }\n          break;\n\n        default :\n          break loop5;\n        }\n      }\n\n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"bitwise_xor\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1441eba4282a646ef88d12acb797483db37554e"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"d1441eba4282a646ef88d12acb797483db37554e":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["d23d4828afa583ebf35b4a541763af6206133458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}