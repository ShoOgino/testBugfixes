{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","commits":[{"id":"4312aa12218419d320e0966c3f3e72deb359afaa","date":1533146016,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  private Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    // we cross\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return null;\n  }\n\n","sourceOld":"  private Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    // we cross\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5ee4d410ec4b99dc713f05e20a22e802b89a92f","date":1548973182,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.relateTriangle(ax, ay, bx, by, cx, cy) == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return null;\n  }\n\n","bugFix":["4312aa12218419d320e0966c3f3e72deb359afaa"],"bugIntro":["dffcd36f1a87df1300807d9580eb05aa37726397"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1277bce5122ddd82fb8cce58045ae85df0714a4","date":1549639178,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.relateTriangle(ax, ay, bx, by, cx, cy) == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.relateTriangle(ax, ay, bx, by, cx, cy) == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.relateTriangle(ax, ay, bx, by, cx, cy) == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["dffcd36f1a87df1300807d9580eb05aa37726397"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dffcd36f1a87df1300807d9580eb05aa37726397","date":1552376454,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.relateTriangle(ax, ay, bx, by, cx, cy) == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.relateTriangle(ax, ay, bx, by, cx, cy) == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f","f1277bce5122ddd82fb8cce58045ae85df0714a4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point:\n      if (Rectangle.containsPoint(ay, ax, minLat, maxLat, minLon, maxLon) == false) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n      // shortcut by checking contains\n      return contains(ay, ax) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(ax, ay, bx, by);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"701716831075c9cebeadee735fc34d1679dff0c7","date":1555343036,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return contains(ay, ax) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(ax, ay, bx, by);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point:\n      if (Rectangle.containsPoint(ay, ax, minLat, maxLat, minLon, maxLon) == false) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n      // shortcut by checking contains\n      return contains(ay, ax) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if (ax == cx && ay == cy) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(ax, ay, bx, by);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relateTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  @Override\n  public Relation relateTriangle(double minX, double maxX, double minY, double maxY,\n                                 double ax, double ay, double bx, double by, double cx, double cy) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return internalContains(ax, ay) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, bx, by);\n    } else if ((ax == bx && ay == by)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(minX, maxX, minY, maxY, ax, ay, cx, cy);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return contains(ay, ax) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(ax, ay, bx, by);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Relation componentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relateTriangle(ax, ay, bx, by, cx, cy);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    if (ax == bx && bx == cx && ay == by && by == cy) {\n      // indexed \"triangle\" is a point: shortcut by checking contains\n      return contains(ay, ax) ? Relation.CELL_INSIDE_QUERY : Relation.CELL_OUTSIDE_QUERY;\n    } else if ((ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      // indexed \"triangle\" is a line segment: shortcut by calling appropriate method\n      return relateIndexedLineSegment(ax, ay, bx, by);\n    }\n    // indexed \"triangle\" is a triangle:\n    return relateIndexedTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["701716831075c9cebeadee735fc34d1679dff0c7"],"701716831075c9cebeadee735fc34d1679dff0c7":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"dffcd36f1a87df1300807d9580eb05aa37726397":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"4312aa12218419d320e0966c3f3e72deb359afaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["4312aa12218419d320e0966c3f3e72deb359afaa"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["dffcd36f1a87df1300807d9580eb05aa37726397"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"a5ee4d410ec4b99dc713f05e20a22e802b89a92f":["e4fccad460342b1af30cb328cc8297751a218d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["701716831075c9cebeadee735fc34d1679dff0c7","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"701716831075c9cebeadee735fc34d1679dff0c7":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"dffcd36f1a87df1300807d9580eb05aa37726397":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"4312aa12218419d320e0966c3f3e72deb359afaa":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4312aa12218419d320e0966c3f3e72deb359afaa"],"e4fccad460342b1af30cb328cc8297751a218d78":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["701716831075c9cebeadee735fc34d1679dff0c7"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["dffcd36f1a87df1300807d9580eb05aa37726397"],"a5ee4d410ec4b99dc713f05e20a22e802b89a92f":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}