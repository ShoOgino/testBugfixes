{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudUtil.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudTestUtils.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudUtil.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudUtil.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createSystemCollection().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  public void createSystemCollection() throws IOException {\n    try {\n\n      synchronized (this) {\n        if (colShardReplicaMap.containsKey(CollectionAdminParams.SYSTEM_COLL)) {\n          return;\n        }\n      }\n      String repFactor = String.valueOf(Math.min(3, liveNodes.size()));\n      ZkNodeProps props = new ZkNodeProps(\n          NAME, CollectionAdminParams.SYSTEM_COLL,\n          REPLICATION_FACTOR, repFactor,\n          OverseerCollectionMessageHandler.NUM_SLICES, \"1\",\n          CommonAdminParams.WAIT_FOR_FINAL_STATE, \"true\");\n      simCreateCollection(props, new NamedList());\n      CloudUtil.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL, 120, TimeUnit.SECONDS,\n          CloudUtil.clusterShape(1, Integer.parseInt(repFactor), false, true));\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}