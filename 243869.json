{"path":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","commits":[{"id":"63b7fe6e1c2acf43cade5bbea6c01319860f7e08","date":1119407493,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","pathOld":"/dev/null","sourceNew":"  public static HashSet getWordSet(Reader reader) throws IOException {\n    HashSet result = new HashSet();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47729c9dd8f9bf48f1695df6007073022ea001ed","date":1119470343,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet getWordSet(Reader reader) throws IOException {\n    HashSet result = new HashSet();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  public static HashSet getWordSet(Reader reader) throws IOException {\n    HashSet result = new HashSet();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet<String> getWordSet(Reader reader) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet getWordSet(Reader reader) throws IOException {\n    HashSet result = new HashSet();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet<String> getWordSet(Reader reader) throws IOException {\n    final HashSet<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet<String> getWordSet(Reader reader) throws IOException {\n    HashSet<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet<String> getWordSet(Reader reader) throws IOException {\n    final HashSet<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet<String> getWordSet(Reader reader) throws IOException {\n    final HashSet<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        result.add(word.trim());\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47729c9dd8f9bf48f1695df6007073022ea001ed":["63b7fe6e1c2acf43cade5bbea6c01319860f7e08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["47729c9dd8f9bf48f1695df6007073022ea001ed"],"63b7fe6e1c2acf43cade5bbea6c01319860f7e08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddc5fbfd4c64963aba52713a4496522540294d69":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ddc5fbfd4c64963aba52713a4496522540294d69"]},"commit2Childs":{"47729c9dd8f9bf48f1695df6007073022ea001ed":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63b7fe6e1c2acf43cade5bbea6c01319860f7e08"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["ddc5fbfd4c64963aba52713a4496522540294d69"],"63b7fe6e1c2acf43cade5bbea6c01319860f7e08":["47729c9dd8f9bf48f1695df6007073022ea001ed"],"ddc5fbfd4c64963aba52713a4496522540294d69":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}