{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/BaseSynonymParserTestCase#assertEntryEquals(SynonymMap,String,boolean,String[]).mjava","commits":[{"id":"927d09add12b0fa3c10f6f9ae564d85bef5dc12c","date":1429219595,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/BaseSynonymParserTestCase#assertEntryEquals(SynonymMap,String,boolean,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method to validate synonym parsing.\n   *\n   * @param synonynMap  the generated synonym map after parsing\n   * @param word        word (phrase) we are validating the synonyms for. Should be the value that comes out of the analyzer.\n   *                    All spaces will be replaced by word separators.\n   * @param includeOrig if synonyms should include original\n   * @param synonyms    actual synonyms. All word separators are replaced with a single space.\n   */\n  public static void assertEntryEquals(SynonymMap synonynMap, String word, boolean includeOrig, String[] synonyms)\n      throws Exception {\n    word = word.replace(' ', SynonymMap.WORD_SEPARATOR);\n    BytesRef value = Util.get(synonynMap.fst, Util.toUTF32(new CharsRef(word), new IntsRefBuilder()));\n    assertNotNull(\"No synonyms found for: \" + word, value);\n\n    ByteArrayDataInput bytesReader = new ByteArrayDataInput(value.bytes, value.offset, value.length);\n    final int code = bytesReader.readVInt();\n\n    final boolean keepOrig = (code & 0x1) == 0;\n    assertEquals(\"Include original different than expected. Expected \" + includeOrig + \" was \" + keepOrig,\n        includeOrig, keepOrig);\n\n    final int count = code >>> 1;\n    assertEquals(\"Invalid synonym count. Expected \" + synonyms.length + \" was \" + count,\n        synonyms.length, count);\n\n    Set<String> synonymSet = new HashSet<>(Arrays.asList(synonyms));\n\n    BytesRef scratchBytes = new BytesRef();\n    for (int i = 0; i < count; i++) {\n      synonynMap.words.get(bytesReader.readVInt(), scratchBytes);\n      String synonym = scratchBytes.utf8ToString().replace(SynonymMap.WORD_SEPARATOR, ' ');\n      assertTrue(\"Unexpected synonym found: \" + synonym, synonymSet.contains(synonym));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"927d09add12b0fa3c10f6f9ae564d85bef5dc12c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["927d09add12b0fa3c10f6f9ae564d85bef5dc12c"]},"commit2Childs":{"927d09add12b0fa3c10f6f9ae564d85bef5dc12c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["927d09add12b0fa3c10f6f9ae564d85bef5dc12c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}