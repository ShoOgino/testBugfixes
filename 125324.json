{"path":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","commits":[{"id":"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687","date":1546536444,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f47793eb80fc739be7036084303ca062ad7aa87d","date":1550661558,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","sourceNew":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    if (random().nextBoolean()) {\n      modifiedDoc.forEach((s, f) -> {\n        Object rawVal = f.getRawValue();\n        if (rawVal instanceof Collection) {\n          Collection rawValue = (Collection) rawVal;\n          ArrayList<Object> newVal = new ArrayList<>(rawValue.size());\n          for (Object o : rawValue) {\n            if (o instanceof String) {\n              newVal.add(new ByteArrayUtf8CharSequence((String) o));\n            } else {\n              newVal.add(rawVal);\n            }\n          }\n          f.setValue(newVal);\n        } else if (rawVal instanceof String) {\n          f.setValue(new ByteArrayUtf8CharSequence((String) rawVal));\n        }\n      });\n    }\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","sourceOld":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","sourceNew":"  /*\n  Utility test method to process a clone of a document\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    if (random().nextBoolean()) {\n      modifiedDoc.forEach((s, f) -> {\n        Object rawVal = f.getRawValue();\n        if (rawVal instanceof Collection) {\n          Collection rawValue = (Collection) rawVal;\n          ArrayList<Object> newVal = new ArrayList<>(rawValue.size());\n          for (Object o : rawValue) {\n            if (o instanceof String) {\n              newVal.add(new ByteArrayUtf8CharSequence((String) o));\n            } else {\n              newVal.add(rawVal);\n            }\n          }\n          f.setValue(newVal);\n        } else if (rawVal instanceof String) {\n          f.setValue(new ByteArrayUtf8CharSequence((String) rawVal));\n        }\n      });\n    }\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","sourceOld":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    if (random().nextBoolean()) {\n      modifiedDoc.forEach((s, f) -> {\n        Object rawVal = f.getRawValue();\n        if (rawVal instanceof Collection) {\n          Collection rawValue = (Collection) rawVal;\n          ArrayList<Object> newVal = new ArrayList<>(rawValue.size());\n          for (Object o : rawValue) {\n            if (o instanceof String) {\n              newVal.add(new ByteArrayUtf8CharSequence((String) o));\n            } else {\n              newVal.add(rawVal);\n            }\n          }\n          f.setValue(newVal);\n        } else if (rawVal instanceof String) {\n          f.setValue(new ByteArrayUtf8CharSequence((String) rawVal));\n        }\n      });\n    }\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","sourceNew":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    if (random().nextBoolean()) {\n      modifiedDoc.forEach((s, f) -> {\n        Object rawVal = f.getRawValue();\n        if (rawVal instanceof Collection) {\n          Collection rawValue = (Collection) rawVal;\n          ArrayList<Object> newVal = new ArrayList<>(rawValue.size());\n          for (Object o : rawValue) {\n            if (o instanceof String) {\n              newVal.add(new ByteArrayUtf8CharSequence((String) o));\n            } else {\n              newVal.add(rawVal);\n            }\n          }\n          f.setValue(newVal);\n        } else if (rawVal instanceof String) {\n          f.setValue(new ByteArrayUtf8CharSequence((String) rawVal));\n        }\n      });\n    }\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","sourceOld":"  /*\n  Utility test method to process a clone of a document\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    if (random().nextBoolean()) {\n      modifiedDoc.forEach((s, f) -> {\n        Object rawVal = f.getRawValue();\n        if (rawVal instanceof Collection) {\n          Collection rawValue = (Collection) rawVal;\n          ArrayList<Object> newVal = new ArrayList<>(rawValue.size());\n          for (Object o : rawValue) {\n            if (o instanceof String) {\n              newVal.add(new ByteArrayUtf8CharSequence((String) o));\n            } else {\n              newVal.add(rawVal);\n            }\n          }\n          f.setValue(newVal);\n        } else if (rawVal instanceof String) {\n          f.setValue(new ByteArrayUtf8CharSequence((String) rawVal));\n        }\n      });\n    }\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3665b66adafb1514bba04cd1d5c477fcaa93d592","date":1576153597,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","sourceNew":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","sourceOld":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    if (random().nextBoolean()) {\n      modifiedDoc.forEach((s, f) -> {\n        Object rawVal = f.getRawValue();\n        if (rawVal instanceof Collection) {\n          Collection rawValue = (Collection) rawVal;\n          ArrayList<Object> newVal = new ArrayList<>(rawValue.size());\n          for (Object o : rawValue) {\n            if (o instanceof String) {\n              newVal.add(new ByteArrayUtf8CharSequence((String) o));\n            } else {\n              newVal.add(rawVal);\n            }\n          }\n          f.setValue(newVal);\n        } else if (rawVal instanceof String) {\n          f.setValue(new ByteArrayUtf8CharSequence((String) rawVal));\n        }\n      });\n    }\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#process(SolrInputDocument).mjava","sourceNew":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","sourceOld":"  /*\n  Utility test method to process a clone of a document\n   */\n  private SolrInputDocument process(SolrInputDocument origDoc) {\n    SolrInputDocument modifiedDoc = origDoc.deepCopy();\n    if (random().nextBoolean()) {\n      modifiedDoc.forEach((s, f) -> {\n        Object rawVal = f.getRawValue();\n        if (rawVal instanceof Collection) {\n          Collection rawValue = (Collection) rawVal;\n          ArrayList<Object> newVal = new ArrayList<>(rawValue.size());\n          for (Object o : rawValue) {\n            if (o instanceof String) {\n              newVal.add(new ByteArrayUtf8CharSequence((String) o));\n            } else {\n              newVal.add(rawVal);\n            }\n          }\n          f.setValue(newVal);\n        } else if (rawVal instanceof String) {\n          f.setValue(new ByteArrayUtf8CharSequence((String) rawVal));\n        }\n      });\n    }\n    liProcessor.process(modifiedDoc);\n    return modifiedDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["bb9c3baacabd473e8ecd6c4948aabacead49b88e","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["f47793eb80fc739be7036084303ca062ad7aa87d"],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f47793eb80fc739be7036084303ca062ad7aa87d":["a4da5f9e2a1f2ac76feac0c0796bdce4881cb687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3665b66adafb1514bba04cd1d5c477fcaa93d592"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4da5f9e2a1f2ac76feac0c0796bdce4881cb687"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["df724d84dab24a0cc54bec95a8680867adc7f171","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687":["f47793eb80fc739be7036084303ca062ad7aa87d"],"f47793eb80fc739be7036084303ca062ad7aa87d":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}