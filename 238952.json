{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","pathOld":"/dev/null","sourceNew":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    //assertEquals(singleton, expandedSingleton);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4964b307c1e71a633913d374346c870b140d2ab8","date":1287685337,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","sourceNew":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n  }\n\n","sourceOld":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    //assertEquals(singleton, expandedSingleton);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","sourceNew":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n  }\n\n","sourceOld":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    //assertEquals(singleton, expandedSingleton);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","sourceNew":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n  }\n\n","sourceOld":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    //assertEquals(singleton, expandedSingleton);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testSingleton().mjava","sourceNew":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n  }\n\n","sourceOld":"  /** Test singletons work correctly */\n  public void testSingleton() {\n    Automaton singleton = BasicAutomata.makeString(\"foobar\");\n    Automaton expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n    \n    singleton = BasicAutomata.makeString(\"\\ud801\\udc1c\");\n    expandedSingleton = singleton.cloneExpanded();\n    assertTrue(BasicOperations.sameLanguage(singleton, expandedSingleton));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4964b307c1e71a633913d374346c870b140d2ab8"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","4964b307c1e71a633913d374346c870b140d2ab8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","4964b307c1e71a633913d374346c870b140d2ab8"],"4964b307c1e71a633913d374346c870b140d2ab8":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4964b307c1e71a633913d374346c870b140d2ab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4964b307c1e71a633913d374346c870b140d2ab8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}