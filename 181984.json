{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"77f264c55cbf75404f8601ae7290d69157273a56","date":1380484282,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(si.attributes());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"624d2da1aed2d2415a83f3c573de0341c4001d90","date":1390407250,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f264c55cbf75404f8601ae7290d69157273a56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"624d2da1aed2d2415a83f3c573de0341c4001d90":["77f264c55cbf75404f8601ae7290d69157273a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["624d2da1aed2d2415a83f3c573de0341c4001d90"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77f264c55cbf75404f8601ae7290d69157273a56"],"77f264c55cbf75404f8601ae7290d69157273a56":["624d2da1aed2d2415a83f3c573de0341c4001d90"],"624d2da1aed2d2415a83f3c573de0341c4001d90":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}