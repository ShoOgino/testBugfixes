{"path":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","commits":[{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"/dev/null","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> schemaProperties\n        = (SimpleOrderedMap<Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (int schemaPropNum = 0 ; schemaPropNum < schemaProperties.size() ; ++schemaPropNum) {\n      String schemaPropName = schemaProperties.getName(schemaPropNum);\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> solrQueryParserProperties\n            = (SimpleOrderedMap<Object>)schemaProperties.getVal(schemaPropNum);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, solrQueryParserProperties.get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        openStartTag(IndexSchema.FIELDS);\n        closeStartTag(false);\n        incLevel();\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n        decLevel();\n        endTag(IndexSchema.FIELDS);\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> schemaProperties\n        = (SimpleOrderedMap<Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (int schemaPropNum = 0 ; schemaPropNum < schemaProperties.size() ; ++schemaPropNum) {\n      String schemaPropName = schemaProperties.getName(schemaPropNum);\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> solrQueryParserProperties\n            = (SimpleOrderedMap<Object>)schemaProperties.getVal(schemaPropNum);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, solrQueryParserProperties.get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        openStartTag(IndexSchema.FIELDS);\n        closeStartTag(false);\n        incLevel();\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n        decLevel();\n        endTag(IndexSchema.FIELDS);\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> schemaProperties\n        = (SimpleOrderedMap<Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (int schemaPropNum = 0 ; schemaPropNum < schemaProperties.size() ; ++schemaPropNum) {\n      String schemaPropName = schemaProperties.getName(schemaPropNum);\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> solrQueryParserProperties\n            = (SimpleOrderedMap<Object>)schemaProperties.getVal(schemaPropNum);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, solrQueryParserProperties.get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        openStartTag(IndexSchema.FIELDS);\n        closeStartTag(false);\n        incLevel();\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n        decLevel();\n        endTag(IndexSchema.FIELDS);\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e1bc9368a5cae1776f5b12df9dac1b0477f8f4","date":1395589252,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> schemaProperties\n        = (SimpleOrderedMap<Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (int schemaPropNum = 0 ; schemaPropNum < schemaProperties.size() ; ++schemaPropNum) {\n      String schemaPropName = schemaProperties.getName(schemaPropNum);\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> solrQueryParserProperties\n            = (SimpleOrderedMap<Object>)schemaProperties.getVal(schemaPropNum);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, solrQueryParserProperties.get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> schemaProperties\n        = (SimpleOrderedMap<Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (int schemaPropNum = 0 ; schemaPropNum < schemaProperties.size() ; ++schemaPropNum) {\n      String schemaPropName = schemaProperties.getName(schemaPropNum);\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> solrQueryParserProperties\n            = (SimpleOrderedMap<Object>)schemaProperties.getVal(schemaPropNum);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, solrQueryParserProperties.get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        openStartTag(IndexSchema.FIELDS);\n        closeStartTag(false);\n        incLevel();\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n        decLevel();\n        endTag(IndexSchema.FIELDS);\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ed5fbd2aab9f605f08774c9293e521ec99f0a1","date":1461251300,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, ((Map<String ,Object>) val).get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> schemaProperties\n        = (SimpleOrderedMap<Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (int schemaPropNum = 0 ; schemaPropNum < schemaProperties.size() ; ++schemaPropNum) {\n      String schemaPropName = schemaProperties.getName(schemaPropNum);\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(schemaProperties.getVal(schemaPropNum).toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        @SuppressWarnings(\"unchecked\") SimpleOrderedMap<Object> solrQueryParserProperties\n            = (SimpleOrderedMap<Object>)schemaProperties.getVal(schemaPropNum);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, solrQueryParserProperties.get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum));\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>)schemaProperties.getVal(schemaPropNum);\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c418b5fb43bf7b591b636df532dd1ac44296469a","date":1494834249,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, ((Map<String ,Object>) val).get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, ((Map<String ,Object>) val).get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d057970b5f9fcaabc49d2f54c59a5d2a09da1769","date":1495200448,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.DEFAULT_SEARCH_FIELD)) {\n        openStartTag(IndexSchema.DEFAULT_SEARCH_FIELD);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.DEFAULT_SEARCH_FIELD, false);\n      } else if (schemaPropName.equals(IndexSchema.SOLR_QUERY_PARSER)) {\n        openStartTag(IndexSchema.SOLR_QUERY_PARSER);\n        writeAttr(IndexSchema.DEFAULT_OPERATOR, ((Map<String ,Object>) val).get(IndexSchema.DEFAULT_OPERATOR).toString());\n        closeStartTag(true);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '{}'\", schemaPropName);\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '\" + schemaPropName + \"'\");\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SchemaXmlWriter#writeResponse().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '{}'\", schemaPropName);\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","sourceOld":"  public void writeResponse() throws IOException {\n    \n    writer.write(XML_DECLARATION);\n    if (emitManagedSchemaDoNotEditWarning) {\n      if (doIndent) {\n        writer.write('\\n');\n      }\n      writer.write(MANAGED_SCHEMA_DO_NOT_EDIT_WARNING);\n    }\n\n    @SuppressWarnings(\"unchecked\") Map<String,Object> schemaProperties\n        = (Map<String , Object>)rsp.getValues().get(IndexSchema.SCHEMA);\n\n    openStartTag(IndexSchema.SCHEMA);\n    writeAttr(IndexSchema.NAME, schemaProperties.get(IndexSchema.NAME).toString());\n    writeAttr(IndexSchema.VERSION, schemaProperties.get(IndexSchema.VERSION).toString());\n    closeStartTag(false);\n    incLevel();\n\n    for (Map.Entry<String, Object> entry : schemaProperties.entrySet()) {\n      String schemaPropName = entry.getKey();\n      Object val = entry.getValue();\n      if (schemaPropName.equals(IndexSchema.NAME) || schemaPropName.equals(IndexSchema.VERSION)) {\n        continue;\n      }\n      if (schemaPropName.equals(IndexSchema.UNIQUE_KEY)) {\n        openStartTag(IndexSchema.UNIQUE_KEY);\n        closeStartTag(false);\n        writer.write(val.toString());\n        endTag(IndexSchema.UNIQUE_KEY, false);\n      } else if (schemaPropName.equals(IndexSchema.SIMILARITY)) {\n        writeSimilarity((SimpleOrderedMap<Object>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELD_TYPES)) {\n        writeFieldTypes((List<SimpleOrderedMap<Object>>) val);\n      } else if (schemaPropName.equals(IndexSchema.FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> fieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> fieldProperties : fieldPropertiesList) {\n          openStartTag(IndexSchema.FIELD);\n          for (int fieldPropNum = 0 ; fieldPropNum < fieldProperties.size() ; ++fieldPropNum) {\n            writeAttr(fieldProperties.getName(fieldPropNum), fieldProperties.getVal(fieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.DYNAMIC_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> dynamicFieldPropertiesList \n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> dynamicFieldProperties : dynamicFieldPropertiesList) {\n          openStartTag(IndexSchema.DYNAMIC_FIELD);\n          for (int dynamicFieldPropNum = 0 ; dynamicFieldPropNum < dynamicFieldProperties.size() ; ++dynamicFieldPropNum) {\n            writeAttr(dynamicFieldProperties.getName(dynamicFieldPropNum), \n                      dynamicFieldProperties.getVal(dynamicFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else if (schemaPropName.equals(IndexSchema.COPY_FIELDS)) {\n        @SuppressWarnings(\"unchecked\") List<SimpleOrderedMap<Object>> copyFieldPropertiesList\n            = (List<SimpleOrderedMap<Object>>) val;\n        for (SimpleOrderedMap<Object> copyFieldProperties : copyFieldPropertiesList) {\n          openStartTag(IndexSchema.COPY_FIELD);\n          for (int copyFieldPropNum = 0 ; copyFieldPropNum < copyFieldProperties.size() ; ++ copyFieldPropNum) {\n            writeAttr(copyFieldProperties.getName(copyFieldPropNum), \n                      copyFieldProperties.getVal(copyFieldPropNum).toString());\n          }\n          closeStartTag(true);\n        }\n      } else {\n        log.warn(\"Unknown schema component '{}'\", schemaPropName);\n      }\n    }\n    decLevel();\n    endTag(IndexSchema.SCHEMA);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c418b5fb43bf7b591b636df532dd1ac44296469a":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["15e1bc9368a5cae1776f5b12df9dac1b0477f8f4"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1","c418b5fb43bf7b591b636df532dd1ac44296469a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"15e1bc9368a5cae1776f5b12df9dac1b0477f8f4":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"]},"commit2Childs":{"c418b5fb43bf7b591b636df532dd1ac44296469a":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["15e1bc9368a5cae1776f5b12df9dac1b0477f8f4"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["e9017cf144952056066919f1ebc7897ff9bd71b1","54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["c418b5fb43bf7b591b636df532dd1ac44296469a","e9017cf144952056066919f1ebc7897ff9bd71b1","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"15e1bc9368a5cae1776f5b12df9dac1b0477f8f4":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}