{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsField[StatsComponent]#StatsField(ResponseBuilder,String).mjava","commits":[{"id":"610c97b96420e614c67797fd43822ebc1d4b7ee2","date":1410814832,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField[StatsComponent]#StatsField(ResponseBuilder,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param rb the current request/response\n   * @param statsParam the raw {@link StatsParams#STATS_FIELD} string\n   */\n  public StatsField(ResponseBuilder rb, String statsParam) { \n    this.rb = rb;\n    this.searcher = rb.req.getSearcher();\n    this.originalParam = statsParam;\n\n    SolrParams params = rb.req.getParams();\n\n    try {\n      SolrParams localParams = QueryParsing.getLocalParams(statsParam, params);\n      if (null == localParams) {\n        localParams = new ModifiableSolrParams();\n      }\n      this.localParams = localParams;\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to parse \" + \n                              StatsParams.STATS_FIELD + \": \" + originalParam + \" due to: \"\n                              + e.getMessage(), e);\n    }\n\n    // pull fieldName out of localParams, or default to original param value\n    this.fieldName = localParams.get(CommonParams.VALUE, statsParam);\n    // allow explicit set of the key via localparams, default to fieldName\n    this.key = localParams.get(CommonParams.OUTPUT_KEY, fieldName);\n\n    calcDistinct = params.getFieldBool(fieldName, StatsParams.STATS_CALC_DISTINCT, false);\n\n    String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n    this.facets = (null == facets) ? new String[0] : facets;\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    this.excludeTagList = (null == excludeStr) \n      ? Collections.<String>emptyList()\n      : StrUtils.splitSmart(excludeStr,',');\n\n    this.sf = searcher.getSchema().getField(fieldName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField[StatsComponent]#StatsField(ResponseBuilder,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param rb the current request/response\n   * @param statsParam the raw {@link StatsParams#STATS_FIELD} string\n   */\n  public StatsField(ResponseBuilder rb, String statsParam) { \n    this.rb = rb;\n    this.searcher = rb.req.getSearcher();\n    this.originalParam = statsParam;\n\n    SolrParams params = rb.req.getParams();\n\n    try {\n      SolrParams localParams = QueryParsing.getLocalParams(statsParam, params);\n      if (null == localParams) {\n        localParams = new ModifiableSolrParams();\n      }\n      this.localParams = localParams;\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Unable to parse \" + \n                              StatsParams.STATS_FIELD + \": \" + originalParam + \" due to: \"\n                              + e.getMessage(), e);\n    }\n\n    // pull fieldName out of localParams, or default to original param value\n    this.fieldName = localParams.get(CommonParams.VALUE, statsParam);\n    // allow explicit set of the key via localparams, default to fieldName\n    this.key = localParams.get(CommonParams.OUTPUT_KEY, fieldName);\n\n    calcDistinct = params.getFieldBool(fieldName, StatsParams.STATS_CALC_DISTINCT, false);\n\n    String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);\n    this.facets = (null == facets) ? new String[0] : facets;\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    this.excludeTagList = (null == excludeStr) \n      ? Collections.<String>emptyList()\n      : StrUtils.splitSmart(excludeStr,',');\n\n    this.sf = searcher.getSchema().getField(fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["283ff02f401ec3e7a2fad73643970f052383fb0c"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"610c97b96420e614c67797fd43822ebc1d4b7ee2":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}