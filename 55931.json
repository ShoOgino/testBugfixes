{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#postings(PostingsEnum,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(PostingsEnum reuse, int flags) {\n\n      // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n      boolean hasPositions = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        decodeMetaData();\n        FSTPostingsEnum docsAndPositionsEnum;\n        if (reuse == null || !(reuse instanceof FSTPostingsEnum)) {\n          docsAndPositionsEnum = new FSTPostingsEnum(field.hasPayloads(), hasOffsets);\n        } else {\n          docsAndPositionsEnum = (FSTPostingsEnum) reuse;\n          if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n            docsAndPositionsEnum = new FSTPostingsEnum(field.hasPayloads(), hasOffsets);\n          }\n        }\n        //System.out.println(\"D&P reset this=\" + this);\n        return docsAndPositionsEnum.reset(postingsSpare, docFreq);\n      }\n\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(this.postingsSpare, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n\n      // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n      boolean hasPositions = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        decodeMetaData();\n        FSTPostingsEnum docsAndPositionsEnum;\n        if (reuse == null || !(reuse instanceof FSTPostingsEnum)) {\n          docsAndPositionsEnum = new FSTPostingsEnum(field.hasPayloads(), hasOffsets);\n        } else {\n          docsAndPositionsEnum = (FSTPostingsEnum) reuse;\n          if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n            docsAndPositionsEnum = new FSTPostingsEnum(field.hasPayloads(), hasOffsets);\n          }\n        }\n        //System.out.println(\"D&P reset this=\" + this);\n        return docsAndPositionsEnum.reset(postingsSpare, liveDocs, docFreq);\n      }\n\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(this.postingsSpare, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public PostingsEnum postings(PostingsEnum reuse, int flags) {\n\n      // TODO: the logic of which enum impl to choose should be refactored to be simpler...\n      boolean hasPositions = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        decodeMetaData();\n        FSTPostingsEnum docsAndPositionsEnum;\n        if (reuse == null || !(reuse instanceof FSTPostingsEnum)) {\n          docsAndPositionsEnum = new FSTPostingsEnum(field.hasPayloads(), hasOffsets);\n        } else {\n          docsAndPositionsEnum = (FSTPostingsEnum) reuse;\n          if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {\n            docsAndPositionsEnum = new FSTPostingsEnum(field.hasPayloads(), hasOffsets);\n          }\n        }\n        //System.out.println(\"D&P reset this=\" + this);\n        return docsAndPositionsEnum.reset(postingsSpare, docFreq);\n      }\n\n      decodeMetaData();\n      FSTDocsEnum docsEnum;\n\n      if (reuse == null || !(reuse instanceof FSTDocsEnum)) {\n        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n      } else {\n        docsEnum = (FSTDocsEnum) reuse;        \n        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {\n          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());\n        }\n      }\n      return docsEnum.reset(this.postingsSpare, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24f89e8a6aac05753cde4c83d62a74356098200d":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["24f89e8a6aac05753cde4c83d62a74356098200d"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}