{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","sourceNew":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","sourceOld":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7490dd546b68505c4ddfee642d77aa57406aff4c","date":1296085208,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","sourceNew":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","sourceOld":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","sourceNew":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","sourceOld":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","sourceNew":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","sourceOld":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","sourceNew":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.getInitialBufferSize() + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3 * HTMLStripCharFilter.getInitialBufferSize() + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    String gold = \"foo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"?>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"/>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","sourceOld":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","bugFix":["187b932e3f791668d245124e03d899af557d22df","bd69280df0902763e47cb14745388ee17a2fb602"],"bugIntro":["ab081a78869a616f9c93e5b2f3ec2f99c2f7f741"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","sourceNew":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.getInitialBufferSize() + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3 * HTMLStripCharFilter.getInitialBufferSize() + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    String gold = \"foo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"?>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"/>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","sourceOld":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","sourceNew":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.getInitialBufferSize() + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3 * HTMLStripCharFilter.getInitialBufferSize() + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    String gold = \"foo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"?>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"/>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","sourceOld":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.DEFAULT_READ_AHEAD + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3*HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    processBuffer(testBuilder.toString(), \"Failed w/ comment\");\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"?>\");\n    processBuffer(testBuilder.toString(), \"Failed with proc. instr.\");\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.DEFAULT_READ_AHEAD + 500);\n    testBuilder.append(\"/>\");\n    processBuffer(testBuilder.toString(), \"Failed on tag\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBufferOverflow().mjava","sourceNew":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.getInitialBufferSize() + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3 * HTMLStripCharFilter.getInitialBufferSize() + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    String gold = \"foo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"?>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"/>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","sourceOld":"  public void testBufferOverflow() throws Exception {\n    StringBuilder testBuilder = new StringBuilder(HTMLStripCharFilter.getInitialBufferSize() + 50);\n    testBuilder.append(\"ah<?> ??????\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    processBuffer(testBuilder.toString(), \"Failed on pseudo proc. instr.\");//processing instructions\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<!--\");//comments\n    appendChars(testBuilder, 3 * HTMLStripCharFilter.getInitialBufferSize() + 500);//comments have two lookaheads\n\n    testBuilder.append(\"-->foo\");\n    String gold = \"foo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n\n    testBuilder.setLength(0);\n    testBuilder.append(\"<?\");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"?>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n    \n    testBuilder.setLength(0);\n    testBuilder.append(\"<b \");\n    appendChars(testBuilder, HTMLStripCharFilter.getInitialBufferSize() + 500);\n    testBuilder.append(\"/>\");\n    gold = \"\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(testBuilder.toString())));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"7490dd546b68505c4ddfee642d77aa57406aff4c":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","7490dd546b68505c4ddfee642d77aa57406aff4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["7490dd546b68505c4ddfee642d77aa57406aff4c","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["7490dd546b68505c4ddfee642d77aa57406aff4c"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["7490dd546b68505c4ddfee642d77aa57406aff4c","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","7490dd546b68505c4ddfee642d77aa57406aff4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7490dd546b68505c4ddfee642d77aa57406aff4c":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","579dc30b5d3235c34cda518b2b6018d71a61879c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["7490dd546b68505c4ddfee642d77aa57406aff4c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}