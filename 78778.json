{"path":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriterPerThread#addField(Fieldable,FieldInfo).mjava","sourceNew":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = storedFieldsWriter.getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","sourceNew":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJ_REF);\n      Fieldable[] newArray = new Fieldable[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n    \n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n    \n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n    \n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (doc == null) {\n      doc = getPerDoc();\n      doc.docID = docState.docID;\n      localFieldsWriter.setFieldsStream(doc.fdt);\n      assert doc.numStoredFields == 0: \"doc.numStoredFields=\" + doc.numStoredFields;\n      assert 0 == doc.fdt.length();\n      assert 0 == doc.fdt.getFilePointer();\n    }\n\n    localFieldsWriter.writeField(fieldInfo, field);\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n    doc.numStoredFields++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","sourceNew":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      Fieldable[] newArray = new Fieldable[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJ_REF);\n      Fieldable[] newArray = new Fieldable[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n    \n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n    \n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n    \n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      Fieldable[] newArray = new Fieldable[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      Fieldable[] newArray = new Fieldable[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      Fieldable[] newArray = new Fieldable[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(IndexableField,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StoredFieldsWriter#addField(Fieldable,FieldInfo).mjava","sourceNew":"  public void addField(IndexableField field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(Fieldable field, FieldInfo fieldInfo) throws IOException {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      Fieldable[] newArray = new Fieldable[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n    }\n\n    if (numStoredFields == fieldNumbers.length) {\n      fieldNumbers = ArrayUtil.grow(fieldNumbers);\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldNumbers[numStoredFields] = fieldInfo.number;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}