{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, new IndexWriter.MaxFieldLength(100000000));\n      writer.setRAMBufferSizeMB(0.01);\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, new IndexWriter.MaxFieldLength(100000000));\n      writer.setRAMBufferSizeMB(0.01);\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testHighFreqTerm().mjava","sourceNew":null,"sourceOld":"    public void testHighFreqTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, new IndexWriter.MaxFieldLength(100000000));\n      writer.setRAMBufferSizeMB(0.01);\n      // Massive doc that has 128 K a's\n      StringBuilder b = new StringBuilder(1024*1024);\n      for(int i=0;i<4096;i++) {\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n        b.append(\" a a a a a a a a\");\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"field\", b.toString(), Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.maxDoc());\n      assertEquals(1, reader.numDocs());\n      Term t = new Term(\"field\", \"a\");\n      assertEquals(1, reader.docFreq(t));\n      TermDocs td = reader.termDocs(t);\n      td.next();\n      assertEquals(128*1024, td.freq());\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}