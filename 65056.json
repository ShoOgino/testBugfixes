{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","pathOld":"/dev/null","sourceNew":"  // this method needs to be called under a lock\n  private void createEphemeralLiveNode(String nodeId) throws Exception {\n    DistribStateManager mgr = stateManager.withEphemeralId(nodeId);\n    mgr.makePath(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n    if (cfg.hasTriggerForEvents(TriggerEventType.NODEADDED)) {\n      mgr.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","sourceNew":"  // this method needs to be called under a lock\n  private void createEphemeralLiveNode(String nodeId) throws Exception {\n    DistribStateManager mgr = stateManager.withEphemeralId(nodeId);\n    mgr.makePath(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n    if (cfg.hasTriggerForEvents(TriggerEventType.NODEADDED)) {\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n      String path = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeId;\n      log.debug(\"-- creating marker: {}\", path);\n      mgr.makePath(path, json, CreateMode.EPHEMERAL, true);\n    }\n  }\n\n","sourceOld":"  // this method needs to be called under a lock\n  private void createEphemeralLiveNode(String nodeId) throws Exception {\n    DistribStateManager mgr = stateManager.withEphemeralId(nodeId);\n    mgr.makePath(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n    if (cfg.hasTriggerForEvents(TriggerEventType.NODEADDED)) {\n      mgr.makePath(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#createEphemeralLiveNode(String).mjava","sourceNew":"  // this method needs to be called under a lock\n  private void createEphemeralLiveNode(String nodeId) throws Exception {\n    DistribStateManager mgr = stateManager.withEphemeralId(nodeId);\n    mgr.makePath(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n    if (cfg.hasTriggerForEvents(TriggerEventType.NODEADDED)) {\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n      String path = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeId;\n      log.debug(\"-- creating marker: {}\", path);\n      mgr.makePath(path, json, CreateMode.EPHEMERAL, true);\n    }\n  }\n\n","sourceOld":"  // this method needs to be called under a lock\n  private void createEphemeralLiveNode(String nodeId) throws Exception {\n    DistribStateManager mgr = stateManager.withEphemeralId(nodeId);\n    mgr.makePath(ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeId, null, CreateMode.EPHEMERAL, true);\n    AutoScalingConfig cfg = stateManager.getAutoScalingConfig(null);\n    if (cfg.hasTriggerForEvents(TriggerEventType.NODEADDED)) {\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", cloudManager.getTimeSource().getEpochTimeNs()));\n      String path = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeId;\n      log.debug(\"-- creating marker: {}\", path);\n      mgr.makePath(path, json, CreateMode.EPHEMERAL, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}