{"path":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,ScorerContext).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, ScorerContext context) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, ScorerContext.def().scoreDocsInOrder(true).topScorer(false));\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof OpenBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return OpenBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (OpenBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a9960231c0d2fe8b22f626e517d4cbca37be4a6a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, ScorerContext context) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, ScorerContext.def().scoreDocsInOrder(true).topScorer(false));\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof OpenBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return OpenBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (OpenBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, ScorerContext context) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, ScorerContext.def().scoreDocsInOrder(true).topScorer(false));\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof OpenBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return OpenBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (OpenBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, ScorerContext context) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, ScorerContext.def().scoreDocsInOrder(true).topScorer(false));\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, ScorerContext context) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, ScorerContext.def().scoreDocsInOrder(true).topScorer(false));\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof OpenBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return OpenBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (OpenBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, true, false, acceptDocs);\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, ScorerContext context) throws IOException {\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer childScorer = childWeight.scorer(readerContext, ScorerContext.def().scoreDocsInOrder(true).topScorer(false));\n\n      if (childScorer == null) {\n        // No matches\n        return null;\n      }\n\n      final int firstChildDoc = childScorer.nextDoc();\n      if (firstChildDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        // No matches\n        return null;\n      }\n\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      // TODO: once we do random-access filters we can\n      // generalize this:\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}