{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException, IllegalAccessException, InstantiationException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new FacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException, IllegalAccessException, InstantiationException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new FacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new FacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException, IllegalAccessException, InstantiationException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new FacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new FacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException, IllegalAccessException, InstantiationException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new FacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new FacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new FacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(FacetIndexingParams,int,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandlerRandom#countFacets(int,int,boolean).mjava","sourceNew":"  private List<FacetResult> countFacets(FacetIndexingParams fip, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, fip);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","sourceOld":"  private List<FacetResult> countFacets(int partitionSize, int numResults, final boolean doComplement)\n      throws IOException {\n    Query q = new MatchAllDocsQuery();\n    FacetSearchParams facetSearchParams = searchParamsWithRequests(numResults, partitionSize);\n    FacetsCollector fc = new StandardFacetsCollector(facetSearchParams, indexReader, taxoReader) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(\n          FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        FacetsAccumulator accumulator = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n        double complement = doComplement ? FacetsAccumulator.FORCE_COMPLEMENT : FacetsAccumulator.DISABLE_COMPLEMENT;\n        accumulator.setComplementThreshold(complement);\n        return accumulator;\n      }\n    };\n    searcher.search(q, fc);\n    List<FacetResult> facetResults = fc.getFacetResults();\n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","07155cdd910937cdf6877e48884d5782845c8b8b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","fe33227f6805edab2036cbb80645cc4e2d1fa424","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}