{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createBooleanLambdaFunction(String,TwoBoolInBoolOutLambda,BooleanValueStream).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createBooleanLambdaFunction(String,TwoBoolInBoolOutLambda,BooleanValueStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a function that takes in a multi-valued boolean expression and returns a single-valued boolean expression.\n   * The given lambda is used to associatively (order not guaranteed) reduce all values for a document down to a single value. \n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (boolean, boolean) -> boolean}\n   * @param param the expression to be reduced per-document\n   * @return a single-valued expression which has been reduced for every document\n   */\n  public static BooleanValue createBooleanLambdaFunction(String name, TwoBoolInBoolOutLambda lambda, BooleanValueStream param) {\n    return new BooleanStreamInBooleanValueOutFunction(name,lambda,param);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createBooleanLambdaFunction(String,TwoBoolInBoolOutLambda,BooleanValueStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a function that takes in a multi-valued boolean expression and returns a single-valued boolean expression.\n   * The given lambda is used to associatively (order not guaranteed) reduce all values for a document down to a single value. \n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (boolean, boolean) -> boolean}\n   * @param param the expression to be reduced per-document\n   * @return a single-valued expression which has been reduced for every document\n   */\n  public static BooleanValue createBooleanLambdaFunction(String name, TwoBoolInBoolOutLambda lambda, BooleanValueStream param) {\n    return new BooleanStreamInBooleanValueOutFunction(name,lambda,param);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createBooleanLambdaFunction(String,TwoBoolInBoolOutLambda,BooleanValueStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a function that takes in a multi-valued boolean expression and returns a single-valued boolean expression.\n   * The given lambda is used to associatively (order not guaranteed) reduce all values for a document down to a single value. \n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (boolean, boolean) -> boolean}\n   * @param param the expression to be reduced per-document\n   * @return a single-valued expression which has been reduced for every document\n   */\n  public static BooleanValue createBooleanLambdaFunction(String name, TwoBoolInBoolOutLambda lambda, BooleanValueStream param) {\n    return new BooleanStreamInBooleanValueOutFunction(name,lambda,param);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createBooleanLambdaFunction(String,TwoBoolInBoolOutLambda,BooleanValueStream).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createBooleanLambdaFunction(String,TwoBoolInBoolOutLambda,BooleanValueStream).mjava","sourceNew":"  /**\n   * Creates a function that takes in a multi-valued boolean expression and returns a single-valued boolean expression.\n   * The given lambda is used to associatively (order not guaranteed) reduce all values for a document down to a single value.\n   *\n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (boolean, boolean) -> boolean}\n   * @param param the expression to be reduced per-document\n   * @return a single-valued expression which has been reduced for every document\n   */\n  public static BooleanValue createBooleanLambdaFunction(String name, TwoBoolInBoolOutLambda lambda, BooleanValueStream param) {\n    return new BooleanStreamInBooleanValueOutFunction(name,lambda,param);\n  }\n\n","sourceOld":"  /**\n   * Creates a function that takes in a multi-valued boolean expression and returns a single-valued boolean expression.\n   * The given lambda is used to associatively (order not guaranteed) reduce all values for a document down to a single value. \n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (boolean, boolean) -> boolean}\n   * @param param the expression to be reduced per-document\n   * @return a single-valued expression which has been reduced for every document\n   */\n  public static BooleanValue createBooleanLambdaFunction(String name, TwoBoolInBoolOutLambda lambda, BooleanValueStream param) {\n    return new BooleanStreamInBooleanValueOutFunction(name,lambda,param);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createBooleanLambdaFunction(String,TwoBoolInBoolOutLambda,BooleanValueStream).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createBooleanLambdaFunction(String,TwoBoolInBoolOutLambda,BooleanValueStream).mjava","sourceNew":"  /**\n   * Creates a function that takes in a multi-valued boolean expression and returns a single-valued boolean expression.\n   * The given lambda is used to associatively (order not guaranteed) reduce all values for a document down to a single value.\n   *\n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (boolean, boolean) -> boolean}\n   * @param param the expression to be reduced per-document\n   * @return a single-valued expression which has been reduced for every document\n   */\n  public static BooleanValue createBooleanLambdaFunction(String name, TwoBoolInBoolOutLambda lambda, BooleanValueStream param) {\n    return new BooleanStreamInBooleanValueOutFunction(name,lambda,param);\n  }\n\n","sourceOld":"  /**\n   * Creates a function that takes in a multi-valued boolean expression and returns a single-valued boolean expression.\n   * The given lambda is used to associatively (order not guaranteed) reduce all values for a document down to a single value. \n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (boolean, boolean) -> boolean}\n   * @param param the expression to be reduced per-document\n   * @return a single-valued expression which has been reduced for every document\n   */\n  public static BooleanValue createBooleanLambdaFunction(String name, TwoBoolInBoolOutLambda lambda, BooleanValueStream param) {\n    return new BooleanStreamInBooleanValueOutFunction(name,lambda,param);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}