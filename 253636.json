{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#readSetSmart(String,Map,String).mjava","commits":[{"id":"0b631a3d48258df52a36daa975d3f8deee09b75d","date":1438887563,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#readSetSmart(String,Map,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This checks for the defaults available other rules for the keys\n   */\n  private static Set<String> readSetSmart(String permissionName, Map m, String key) {\n    Set<String> set = readValueAsSet(m, key);\n    if (set == null && well_known_permissions.containsKey(permissionName)) {\n      set = readValueAsSet((Map) well_known_permissions.get(permissionName), key);\n    }\n    if (\"method\".equals(key)) {\n      if (set != null) {\n        for (String s : set) if (!HTTP_METHODS.contains(s)) return null;\n      }\n      return set;\n    }\n    return set == null ? Collections.singleton(null) : set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609b959cb2dad7c9d9b3237fa2b806629e9206d","date":1439303330,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#readSetSmart(String,Map,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#readSetSmart(String,Map,String).mjava","sourceNew":"  /**\n   * This checks for the defaults available other rules for the keys\n   */\n  private static Set<String> readSetSmart(String permissionName, Map m, String key) {\n    Set<String> set = readValueAsSet(m, key);\n    if (set == null && well_known_permissions.containsKey(permissionName)) {\n      set = readValueAsSet((Map) well_known_permissions.get(permissionName), key);\n    }\n    if (\"method\".equals(key)) {\n      if (set != null) {\n        for (String s : set) if (!HTTP_METHODS.contains(s)) return null;\n      }\n      return set;\n    }\n    return set == null ? singleton(null) : set;\n  }\n\n","sourceOld":"  /**\n   * This checks for the defaults available other rules for the keys\n   */\n  private static Set<String> readSetSmart(String permissionName, Map m, String key) {\n    Set<String> set = readValueAsSet(m, key);\n    if (set == null && well_known_permissions.containsKey(permissionName)) {\n      set = readValueAsSet((Map) well_known_permissions.get(permissionName), key);\n    }\n    if (\"method\".equals(key)) {\n      if (set != null) {\n        for (String s : set) if (!HTTP_METHODS.contains(s)) return null;\n      }\n      return set;\n    }\n    return set == null ? Collections.singleton(null) : set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85784a21c6101aadd8d5b3d9dfed51279fbd43d9","date":1458237890,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/Permission#readSetSmart(String,Map,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#readSetSmart(String,Map,String).mjava","sourceNew":"  /**\n   * This checks for the defaults available other rules for the keys\n   */\n  private static Set<String> readSetSmart(String permissionName, Map m, String key) {\n    if(PermissionNameProvider.values.containsKey(permissionName) && !m.containsKey(key) && \"collection\".equals(key)) {\n      return PermissionNameProvider.Name.get(permissionName).collName;\n    }\n    Set<String> set = readValueAsSet(m, key);\n    if (\"method\".equals(key)) {\n      if (set != null) {\n        for (String s : set) if (!HTTP_METHODS.contains(s)) return null;\n      }\n      return set;\n    }\n    return set == null ? singleton(null) : set;\n  }\n\n","sourceOld":"  /**\n   * This checks for the defaults available other rules for the keys\n   */\n  private static Set<String> readSetSmart(String permissionName, Map m, String key) {\n    Set<String> set = readValueAsSet(m, key);\n    if (set == null && well_known_permissions.containsKey(permissionName)) {\n      set = readValueAsSet((Map) well_known_permissions.get(permissionName), key);\n    }\n    if (\"method\".equals(key)) {\n      if (set != null) {\n        for (String s : set) if (!HTTP_METHODS.contains(s)) return null;\n      }\n      return set;\n    }\n    return set == null ? singleton(null) : set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["0b631a3d48258df52a36daa975d3f8deee09b75d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"0b631a3d48258df52a36daa975d3f8deee09b75d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"85784a21c6101aadd8d5b3d9dfed51279fbd43d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b631a3d48258df52a36daa975d3f8deee09b75d"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["85784a21c6101aadd8d5b3d9dfed51279fbd43d9"],"0b631a3d48258df52a36daa975d3f8deee09b75d":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}