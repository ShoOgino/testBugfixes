{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsFormat#vectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsFormat#vectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsFormat#vectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public TermVectorsReader vectorsReader(Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, IOContext context) throws IOException {\n    return new Lucene3xTermVectorsReader(directory, segmentInfo, fieldInfos, context) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 vector term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TermVectorsReader vectorsReader(Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, IOContext context) throws IOException {\n    return new Lucene3xTermVectorsReader(directory, segmentInfo, fieldInfos, context) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 vector term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsFormat#vectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TermVectorsReader vectorsReader(Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, IOContext context) throws IOException {\n    return new Lucene3xTermVectorsReader(directory, segmentInfo, fieldInfos, context) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 vector term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}