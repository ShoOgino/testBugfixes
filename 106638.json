{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if ( len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if ( len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d678d05c645583cb2ee5c2d5565fba91462466ed","date":1132608924,"type":5,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/LengthFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if ( len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is the right len\n   */\n  public final Token next() throws IOException\n  {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n      int len = token.termText().length();\n      if ( len >= min && len <= max) {\n          return token;\n      }\n      // note: else we ignore it but should we index each part of it?\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d678d05c645583cb2ee5c2d5565fba91462466ed":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d678d05c645583cb2ee5c2d5565fba91462466ed"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["d678d05c645583cb2ee5c2d5565fba91462466ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"d678d05c645583cb2ee5c2d5565fba91462466ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}