{"path":"backwards/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"/dev/null","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        TermDocs td = pr.termDocs();\n\n        TermEnum te = pr.terms();\n        assertTrue(te.next());\n        assertEquals(\"field1:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:dog\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:lazy\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:over\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertFalse(te.next());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        TermDocs td = pr.termDocs();\n\n        TermEnum te = pr.terms();\n        assertTrue(te.next());\n        assertEquals(\"field1:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:dog\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:lazy\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:over\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertFalse(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        TermDocs td = pr.termDocs();\n\n        TermEnum te = pr.terms();\n        assertTrue(te.next());\n        assertEquals(\"field1:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field1:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:brown\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:quick\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field2:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:dog\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:fox\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:jumps\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:lazy\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:over\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertTrue(te.next());\n        assertEquals(\"field3:the\", te.term().toString());\n        td.seek(te.term());\n        assertTrue(td.next());\n        assertEquals(0, td.doc());\n        assertFalse(td.next());\n        assertFalse(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}