{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextDoc().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        docID += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        docID += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed947d41796fd2096684c439e8a9b69aac940cf","date":1321538339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        accum += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        docID += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        accum += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        accum += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          pos = 0;\n          posPending = freq;\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              if (VERBOSE) System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}