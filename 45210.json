{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","commits":[{"id":"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","date":1446751515,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"/dev/null","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ClusterState clusterState = handler.coreContainer.getZkController().getClusterState();\n    String collection = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n\n    try {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collection, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : slice.getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n          params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n          String nodeName = rep.getNodeName();\n\n          OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n              CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n        }\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        slice = clusterState.getSlice(collection, sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collection, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collection, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ClusterState clusterState = handler.coreContainer.getZkController().getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : slice.getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n          params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n          String nodeName = rep.getNodeName();\n\n          OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n              CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n        }\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ClusterState clusterState = handler.coreContainer.getZkController().getClusterState();\n    String collection = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n\n    try {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collection, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : slice.getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n          params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n          String nodeName = rep.getNodeName();\n\n          OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n              CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n        }\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        slice = clusterState.getSlice(collection, sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collection, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collection, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ClusterState clusterState = handler.coreContainer.getZkController().getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : slice.getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n          params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n          String nodeName = rep.getNodeName();\n\n          OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n              CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n        }\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ClusterState clusterState = handler.coreContainer.getZkController().getClusterState();\n    String collection = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    Slice slice = clusterState.getSlice(collection, sliceId);\n    if (slice == null) {\n      if (clusterState.hasCollection(collection)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\n            \"No shard with name \" + sliceId + \" exists for collection \" + collection);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No collection with the specified name exists: \" + collection);\n      }\n    }\n\n    try {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collection, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : slice.getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n          params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n          String nodeName = rep.getNodeName();\n\n          OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n              CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n        }\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        slice = clusterState.getSlice(collection, sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collection, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collection, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collection + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        OptionalLong optionalMaxTerm = liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .mapToLong(rep -> zkShardTerms.getTerm(rep.getName()))\n            .max();\n        // increase terms of replicas less out-of-sync\n        if (optionalMaxTerm.isPresent()) {\n          liveReplicas.stream()\n              .filter(rep -> zkShardTerms.getTerm(rep.getName()) == optionalMaxTerm.getAsLong())\n              .forEach(rep -> zkShardTerms.setEqualsToMax(rep.getName()));\n        }\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : liveReplicas) {\n        ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n        params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n        String nodeName = rep.getNodeName();\n\n        OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n            CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ClusterState clusterState = handler.coreContainer.getZkController().getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : slice.getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n          params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n          String nodeName = rep.getNodeName();\n\n          OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n              CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n        }\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        OptionalLong optionalMaxTerm = liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .mapToLong(rep -> zkShardTerms.getTerm(rep.getName()))\n            .max();\n        // increase terms of replicas less out-of-sync\n        if (optionalMaxTerm.isPresent()) {\n          liveReplicas.stream()\n              .filter(rep -> zkShardTerms.getTerm(rep.getName()) == optionalMaxTerm.getAsLong())\n              .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n        }\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : liveReplicas) {\n        ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n        params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n        String nodeName = rep.getNodeName();\n\n        OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n            CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        OptionalLong optionalMaxTerm = liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .mapToLong(rep -> zkShardTerms.getTerm(rep.getName()))\n            .max();\n        // increase terms of replicas less out-of-sync\n        if (optionalMaxTerm.isPresent()) {\n          liveReplicas.stream()\n              .filter(rep -> zkShardTerms.getTerm(rep.getName()) == optionalMaxTerm.getAsLong())\n              .forEach(rep -> zkShardTerms.setEqualsToMax(rep.getName()));\n        }\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : liveReplicas) {\n        ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n        params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n        String nodeName = rep.getNodeName();\n\n        OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n            CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667464d9fbdf240710796210f6fcf610b9fff5dc","date":1520242425,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        OptionalLong optionalMaxTerm = liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .mapToLong(rep -> zkShardTerms.getTerm(rep.getName()))\n            .max();\n        // increase terms of replicas less out-of-sync\n        if (optionalMaxTerm.isPresent()) {\n          liveReplicas.stream()\n              .filter(rep -> zkShardTerms.getTerm(rep.getName()) == optionalMaxTerm.getAsLong())\n              .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n        }\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        OptionalLong optionalMaxTerm = liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .mapToLong(rep -> zkShardTerms.getTerm(rep.getName()))\n            .max();\n        // increase terms of replicas less out-of-sync\n        if (optionalMaxTerm.isPresent()) {\n          liveReplicas.stream()\n              .filter(rep -> zkShardTerms.getTerm(rep.getName()) == optionalMaxTerm.getAsLong())\n              .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n        }\n      }\n\n      // Call all live replicas to prepare themselves for leadership, e.g. set last published\n      // state to active.\n      for (Replica rep : liveReplicas) {\n        ShardHandler shardHandler = handler.coreContainer.getShardHandlerFactory().getShardHandler();\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.FORCEPREPAREFORLEADERSHIP.toString());\n        params.set(CoreAdminParams.CORE, rep.getStr(\"core\"));\n        String nodeName = rep.getNodeName();\n\n        OverseerCollectionMessageHandler.sendShardRequest(nodeName, params, shardHandler, null, null,\n            CommonParams.CORES_HANDLER_PATH, handler.coreContainer.getZkController().getZkStateReader()); // synchronous request\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"496c9a94ff07e1140b2e14c44e42aefdce51bd2b","date":1520388592,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        OptionalLong optionalMaxTerm = liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .mapToLong(rep -> zkShardTerms.getTerm(rep.getName()))\n            .max();\n        // increase terms of replicas less out-of-sync\n        if (optionalMaxTerm.isPresent()) {\n          liveReplicas.stream()\n              .filter(rep -> zkShardTerms.getTerm(rep.getName()) == optionalMaxTerm.getAsLong())\n              .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n        }\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23899910c6ea46c4aff96056cfae91d3e31b262a","date":1522788117,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 10; i++) {\n        ZkCoreNodeProps zombieLeaderProps = getZombieLeader(zkController, collectionName, sliceId);\n        if (zombieLeaderProps != null) {\n          log.warn(\"A replica {} on node {} won the leader election, but not exist in clusterstate, \" +\n                  \"remove it and waiting for another round of election\",\n              zombieLeaderProps.getCoreName(), zombieLeaderProps.getNodeName());\n          try (HttpSolrClient solrClient = new HttpSolrClient.Builder(zombieLeaderProps.getBaseUrl()).build()) {\n            CoreAdminRequest.unloadCore(zombieLeaderProps.getCoreName(), solrClient);\n          }\n          // waiting for another election round\n          i = 0;\n        }\n        clusterState = zkController.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        Thread.sleep(5000);\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 10; i++) {\n        ZkCoreNodeProps zombieLeaderProps = getZombieLeader(zkController, collectionName, sliceId);\n        if (zombieLeaderProps != null) {\n          log.warn(\"A replica {} on node {} won the leader election, but not exist in clusterstate, \" +\n                  \"remove it and waiting for another round of election\",\n              zombieLeaderProps.getCoreName(), zombieLeaderProps.getNodeName());\n          try (HttpSolrClient solrClient = new HttpSolrClient.Builder(zombieLeaderProps.getBaseUrl()).build()) {\n            CoreAdminRequest.unloadCore(zombieLeaderProps.getCoreName(), solrClient);\n          }\n          // waiting for another election round\n          i = 0;\n        }\n        clusterState = zkController.getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        Thread.sleep(5000);\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      // Clear out any LIR state\n      String lirPath = handler.coreContainer.getZkController().getLeaderInitiatedRecoveryZnodePath(collectionName, sliceId);\n      if (handler.coreContainer.getZkController().getZkClient().exists(lirPath, true)) {\n        StringBuilder sb = new StringBuilder();\n        handler.coreContainer.getZkController().getZkClient().printLayout(lirPath, 4, sb);\n        log.info(\"Cleaning out LIR data, which was: {}\", sb);\n        handler.coreContainer.getZkController().getZkClient().clean(lirPath);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String extCollectionName = req.getParams().required().get(COLLECTION_PROP);\n    String collectionName = zkController.zkStateReader.getAliases().resolveSimpleAlias(extCollectionName);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String collectionName = req.getParams().required().get(COLLECTION_PROP);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String extCollectionName = req.getParams().required().get(COLLECTION_PROP);\n    String collectionName = zkController.zkStateReader.getAliases().resolveSimpleAlias(extCollectionName);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice); //logok\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String extCollectionName = req.getParams().required().get(COLLECTION_PROP);\n    String collectionName = zkController.zkStateReader.getAliases().resolveSimpleAlias(extCollectionName);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice);\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#forceLeaderElection(SolrQueryRequest,CollectionsHandler).mjava","sourceNew":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String extCollectionName = req.getParams().required().get(COLLECTION_PROP);\n    String collectionName = zkController.zkStateReader.getAliases().resolveSimpleAlias(extCollectionName);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice); //nowarn\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  private static void forceLeaderElection(SolrQueryRequest req, CollectionsHandler handler) {\n    ZkController zkController = handler.coreContainer.getZkController();\n    ClusterState clusterState = zkController.getClusterState();\n    String extCollectionName = req.getParams().required().get(COLLECTION_PROP);\n    String collectionName = zkController.zkStateReader.getAliases().resolveSimpleAlias(extCollectionName);\n    String sliceId = req.getParams().required().get(SHARD_ID_PROP);\n\n    log.info(\"Force leader invoked, state: {}\", clusterState);\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(sliceId);\n    if (slice == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n    }\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, slice.getName(), zkController.getZkClient())) {\n      // if an active replica is the leader, then all is fine already\n      Replica leader = slice.getLeader();\n      if (leader != null && leader.getState() == State.ACTIVE) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"The shard already has an active leader. Force leader is not applicable. State: \" + slice);\n      }\n\n      final Set<String> liveNodes = clusterState.getLiveNodes();\n      List<Replica> liveReplicas = slice.getReplicas().stream()\n          .filter(rep -> liveNodes.contains(rep.getNodeName())).collect(Collectors.toList());\n      boolean shouldIncreaseReplicaTerms = liveReplicas.stream()\n          .noneMatch(rep -> zkShardTerms.registered(rep.getName()) && zkShardTerms.canBecomeLeader(rep.getName()));\n      // we won't increase replica's terms if exist a live replica with term equals to leader\n      if (shouldIncreaseReplicaTerms) {\n        //TODO only increase terms of replicas less out-of-sync\n        liveReplicas.stream()\n            .filter(rep -> zkShardTerms.registered(rep.getName()))\n            .forEach(rep -> zkShardTerms.setTermEqualsToLeader(rep.getName()));\n      }\n\n      // Wait till we have an active leader\n      boolean success = false;\n      for (int i = 0; i < 9; i++) {\n        Thread.sleep(5000);\n        clusterState = handler.coreContainer.getZkController().getClusterState();\n        collection = clusterState.getCollection(collectionName);\n        slice = collection.getSlice(sliceId);\n        if (slice.getLeader() != null && slice.getLeader().getState() == State.ACTIVE) {\n          success = true;\n          break;\n        }\n        log.warn(\"Force leader attempt {}. Waiting 5 secs for an active leader. State of the slice: {}\", (i + 1), slice); //logok\n      }\n\n      if (success) {\n        log.info(\"Successfully issued FORCELEADER command for collection: {}, shard: {}\", collectionName, sliceId);\n      } else {\n        log.info(\"Couldn't successfully force leader, collection: {}, shard: {}. Cluster state: {}\", collectionName, sliceId, clusterState);\n      }\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error executing FORCELEADER operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59bad1cc1e7f90125a140496e79b06afcedb68ec":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"667464d9fbdf240710796210f6fcf610b9fff5dc":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"23899910c6ea46c4aff96056cfae91d3e31b262a":["496c9a94ff07e1140b2e14c44e42aefdce51bd2b"],"575e66bd4b2349209027f6801184da7fc3cba13f":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"84f20f331d8001864545c7021812d8c6509c7593":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["28ba172425e443e0f08a49de6d73586c418d7251"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["84f20f331d8001864545c7021812d8c6509c7593"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b2d19164145b2a65acf62a657c75f4a249b649c0":["575e66bd4b2349209027f6801184da7fc3cba13f"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28ba172425e443e0f08a49de6d73586c418d7251":["23899910c6ea46c4aff96056cfae91d3e31b262a"],"496c9a94ff07e1140b2e14c44e42aefdce51bd2b":["667464d9fbdf240710796210f6fcf610b9fff5dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"]},"commit2Childs":{"59bad1cc1e7f90125a140496e79b06afcedb68ec":["575e66bd4b2349209027f6801184da7fc3cba13f"],"667464d9fbdf240710796210f6fcf610b9fff5dc":["496c9a94ff07e1140b2e14c44e42aefdce51bd2b"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["84f20f331d8001864545c7021812d8c6509c7593"],"23899910c6ea46c4aff96056cfae91d3e31b262a":["28ba172425e443e0f08a49de6d73586c418d7251"],"575e66bd4b2349209027f6801184da7fc3cba13f":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"84f20f331d8001864545c7021812d8c6509c7593":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["667464d9fbdf240710796210f6fcf610b9fff5dc"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"28ba172425e443e0f08a49de6d73586c418d7251":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"496c9a94ff07e1140b2e14c44e42aefdce51bd2b":["23899910c6ea46c4aff96056cfae91d3e31b262a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}