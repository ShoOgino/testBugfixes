{"path":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","commits":[{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsambles which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b94d84602cc6dba424ce6a1b4be0fd1eec78cb14"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","sourceNew":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","sourceOld":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsambles which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"351c5b8cb12f675814b970fabc3723ee7c78280d","date":1260964021,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","sourceNew":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n\n    ensureOpen();\n\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","sourceOld":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94d84602cc6dba424ce6a1b4be0fd1eec78cb14","date":1260987804,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","sourceNew":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n\n    ensureOpen();\n\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, false);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      applyDeletes();\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","sourceOld":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n\n    ensureOpen();\n\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, true);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","bugFix":["961159f13aece73fbb30aea720e77a2237e8bafd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ccb69647f642cfb722d47f20348eb7d77537e41","date":1267206385,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","sourceNew":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n\n    ensureOpen();\n\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, false);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      applyDeletes();\n      final IndexReader r = new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n      if (infoStream != null) {\n        message(\"return reader version=\" + r.getVersion() + \" reader=\" + r);\n      }\n      return r;\n    }\n  }\n\n","sourceOld":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n\n    ensureOpen();\n\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, false);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      applyDeletes();\n      return new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getReader(int).mjava","sourceNew":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n\n    ensureOpen();\n\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, false);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      applyDeletes();\n      final IndexReader r = new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n      if (infoStream != null) {\n        message(\"return reader version=\" + r.getVersion() + \" reader=\" + r);\n      }\n      return r;\n    }\n  }\n\n","sourceOld":"  /** Expert: like {@link #getReader}, except you can\n   *  specify which termInfosIndexDivisor should be used for\n   *  any newly opened readers.\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely. */\n  public IndexReader getReader(int termInfosIndexDivisor) throws IOException {\n\n    ensureOpen();\n\n    if (infoStream != null) {\n      message(\"flush at getReader\");\n    }\n\n    // Do this up front before flushing so that the readers\n    // obtained during this flush are pooled, the first time\n    // this method is called:\n    poolReaders = true;\n\n    flush(true, true, false);\n    \n    // Prevent segmentInfos from changing while opening the\n    // reader; in theory we could do similar retry logic,\n    // just like we do when loading segments_N\n    synchronized(this) {\n      applyDeletes();\n      final IndexReader r = new ReadOnlyDirectoryReader(this, segmentInfos, termInfosIndexDivisor);\n      if (infoStream != null) {\n        message(\"return reader version=\" + r.getVersion() + \" reader=\" + r);\n      }\n      return r;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351c5b8cb12f675814b970fabc3723ee7c78280d":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"9ccb69647f642cfb722d47f20348eb7d77537e41":["b94d84602cc6dba424ce6a1b4be0fd1eec78cb14"],"961159f13aece73fbb30aea720e77a2237e8bafd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["961159f13aece73fbb30aea720e77a2237e8bafd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9ccb69647f642cfb722d47f20348eb7d77537e41"],"b94d84602cc6dba424ce6a1b4be0fd1eec78cb14":["351c5b8cb12f675814b970fabc3723ee7c78280d"]},"commit2Childs":{"351c5b8cb12f675814b970fabc3723ee7c78280d":["b94d84602cc6dba424ce6a1b4be0fd1eec78cb14"],"9ccb69647f642cfb722d47f20348eb7d77537e41":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"961159f13aece73fbb30aea720e77a2237e8bafd":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["351c5b8cb12f675814b970fabc3723ee7c78280d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["961159f13aece73fbb30aea720e77a2237e8bafd"],"b94d84602cc6dba424ce6a1b4be0fd1eec78cb14":["9ccb69647f642cfb722d47f20348eb7d77537e41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}