{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","sourceNew":"  public SolrInputDocument toSolrInputDocument( Object obj )\n  {\n    List<DocField> fields = getDocFields( obj.getClass() );\n    if( fields.isEmpty() ) {\n      throw new RuntimeException( \"class: \"+obj.getClass()+\" does not define any fields.\" );\n    }\n    \n    SolrInputDocument doc = new SolrInputDocument();\n\tfor (DocField field : fields) {\n\t\tif (field.dynamicFieldNamePatternMatcher != null\n\t\t\t\t&& field.get(obj) != null && field.isContainedInMap) {\n\t\t\tMap<String, Object> mapValue = (HashMap<String, Object>) field\n\t\t\t\t\t.get(obj);\n\n\t\t\tfor (Map.Entry<String, Object> e : mapValue.entrySet()) {\n\t\t\t\tdoc.setField( e.getKey(), e.getValue(), 1.0f);\n\t\t\t}\n\t\t} else {\n\t\t\tdoc.setField(field.name, field.get(obj), 1.0f);\n\t\t}\n\t}\n    return doc;\n  }\n\n","sourceOld":"  public SolrInputDocument toSolrInputDocument( Object obj )\n  {\n    List<DocField> fields = getDocFields( obj.getClass() );\n    if( fields.isEmpty() ) {\n      throw new RuntimeException( \"class: \"+obj.getClass()+\" does not define any fields.\" );\n    }\n    \n    SolrInputDocument doc = new SolrInputDocument();\n\tfor (DocField field : fields) {\n\t\tif (field.dynamicFieldNamePatternMatcher != null\n\t\t\t\t&& field.get(obj) != null && field.isContainedInMap) {\n\t\t\tMap<String, Object> mapValue = (HashMap<String, Object>) field\n\t\t\t\t\t.get(obj);\n\n\t\t\tfor (Map.Entry<String, Object> e : mapValue.entrySet()) {\n\t\t\t\tdoc.setField( e.getKey(), e.getValue(), 1.0f);\n\t\t\t}\n\t\t} else {\n\t\t\tdoc.setField(field.name, field.get(obj), 1.0f);\n\t\t}\n\t}\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","sourceNew":"  public SolrInputDocument toSolrInputDocument( Object obj )\n  {\n    List<DocField> fields = getDocFields( obj.getClass() );\n    if( fields.isEmpty() ) {\n      throw new RuntimeException( \"class: \"+obj.getClass()+\" does not define any fields.\" );\n    }\n    \n    SolrInputDocument doc = new SolrInputDocument();\n\tfor (DocField field : fields) {\n\t\tif (field.dynamicFieldNamePatternMatcher != null\n\t\t\t\t&& field.get(obj) != null && field.isContainedInMap) {\n\t\t\tMap<String, Object> mapValue = (HashMap<String, Object>) field\n\t\t\t\t\t.get(obj);\n\n\t\t\tfor (Map.Entry<String, Object> e : mapValue.entrySet()) {\n\t\t\t\tdoc.setField( e.getKey(), e.getValue(), 1.0f);\n\t\t\t}\n\t\t} else {\n\t\t\tdoc.setField(field.name, field.get(obj), 1.0f);\n\t\t}\n\t}\n    return doc;\n  }\n\n","sourceOld":"  public SolrInputDocument toSolrInputDocument( Object obj )\n  {\n    List<DocField> fields = getDocFields( obj.getClass() );\n    if( fields.isEmpty() ) {\n      throw new RuntimeException( \"class: \"+obj.getClass()+\" does not define any fields.\" );\n    }\n    \n    SolrInputDocument doc = new SolrInputDocument();\n\tfor (DocField field : fields) {\n\t\tif (field.dynamicFieldNamePatternMatcher != null\n\t\t\t\t&& field.get(obj) != null && field.isContainedInMap) {\n\t\t\tMap<String, Object> mapValue = (HashMap<String, Object>) field\n\t\t\t\t\t.get(obj);\n\n\t\t\tfor (Map.Entry<String, Object> e : mapValue.entrySet()) {\n\t\t\t\tdoc.setField( e.getKey(), e.getValue(), 1.0f);\n\t\t\t}\n\t\t} else {\n\t\t\tdoc.setField(field.name, field.get(obj), 1.0f);\n\t\t}\n\t}\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","sourceNew":"  public SolrInputDocument toSolrInputDocument( Object obj )\n  {\n    List<DocField> fields = getDocFields( obj.getClass() );\n    if( fields.isEmpty() ) {\n      throw new RuntimeException( \"class: \"+obj.getClass()+\" does not define any fields.\" );\n    }\n    \n    SolrInputDocument doc = new SolrInputDocument();\n\tfor (DocField field : fields) {\n\t\tif (field.dynamicFieldNamePatternMatcher != null\n\t\t\t\t&& field.get(obj) != null && field.isContainedInMap) {\n\t\t\tMap<String, Object> mapValue = (HashMap<String, Object>) field\n\t\t\t\t\t.get(obj);\n\n\t\t\tfor (Map.Entry<String, Object> e : mapValue.entrySet()) {\n\t\t\t\tdoc.setField( e.getKey(), e.getValue(), 1.0f);\n\t\t\t}\n\t\t} else {\n\t\t\tdoc.setField(field.name, field.get(obj), 1.0f);\n\t\t}\n\t}\n    return doc;\n  }\n\n","sourceOld":"  public SolrInputDocument toSolrInputDocument( Object obj )\n  {\n    List<DocField> fields = getDocFields( obj.getClass() );\n    if( fields.isEmpty() ) {\n      throw new RuntimeException( \"class: \"+obj.getClass()+\" does not define any fields.\" );\n    }\n    \n    SolrInputDocument doc = new SolrInputDocument();\n\tfor (DocField field : fields) {\n\t\tif (field.dynamicFieldNamePatternMatcher != null\n\t\t\t\t&& field.get(obj) != null && field.isContainedInMap) {\n\t\t\tMap<String, Object> mapValue = (HashMap<String, Object>) field\n\t\t\t\t\t.get(obj);\n\n\t\t\tfor (Map.Entry<String, Object> e : mapValue.entrySet()) {\n\t\t\t\tdoc.setField( e.getKey(), e.getValue(), 1.0f);\n\t\t\t}\n\t\t} else {\n\t\t\tdoc.setField(field.name, field.get(obj), 1.0f);\n\t\t}\n\t}\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7622cbc3a8e5ea4d57a67d99978449606ec484bc","date":1313559942,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","sourceNew":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue(), 1.0f);\n        }\n      } else {\n        doc.setField(field.name, field.get(obj), 1.0f);\n      }\n\t}\n    return doc;\n  }\n\n","sourceOld":"  public SolrInputDocument toSolrInputDocument( Object obj )\n  {\n    List<DocField> fields = getDocFields( obj.getClass() );\n    if( fields.isEmpty() ) {\n      throw new RuntimeException( \"class: \"+obj.getClass()+\" does not define any fields.\" );\n    }\n    \n    SolrInputDocument doc = new SolrInputDocument();\n\tfor (DocField field : fields) {\n\t\tif (field.dynamicFieldNamePatternMatcher != null\n\t\t\t\t&& field.get(obj) != null && field.isContainedInMap) {\n\t\t\tMap<String, Object> mapValue = (HashMap<String, Object>) field\n\t\t\t\t\t.get(obj);\n\n\t\t\tfor (Map.Entry<String, Object> e : mapValue.entrySet()) {\n\t\t\t\tdoc.setField( e.getKey(), e.getValue(), 1.0f);\n\t\t\t}\n\t\t} else {\n\t\t\tdoc.setField(field.name, field.get(obj), 1.0f);\n\t\t}\n\t}\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","sourceNew":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue(), 1.0f);\n        }\n      } else {\n        doc.setField(field.name, field.get(obj), 1.0f);\n      }\n    }\n    return doc;\n  }\n\n","sourceOld":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue(), 1.0f);\n        }\n      } else {\n        doc.setField(field.name, field.get(obj), 1.0f);\n      }\n\t}\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9659be74f43b907ff558f1bafe80488bb9f4b7","date":1423940662,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","sourceNew":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue(), 1.0f);\n        }\n      } else {\n        if (field.child != null) {\n          addChild(obj, field, doc);\n        } else {\n          doc.setField(field.name, field.get(obj), 1.0f);\n        }\n      }\n    }\n    return doc;\n  }\n\n","sourceOld":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue(), 1.0f);\n        }\n      } else {\n        doc.setField(field.name, field.get(obj), 1.0f);\n      }\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","sourceNew":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue());\n        }\n      } else {\n        if (field.child != null) {\n          addChild(obj, field, doc);\n        } else {\n          doc.setField(field.name, field.get(obj));\n        }\n      }\n    }\n    return doc;\n  }\n\n","sourceOld":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue(), 1.0f);\n        }\n      } else {\n        if (field.child != null) {\n          addChild(obj, field, doc);\n        } else {\n          doc.setField(field.name, field.get(obj), 1.0f);\n        }\n      }\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder#toSolrInputDocument(Object).mjava","sourceNew":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue());\n        }\n      } else {\n        if (field.child != null) {\n          addChild(obj, field, doc);\n        } else {\n          doc.setField(field.name, field.get(obj));\n        }\n      }\n    }\n    return doc;\n  }\n\n","sourceOld":"  public SolrInputDocument toSolrInputDocument(Object obj) {\n    List<DocField> fields = getDocFields(obj.getClass());\n    if (fields.isEmpty()) {\n      throw new BindingException(\"class: \" + obj.getClass() + \" does not define any fields.\");\n    }\n\n    SolrInputDocument doc = new SolrInputDocument();\n    for (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null &&\n          field.get(obj) != null &&\n          field.isContainedInMap) {\n        Map<String, Object> mapValue = (Map<String, Object>) field.get(obj);\n\n        for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n          doc.setField(e.getKey(), e.getValue());\n        }\n      } else {\n        if (field.child != null) {\n          addChild(obj, field, doc);\n        } else {\n          doc.setField(field.name, field.get(obj));\n        }\n      }\n    }\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"acd9883560fd89e6448b2b447302fe543040cd4f":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}