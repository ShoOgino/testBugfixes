{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PlanetModel#PlanetModel(double,double).mjava","sourceNew":"  /** Constructor.\n   * @param ab is the x/y scaling factor.\n   * @param c is the z scaling factor.\n   */\n  public PlanetModel(final double ab, final double c) {\n    this.ab = ab;\n    this.c = c;\n    this.inverseAb = 1.0 / ab;\n    this.inverseC = 1.0 / c;\n    this.flattening = (ab - c) * inverseAb;\n    this.squareRatio = (ab * ab - c * c) / (c * c);\n    this.inverseAbSquared = inverseAb * inverseAb;\n    this.inverseCSquared = inverseC * inverseC;\n    this.NORTH_POLE = new GeoPoint(c, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(c, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(ab, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(ab, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(ab, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(ab, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n  }\n\n","sourceOld":"  /** Constructor.\n   * @param ab is the x/y scaling factor.\n   * @param c is the z scaling factor.\n   */\n  public PlanetModel(final double ab, final double c) {\n    this.ab = ab;\n    this.c = c;\n    this.inverseAb = 1.0 / ab;\n    this.inverseC = 1.0 / c;\n    this.flattening = (ab - c) * inverseAb;\n    this.squareRatio = (ab * ab - c * c) / (c * c);\n    this.inverseAbSquared = inverseAb * inverseAb;\n    this.inverseCSquared = inverseC * inverseC;\n    this.NORTH_POLE = new GeoPoint(c, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(c, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(ab, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(ab, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(ab, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(ab, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2","date":1512093110,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","sourceNew":"  /** Constructor.\n   * @param ab is the x/y scaling factor.\n   * @param c is the z scaling factor.\n   */\n  public PlanetModel(final double ab, final double c) {\n    this.ab = ab;\n    this.c = c;\n    this.inverseAb = 1.0 / ab;\n    this.inverseC = 1.0 / c;\n    this.flattening = (ab - c) * inverseAb;\n    this.squareRatio = (ab * ab - c * c) / (c * c);\n    this.inverseAbSquared = inverseAb * inverseAb;\n    this.inverseCSquared = inverseC * inverseC;\n    this.NORTH_POLE = new GeoPoint(c, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(c, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(ab, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(ab, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(ab, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(ab, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n    this.minimumPoleDistance  = Math.min(surfaceDistance(NORTH_POLE, SOUTH_POLE), surfaceDistance(MIN_X_POLE, MAX_X_POLE));\n  }\n\n","sourceOld":"  /** Constructor.\n   * @param ab is the x/y scaling factor.\n   * @param c is the z scaling factor.\n   */\n  public PlanetModel(final double ab, final double c) {\n    this.ab = ab;\n    this.c = c;\n    this.inverseAb = 1.0 / ab;\n    this.inverseC = 1.0 / c;\n    this.flattening = (ab - c) * inverseAb;\n    this.squareRatio = (ab * ab - c * c) / (c * c);\n    this.inverseAbSquared = inverseAb * inverseAb;\n    this.inverseCSquared = inverseC * inverseC;\n    this.NORTH_POLE = new GeoPoint(c, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(c, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(ab, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(ab, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(ab, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(ab, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4218e96184b4af9d31258a45a87da597ea58ac7","date":1512293271,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","sourceNew":"  /** Constructor.\n   * @param ab is the x/y scaling factor.\n   * @param c is the z scaling factor.\n   */\n  public PlanetModel(final double ab, final double c) {\n    this.ab = ab;\n    this.c = c;\n    this.inverseAb = 1.0 / ab;\n    this.inverseC = 1.0 / c;\n    this.flattening = (ab - c) * inverseAb;\n    this.squareRatio = (ab * ab - c * c) / (c * c);\n    this.inverseAbSquared = inverseAb * inverseAb;\n    this.inverseCSquared = inverseC * inverseC;\n    this.NORTH_POLE = new GeoPoint(c, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(c, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(ab, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(ab, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(ab, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(ab, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n    this.scale = (2.0 * ab + c)/3.0;\n    this.inverseScale = 1.0 / scale;\n    this.minimumPoleDistance  = Math.min(surfaceDistance(NORTH_POLE, SOUTH_POLE), surfaceDistance(MIN_X_POLE, MAX_X_POLE));\n  }\n\n","sourceOld":"  /** Constructor.\n   * @param ab is the x/y scaling factor.\n   * @param c is the z scaling factor.\n   */\n  public PlanetModel(final double ab, final double c) {\n    this.ab = ab;\n    this.c = c;\n    this.inverseAb = 1.0 / ab;\n    this.inverseC = 1.0 / c;\n    this.flattening = (ab - c) * inverseAb;\n    this.squareRatio = (ab * ab - c * c) / (c * c);\n    this.inverseAbSquared = inverseAb * inverseAb;\n    this.inverseCSquared = inverseC * inverseC;\n    this.NORTH_POLE = new GeoPoint(c, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(c, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(ab, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(ab, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(ab, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(ab, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n    this.minimumPoleDistance  = Math.min(surfaceDistance(NORTH_POLE, SOUTH_POLE), surfaceDistance(MIN_X_POLE, MAX_X_POLE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","sourceNew":"  /** Constructor.\n   * @param xyScaling is the x/y scaling factor.\n   * @param zScaling is the z scaling factor.\n   */\n  public PlanetModel(final double xyScaling, final double zScaling) {\n    this.xyScaling = xyScaling;\n    this.zScaling = zScaling;\n    this.inverseXYScaling = 1.0 / xyScaling;\n    this.inverseZScaling = 1.0 / zScaling;\n    this.scaledFlattening = (xyScaling - zScaling) * inverseXYScaling;\n    this.squareRatio = (xyScaling * xyScaling - zScaling * zScaling) / (zScaling * zScaling);\n    this.inverseXYScalingSquared = inverseXYScaling * inverseXYScaling;\n    this.inverseZScalingSquared = inverseZScaling * inverseZScaling;\n    this.NORTH_POLE = new GeoPoint(zScaling, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(zScaling, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(xyScaling, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(xyScaling, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(xyScaling, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(xyScaling, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n    this.scale = (2.0 * xyScaling + zScaling)/3.0;\n    this.inverseScale = 1.0 / scale;\n    this.minimumPoleDistance  = Math.min(surfaceDistance(NORTH_POLE, SOUTH_POLE), surfaceDistance(MIN_X_POLE, MAX_X_POLE));\n\n    this.MAX_VALUE = getMaximumMagnitude();\n    this.MUL = (0x1L << BITS) / (2 * this.MAX_VALUE);\n    this.DECODE = getNextSafeDouble(1/MUL);\n    this.MIN_ENCODED_VALUE = encodeValue(-MAX_VALUE);\n    this.MAX_ENCODED_VALUE = encodeValue(MAX_VALUE);\n\n    this.RADIANS_PER_METER = 1.0 / xyScaling;\n\n    this.docValueEncoder = new DocValueEncoder(this);\n  }\n\n","sourceOld":"  /** Constructor.\n   * @param ab is the x/y scaling factor.\n   * @param c is the z scaling factor.\n   */\n  public PlanetModel(final double ab, final double c) {\n    this.ab = ab;\n    this.c = c;\n    this.inverseAb = 1.0 / ab;\n    this.inverseC = 1.0 / c;\n    this.flattening = (ab - c) * inverseAb;\n    this.squareRatio = (ab * ab - c * c) / (c * c);\n    this.inverseAbSquared = inverseAb * inverseAb;\n    this.inverseCSquared = inverseC * inverseC;\n    this.NORTH_POLE = new GeoPoint(c, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(c, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(ab, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(ab, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(ab, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(ab, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n    this.scale = (2.0 * ab + c)/3.0;\n    this.inverseScale = 1.0 / scale;\n    this.minimumPoleDistance  = Math.min(surfaceDistance(NORTH_POLE, SOUTH_POLE), surfaceDistance(MIN_X_POLE, MAX_X_POLE));\n  }\n\n","bugFix":null,"bugIntro":["66817073345fa8e6416a3654a58a741c14745c40"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66817073345fa8e6416a3654a58a741c14745c40","date":1583770075,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/PlanetModel#PlanetModel(double,double).mjava","sourceNew":"  /**\n   * * Construct a Planet Model from the semi major axis, semi minor axis=.\n   *\n   * @param semiMajorAxis is the semi major axis (in meters) defined as 'a' in projection formulae.\n   * @param semiMinorAxis is the semi minor axis (in meters) defined as 'b' in projection formulae.\n   */\n  public PlanetModel(final double semiMajorAxis, final double semiMinorAxis) {\n    this.a = semiMajorAxis;\n    this.b = semiMinorAxis;\n    this.meanRadius = (2.0 * semiMajorAxis + semiMinorAxis) / 3.0;\n    this.xyScaling = semiMajorAxis / meanRadius;\n    this.zScaling = semiMinorAxis / meanRadius;\n    this.scale = (2.0 * xyScaling + zScaling) / 3.0;\n    this.inverseXYScaling = 1.0 / xyScaling;\n    this.inverseZScaling = 1.0 / zScaling;\n    this.scaledFlattening = (xyScaling - zScaling) * inverseXYScaling;\n    this.squareRatio = (xyScaling * xyScaling - zScaling * zScaling) / (zScaling * zScaling);\n    this.inverseXYScalingSquared = inverseXYScaling * inverseXYScaling;\n    this.inverseZScalingSquared = inverseZScaling * inverseZScaling;\n    this.NORTH_POLE = new GeoPoint(zScaling, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(zScaling, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(xyScaling, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(xyScaling, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(xyScaling, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(xyScaling, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n\n    this.inverseScale = 1.0 / scale;\n    this.minimumPoleDistance  = Math.min(surfaceDistance(NORTH_POLE, SOUTH_POLE), surfaceDistance(MIN_X_POLE, MAX_X_POLE));\n\n    this.MAX_VALUE = getMaximumMagnitude();\n    this.MUL = (0x1L << BITS) / (2 * this.MAX_VALUE);\n    this.DECODE = getNextSafeDouble(1/MUL);\n    this.MIN_ENCODED_VALUE = encodeValue(-MAX_VALUE);\n    this.MAX_ENCODED_VALUE = encodeValue(MAX_VALUE);\n\n    this.docValueEncoder = new DocValueEncoder(this);\n  }\n\n","sourceOld":"  /** Constructor.\n   * @param xyScaling is the x/y scaling factor.\n   * @param zScaling is the z scaling factor.\n   */\n  public PlanetModel(final double xyScaling, final double zScaling) {\n    this.xyScaling = xyScaling;\n    this.zScaling = zScaling;\n    this.inverseXYScaling = 1.0 / xyScaling;\n    this.inverseZScaling = 1.0 / zScaling;\n    this.scaledFlattening = (xyScaling - zScaling) * inverseXYScaling;\n    this.squareRatio = (xyScaling * xyScaling - zScaling * zScaling) / (zScaling * zScaling);\n    this.inverseXYScalingSquared = inverseXYScaling * inverseXYScaling;\n    this.inverseZScalingSquared = inverseZScaling * inverseZScaling;\n    this.NORTH_POLE = new GeoPoint(zScaling, 0.0, 0.0, 1.0, Math.PI * 0.5, 0.0);\n    this.SOUTH_POLE = new GeoPoint(zScaling, 0.0, 0.0, -1.0, -Math.PI * 0.5, 0.0);\n    this.MIN_X_POLE = new GeoPoint(xyScaling, -1.0, 0.0, 0.0, 0.0, -Math.PI);\n    this.MAX_X_POLE = new GeoPoint(xyScaling, 1.0, 0.0, 0.0, 0.0, 0.0);\n    this.MIN_Y_POLE = new GeoPoint(xyScaling, 0.0, -1.0, 0.0, 0.0, -Math.PI * 0.5);\n    this.MAX_Y_POLE = new GeoPoint(xyScaling, 0.0, 1.0, 0.0, 0.0, Math.PI * 0.5);\n    this.scale = (2.0 * xyScaling + zScaling)/3.0;\n    this.inverseScale = 1.0 / scale;\n    this.minimumPoleDistance  = Math.min(surfaceDistance(NORTH_POLE, SOUTH_POLE), surfaceDistance(MIN_X_POLE, MAX_X_POLE));\n\n    this.MAX_VALUE = getMaximumMagnitude();\n    this.MUL = (0x1L << BITS) / (2 * this.MAX_VALUE);\n    this.DECODE = getNextSafeDouble(1/MUL);\n    this.MIN_ENCODED_VALUE = encodeValue(-MAX_VALUE);\n    this.MAX_ENCODED_VALUE = encodeValue(MAX_VALUE);\n\n    this.RADIANS_PER_METER = 1.0 / xyScaling;\n\n    this.docValueEncoder = new DocValueEncoder(this);\n  }\n\n","bugFix":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4218e96184b4af9d31258a45a87da597ea58ac7":["fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2"],"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66817073345fa8e6416a3654a58a741c14745c40":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["e4218e96184b4af9d31258a45a87da597ea58ac7"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66817073345fa8e6416a3654a58a741c14745c40"]},"commit2Childs":{"e4218e96184b4af9d31258a45a87da597ea58ac7":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2":["e4218e96184b4af9d31258a45a87da597ea58ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"66817073345fa8e6416a3654a58a741c14745c40":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["66817073345fa8e6416a3654a58a741c14745c40"],"b4e444678504caf66a8060b1d514383aa4feac0c":["fc92e5b26b68a4009f0e63747e9b61f1e2da8ac2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}