{"path":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.CleanupThread#run().mjava","commits":[{"id":"cf0b1b21012d341c80a1f3975cf88823f0fe95a9","date":1316016056,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.CleanupThread#run().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache.CleanupThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      while (true) {\n        synchronized (this) {\n          if (stop) break;\n          try {\n            this.wait();\n          } catch (InterruptedException e) {}\n        }\n        if (stop) break;\n        ConcurrentLRUCache c = cache.get();\n        if(c == null) break;\n        c.markAndSweep();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      while (true) {\n        synchronized (this) {\n          if (stop) break;\n          try {\n            this.wait();\n          } catch (InterruptedException e) {}\n        }\n        if (stop) break;\n        ConcurrentLRUCache c = cache.get();\n        if(c == null) break;\n        c.markAndSweep();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.CleanupThread#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.CleanupThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      while (true) {\n        ConcurrentLRUCache c = cache.get();\n        if(c == null) break;\n        synchronized (this) {\n          if (stop) break;\n          long waitTimeMs =  c.maxIdleTimeNs != Long.MAX_VALUE ? TimeUnit.MILLISECONDS.convert(c.maxIdleTimeNs, TimeUnit.NANOSECONDS) : 0L;\n          try {\n            this.wait(waitTimeMs);\n          } catch (InterruptedException e) {}\n        }\n        if (stop) break;\n        c = cache.get();\n        if (c == null) break;\n        c.markAndSweep();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      while (true) {\n        synchronized (this) {\n          if (stop) break;\n          try {\n            this.wait();\n          } catch (InterruptedException e) {}\n        }\n        if (stop) break;\n        ConcurrentLRUCache c = cache.get();\n        if(c == null) break;\n        c.markAndSweep();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.CleanupThread#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache.CleanupThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      while (true) {\n        @SuppressWarnings({\"rawtypes\"})\n        ConcurrentLRUCache c = cache.get();\n        if(c == null) break;\n        synchronized (this) {\n          if (stop) break;\n          long waitTimeMs =  c.maxIdleTimeNs != Long.MAX_VALUE ? TimeUnit.MILLISECONDS.convert(c.maxIdleTimeNs, TimeUnit.NANOSECONDS) : 0L;\n          try {\n            this.wait(waitTimeMs);\n          } catch (InterruptedException e) {}\n        }\n        if (stop) break;\n        c = cache.get();\n        if (c == null) break;\n        c.markAndSweep();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      while (true) {\n        ConcurrentLRUCache c = cache.get();\n        if(c == null) break;\n        synchronized (this) {\n          if (stop) break;\n          long waitTimeMs =  c.maxIdleTimeNs != Long.MAX_VALUE ? TimeUnit.MILLISECONDS.convert(c.maxIdleTimeNs, TimeUnit.NANOSECONDS) : 0L;\n          try {\n            this.wait(waitTimeMs);\n          } catch (InterruptedException e) {}\n        }\n        if (stop) break;\n        c = cache.get();\n        if (c == null) break;\n        c.markAndSweep();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf0b1b21012d341c80a1f3975cf88823f0fe95a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["cf0b1b21012d341c80a1f3975cf88823f0fe95a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"cf0b1b21012d341c80a1f3975cf88823f0fe95a9":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf0b1b21012d341c80a1f3975cf88823f0fe95a9"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}