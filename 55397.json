{"path":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testRandom().mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(new TermQuery(new Term(\"foo\", Integer.toString(start + i))), Occur.SHOULD);\n      }\n      Query query = builder.build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(new TermQuery(new Term(\"foo\", Integer.toString(start + i))), Occur.SHOULD);\n      }\n      Query query = builder.build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = 2;//random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(maybeWrap(new TermQuery(new Term(\"foo\", Integer.toString(start + i)))), Occur.SHOULD);\n      }\n      Query query = builder.build();\n\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      CheckHits.checkTopScores(random(), filteredQuery, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(new TermQuery(new Term(\"foo\", Integer.toString(start + i))), Occur.SHOULD);\n      }\n      Query query = builder.build();\n\n      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      \n      searcher.search(query, collector1);\n      searcher.search(query, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE\n      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES\n      searcher.search(filteredQuery, collector1);\n      searcher.search(filteredQuery, collector2);\n      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd1b2341753342eb37e88f66c2fd99ff36c87be","date":1559030038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWANDScorer#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(maybeWrap(new TermQuery(new Term(\"foo\", Integer.toString(start + i)))), Occur.SHOULD);\n      }\n      Query query = builder.build();\n\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      CheckHits.checkTopScores(random(), filteredQuery, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = 2;//random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(maybeWrap(new TermQuery(new Term(\"foo\", Integer.toString(start + i)))), Occur.SHOULD);\n      }\n      Query query = builder.build();\n\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      CheckHits.checkTopScores(random(), filteredQuery, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afd1b2341753342eb37e88f66c2fd99ff36c87be":["523cc6563c99a55527ef7993efc5413c6648852d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afd1b2341753342eb37e88f66c2fd99ff36c87be"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"afd1b2341753342eb37e88f66c2fd99ff36c87be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["afd1b2341753342eb37e88f66c2fd99ff36c87be"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}