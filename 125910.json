{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","commits":[{"id":"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b","date":1432801743,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","sourceNew":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","sourceNew":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","sourceNew":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","sourceNew":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","sourceNew":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getStateUpdateQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","sourceNew":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getStateUpdateQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","sourceNew":null,"sourceOld":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getStateUpdateQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","sourceNew":null,"sourceOld":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getStateUpdateQueue(zk).offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader=null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["2209af2c265d2258ec4b29c8cc78622d36994a15","19498030e0adab22f604f935cae3c03dcf0952a6"],"19498030e0adab22f604f935cae3c03dcf0952a6":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["af2638813028b254a88b418ebeafb541afb49653"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["af2638813028b254a88b418ebeafb541afb49653","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}