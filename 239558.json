{"path":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","commits":[{"id":"24020c4069004ed08938cdad96858b56f698f6a1","date":1442578977,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean,String[]).mjava","sourceNew":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","sourceOld":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest, String[] scoreModes) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest, scoreModes))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da83c90417e805f2b355afc2d79f4d2b2ce27469","date":1464346037,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","sourceNew":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cluster.getSolrClient().request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","sourceOld":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","sourceNew":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cluster.getSolrClient().request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","sourceOld":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","sourceNew":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cluster.getSolrClient().request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","sourceOld":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","sourceNew":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cluster.getSolrClient().request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","sourceOld":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","sourceNew":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cluster.getSolrClient().request(qr);\n    } catch (BaseHttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","sourceOld":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cluster.getSolrClient().request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["24020c4069004ed08938cdad96858b56f698f6a1","da83c90417e805f2b355afc2d79f4d2b2ce27469"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["24020c4069004ed08938cdad96858b56f698f6a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["da83c90417e805f2b355afc2d79f4d2b2ce27469"],"24020c4069004ed08938cdad96858b56f698f6a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["24020c4069004ed08938cdad96858b56f698f6a1","da83c90417e805f2b355afc2d79f4d2b2ce27469"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["24020c4069004ed08938cdad96858b56f698f6a1","da83c90417e805f2b355afc2d79f4d2b2ce27469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["da8a02bef7458089240404614139b53c9f875ec7","db96734b79e26d948b59f68bd4564c4836a71acf","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24020c4069004ed08938cdad96858b56f698f6a1"],"24020c4069004ed08938cdad96858b56f698f6a1":["da8a02bef7458089240404614139b53c9f875ec7","da83c90417e805f2b355afc2d79f4d2b2ce27469","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"db96734b79e26d948b59f68bd4564c4836a71acf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}