{"path":"lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","commits":[{"id":"d7baf7e55943149df5bb636dc63bbe4cccc9a297","date":1327844821,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method is sugar for getting an {@link AtomicIndexReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicIndexReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeIndexReader) {\n      return new SlowCompositeReaderWrapper((CompositeIndexReader) reader);\n    } else {\n      assert reader instanceof AtomicIndexReader;\n      return (AtomicIndexReader) reader;\n    }\n  }\n\n","sourceOld":"  /** This method is sugar for getting an {@link AtomicIndexReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicIndexReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeIndexReader) {\n      return new SlowMultiReaderWrapper((CompositeIndexReader) reader);\n    } else {\n      assert reader instanceof AtomicIndexReader;\n      return (AtomicIndexReader) reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method is sugar for getting an {@link AtomicReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof AtomicReader;\n      return (AtomicReader) reader;\n    }\n  }\n\n","sourceOld":"  /** This method is sugar for getting an {@link AtomicIndexReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicIndexReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeIndexReader) {\n      return new SlowCompositeReaderWrapper((CompositeIndexReader) reader);\n    } else {\n      assert reader instanceof AtomicIndexReader;\n      return (AtomicIndexReader) reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** This method is sugar for getting an {@link AtomicReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof AtomicReader;\n      return (AtomicReader) reader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#wrap(IndexReader).mjava","sourceNew":"  /** This method is sugar for getting an {@link AtomicReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof AtomicReader;\n      return (AtomicReader) reader;\n    }\n  }\n\n","sourceOld":"  /** This method is sugar for getting an {@link AtomicReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof AtomicReader;\n      return (AtomicReader) reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["d7baf7e55943149df5bb636dc63bbe4cccc9a297"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7baf7e55943149df5bb636dc63bbe4cccc9a297":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cab9a86bd67202d20b6adc463008c8e982b070a","d7baf7e55943149df5bb636dc63bbe4cccc9a297"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7baf7e55943149df5bb636dc63bbe4cccc9a297":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}