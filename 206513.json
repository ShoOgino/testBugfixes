{"path":"lucene/src/test/org/apache/lucene/util/TestPagedBytes#testDataInputOutput().mjava","commits":[{"id":"39509e0276e70b38a5e76aa9d2c468955a1c7855","date":1319748553,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestPagedBytes#testDataInputOutput().mjava","pathOld":"/dev/null","sourceNew":"  public void testDataInputOutput() throws Exception {\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final PagedBytes p = new PagedBytes(_TestUtil.nextInt(random, 1, 20));\n      final DataOutput out = p.getDataOutput();\n      final int numBytes = random.nextInt(10000000);\n\n      final byte[] answer = new byte[numBytes];\n      random.nextBytes(answer);\n      int written = 0;\n      while(written < numBytes) {\n        if (random.nextInt(10) == 7) {\n          out.writeByte(answer[written++]);\n        } else {\n          int chunk = Math.max(random.nextInt(1000), numBytes - written);\n          out.writeBytes(answer, written, chunk);\n          written += chunk;\n        }\n      }\n\n      p.freeze(random.nextBoolean());\n\n      final DataInput in = p.getDataInput();\n\n      final byte[] verify = new byte[numBytes];\n      int read = 0;\n      while(read < numBytes) {\n        if (random.nextInt(10) == 7) {\n          verify[read++] = in.readByte();\n        } else {\n          int chunk = Math.max(random.nextInt(1000), numBytes - read);\n          in.readBytes(verify, read, chunk);\n          read += chunk;\n        }\n      }\n      assertTrue(Arrays.equals(answer, verify));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dc8e8863fa2188c55d046c4ae454684afa0462ba","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc8e8863fa2188c55d046c4ae454684afa0462ba","date":1320579522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestPagedBytes#testDataInputOutput().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestPagedBytes#testDataInputOutput().mjava","sourceNew":"  public void testDataInputOutput() throws Exception {\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final PagedBytes p = new PagedBytes(_TestUtil.nextInt(random, 1, 20));\n      final DataOutput out = p.getDataOutput();\n      final int numBytes = random.nextInt(10000000);\n\n      final byte[] answer = new byte[numBytes];\n      random.nextBytes(answer);\n      int written = 0;\n      while(written < numBytes) {\n        if (random.nextInt(10) == 7) {\n          out.writeByte(answer[written++]);\n        } else {\n          int chunk = Math.min(random.nextInt(1000), numBytes - written);\n          out.writeBytes(answer, written, chunk);\n          written += chunk;\n        }\n      }\n\n      p.freeze(random.nextBoolean());\n\n      final DataInput in = p.getDataInput();\n\n      final byte[] verify = new byte[numBytes];\n      int read = 0;\n      while(read < numBytes) {\n        if (random.nextInt(10) == 7) {\n          verify[read++] = in.readByte();\n        } else {\n          int chunk = Math.min(random.nextInt(1000), numBytes - read);\n          in.readBytes(verify, read, chunk);\n          read += chunk;\n        }\n      }\n      assertTrue(Arrays.equals(answer, verify));\n    }\n  }\n\n","sourceOld":"  public void testDataInputOutput() throws Exception {\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final PagedBytes p = new PagedBytes(_TestUtil.nextInt(random, 1, 20));\n      final DataOutput out = p.getDataOutput();\n      final int numBytes = random.nextInt(10000000);\n\n      final byte[] answer = new byte[numBytes];\n      random.nextBytes(answer);\n      int written = 0;\n      while(written < numBytes) {\n        if (random.nextInt(10) == 7) {\n          out.writeByte(answer[written++]);\n        } else {\n          int chunk = Math.max(random.nextInt(1000), numBytes - written);\n          out.writeBytes(answer, written, chunk);\n          written += chunk;\n        }\n      }\n\n      p.freeze(random.nextBoolean());\n\n      final DataInput in = p.getDataInput();\n\n      final byte[] verify = new byte[numBytes];\n      int read = 0;\n      while(read < numBytes) {\n        if (random.nextInt(10) == 7) {\n          verify[read++] = in.readByte();\n        } else {\n          int chunk = Math.max(random.nextInt(1000), numBytes - read);\n          in.readBytes(verify, read, chunk);\n          read += chunk;\n        }\n      }\n      assertTrue(Arrays.equals(answer, verify));\n    }\n  }\n\n","bugFix":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPagedBytes#testDataInputOutput().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestPagedBytes#testDataInputOutput().mjava","sourceNew":"  public void testDataInputOutput() throws Exception {\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final PagedBytes p = new PagedBytes(_TestUtil.nextInt(random, 1, 20));\n      final DataOutput out = p.getDataOutput();\n      final int numBytes = random.nextInt(10000000);\n\n      final byte[] answer = new byte[numBytes];\n      random.nextBytes(answer);\n      int written = 0;\n      while(written < numBytes) {\n        if (random.nextInt(10) == 7) {\n          out.writeByte(answer[written++]);\n        } else {\n          int chunk = Math.min(random.nextInt(1000), numBytes - written);\n          out.writeBytes(answer, written, chunk);\n          written += chunk;\n        }\n      }\n\n      p.freeze(random.nextBoolean());\n\n      final DataInput in = p.getDataInput();\n\n      final byte[] verify = new byte[numBytes];\n      int read = 0;\n      while(read < numBytes) {\n        if (random.nextInt(10) == 7) {\n          verify[read++] = in.readByte();\n        } else {\n          int chunk = Math.min(random.nextInt(1000), numBytes - read);\n          in.readBytes(verify, read, chunk);\n          read += chunk;\n        }\n      }\n      assertTrue(Arrays.equals(answer, verify));\n    }\n  }\n\n","sourceOld":"  public void testDataInputOutput() throws Exception {\n    for(int iter=0;iter<5*RANDOM_MULTIPLIER;iter++) {\n      final PagedBytes p = new PagedBytes(_TestUtil.nextInt(random, 1, 20));\n      final DataOutput out = p.getDataOutput();\n      final int numBytes = random.nextInt(10000000);\n\n      final byte[] answer = new byte[numBytes];\n      random.nextBytes(answer);\n      int written = 0;\n      while(written < numBytes) {\n        if (random.nextInt(10) == 7) {\n          out.writeByte(answer[written++]);\n        } else {\n          int chunk = Math.min(random.nextInt(1000), numBytes - written);\n          out.writeBytes(answer, written, chunk);\n          written += chunk;\n        }\n      }\n\n      p.freeze(random.nextBoolean());\n\n      final DataInput in = p.getDataInput();\n\n      final byte[] verify = new byte[numBytes];\n      int read = 0;\n      while(read < numBytes) {\n        if (random.nextInt(10) == 7) {\n          verify[read++] = in.readByte();\n        } else {\n          int chunk = Math.min(random.nextInt(1000), numBytes - read);\n          in.readBytes(verify, read, chunk);\n          read += chunk;\n        }\n      }\n      assertTrue(Arrays.equals(answer, verify));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dc8e8863fa2188c55d046c4ae454684afa0462ba":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dc8e8863fa2188c55d046c4ae454684afa0462ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"dc8e8863fa2188c55d046c4ae454684afa0462ba":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["dc8e8863fa2188c55d046c4ae454684afa0462ba"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}