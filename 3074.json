{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null,\"collection1\"));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null,\"collection1\"));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null,\"collection1\"));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null,\"collection1\"));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBuildCoreName() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null,\"collection1\"));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null,\"collection1\"));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["1778938cb7fb298e6e07a43e2d5acaf552d61518","6681d02f2302c363be938426e68f8dfd090cc1bf"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"3f504512a03d978990cbff30db0522b354e846db":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["1778938cb7fb298e6e07a43e2d5acaf552d61518"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}