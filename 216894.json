{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkDynamicConfig.Server#parseLine(String).mjava","commits":[{"id":"861042e9f93a922bfb6b6b2c3d44b61fb3504894","date":1587133827,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkDynamicConfig.Server#parseLine(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Parse a single zk config server line\n     */\n    public static Server parseLine(String line) {\n      Matcher m = linePattern.matcher(line);\n      if (!m.matches()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not parse dynamic zk config line: \" + line);\n      }\n      return new Server(\n          Integer.parseInt(m.group(\"serverId\")),\n          m.group(\"address\"),\n          Integer.parseInt(m.group(\"leaderPort\")),\n          Integer.parseInt(m.group(\"leaderElectionPort\")),\n          m.group(\"role\"),\n          m.group(\"clientPortAddress\"),\n          Integer.parseInt(m.group(\"clientPort\"))\n      );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5e1d86fe37bc067ae054ff809ec807433b2b7387"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e1d86fe37bc067ae054ff809ec807433b2b7387","date":1596011582,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkDynamicConfig.Server#parseLine(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkDynamicConfig.Server#parseLine(String).mjava","sourceNew":"    /**\n     * Parse a single zk config server line\n     */\n    public static Server parseLine(String line) {\n      Matcher m = linePattern.matcher(line);\n      if (!m.matches()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not parse dynamic zk config line: \" + line);\n      }\n      String clientPortStr = m.group(\"clientPort\");\n      return new Server(\n          Integer.parseInt(m.group(\"serverId\")),\n          m.group(\"address\"),\n          Integer.parseInt(m.group(\"leaderPort\")),\n          Integer.parseInt(m.group(\"leaderElectionPort\")),\n          m.group(\"role\"),\n          m.group(\"clientPortAddress\"),\n          clientPortStr != null ? Integer.parseInt(clientPortStr) : null\n      );\n    }\n\n","sourceOld":"    /**\n     * Parse a single zk config server line\n     */\n    public static Server parseLine(String line) {\n      Matcher m = linePattern.matcher(line);\n      if (!m.matches()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not parse dynamic zk config line: \" + line);\n      }\n      return new Server(\n          Integer.parseInt(m.group(\"serverId\")),\n          m.group(\"address\"),\n          Integer.parseInt(m.group(\"leaderPort\")),\n          Integer.parseInt(m.group(\"leaderElectionPort\")),\n          m.group(\"role\"),\n          m.group(\"clientPortAddress\"),\n          Integer.parseInt(m.group(\"clientPort\"))\n      );\n    }\n\n","bugFix":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e1d86fe37bc067ae054ff809ec807433b2b7387":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e1d86fe37bc067ae054ff809ec807433b2b7387"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"5e1d86fe37bc067ae054ff809ec807433b2b7387":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["5e1d86fe37bc067ae054ff809ec807433b2b7387"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}