{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.jumpTableEntryCount = meta.readShort();\n    entry.denseRankPower = meta.readByte();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    if (tableSize < -1) {\n      entry.blockShift = -2 - tableSize;\n    } else {\n      entry.blockShift = -1;\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n    entry.valueJumpTableOffset = meta.readLong();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#readNumeric(ChecksumIndexInput,NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private void readNumeric(ChecksumIndexInput meta, NumericEntry entry) throws IOException {\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.jumpTableEntryCount = meta.readShort();\n    entry.denseRankPower = meta.readByte();\n    entry.numValues = meta.readLong();\n    int tableSize = meta.readInt();\n    if (tableSize > 256) {\n      throw new CorruptIndexException(\"invalid table size: \" + tableSize, meta);\n    }\n    if (tableSize >= 0) {\n      entry.table = new long[tableSize];\n      ramBytesUsed += RamUsageEstimator.sizeOf(entry.table);\n      for (int i = 0; i < tableSize; ++i) {\n        entry.table[i] = meta.readLong();\n      }\n    }\n    if (tableSize < -1) {\n      entry.blockShift = -2 - tableSize;\n    } else {\n      entry.blockShift = -1;\n    }\n    entry.bitsPerValue = meta.readByte();\n    entry.minValue = meta.readLong();\n    entry.gcd = meta.readLong();\n    entry.valuesOffset = meta.readLong();\n    entry.valuesLength = meta.readLong();\n    entry.valueJumpTableOffset = meta.readLong();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}