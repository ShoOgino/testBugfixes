{"path":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","sourceNew":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    maxMergedSegmentBytes = (long) (v*1024*1024);\n    return this;\n  }\n\n","sourceOld":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    maxMergedSegmentBytes = (long) (v*1024*1024);\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7211b1fba79597955a78855e9f646de9248ca57","date":1345763711,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","sourceNew":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxMergedSegmentMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    maxMergedSegmentBytes = (v > Long.MAX_VALUE) ? Long.MAX_VALUE : (long) v;\n    return this;\n  }\n\n","sourceOld":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    maxMergedSegmentBytes = (long) (v*1024*1024);\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","sourceNew":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxMergedSegmentMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    maxMergedSegmentBytes = (v > Long.MAX_VALUE) ? Long.MAX_VALUE : (long) v;\n    return this;\n  }\n\n","sourceOld":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    maxMergedSegmentBytes = (long) (v*1024*1024);\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39cc7fae4e4c6be7c74434527ee9852592db649f","date":1412761164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","sourceNew":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxMergedSegmentMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    maxMergedSegmentBytes = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n    return this;\n  }\n\n","sourceOld":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxMergedSegmentMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    maxMergedSegmentBytes = (v > Long.MAX_VALUE) ? Long.MAX_VALUE : (long) v;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#setMaxMergedSegmentMB(double).mjava","sourceNew":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxMergedSegmentMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    maxMergedSegmentBytes = v > Long.MAX_VALUE ? Long.MAX_VALUE : (long) v;\n    return this;\n  }\n\n","sourceOld":"  /** Maximum sized segment to produce during\n   *  normal merging.  This setting is approximate: the\n   *  estimate of the merged segment size is made by summing\n   *  sizes of to-be-merged segments (compensating for\n   *  percent deleted docs).  Default is 5 GB. */\n  public TieredMergePolicy setMaxMergedSegmentMB(double v) {\n    if (v < 0.0) {\n      throw new IllegalArgumentException(\"maxMergedSegmentMB must be >=0 (got \" + v + \")\");\n    }\n    v *= 1024 * 1024;\n    maxMergedSegmentBytes = (v > Long.MAX_VALUE) ? Long.MAX_VALUE : (long) v;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c7211b1fba79597955a78855e9f646de9248ca57"],"39cc7fae4e4c6be7c74434527ee9852592db649f":["c7211b1fba79597955a78855e9f646de9248ca57"],"55980207f1977bd1463465de1659b821347e2fa8":["c7211b1fba79597955a78855e9f646de9248ca57","39cc7fae4e4c6be7c74434527ee9852592db649f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7211b1fba79597955a78855e9f646de9248ca57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["39cc7fae4e4c6be7c74434527ee9852592db649f"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"39cc7fae4e4c6be7c74434527ee9852592db649f":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","c7211b1fba79597955a78855e9f646de9248ca57"],"c7211b1fba79597955a78855e9f646de9248ca57":["001b25b42373b22a52f399dbf072f1224632e8e6","39cc7fae4e4c6be7c74434527ee9852592db649f","55980207f1977bd1463465de1659b821347e2fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}