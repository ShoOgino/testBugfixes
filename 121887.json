{"path":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_50, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_50, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_50, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_50, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_50, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_5_0, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.shutdown();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      // :Post-Release-Update-Version.LUCENE_XY:\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final Path docDir = Paths.get(docsPath);\n    if (!Files.isReadable(docDir)) {\n      System.out.println(\"Document directory '\" +docDir.toAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(Paths.get(indexPath));\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer();\n      IndexWriterConfig iwc = new IndexWriterConfig(analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"f4abec28b874149a7223e32cc7a01704c27790de":["19e497fe4da591a79332da97681b8017d9c61165"],"19e497fe4da591a79332da97681b8017d9c61165":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bf41419d452997826ec5f17684993377be77f49":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0bf41419d452997826ec5f17684993377be77f49"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["0bf41419d452997826ec5f17684993377be77f49"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19e497fe4da591a79332da97681b8017d9c61165":["f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0bf41419d452997826ec5f17684993377be77f49","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0bf41419d452997826ec5f17684993377be77f49":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["19e497fe4da591a79332da97681b8017d9c61165"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}