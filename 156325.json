{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    /* userQuery may have been pre-processes .. expose that */\n    if (dbgQuery) {\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    /* userQuery may have been pre-processes .. expose that */\n    if (dbgQuery) {\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    /* userQuery may have been pre-processes .. expose that */\n    if (dbgQuery) {\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    /* userQuery may have been pre-processes .. expose that */\n    if (dbgQuery) {\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    /* userQuery may have been pre-processes .. expose that */\n    if (dbgQuery) {\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    /* userQuery may have been pre-processes .. expose that */\n    if (dbgQuery) {\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03a5082a50d4e65bc499e3c04fb80ff6d3c48aab","date":1315400904,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    if (dbgQuery) {\n      /* userQuery may have been pre-processed .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    /* userQuery may have been pre-processes .. expose that */\n    if (dbgQuery) {\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":["e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4d1401af44658b2fa7b2e026b111d82ee8c2989","date":1347578533,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException \n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    if (dbgQuery) {\n      /* userQuery may have been pre-processed .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req, 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","bugFix":["44f497c313977be641ddf24aab74b30e6de834d8","5f0737567c7196b3ba1a359c2bdf103a3984a55e","cd00dd91853514614379b0e680d65bd19cac0f30","faa067d0f3edbad4e7a765c0819b7ce3bcb7ab74","0883328ff2cc09b5c999d05c04e16530d819c627","03a5082a50d4e65bc499e3c04fb80ff6d3c48aab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formatted by its\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException \n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException \n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formatted by its\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException\n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formatted by its\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException \n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formatted by its\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException\n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formatted by its\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException \n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formatted by its\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException\n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formatted by its\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(\n          SolrQueryRequest req,\n          String userQuery,\n          Query query,\n          DocList results,\n          boolean dbgQuery,\n          boolean dbgResults)\n          throws IOException\n  {\n    NamedList dbg = new SimpleOrderedMap();\n    doStandardQueryDebug(req, userQuery, query, dbgQuery, dbg);\n    doStandardResultsDebug(req, query, results, dbgResults, dbg);\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03a5082a50d4e65bc499e3c04fb80ff6d3c48aab":["c26f00b574427b55127e869b935845554afde1fa"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5296efc4b319f5647b606629c093a94b23692c6":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"e4d1401af44658b2fa7b2e026b111d82ee8c2989":["03a5082a50d4e65bc499e3c04fb80ff6d3c48aab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"03a5082a50d4e65bc499e3c04fb80ff6d3c48aab":["e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["03a5082a50d4e65bc499e3c04fb80ff6d3c48aab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["06a8891f085f71282bb3ece1b1732b68f07813a3","a5296efc4b319f5647b606629c093a94b23692c6"],"e4d1401af44658b2fa7b2e026b111d82ee8c2989":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}