{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private synchronized MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    MonotonicBlockPackedReader addrInstance = addressInstances.get(field.name);\n    if (addrInstance == null) {\n      data.seek(bytes.addressesOffset);\n      addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n      addressInstances.put(field.name, addrInstance);\n      ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n    }\n    addresses = addrInstance;\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private synchronized MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    MonotonicBlockPackedReader addrInstance = addressInstances.get(field.name);\n    if (addrInstance == null) {\n      data.seek(bytes.addressesOffset);\n      addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n      if (!merging) {\n        addressInstances.put(field.name, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    addresses = addrInstance;\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private synchronized MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    MonotonicBlockPackedReader addrInstance = addressInstances.get(field.name);\n    if (addrInstance == null) {\n      data.seek(bytes.addressesOffset);\n      addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n      addressInstances.put(field.name, addrInstance);\n      ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n    }\n    addresses = addrInstance;\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private synchronized MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    MonotonicBlockPackedReader addrInstance = addressInstances.get(field.name);\n    if (addrInstance == null) {\n      data.seek(bytes.addressesOffset);\n      addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n      if (!merging) {\n        addressInstances.put(field.name, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    addresses = addrInstance;\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private synchronized MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    MonotonicBlockPackedReader addrInstance = addressInstances.get(field.name);\n    if (addrInstance == null) {\n      data.seek(bytes.addressesOffset);\n      addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n      addressInstances.put(field.name, addrInstance);\n      ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n    }\n    addresses = addrInstance;\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private synchronized MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    MonotonicBlockPackedReader addrInstance = addressInstances.get(field.name);\n    if (addrInstance == null) {\n      data.seek(bytes.addressesOffset);\n      addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n      if (!merging) {\n        addressInstances.put(field.name, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    addresses = addrInstance;\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}