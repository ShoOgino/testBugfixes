{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    PhraseMatcher matcher = getPhraseMatcher(context, false);\n    if (matcher == null || matcher.approximation.advance(doc) != doc) {\n      return Explanation.noMatch(\"no matching terms\");\n    }\n    matcher.reset();\n    if (matcher.nextMatch() == false) {\n      return Explanation.noMatch(\"no matching phrase\");\n    }\n    float freq = matcher.sloppyWeight();\n    while (matcher.nextMatch()) {\n      freq += matcher.sloppyWeight();\n    }\n    LeafSimScorer docScorer = new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.MAX_VALUE);\n    Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n    Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n    return Explanation.match(\n        scoreExplanation.getValue(),\n        \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n        scoreExplanation);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    PhraseMatcher matcher = getPhraseMatcher(context, false);\n    if (matcher == null || matcher.approximation.advance(doc) != doc) {\n      return Explanation.noMatch(\"no matching terms\");\n    }\n    matcher.reset();\n    if (matcher.nextMatch() == false) {\n      return Explanation.noMatch(\"no matching phrase\");\n    }\n    float freq = matcher.sloppyWeight();\n    while (matcher.nextMatch()) {\n      freq += matcher.sloppyWeight();\n    }\n    LeafSimScorer docScorer = new LeafSimScorer(stats, context.reader(), field, scoreMode.needsScores());\n    Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n    Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n    return Explanation.match(\n        scoreExplanation.getValue(),\n        \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n        scoreExplanation);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    PhraseMatcher matcher = getPhraseMatcher(context, false);\n    if (matcher == null || matcher.approximation.advance(doc) != doc) {\n      return Explanation.noMatch(\"no matching terms\");\n    }\n    matcher.reset();\n    if (matcher.nextMatch() == false) {\n      return Explanation.noMatch(\"no matching phrase\");\n    }\n    float freq = matcher.sloppyWeight();\n    while (matcher.nextMatch()) {\n      freq += matcher.sloppyWeight();\n    }\n    LeafSimScorer docScorer = new LeafSimScorer(stats, context.reader(), scoreMode.needsScores(), Float.MAX_VALUE);\n    Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n    Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n    return Explanation.match(\n        scoreExplanation.getValue(),\n        \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n        scoreExplanation);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#explain(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    PhraseMatcher matcher = getPhraseMatcher(context, stats, false);\n    if (matcher == null || matcher.approximation().advance(doc) != doc) {\n      return Explanation.noMatch(\"no matching terms\");\n    }\n    matcher.reset();\n    if (matcher.nextMatch() == false) {\n      return Explanation.noMatch(\"no matching phrase\");\n    }\n    float freq = matcher.sloppyWeight();\n    while (matcher.nextMatch()) {\n      freq += matcher.sloppyWeight();\n    }\n    LeafSimScorer docScorer = new LeafSimScorer(stats, context.reader(), field, scoreMode.needsScores());\n    Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n    Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n    return Explanation.match(\n        scoreExplanation.getValue(),\n        \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n        scoreExplanation);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n    PhraseMatcher matcher = getPhraseMatcher(context, false);\n    if (matcher == null || matcher.approximation.advance(doc) != doc) {\n      return Explanation.noMatch(\"no matching terms\");\n    }\n    matcher.reset();\n    if (matcher.nextMatch() == false) {\n      return Explanation.noMatch(\"no matching phrase\");\n    }\n    float freq = matcher.sloppyWeight();\n    while (matcher.nextMatch()) {\n      freq += matcher.sloppyWeight();\n    }\n    LeafSimScorer docScorer = new LeafSimScorer(stats, context.reader(), field, scoreMode.needsScores());\n    Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n    Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n    return Explanation.match(\n        scoreExplanation.getValue(),\n        \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n        scoreExplanation);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["3b11b9d5eaf9707760ca5151530830a825197023"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}