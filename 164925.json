{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.term();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setTermBuffer(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if (!keywordAttr.isKeyword()) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if (!keywordAttr.isKeyword()) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if (!keywordAttr.isKeyword()) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if ( !keywordAttr.isKeyword() && (exclusions == null || !exclusions.contains( term )) ) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if (!keywordAttr.isKeyword()) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if (!keywordAttr.isKeyword()) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a7347509fad0711ac30cb15a746e9a3830a38ebd","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a7347509fad0711ac30cb15a746e9a3830a38ebd","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["a7347509fad0711ac30cb15a746e9a3830a38ebd"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}