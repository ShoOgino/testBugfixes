{"path":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      String includeFiles = (String) master.get(CONF_FILES);\n      if (includeFiles != null && !includeFiles.trim().equals(\"\")) {\n        includeConfFiles = Arrays.asList(includeFiles.split(\",\"));\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      String snapshot = (String) master.get(\"snapshot\");\n      if (\"optimize\".equals(master.get(REPLICATE_AFTER))) {\n        replicateOnOptimize = true;\n        boolean snapshoot = \"optimize\".equals(snapshot);\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshoot));\n      } else if (\"commit\".equals(master.get(REPLICATE_AFTER))) {\n        replicateOnCommit = true;\n        boolean snapshoot = \"commit\".equals(snapshot);\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshoot));\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6028dbe4a16095efe9f1651fe1a8e88d683e92","date":1224723463,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      String includeFiles = (String) master.get(CONF_FILES);\n      if (includeFiles != null && !includeFiles.trim().equals(\"\")) {\n        includeConfFiles = Arrays.asList(includeFiles.split(\",\"));\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit =  snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter =  master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\"); \n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\",e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      String includeFiles = (String) master.get(CONF_FILES);\n      if (includeFiles != null && !includeFiles.trim().equals(\"\")) {\n        includeConfFiles = Arrays.asList(includeFiles.split(\",\"));\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      String snapshot = (String) master.get(\"snapshot\");\n      if (\"optimize\".equals(master.get(REPLICATE_AFTER))) {\n        replicateOnOptimize = true;\n        boolean snapshoot = \"optimize\".equals(snapshot);\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshoot));\n      } else if (\"commit\".equals(master.get(REPLICATE_AFTER))) {\n        replicateOnCommit = true;\n        boolean snapshoot = \"commit\".equals(snapshot);\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshoot));\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["064fca6c24f8c0608a9c2ba2688c31d244c9f262","448bf1ddb531a7d63dfaa7596bb7bb291369afa6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      String includeFiles = (String) master.get(CONF_FILES);\n      if (includeFiles != null && !includeFiles.trim().equals(\"\")) {\n        includeConfFiles = Arrays.asList(includeFiles.split(\",\"));\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      String includeFiles = (String) master.get(CONF_FILES);\n      if (includeFiles != null && !includeFiles.trim().equals(\"\")) {\n        includeConfFiles = Arrays.asList(includeFiles.split(\",\"));\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit =  snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter =  master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\"); \n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\",e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      String includeFiles = (String) master.get(CONF_FILES);\n      if (includeFiles != null && !includeFiles.trim().equals(\"\")) {\n        includeConfFiles = Arrays.asList(includeFiles.split(\",\"));\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd564545498afb928bdfecf369ec06cd377413d2","date":1230103123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1b2107fb82b29581b2ee2315a89ab408d2abac5","date":1233743557,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["b5b99d924e3bae842d6e1e1af92474d9247784a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c62d84fa064ee3b226a7ed01c37d152d0253bb","date":1234445125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"448bf1ddb531a7d63dfaa7596bb7bb291369afa6","date":1234447832,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if(s.get().getReader().getIndexCommit() != null)\n            if(s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"bugIntro":["b5b99d924e3bae842d6e1e1af92474d9247784a5","4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3861b8bad01629233ed55f79b2525724ef8eb3bc","date":1247648369,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if(s.get().getReader().getIndexCommit() != null)\n            if(s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List snapshot = master.getAll(\"snapshot\");\n      boolean snapshotOnCommit = snapshot.contains(\"commit\");\n      boolean snapshotOnOptimize = snapshot.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || snapshotOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(snapshotOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || snapshotOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(snapshotOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if(s.get().getReader().getIndexCommit() != null)\n            if(s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d8a2f376efa71aa3586481085547daf29dc5c6c","date":1251357551,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if(s.get().getReader().getIndexCommit() != null)\n            if(s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    if (slave != null) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    if (master != null) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if(s.get().getReader().getIndexCommit() != null)\n            if(s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["dd1ac819970b9a31e0ba8db9105e7f40f3120b4e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f1a1d7f1604a41328b566b1be0c5ad6038117e8","date":1252499131,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if (s.get().getReader().getIndexCommit() != null)\n            if (s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if(s.get().getReader().getIndexCommit() != null)\n            if(s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":["448bf1ddb531a7d63dfaa7596bb7bb291369afa6"],"bugIntro":["b5b99d924e3bae842d6e1e1af92474d9247784a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cdac6591b64f43f87663e70518d79dd137454b4","date":1254069460,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if (s.get().getReader().getIndexCommit() != null)\n            if (s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if (s.get().getReader().getIndexCommit() != null)\n            if (s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5b99d924e3bae842d6e1e1af92474d9247784a5","date":1255113388,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          }\n          if (s.get().getReader().getIndexCommit() != null)\n            if (s.get().getReader().getIndexCommit().getGeneration() != 1L)\n              indexCommitPoint = s.get().getReader().getIndexCommit();\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":["c1b2107fb82b29581b2ee2315a89ab408d2abac5","4f1a1d7f1604a41328b566b1be0c5ad6038117e8","448bf1ddb531a7d63dfaa7596bb7bb291369afa6"],"bugIntro":["064fca6c24f8c0608a9c2ba2688c31d244c9f262","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2750c3aaba711f00255cbea8627056b1f5df7d4","date":1256516353,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["8620c64e323e74078214cf931e505179d14c888e"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"b5b99d924e3bae842d6e1e1af92474d9247784a5":["7cdac6591b64f43f87663e70518d79dd137454b4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"f2750c3aaba711f00255cbea8627056b1f5df7d4":["b5b99d924e3bae842d6e1e1af92474d9247784a5"],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["3d8a2f376efa71aa3586481085547daf29dc5c6c"],"3861b8bad01629233ed55f79b2525724ef8eb3bc":["448bf1ddb531a7d63dfaa7596bb7bb291369afa6"],"c1b2107fb82b29581b2ee2315a89ab408d2abac5":["dd564545498afb928bdfecf369ec06cd377413d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"448bf1ddb531a7d63dfaa7596bb7bb291369afa6":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"ad94625fb8d088209f46650c8097196fec67f00c":["f2750c3aaba711f00255cbea8627056b1f5df7d4"],"e1c62d84fa064ee3b226a7ed01c37d152d0253bb":["c1b2107fb82b29581b2ee2315a89ab408d2abac5"],"3d8a2f376efa71aa3586481085547daf29dc5c6c":["3861b8bad01629233ed55f79b2525724ef8eb3bc"],"dd564545498afb928bdfecf369ec06cd377413d2":["9be231d18ef58129524215a1d30331523320b744"],"7cdac6591b64f43f87663e70518d79dd137454b4":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"9be231d18ef58129524215a1d30331523320b744":["dd564545498afb928bdfecf369ec06cd377413d2"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["8620c64e323e74078214cf931e505179d14c888e"],"b5b99d924e3bae842d6e1e1af92474d9247784a5":["f2750c3aaba711f00255cbea8627056b1f5df7d4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"8620c64e323e74078214cf931e505179d14c888e":["9be231d18ef58129524215a1d30331523320b744"],"f2750c3aaba711f00255cbea8627056b1f5df7d4":["ad94625fb8d088209f46650c8097196fec67f00c"],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["7cdac6591b64f43f87663e70518d79dd137454b4"],"3861b8bad01629233ed55f79b2525724ef8eb3bc":["3d8a2f376efa71aa3586481085547daf29dc5c6c"],"c1b2107fb82b29581b2ee2315a89ab408d2abac5":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"448bf1ddb531a7d63dfaa7596bb7bb291369afa6":["3861b8bad01629233ed55f79b2525724ef8eb3bc"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e1c62d84fa064ee3b226a7ed01c37d152d0253bb":["448bf1ddb531a7d63dfaa7596bb7bb291369afa6"],"3d8a2f376efa71aa3586481085547daf29dc5c6c":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"dd564545498afb928bdfecf369ec06cd377413d2":["c1b2107fb82b29581b2ee2315a89ab408d2abac5"],"7cdac6591b64f43f87663e70518d79dd137454b4":["b5b99d924e3bae842d6e1e1af92474d9247784a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}