{"path":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","commits":[{"id":"c3554c8d20a765b4e932a8363f142fdf86374b99","date":1494557659,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df879adf7e95b363f405ffb365dc664bd5e6e74f","date":1497357523,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{backup-collection:{name: backup_test, collection: \"+COLL_NAME+\" , location: '\"+tempDir+\"' }}\")\n        .build());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"692b116c48ed2f034904dd2190a9ccc98f87c301","date":1499071085,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    Map<String, Object> backupPayload = new HashMap<>();\n    Map<String, Object> backupParams = new HashMap<>();\n    backupPayload.put(\"backup-collection\", backupParams);\n    backupParams.put(\"name\", \"backup_test\");\n    backupParams.put(\"collection\", COLL_NAME);\n    backupParams.put(\"location\", tempDir);\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(Utils.toJSONString(backupPayload))\n        .build());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{backup-collection:{name: backup_test, collection: \"+COLL_NAME+\" , location: '\"+tempDir+\"' }}\")\n        .build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{backup-collection:{name: backup_test, collection: \"+COLL_NAME+\" , location: '\"+tempDir+\"' }}\")\n        .build());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{backup-collection:{name: backup_test, collection: \"+COLL_NAME+\" , location: '\"+tempDir+\"' }}\")\n        .build());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    Map<String, Object> backupPayload = new HashMap<>();\n    Map<String, Object> backupParams = new HashMap<>();\n    backupPayload.put(\"backup-collection\", backupParams);\n    backupParams.put(\"name\", \"backup_test\");\n    backupParams.put(\"collection\", COLL_NAME);\n    backupParams.put(\"location\", tempDir);\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(Utils.toJSONString(backupPayload))\n        .build());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{backup-collection:{name: backup_test, collection: \"+COLL_NAME+\" , location: '\"+tempDir+\"' }}\")\n        .build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    @SuppressWarnings({\"rawtypes\"})\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    Map<String, Object> backupPayload = new HashMap<>();\n    Map<String, Object> backupParams = new HashMap<>();\n    backupPayload.put(\"backup-collection\", backupParams);\n    backupParams.put(\"name\", \"backup_test\");\n    backupParams.put(\"collection\", COLL_NAME);\n    backupParams.put(\"location\", tempDir);\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(Utils.toJSONString(backupPayload))\n        .build());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    Map<String, Object> backupPayload = new HashMap<>();\n    Map<String, Object> backupParams = new HashMap<>();\n    backupPayload.put(\"backup-collection\", backupParams);\n    backupParams.put(\"name\", \"backup_test\");\n    backupParams.put(\"collection\", COLL_NAME);\n    backupParams.put(\"location\", tempDir);\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(Utils.toJSONString(backupPayload))\n        .build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b17e67903ace8abb1d4d602bfc40d1994692ff","date":1593429504,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testCollectionsApi().mjava","sourceNew":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    @SuppressWarnings({\"rawtypes\"})\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    Map<String, Object> backupPayload = new HashMap<>();\n    Map<String, Object> backupParams = new HashMap<>();\n    backupPayload.put(\"backup-collection\", backupParams);\n    backupParams.put(\"name\", \"backup_test\");\n    backupParams.put(\"collection\", COLL_NAME);\n    backupParams.put(\"location\", tempDir);\n    cluster.getJettySolrRunners().forEach(j -> j.getCoreContainer().getAllowPaths().add(Paths.get(tempDir)));\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(Utils.toJSONString(backupPayload))\n        .build());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionsApi() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    @SuppressWarnings({\"rawtypes\"})\n    Map result = resAsMap(client, new V2Request.Builder(\"/c/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/c/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    result = resAsMap(client, new V2Request.Builder(\"/collections/\"+COLL_NAME+\"/get/_introspect\").build());\n    assertEquals(\"/collections/collection1/get\", Utils.getObjectByPath(result, true, \"/spec[0]/url/paths[0]\"));\n    String tempDir = createTempDir().toFile().getPath();\n    Map<String, Object> backupPayload = new HashMap<>();\n    Map<String, Object> backupParams = new HashMap<>();\n    backupPayload.put(\"backup-collection\", backupParams);\n    backupParams.put(\"name\", \"backup_test\");\n    backupParams.put(\"collection\", COLL_NAME);\n    backupParams.put(\"location\", tempDir);\n    client.request(new V2Request.Builder(\"/c\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(Utils.toJSONString(backupPayload))\n        .build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["e98520789adb1d5ad05afb4956eca0944a929688"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c3554c8d20a765b4e932a8363f142fdf86374b99"],"df879adf7e95b363f405ffb365dc664bd5e6e74f":["c3554c8d20a765b4e932a8363f142fdf86374b99"],"692b116c48ed2f034904dd2190a9ccc98f87c301":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3554c8d20a765b4e932a8363f142fdf86374b99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","692b116c48ed2f034904dd2190a9ccc98f87c301"],"28288370235ed02234a64753cdbf0c6ec096304a":["c3554c8d20a765b4e932a8363f142fdf86374b99","df879adf7e95b363f405ffb365dc664bd5e6e74f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","df879adf7e95b363f405ffb365dc664bd5e6e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"e98520789adb1d5ad05afb4956eca0944a929688":["692b116c48ed2f034904dd2190a9ccc98f87c301"]},"commit2Childs":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"df879adf7e95b363f405ffb365dc664bd5e6e74f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"692b116c48ed2f034904dd2190a9ccc98f87c301":["30c8e5574b55d57947e989443dfde611646530ee","e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c3554c8d20a765b4e932a8363f142fdf86374b99"],"c3554c8d20a765b4e932a8363f142fdf86374b99":["e9017cf144952056066919f1ebc7897ff9bd71b1","df879adf7e95b363f405ffb365dc664bd5e6e74f","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["692b116c48ed2f034904dd2190a9ccc98f87c301"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["30c8e5574b55d57947e989443dfde611646530ee"],"e98520789adb1d5ad05afb4956eca0944a929688":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}