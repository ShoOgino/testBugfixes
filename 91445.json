{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","commits":[{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleton() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      LightAutomaton a = BasicAutomata.makeStringLight(s);\n      LightAutomaton utf8 = new UTF32ToUTF8Light().convert(a);\n      IntsRef ints = new IntsRef();\n      Util.toIntsRef(new BytesRef(s), ints);\n      Set<IntsRef> set = new HashSet<>();\n      set.add(ints);\n      assertEquals(set, SpecialOperations.getFiniteStrings(utf8, -1));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","sourceNew":"  public void testSingleton() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      Automaton a = Automata.makeString(s);\n      Automaton utf8 = new UTF32ToUTF8().convert(a);\n      IntsRef ints = new IntsRef();\n      Util.toIntsRef(new BytesRef(s), ints);\n      Set<IntsRef> set = new HashSet<>();\n      set.add(ints);\n      assertEquals(set, Operations.getFiniteStrings(utf8, -1));\n    }\n  }\n\n","sourceOld":"  public void testSingleton() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      LightAutomaton a = BasicAutomata.makeStringLight(s);\n      LightAutomaton utf8 = new UTF32ToUTF8Light().convert(a);\n      IntsRef ints = new IntsRef();\n      Util.toIntsRef(new BytesRef(s), ints);\n      Set<IntsRef> set = new HashSet<>();\n      set.add(ints);\n      assertEquals(set, SpecialOperations.getFiniteStrings(utf8, -1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleton() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      Automaton a = Automata.makeString(s);\n      Automaton utf8 = new UTF32ToUTF8().convert(a);\n      IntsRef ints = new IntsRef();\n      Util.toIntsRef(new BytesRef(s), ints);\n      Set<IntsRef> set = new HashSet<>();\n      set.add(ints);\n      assertEquals(set, Operations.getFiniteStrings(utf8, -1));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","sourceNew":"  public void testSingleton() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      Automaton a = Automata.makeString(s);\n      Automaton utf8 = new UTF32ToUTF8().convert(a);\n      IntsRefBuilder ints = new IntsRefBuilder();\n      Util.toIntsRef(new BytesRef(s), ints);\n      Set<IntsRef> set = new HashSet<>();\n      set.add(ints.get());\n      assertEquals(set, Operations.getFiniteStrings(utf8, -1));\n    }\n  }\n\n","sourceOld":"  public void testSingleton() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      Automaton a = Automata.makeString(s);\n      Automaton utf8 = new UTF32ToUTF8().convert(a);\n      IntsRef ints = new IntsRef();\n      Util.toIntsRef(new BytesRef(s), ints);\n      Set<IntsRef> set = new HashSet<>();\n      set.add(ints);\n      assertEquals(set, Operations.getFiniteStrings(utf8, -1));\n    }\n  }\n\n","bugFix":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSingleton().mjava","sourceNew":"  public void testSingleton() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      Automaton a = Automata.makeString(s);\n      Automaton utf8 = new UTF32ToUTF8().convert(a);\n      IntsRefBuilder ints = new IntsRefBuilder();\n      Util.toIntsRef(new BytesRef(s), ints);\n      Set<IntsRef> set = new HashSet<>();\n      set.add(ints.get());\n      assertEquals(set, TestOperations.getFiniteStrings(utf8));\n    }\n  }\n\n","sourceOld":"  public void testSingleton() throws Exception {\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String s = TestUtil.randomRealisticUnicodeString(random());\n      Automaton a = Automata.makeString(s);\n      Automaton utf8 = new UTF32ToUTF8().convert(a);\n      IntsRefBuilder ints = new IntsRefBuilder();\n      Util.toIntsRef(new BytesRef(s), ints);\n      Set<IntsRef> set = new HashSet<>();\n      set.add(ints.get());\n      assertEquals(set, Operations.getFiniteStrings(utf8, -1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"5c84485629d80d203608e8975a1139de9933cc38":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}