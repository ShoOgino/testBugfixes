{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","commits":[{"id":"e89c3770b3944888d0ff89f39fe010644f0d1854","date":1171287140,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","pathOld":"/dev/null","sourceNew":"  private void openNextFile() throws Exception {\r\n    closeInputs();\r\n    int retries = 0;\r\n    while (retries<20) {\r\n      File f = null;\r\n      synchronized (this) {\r\n        f = (File) inputFiles.get(nextFile++);\r\n        if (nextFile >= inputFiles.size()) { \r\n          // exhausted files, start a new round\r\n          nextFile = 0;\r\n          iteration++;\r\n        }\r\n      }\r\n      System.out.println(\"opening: \"+f+\" length: \"+f.length());\r\n      try {\r\n        zis = new GZIPInputStream(new BufferedInputStream(new FileInputStream(f)));\r\n        break;\r\n      } catch (Exception e) {\r\n        retries++;\r\n        System.out.println(\"Skipping 'bad' file \"+f.getAbsolutePath()+\"  #retries=\"+retries);\r\n        continue;\r\n      }\r\n    }\r\n    reader = new BufferedReader(new InputStreamReader(zis));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81573e29e6e5db648330b225c60d44b1c3eb388e","date":1174927593,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","sourceNew":"  private void openNextFile() throws NoMoreDataException, Exception {\r\n    closeInputs();\r\n    int retries = 0;\r\n    while (true) {\r\n      File f = null;\r\n      synchronized (this) {\r\n        if (nextFile >= inputFiles.size()) { \r\n          // exhausted files, start a new round, unless forever set to false.\r\n          if (!forever) {\r\n            throw new NoMoreDataException();\r\n          }\r\n          nextFile = 0;\r\n          iteration++;\r\n        }\r\n        f = (File) inputFiles.get(nextFile++);\r\n      }\r\n      System.out.println(\"opening: \"+f+\" length: \"+f.length());\r\n      try {\r\n        zis = new GZIPInputStream(new BufferedInputStream(new FileInputStream(f)));\r\n        reader = new BufferedReader(new InputStreamReader(zis));\r\n        return;\r\n      } catch (Exception e) {\r\n        retries++;\r\n        if (retries<20) {\r\n          System.out.println(\"Skipping 'bad' file \"+f.getAbsolutePath()+\"  #retries=\"+retries);\r\n          continue;\r\n        } else {\r\n          throw new NoMoreDataException();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":"  private void openNextFile() throws Exception {\r\n    closeInputs();\r\n    int retries = 0;\r\n    while (retries<20) {\r\n      File f = null;\r\n      synchronized (this) {\r\n        f = (File) inputFiles.get(nextFile++);\r\n        if (nextFile >= inputFiles.size()) { \r\n          // exhausted files, start a new round\r\n          nextFile = 0;\r\n          iteration++;\r\n        }\r\n      }\r\n      System.out.println(\"opening: \"+f+\" length: \"+f.length());\r\n      try {\r\n        zis = new GZIPInputStream(new BufferedInputStream(new FileInputStream(f)));\r\n        break;\r\n      } catch (Exception e) {\r\n        retries++;\r\n        System.out.println(\"Skipping 'bad' file \"+f.getAbsolutePath()+\"  #retries=\"+retries);\r\n        continue;\r\n      }\r\n    }\r\n    reader = new BufferedReader(new InputStreamReader(zis));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","sourceNew":"  private void openNextFile() throws NoMoreDataException, Exception {\n    closeInputs();\n    int retries = 0;\n    while (true) {\n      File f = null;\n      synchronized (this) {\n        if (nextFile >= inputFiles.size()) { \n          // exhausted files, start a new round, unless forever set to false.\n          if (!forever) {\n            throw new NoMoreDataException();\n          }\n          nextFile = 0;\n          iteration++;\n        }\n        f = (File) inputFiles.get(nextFile++);\n      }\n      System.out.println(\"opening: \"+f+\" length: \"+f.length());\n      try {\n        zis = new GZIPInputStream(new BufferedInputStream(new FileInputStream(f)));\n        reader = new BufferedReader(new InputStreamReader(zis));\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries<20) {\n          System.out.println(\"Skipping 'bad' file \"+f.getAbsolutePath()+\"  #retries=\"+retries);\n          continue;\n        } else {\n          throw new NoMoreDataException();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void openNextFile() throws NoMoreDataException, Exception {\r\n    closeInputs();\r\n    int retries = 0;\r\n    while (true) {\r\n      File f = null;\r\n      synchronized (this) {\r\n        if (nextFile >= inputFiles.size()) { \r\n          // exhausted files, start a new round, unless forever set to false.\r\n          if (!forever) {\r\n            throw new NoMoreDataException();\r\n          }\r\n          nextFile = 0;\r\n          iteration++;\r\n        }\r\n        f = (File) inputFiles.get(nextFile++);\r\n      }\r\n      System.out.println(\"opening: \"+f+\" length: \"+f.length());\r\n      try {\r\n        zis = new GZIPInputStream(new BufferedInputStream(new FileInputStream(f)));\r\n        reader = new BufferedReader(new InputStreamReader(zis));\r\n        return;\r\n      } catch (Exception e) {\r\n        retries++;\r\n        if (retries<20) {\r\n          System.out.println(\"Skipping 'bad' file \"+f.getAbsolutePath()+\"  #retries=\"+retries);\r\n          continue;\r\n        } else {\r\n          throw new NoMoreDataException();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eeda7231e55f9169d1f3d85af46d79460dffe08","date":1201723419,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","sourceNew":"  protected void openNextFile() throws NoMoreDataException, Exception {\n    closeInputs();\n    int retries = 0;\n    while (true) {\n      File f = null;\n      synchronized (this) {\n        if (nextFile >= inputFiles.size()) { \n          // exhausted files, start a new round, unless forever set to false.\n          if (!forever) {\n            throw new NoMoreDataException();\n          }\n          nextFile = 0;\n          iteration++;\n        }\n        f = (File) inputFiles.get(nextFile++);\n      }\n      System.out.println(\"opening: \"+f+\" length: \"+f.length());\n      try {\n        zis = new GZIPInputStream(new BufferedInputStream(new FileInputStream(f)));\n        reader = new BufferedReader(new InputStreamReader(zis));\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries<20) {\n          System.out.println(\"Skipping 'bad' file \"+f.getAbsolutePath()+\"  #retries=\"+retries);\n          continue;\n        } else {\n          throw new NoMoreDataException();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void openNextFile() throws NoMoreDataException, Exception {\n    closeInputs();\n    int retries = 0;\n    while (true) {\n      File f = null;\n      synchronized (this) {\n        if (nextFile >= inputFiles.size()) { \n          // exhausted files, start a new round, unless forever set to false.\n          if (!forever) {\n            throw new NoMoreDataException();\n          }\n          nextFile = 0;\n          iteration++;\n        }\n        f = (File) inputFiles.get(nextFile++);\n      }\n      System.out.println(\"opening: \"+f+\" length: \"+f.length());\n      try {\n        zis = new GZIPInputStream(new BufferedInputStream(new FileInputStream(f)));\n        reader = new BufferedReader(new InputStreamReader(zis));\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries<20) {\n          System.out.println(\"Skipping 'bad' file \"+f.getAbsolutePath()+\"  #retries=\"+retries);\n          continue;\n        } else {\n          throw new NoMoreDataException();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#openNextFile().mjava","sourceNew":null,"sourceOld":"  protected void openNextFile() throws NoMoreDataException, Exception {\n    closeInputs();\n    int retries = 0;\n    while (true) {\n      File f = null;\n      synchronized (this) {\n        if (nextFile >= inputFiles.size()) { \n          // exhausted files, start a new round, unless forever set to false.\n          if (!forever) {\n            throw new NoMoreDataException();\n          }\n          nextFile = 0;\n          iteration++;\n        }\n        f = (File) inputFiles.get(nextFile++);\n      }\n      System.out.println(\"opening: \"+f+\" length: \"+f.length());\n      try {\n        zis = new GZIPInputStream(new BufferedInputStream(new FileInputStream(f)));\n        reader = new BufferedReader(new InputStreamReader(zis));\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries<20) {\n          System.out.println(\"Skipping 'bad' file \"+f.getAbsolutePath()+\"  #retries=\"+retries);\n          continue;\n        } else {\n          throw new NoMoreDataException();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["6eeda7231e55f9169d1f3d85af46d79460dffe08"],"6eeda7231e55f9169d1f3d85af46d79460dffe08":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"e89c3770b3944888d0ff89f39fe010644f0d1854":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["e89c3770b3944888d0ff89f39fe010644f0d1854"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"]},"commit2Childs":{"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eeda7231e55f9169d1f3d85af46d79460dffe08":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e89c3770b3944888d0ff89f39fe010644f0d1854"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["6eeda7231e55f9169d1f3d85af46d79460dffe08"],"e89c3770b3944888d0ff89f39fe010644f0d1854":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}