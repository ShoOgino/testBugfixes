{"path":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,long).mjava","commits":[{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param snapDir               the directory to which files need to be downloadeed to\n   * @param latestVersion         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File snapDir, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME), false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex    is it a fresh index copy\n   * @param snapDir       the directory to which files need to be downloadeed to\n   * @param client        the httpclient instance\n   * @param latestVersion the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File snapDir,\n                                  HttpClient client, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME),\n                client, false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e0049b151d932b18c3acc1ef8366262ae9809d","date":1247648156,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIdxDir               the directory to which files need to be downloadeed to\n   * @param latestVersion         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File tmpIdxDir, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(tmpIdxDir, file, (String) file.get(NAME), false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param snapDir               the directory to which files need to be downloadeed to\n   * @param latestVersion         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File snapDir, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME), false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIdxDir               the directory to which files need to be downloadeed to\n   * @param latestVersion         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File tmpIdxDir, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(tmpIdxDir, file, (String) file.get(NAME), false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIdxDir               the directory to which files need to be downloadeed to\n   * @param latestVersion         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File tmpIdxDir, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(tmpIdxDir, file, (String) file.get(NAME), false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"ad94625fb8d088209f46650c8097196fec67f00c":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["ad94625fb8d088209f46650c8097196fec67f00c"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}