{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getLeftMostLeafBlockFP(long[],int).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getLeftMostLeafBlockFP(long[],int).mjava","pathOld":"/dev/null","sourceNew":"  private long getLeftMostLeafBlockFP(long[] leafBlockFPs, int nodeID) {\n    int nodeIDIn = nodeID;\n    // TODO: can we do this cheaper, e.g. a closed form solution instead of while loop?  Or\n    // change the recursion while packing the index to return this left-most leaf block FP\n    // from each recursion instead?\n    //\n    // Still, the overall cost here is minor: this method's cost is O(log(N)), and while writing\n    // we call it O(N) times (N = number of leaf blocks)\n    while (nodeID < leafBlockFPs.length) {\n      nodeID *= 2;\n    }\n    int leafID = nodeID - leafBlockFPs.length;\n    long result = leafBlockFPs[leafID];\n    if (result < 0) {\n      throw new AssertionError(result + \" for leaf \" + leafID);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getLeftMostLeafBlockFP(long[],int).mjava","pathOld":"/dev/null","sourceNew":"  private long getLeftMostLeafBlockFP(long[] leafBlockFPs, int nodeID) {\n    int nodeIDIn = nodeID;\n    // TODO: can we do this cheaper, e.g. a closed form solution instead of while loop?  Or\n    // change the recursion while packing the index to return this left-most leaf block FP\n    // from each recursion instead?\n    //\n    // Still, the overall cost here is minor: this method's cost is O(log(N)), and while writing\n    // we call it O(N) times (N = number of leaf blocks)\n    while (nodeID < leafBlockFPs.length) {\n      nodeID *= 2;\n    }\n    int leafID = nodeID - leafBlockFPs.length;\n    long result = leafBlockFPs[leafID];\n    if (result < 0) {\n      throw new AssertionError(result + \" for leaf \" + leafID);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getLeftMostLeafBlockFP(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getLeftMostLeafBlockFP(long[],int).mjava","sourceNew":"  private long getLeftMostLeafBlockFP(long[] leafBlockFPs, int nodeID) {\n    // TODO: can we do this cheaper, e.g. a closed form solution instead of while loop?  Or\n    // change the recursion while packing the index to return this left-most leaf block FP\n    // from each recursion instead?\n    //\n    // Still, the overall cost here is minor: this method's cost is O(log(N)), and while writing\n    // we call it O(N) times (N = number of leaf blocks)\n    while (nodeID < leafBlockFPs.length) {\n      nodeID *= 2;\n    }\n    int leafID = nodeID - leafBlockFPs.length;\n    long result = leafBlockFPs[leafID];\n    if (result < 0) {\n      throw new AssertionError(result + \" for leaf \" + leafID);\n    }\n    return result;\n  }\n\n","sourceOld":"  private long getLeftMostLeafBlockFP(long[] leafBlockFPs, int nodeID) {\n    int nodeIDIn = nodeID;\n    // TODO: can we do this cheaper, e.g. a closed form solution instead of while loop?  Or\n    // change the recursion while packing the index to return this left-most leaf block FP\n    // from each recursion instead?\n    //\n    // Still, the overall cost here is minor: this method's cost is O(log(N)), and while writing\n    // we call it O(N) times (N = number of leaf blocks)\n    while (nodeID < leafBlockFPs.length) {\n      nodeID *= 2;\n    }\n    int leafID = nodeID - leafBlockFPs.length;\n    long result = leafBlockFPs[leafID];\n    if (result < 0) {\n      throw new AssertionError(result + \" for leaf \" + leafID);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce","date":1589215155,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getLeftMostLeafBlockFP(long[],int).mjava","sourceNew":null,"sourceOld":"  private long getLeftMostLeafBlockFP(long[] leafBlockFPs, int nodeID) {\n    // TODO: can we do this cheaper, e.g. a closed form solution instead of while loop?  Or\n    // change the recursion while packing the index to return this left-most leaf block FP\n    // from each recursion instead?\n    //\n    // Still, the overall cost here is minor: this method's cost is O(log(N)), and while writing\n    // we call it O(N) times (N = number of leaf blocks)\n    while (nodeID < leafBlockFPs.length) {\n      nodeID *= 2;\n    }\n    int leafID = nodeID - leafBlockFPs.length;\n    long result = leafBlockFPs[leafID];\n    if (result < 0) {\n      throw new AssertionError(result + \" for leaf \" + leafID);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["125e5eeb7e933deec0cc0510c2368fe1ec7c36ce"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["78bdc7d6906146edb12a1a6c1f765ba680ed5124","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["125e5eeb7e933deec0cc0510c2368fe1ec7c36ce"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}