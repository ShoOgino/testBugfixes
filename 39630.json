{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54","date":1282658201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0fe7bebfc26fadfb676300f99226fc4b1d744df","date":1285959542,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n                               new SerialMergeScheduler()).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n                               new SerialMergeScheduler()).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n                               new SerialMergeScheduler()).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c","87c966e9308847938a7c905c2e46a56d8df788b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n                               new SerialMergeScheduler()).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n                               new SerialMergeScheduler()).setReaderPooling(false));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6467a24f5eea1c43a8909563e7b0d9c40c5bf0d","date":1302544674,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      Analyzer analyzer;\n      if (random.nextBoolean()) {\n        // no payloads\n       analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n      } else {\n        // fixed length payloads\n        final int length = random.nextInt(200);\n        analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockFixedLengthPayloadFilter(random,\n                new MockTokenizer(reader, MockTokenizer.WHITESPACE, true),\n                length);\n          }\n        };\n      }\n      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      Analyzer analyzer;\n      if (random.nextBoolean()) {\n        // no payloads\n       analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n      } else {\n        // fixed length payloads\n        final int length = random.nextInt(200);\n        analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockFixedLengthPayloadFilter(random,\n                new MockTokenizer(reader, MockTokenizer.WHITESPACE, true),\n                length);\n          }\n        };\n      }\n      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      Analyzer analyzer;\n      if (random.nextBoolean()) {\n        // no payloads\n       analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n      } else {\n        // fixed length payloads\n        final int length = random.nextInt(200);\n        analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockFixedLengthPayloadFilter(random,\n                new MockTokenizer(reader, MockTokenizer.WHITESPACE, true),\n                length);\n          }\n        };\n      }\n      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      Analyzer analyzer;\n      if (random.nextBoolean()) {\n        // no payloads\n       analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n      } else {\n        // fixed length payloads\n        final int length = random.nextInt(200);\n        analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockFixedLengthPayloadFilter(random,\n                new MockTokenizer(reader, MockTokenizer.WHITESPACE, true),\n                length);\n          }\n        };\n      }\n      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":null,"sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      Analyzer analyzer;\n      if (random.nextBoolean()) {\n        // no payloads\n       analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n      } else {\n        // fixed length payloads\n        final int length = random.nextInt(200);\n        analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockFixedLengthPayloadFilter(random,\n                new MockTokenizer(reader, MockTokenizer.WHITESPACE, true),\n                length);\n          }\n        };\n      }\n      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":null,"sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      Analyzer analyzer;\n      if (random.nextBoolean()) {\n        // no payloads\n       analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n      } else {\n        // fixed length payloads\n        final int length = random.nextInt(200);\n        analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockFixedLengthPayloadFilter(random,\n                new MockTokenizer(reader, MockTokenizer.WHITESPACE, true),\n                length);\n          }\n        };\n      }\n      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":null,"sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockDirectoryWrapper to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      Analyzer analyzer;\n      if (random.nextBoolean()) {\n        // no payloads\n       analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n          }\n        };\n      } else {\n        // fixed length payloads\n        final int length = random.nextInt(200);\n        analyzer = new Analyzer() {\n          @Override\n          public TokenStream tokenStream(String fieldName, Reader reader) {\n            return new MockFixedLengthPayloadFilter(random,\n                new MockTokenizer(reader, MockTokenizer.WHITESPACE, true),\n                length);\n          }\n        };\n      }\n      \n      IndexWriter writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).\n              setMaxBufferedDocs(10).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      dir.setTrackDiskUsage(true);\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n              .setOpenMode(OpenMode.APPEND).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new SerialMergeScheduler()).\n              setReaderPooling(false).\n              setMergePolicy(newLogMergePolicy(10))\n\n      );\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 3X disk usage normally we allow 150X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 150X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage + \" max=\" + (startDiskUsage*150),\n                 midDiskUsage < 150*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage + \" max=\" + (startDiskUsage*150),\n                 endDiskUsage < 150*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["d6467a24f5eea1c43a8909563e7b0d9c40c5bf0d"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["f0fe7bebfc26fadfb676300f99226fc4b1d744df"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","d6467a24f5eea1c43a8909563e7b0d9c40c5bf0d"],"f0fe7bebfc26fadfb676300f99226fc4b1d744df":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"d6467a24f5eea1c43a8909563e7b0d9c40c5bf0d":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d6467a24f5eea1c43a8909563e7b0d9c40c5bf0d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","d6467a24f5eea1c43a8909563e7b0d9c40c5bf0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54":["a05409176bd65129d67a785ee70e881e238a9aef"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["f0fe7bebfc26fadfb676300f99226fc4b1d744df","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"f0fe7bebfc26fadfb676300f99226fc4b1d744df":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","3bb13258feba31ab676502787ab2e1779f129b7a"],"d6467a24f5eea1c43a8909563e7b0d9c40c5bf0d":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["d6467a24f5eea1c43a8909563e7b0d9c40c5bf0d"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["f0fe7bebfc26fadfb676300f99226fc4b1d744df"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}