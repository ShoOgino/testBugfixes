{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexesRandom().mjava","commits":[{"id":"3ff79ec5acd6ad7b57378052a20e3cf8a975493f","date":1336830542,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexesRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIndexesRandom() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexesRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexesRandom().mjava","sourceNew":"  public void testAddIndexesRandom() throws IOException {\n    //nocommit convert\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexesRandom() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"841532e4eb1e16e53a6f7a438ec2079ff981b192","date":1358288582,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexesRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexesRandom().mjava","sourceNew":"  public void testAddIndexesRandom() throws IOException {\n    //nocommit convert\n    /*\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n    */\n  }\n\n","sourceOld":"  public void testAddIndexesRandom() throws IOException {\n    //nocommit convert\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d048798bdb94f09ba6613d3956314a3ca151bcc3","date":1359417182,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexesRandom().mjava","sourceNew":null,"sourceOld":"  public void testAddIndexesRandom() throws IOException {\n    //nocommit convert\n    /*\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexesRandom().mjava","sourceNew":null,"sourceOld":"  public void testAddIndexesRandom() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ff79ec5acd6ad7b57378052a20e3cf8a975493f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f","d048798bdb94f09ba6613d3956314a3ca151bcc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["841532e4eb1e16e53a6f7a438ec2079ff981b192"],"841532e4eb1e16e53a6f7a438ec2079ff981b192":["55d38708477d49511977195bad066d9ced001005"],"55d38708477d49511977195bad066d9ced001005":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"3ff79ec5acd6ad7b57378052a20e3cf8a975493f":["d4d69c535930b5cce125cff868d40f6373dc27d4","55d38708477d49511977195bad066d9ced001005"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"d048798bdb94f09ba6613d3956314a3ca151bcc3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"841532e4eb1e16e53a6f7a438ec2079ff981b192":["d048798bdb94f09ba6613d3956314a3ca151bcc3"],"55d38708477d49511977195bad066d9ced001005":["841532e4eb1e16e53a6f7a438ec2079ff981b192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}