{"path":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"2070bf73ffa1039a505000f99ea245884ff19e11","date":1177653367,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SimpleOrderedMap<Object> system = new SimpleOrderedMap<Object>();\n    rsp.add( \"system\", system );\n\n    ThreadMXBean tmbean = ManagementFactory.getThreadMXBean();\n    \n    // Thread Count\n    SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n    nl.add( \"current\",tmbean.getThreadCount() );\n    nl.add( \"peak\", tmbean.getPeakThreadCount() );\n    nl.add( \"daemon\", tmbean.getDaemonThreadCount() );\n    system.add( \"threadCount\", nl );\n    \n    // Deadlocks\n    ThreadInfo[] tinfos;\n    long[] tids = tmbean.findMonitorDeadlockedThreads();\n    if (tids != null) {\n      tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n      NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n      for (ThreadInfo ti : tinfos) {\n        lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n      }\n      system.add( \"deadlocks\", lst );\n    }\n    \n    // Now show all the threads....\n    tids = tmbean.getAllThreadIds();\n    tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n    NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n    for (ThreadInfo ti : tinfos) {\n      lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n    }\n    system.add( \"threadDump\", lst );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["184f2355716feb946846cf7dacd85770f47bccb7","184f2355716feb946846cf7dacd85770f47bccb7","184f2355716feb946846cf7dacd85770f47bccb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b909e7d84d56c113538485360000872547c3cfd","date":1219961929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {    \n    SimpleOrderedMap<Object> system = new SimpleOrderedMap<Object>();\n    rsp.add( \"system\", system );\n\n    ThreadMXBean tmbean = ManagementFactory.getThreadMXBean();\n    \n    // Thread Count\n    SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n    nl.add( \"current\",tmbean.getThreadCount() );\n    nl.add( \"peak\", tmbean.getPeakThreadCount() );\n    nl.add( \"daemon\", tmbean.getDaemonThreadCount() );\n    system.add( \"threadCount\", nl );\n    \n    // Deadlocks\n    ThreadInfo[] tinfos;\n    long[] tids = tmbean.findMonitorDeadlockedThreads();\n    if (tids != null) {\n      tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n      NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n      for (ThreadInfo ti : tinfos) {\n        lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n      }\n      system.add( \"deadlocks\", lst );\n    }\n    \n    // Now show all the threads....\n    tids = tmbean.getAllThreadIds();\n    tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n    NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n    for (ThreadInfo ti : tinfos) {\n      lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n    }\n    system.add( \"threadDump\", lst );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    RequestHandlerUtils.addExperimentalFormatWarning( rsp );\n    \n    SimpleOrderedMap<Object> system = new SimpleOrderedMap<Object>();\n    rsp.add( \"system\", system );\n\n    ThreadMXBean tmbean = ManagementFactory.getThreadMXBean();\n    \n    // Thread Count\n    SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n    nl.add( \"current\",tmbean.getThreadCount() );\n    nl.add( \"peak\", tmbean.getPeakThreadCount() );\n    nl.add( \"daemon\", tmbean.getDaemonThreadCount() );\n    system.add( \"threadCount\", nl );\n    \n    // Deadlocks\n    ThreadInfo[] tinfos;\n    long[] tids = tmbean.findMonitorDeadlockedThreads();\n    if (tids != null) {\n      tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n      NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n      for (ThreadInfo ti : tinfos) {\n        lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n      }\n      system.add( \"deadlocks\", lst );\n    }\n    \n    // Now show all the threads....\n    tids = tmbean.getAllThreadIds();\n    tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n    NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n    for (ThreadInfo ti : tinfos) {\n      lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n    }\n    system.add( \"threadDump\", lst );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea6404328413e5baef3771fcb95475356c339454","date":1246540822,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {    \n    SimpleOrderedMap<Object> system = new SimpleOrderedMap<Object>();\n    rsp.add( \"system\", system );\n\n    ThreadMXBean tmbean = ManagementFactory.getThreadMXBean();\n    \n    // Thread Count\n    SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n    nl.add( \"current\",tmbean.getThreadCount() );\n    nl.add( \"peak\", tmbean.getPeakThreadCount() );\n    nl.add( \"daemon\", tmbean.getDaemonThreadCount() );\n    system.add( \"threadCount\", nl );\n    \n    // Deadlocks\n    ThreadInfo[] tinfos;\n    long[] tids = tmbean.findMonitorDeadlockedThreads();\n    if (tids != null) {\n      tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n      NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n      for (ThreadInfo ti : tinfos) {\n        lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n      }\n      system.add( \"deadlocks\", lst );\n    }\n    \n    // Now show all the threads....\n    tids = tmbean.getAllThreadIds();\n    tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n    NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n    for (ThreadInfo ti : tinfos) {\n      lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n    }\n    system.add( \"threadDump\", lst );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {    \n    SimpleOrderedMap<Object> system = new SimpleOrderedMap<Object>();\n    rsp.add( \"system\", system );\n\n    ThreadMXBean tmbean = ManagementFactory.getThreadMXBean();\n    \n    // Thread Count\n    SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n    nl.add( \"current\",tmbean.getThreadCount() );\n    nl.add( \"peak\", tmbean.getPeakThreadCount() );\n    nl.add( \"daemon\", tmbean.getDaemonThreadCount() );\n    system.add( \"threadCount\", nl );\n    \n    // Deadlocks\n    ThreadInfo[] tinfos;\n    long[] tids = tmbean.findMonitorDeadlockedThreads();\n    if (tids != null) {\n      tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n      NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n      for (ThreadInfo ti : tinfos) {\n        lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n      }\n      system.add( \"deadlocks\", lst );\n    }\n    \n    // Now show all the threads....\n    tids = tmbean.getAllThreadIds();\n    tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n    NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n    for (ThreadInfo ti : tinfos) {\n      lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n    }\n    system.add( \"threadDump\", lst );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ThreadDumpHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {    \n    SimpleOrderedMap<Object> system = new SimpleOrderedMap<Object>();\n    rsp.add( \"system\", system );\n\n    ThreadMXBean tmbean = ManagementFactory.getThreadMXBean();\n    \n    // Thread Count\n    SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n    nl.add( \"current\",tmbean.getThreadCount() );\n    nl.add( \"peak\", tmbean.getPeakThreadCount() );\n    nl.add( \"daemon\", tmbean.getDaemonThreadCount() );\n    system.add( \"threadCount\", nl );\n    \n    // Deadlocks\n    ThreadInfo[] tinfos;\n    long[] tids = tmbean.findMonitorDeadlockedThreads();\n    if (tids != null) {\n      tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n      NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n      for (ThreadInfo ti : tinfos) {\n        lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n      }\n      system.add( \"deadlocks\", lst );\n    }\n    \n    // Now show all the threads....\n    tids = tmbean.getAllThreadIds();\n    tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n    NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n    for (ThreadInfo ti : tinfos) {\n      lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n    }\n    system.add( \"threadDump\", lst );\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {    \n    SimpleOrderedMap<Object> system = new SimpleOrderedMap<Object>();\n    rsp.add( \"system\", system );\n\n    ThreadMXBean tmbean = ManagementFactory.getThreadMXBean();\n    \n    // Thread Count\n    SimpleOrderedMap<Object> nl = new SimpleOrderedMap<Object>();\n    nl.add( \"current\",tmbean.getThreadCount() );\n    nl.add( \"peak\", tmbean.getPeakThreadCount() );\n    nl.add( \"daemon\", tmbean.getDaemonThreadCount() );\n    system.add( \"threadCount\", nl );\n    \n    // Deadlocks\n    ThreadInfo[] tinfos;\n    long[] tids = tmbean.findMonitorDeadlockedThreads();\n    if (tids != null) {\n      tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n      NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n      for (ThreadInfo ti : tinfos) {\n        lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n      }\n      system.add( \"deadlocks\", lst );\n    }\n    \n    // Now show all the threads....\n    tids = tmbean.getAllThreadIds();\n    tinfos = tmbean.getThreadInfo(tids, Integer.MAX_VALUE);\n    NamedList<SimpleOrderedMap<Object>> lst = new NamedList<SimpleOrderedMap<Object>>();\n    for (ThreadInfo ti : tinfos) {\n      lst.add( \"thread\", getThreadInfo( ti, tmbean ) );\n    }\n    system.add( \"threadDump\", lst );\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8b909e7d84d56c113538485360000872547c3cfd":["2070bf73ffa1039a505000f99ea245884ff19e11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2070bf73ffa1039a505000f99ea245884ff19e11":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ea6404328413e5baef3771fcb95475356c339454"],"ea6404328413e5baef3771fcb95475356c339454":["8b909e7d84d56c113538485360000872547c3cfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8b909e7d84d56c113538485360000872547c3cfd":["ea6404328413e5baef3771fcb95475356c339454"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2070bf73ffa1039a505000f99ea245884ff19e11"],"2070bf73ffa1039a505000f99ea245884ff19e11":["8b909e7d84d56c113538485360000872547c3cfd"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ea6404328413e5baef3771fcb95475356c339454":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}