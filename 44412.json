{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","commits":[{"id":"c9eee76c6a8ac63dd88a66571d553973ea0a1131","date":1480015269,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","pathOld":"/dev/null","sourceNew":"  public void testCaching() throws Exception {\n    String collName = \"gettingstarted\";\n    Set<String> livenodes = new HashSet<>();\n    Map<String, ClusterState.CollectionRef> refs = new HashMap<>();\n    Map<String, DocCollection> colls = new HashMap<>();\n\n    class Ref extends ClusterState.CollectionRef {\n      private String c;\n\n      public Ref(String c) {\n        super(null);\n        this.c = c;\n      }\n\n      @Override\n      public boolean isLazilyLoaded() {\n        return true;\n      }\n\n      @Override\n      public DocCollection get() {\n        gets.incrementAndGet();\n        return colls.get(c);\n      }\n    }\n    Map<String, Function> responses = new HashMap<>();\n    NamedList okResponse = new NamedList();\n    okResponse.add(\"responseHeader\", new NamedList<>(Collections.singletonMap(\"status\", 0)));\n\n    LBHttpSolrClient mockLbclient = getMockLbHttpSolrClient(responses);\n    AtomicInteger lbhttpRequestCount = new AtomicInteger();\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder()\n        .withLBHttpSolrClient(mockLbclient)\n        .withClusterStateProvider(getStateProvider(livenodes, refs))\n\n        .build()) {\n      livenodes.addAll(ImmutableSet.of(\"192.168.1.108:7574_solr\", \"192.168.1.108:8983_solr\"));\n      ClusterState cs = ClusterState.load(1, coll1State.getBytes(UTF_8),\n          Collections.emptySet(), \"/collections/gettingstarted/state.json\");\n      refs.put(collName, new Ref(collName));\n      colls.put(collName, cs.getCollectionOrNull(collName));\n      responses.put(\"request\", o -> {\n        int i = lbhttpRequestCount.incrementAndGet();\n        if (i == 1) return new ConnectException(\"TEST\");\n        if (i == 2) return new SocketException(\"TEST\");\n        if (i == 3) return new NoHttpResponseException(\"TEST\");\n        return okResponse;\n      });\n      UpdateRequest update = new UpdateRequest()\n          .add(\"id\", \"123\", \"desc\", \"Something 0\");\n\n      cloudClient.request(update, collName);\n      assertEquals(2, refs.get(collName).getCount());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","pathOld":"/dev/null","sourceNew":"  public void testCaching() throws Exception {\n    String collName = \"gettingstarted\";\n    Set<String> livenodes = new HashSet<>();\n    Map<String, ClusterState.CollectionRef> refs = new HashMap<>();\n    Map<String, DocCollection> colls = new HashMap<>();\n\n    class Ref extends ClusterState.CollectionRef {\n      private String c;\n\n      public Ref(String c) {\n        super(null);\n        this.c = c;\n      }\n\n      @Override\n      public boolean isLazilyLoaded() {\n        return true;\n      }\n\n      @Override\n      public DocCollection get() {\n        gets.incrementAndGet();\n        return colls.get(c);\n      }\n    }\n    Map<String, Function> responses = new HashMap<>();\n    NamedList okResponse = new NamedList();\n    okResponse.add(\"responseHeader\", new NamedList<>(Collections.singletonMap(\"status\", 0)));\n\n    LBHttpSolrClient mockLbclient = getMockLbHttpSolrClient(responses);\n    AtomicInteger lbhttpRequestCount = new AtomicInteger();\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder()\n        .withLBHttpSolrClient(mockLbclient)\n        .withClusterStateProvider(getStateProvider(livenodes, refs))\n\n        .build()) {\n      livenodes.addAll(ImmutableSet.of(\"192.168.1.108:7574_solr\", \"192.168.1.108:8983_solr\"));\n      ClusterState cs = ClusterState.load(1, coll1State.getBytes(UTF_8),\n          Collections.emptySet(), \"/collections/gettingstarted/state.json\");\n      refs.put(collName, new Ref(collName));\n      colls.put(collName, cs.getCollectionOrNull(collName));\n      responses.put(\"request\", o -> {\n        int i = lbhttpRequestCount.incrementAndGet();\n        if (i == 1) return new ConnectException(\"TEST\");\n        if (i == 2) return new SocketException(\"TEST\");\n        if (i == 3) return new NoHttpResponseException(\"TEST\");\n        return okResponse;\n      });\n      UpdateRequest update = new UpdateRequest()\n          .add(\"id\", \"123\", \"desc\", \"Something 0\");\n\n      cloudClient.request(update, collName);\n      assertEquals(2, refs.get(collName).getCount());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    String collName = \"gettingstarted\";\n    Set<String> livenodes = new HashSet<>();\n    Map<String, ClusterState.CollectionRef> refs = new HashMap<>();\n    Map<String, DocCollection> colls = new HashMap<>();\n\n    class Ref extends ClusterState.CollectionRef {\n      private String c;\n\n      public Ref(String c) {\n        super(null);\n        this.c = c;\n      }\n\n      @Override\n      public boolean isLazilyLoaded() {\n        return true;\n      }\n\n      @Override\n      public DocCollection get() {\n        gets.incrementAndGet();\n        return colls.get(c);\n      }\n    }\n    Map<String, Function> responses = new HashMap<>();\n    NamedList okResponse = new NamedList();\n    okResponse.add(\"responseHeader\", new NamedList<>(Collections.singletonMap(\"status\", 0)));\n\n    LBHttpSolrClient mockLbclient = getMockLbHttpSolrClient(responses);\n    AtomicInteger lbhttpRequestCount = new AtomicInteger();\n    try (CloudSolrClient cloudClient = new CloudSolrClientBuilder(getStateProvider(livenodes, refs))\n        .withLBHttpSolrClient(mockLbclient)\n        .build()) {\n      livenodes.addAll(ImmutableSet.of(\"192.168.1.108:7574_solr\", \"192.168.1.108:8983_solr\"));\n      ClusterState cs = ClusterState.load(1, coll1State.getBytes(UTF_8),\n          Collections.emptySet(), \"/collections/gettingstarted/state.json\");\n      refs.put(collName, new Ref(collName));\n      colls.put(collName, cs.getCollectionOrNull(collName));\n      responses.put(\"request\", o -> {\n        int i = lbhttpRequestCount.incrementAndGet();\n        if (i == 1) return new ConnectException(\"TEST\");\n        if (i == 2) return new SocketException(\"TEST\");\n        if (i == 3) return new NoHttpResponseException(\"TEST\");\n        return okResponse;\n      });\n      UpdateRequest update = new UpdateRequest()\n          .add(\"id\", \"123\", \"desc\", \"Something 0\");\n\n      cloudClient.request(update, collName);\n      assertEquals(2, refs.get(collName).getCount());\n    }\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    String collName = \"gettingstarted\";\n    Set<String> livenodes = new HashSet<>();\n    Map<String, ClusterState.CollectionRef> refs = new HashMap<>();\n    Map<String, DocCollection> colls = new HashMap<>();\n\n    class Ref extends ClusterState.CollectionRef {\n      private String c;\n\n      public Ref(String c) {\n        super(null);\n        this.c = c;\n      }\n\n      @Override\n      public boolean isLazilyLoaded() {\n        return true;\n      }\n\n      @Override\n      public DocCollection get() {\n        gets.incrementAndGet();\n        return colls.get(c);\n      }\n    }\n    Map<String, Function> responses = new HashMap<>();\n    NamedList okResponse = new NamedList();\n    okResponse.add(\"responseHeader\", new NamedList<>(Collections.singletonMap(\"status\", 0)));\n\n    LBHttpSolrClient mockLbclient = getMockLbHttpSolrClient(responses);\n    AtomicInteger lbhttpRequestCount = new AtomicInteger();\n    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder()\n        .withLBHttpSolrClient(mockLbclient)\n        .withClusterStateProvider(getStateProvider(livenodes, refs))\n\n        .build()) {\n      livenodes.addAll(ImmutableSet.of(\"192.168.1.108:7574_solr\", \"192.168.1.108:8983_solr\"));\n      ClusterState cs = ClusterState.load(1, coll1State.getBytes(UTF_8),\n          Collections.emptySet(), \"/collections/gettingstarted/state.json\");\n      refs.put(collName, new Ref(collName));\n      colls.put(collName, cs.getCollectionOrNull(collName));\n      responses.put(\"request\", o -> {\n        int i = lbhttpRequestCount.incrementAndGet();\n        if (i == 1) return new ConnectException(\"TEST\");\n        if (i == 2) return new SocketException(\"TEST\");\n        if (i == 3) return new NoHttpResponseException(\"TEST\");\n        return okResponse;\n      });\n      UpdateRequest update = new UpdateRequest()\n          .add(\"id\", \"123\", \"desc\", \"Something 0\");\n\n      cloudClient.request(update, collName);\n      assertEquals(2, refs.get(collName).getCount());\n    }\n\n  }\n\n","bugFix":["c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","sourceNew":"  public void testCaching() throws Exception {\n    String collName = \"gettingstarted\";\n    Set<String> livenodes = new HashSet<>();\n    Map<String, ClusterState.CollectionRef> refs = new HashMap<>();\n    Map<String, DocCollection> colls = new HashMap<>();\n\n    class Ref extends ClusterState.CollectionRef {\n      private String c;\n\n      public Ref(String c) {\n        super(null);\n        this.c = c;\n      }\n\n      @Override\n      public boolean isLazilyLoaded() {\n        return true;\n      }\n\n      @Override\n      public DocCollection get() {\n        gets.incrementAndGet();\n        return colls.get(c);\n      }\n    }\n    Map<String, Function> responses = new HashMap<>();\n    NamedList okResponse = new NamedList();\n    okResponse.add(\"responseHeader\", new NamedList<>(Collections.singletonMap(\"status\", 0)));\n\n    LBHttpSolrClient mockLbclient = getMockLbHttpSolrClient(responses);\n    AtomicInteger lbhttpRequestCount = new AtomicInteger();\n    try (CloudSolrClient cloudClient = new CloudSolrClientBuilder(getStateProvider(livenodes, refs))\n        .withLBHttpSolrClient(mockLbclient)\n        .build()) {\n      livenodes.addAll(ImmutableSet.of(\"192.168.1.108:7574_solr\", \"192.168.1.108:8983_solr\"));\n      ClusterState cs = ClusterState.createFromJson(1, coll1State.getBytes(UTF_8), Collections.emptySet());\n      refs.put(collName, new Ref(collName));\n      colls.put(collName, cs.getCollectionOrNull(collName));\n      responses.put(\"request\", o -> {\n        int i = lbhttpRequestCount.incrementAndGet();\n        if (i == 1) return new ConnectException(\"TEST\");\n        if (i == 2) return new SocketException(\"TEST\");\n        if (i == 3) return new NoHttpResponseException(\"TEST\");\n        return okResponse;\n      });\n      UpdateRequest update = new UpdateRequest()\n          .add(\"id\", \"123\", \"desc\", \"Something 0\");\n\n      cloudClient.request(update, collName);\n      assertEquals(2, refs.get(collName).getCount());\n    }\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    String collName = \"gettingstarted\";\n    Set<String> livenodes = new HashSet<>();\n    Map<String, ClusterState.CollectionRef> refs = new HashMap<>();\n    Map<String, DocCollection> colls = new HashMap<>();\n\n    class Ref extends ClusterState.CollectionRef {\n      private String c;\n\n      public Ref(String c) {\n        super(null);\n        this.c = c;\n      }\n\n      @Override\n      public boolean isLazilyLoaded() {\n        return true;\n      }\n\n      @Override\n      public DocCollection get() {\n        gets.incrementAndGet();\n        return colls.get(c);\n      }\n    }\n    Map<String, Function> responses = new HashMap<>();\n    NamedList okResponse = new NamedList();\n    okResponse.add(\"responseHeader\", new NamedList<>(Collections.singletonMap(\"status\", 0)));\n\n    LBHttpSolrClient mockLbclient = getMockLbHttpSolrClient(responses);\n    AtomicInteger lbhttpRequestCount = new AtomicInteger();\n    try (CloudSolrClient cloudClient = new CloudSolrClientBuilder(getStateProvider(livenodes, refs))\n        .withLBHttpSolrClient(mockLbclient)\n        .build()) {\n      livenodes.addAll(ImmutableSet.of(\"192.168.1.108:7574_solr\", \"192.168.1.108:8983_solr\"));\n      ClusterState cs = ClusterState.load(1, coll1State.getBytes(UTF_8),\n          Collections.emptySet(), \"/collections/gettingstarted/state.json\");\n      refs.put(collName, new Ref(collName));\n      colls.put(collName, cs.getCollectionOrNull(collName));\n      responses.put(\"request\", o -> {\n        int i = lbhttpRequestCount.incrementAndGet();\n        if (i == 1) return new ConnectException(\"TEST\");\n        if (i == 2) return new SocketException(\"TEST\");\n        if (i == 3) return new NoHttpResponseException(\"TEST\");\n        return okResponse;\n      });\n      UpdateRequest update = new UpdateRequest()\n          .add(\"id\", \"123\", \"desc\", \"Something 0\");\n\n      cloudClient.request(update, collName);\n      assertEquals(2, refs.get(collName).getCount());\n    }\n\n  }\n\n","bugFix":["c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest#testCaching().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testCaching() throws Exception {\n    String collName = \"gettingstarted\";\n    Set<String> livenodes = new HashSet<>();\n    Map<String, ClusterState.CollectionRef> refs = new HashMap<>();\n    Map<String, DocCollection> colls = new HashMap<>();\n\n    class Ref extends ClusterState.CollectionRef {\n      private String c;\n\n      public Ref(String c) {\n        super(null);\n        this.c = c;\n      }\n\n      @Override\n      public boolean isLazilyLoaded() {\n        return true;\n      }\n\n      @Override\n      public DocCollection get() {\n        gets.incrementAndGet();\n        return colls.get(c);\n      }\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    Map<String, Function> responses = new HashMap<>();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList okResponse = new NamedList();\n    okResponse.add(\"responseHeader\", new NamedList<>(Collections.singletonMap(\"status\", 0)));\n\n    LBHttpSolrClient mockLbclient = getMockLbHttpSolrClient(responses);\n    AtomicInteger lbhttpRequestCount = new AtomicInteger();\n    try (CloudSolrClient cloudClient = new CloudSolrClientBuilder(getStateProvider(livenodes, refs))\n        .withLBHttpSolrClient(mockLbclient)\n        .build()) {\n      livenodes.addAll(ImmutableSet.of(\"192.168.1.108:7574_solr\", \"192.168.1.108:8983_solr\"));\n      ClusterState cs = ClusterState.createFromJson(1, coll1State.getBytes(UTF_8), Collections.emptySet());\n      refs.put(collName, new Ref(collName));\n      colls.put(collName, cs.getCollectionOrNull(collName));\n      responses.put(\"request\", o -> {\n        int i = lbhttpRequestCount.incrementAndGet();\n        if (i == 1) return new ConnectException(\"TEST\");\n        if (i == 2) return new SocketException(\"TEST\");\n        if (i == 3) return new NoHttpResponseException(\"TEST\");\n        return okResponse;\n      });\n      UpdateRequest update = new UpdateRequest()\n          .add(\"id\", \"123\", \"desc\", \"Something 0\");\n\n      cloudClient.request(update, collName);\n      assertEquals(2, refs.get(collName).getCount());\n    }\n\n  }\n\n","sourceOld":"  public void testCaching() throws Exception {\n    String collName = \"gettingstarted\";\n    Set<String> livenodes = new HashSet<>();\n    Map<String, ClusterState.CollectionRef> refs = new HashMap<>();\n    Map<String, DocCollection> colls = new HashMap<>();\n\n    class Ref extends ClusterState.CollectionRef {\n      private String c;\n\n      public Ref(String c) {\n        super(null);\n        this.c = c;\n      }\n\n      @Override\n      public boolean isLazilyLoaded() {\n        return true;\n      }\n\n      @Override\n      public DocCollection get() {\n        gets.incrementAndGet();\n        return colls.get(c);\n      }\n    }\n    Map<String, Function> responses = new HashMap<>();\n    NamedList okResponse = new NamedList();\n    okResponse.add(\"responseHeader\", new NamedList<>(Collections.singletonMap(\"status\", 0)));\n\n    LBHttpSolrClient mockLbclient = getMockLbHttpSolrClient(responses);\n    AtomicInteger lbhttpRequestCount = new AtomicInteger();\n    try (CloudSolrClient cloudClient = new CloudSolrClientBuilder(getStateProvider(livenodes, refs))\n        .withLBHttpSolrClient(mockLbclient)\n        .build()) {\n      livenodes.addAll(ImmutableSet.of(\"192.168.1.108:7574_solr\", \"192.168.1.108:8983_solr\"));\n      ClusterState cs = ClusterState.createFromJson(1, coll1State.getBytes(UTF_8), Collections.emptySet());\n      refs.put(collName, new Ref(collName));\n      colls.put(collName, cs.getCollectionOrNull(collName));\n      responses.put(\"request\", o -> {\n        int i = lbhttpRequestCount.incrementAndGet();\n        if (i == 1) return new ConnectException(\"TEST\");\n        if (i == 2) return new SocketException(\"TEST\");\n        if (i == 3) return new NoHttpResponseException(\"TEST\");\n        return okResponse;\n      });\n      UpdateRequest update = new UpdateRequest()\n          .add(\"id\", \"123\", \"desc\", \"Something 0\");\n\n      cloudClient.request(update, collName);\n      assertEquals(2, refs.get(collName).getCount());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9eee76c6a8ac63dd88a66571d553973ea0a1131":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c9eee76c6a8ac63dd88a66571d553973ea0a1131"],"c9eee76c6a8ac63dd88a66571d553973ea0a1131":["727bb765ff2542275f6d31f67be18d7104bae148","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}