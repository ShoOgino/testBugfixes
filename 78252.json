{"path":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","commits":[{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c9595c75582a7ea7efb585014102ed83f2d9c8b","date":1523581112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87d1f8719d7f05be003f3477450b74af13706a","date":1523590376,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertNotSame(r.toString(), r.getState(), Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertSame(coll.toString() + \"\\n\" + replica.toString(), replica.getState(), Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertNotSame(r.toString(), r.getState(), Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertSame(coll.toString() + \"\\n\" + replica.toString(), replica.getState(), Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertTrue(r.toString(), r.getState() != Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertTrue(rsp.getRequestStatus() != RequestStatusState.COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.toString(), rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertTrue(coll.toString() + \"\\n\" + replica.toString(), replica.getState() == Replica.State.ACTIVE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    \n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n    \n    cluster.waitForActiveCollection(collection, 2, 2);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    \n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    \n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertSame(coll.toString() + \"\\n\" + replica.toString(), replica.getState(), Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5);\n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n    Replica r = replicas2.iterator().next();\n    assertNotSame(r.toString(), r.getState(), Replica.State.ACTIVE);\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertSame(coll.toString() + \"\\n\" + replica.toString(), replica.getState(), Replica.State.ACTIVE);\n    }\n  }\n\n","bugFix":["2bcfee499548996a6e5448bbf93b8f276d010270","deea3439de4f487ae553317e50d5d641ca386374","05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AddReplicaTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    \n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    cloudClient.request(create);\n    \n    cluster.waitForActiveCollection(collection, 2, 2);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    \n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    \n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertSame(coll.toString() + \"\\n\" + replica.toString(), replica.getState(), Replica.State.ACTIVE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    \n    String collection = \"addreplicatest_coll\";\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collection, \"conf1\", 2, 1);\n    create.setMaxShardsPerNode(2);\n    cloudClient.request(create);\n    \n    cluster.waitForActiveCollection(collection, 2, 2);\n\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    String sliceName = coll.getSlices().iterator().next().getName();\n    Collection<Replica> replicas = coll.getSlice(sliceName).getReplicas();\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(collection, sliceName);\n    addReplica.processAsync(\"000\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"000\");\n    CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    \n    // wait for async request success\n    boolean success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    \n    Collection<Replica> replicas2 = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getSlice(sliceName).getReplicas();\n    replicas2.removeAll(replicas);\n    assertEquals(1, replicas2.size());\n\n    // use waitForFinalState\n    addReplica.setWaitForFinalState(true);\n    addReplica.processAsync(\"001\", cloudClient);\n    requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    rsp = requestStatus.process(cloudClient);\n    assertNotSame(rsp.getRequestStatus(), COMPLETED);\n    // wait for async request success\n    success = false;\n    for (int i = 0; i < 200; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == COMPLETED) {\n        success = true;\n        break;\n      }\n      assertNotSame(rsp.toString(), rsp.getRequestStatus(), RequestStatusState.FAILED);\n      Thread.sleep(500);\n    }\n    assertTrue(success);\n    // let the client watch fire\n    Thread.sleep(1000);\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n    coll = clusterState.getCollection(collection);\n    Collection<Replica> replicas3 = coll.getSlice(sliceName).getReplicas();\n    replicas3.removeAll(replicas);\n    String replica2 = replicas2.iterator().next().getName();\n    assertEquals(2, replicas3.size());\n    for (Replica replica : replicas3) {\n      if (replica.getName().equals(replica2)) {\n        continue; // may be still recovering\n      }\n      assertSame(coll.toString() + \"\\n\" + replica.toString(), replica.getState(), Replica.State.ACTIVE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["6b87d1f8719d7f05be003f3477450b74af13706a"],"2bcfee499548996a6e5448bbf93b8f276d010270":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b87d1f8719d7f05be003f3477450b74af13706a":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","3c9595c75582a7ea7efb585014102ed83f2d9c8b"],"deea3439de4f487ae553317e50d5d641ca386374":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["2bcfee499548996a6e5448bbf93b8f276d010270"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"2bcfee499548996a6e5448bbf93b8f276d010270":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["6b87d1f8719d7f05be003f3477450b74af13706a"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"6b87d1f8719d7f05be003f3477450b74af13706a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2bcfee499548996a6e5448bbf93b8f276d010270"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["3c9595c75582a7ea7efb585014102ed83f2d9c8b","6b87d1f8719d7f05be003f3477450b74af13706a"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}