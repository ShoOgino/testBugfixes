{"path":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","commits":[{"id":"b305cb92ee47ddf7b15c6eeefe489c04d05b22ba","date":1199456955,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 7: \n          { /* ignore */\n          }\n        case 42: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 43: break;\n        case 26: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 44: break;\n        case 37: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 45: break;\n        case 11: \n          { currentTokType = ITALICS; yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 46: break;\n        case 5: \n          { yybegin(CATEGORY_STATE); return currentTokType;\n          }\n        case 47: break;\n        case 34: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 48: break;\n        case 24: \n          { positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 49: break;\n        case 22: \n          { positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 50: break;\n        case 39: \n          { positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 51: break;\n        case 18: \n          { yybegin(STRING); return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 52: break;\n        case 21: \n          { positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 53: break;\n        case 1: \n          { positionInc = 1;\n          }\n        case 54: break;\n        case 41: \n          { numBalanced = 0;currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 55: break;\n        case 9: \n          { yybegin(YYINITIAL);\n          }\n        case 56: break;\n        case 19: \n          { numBalanced = 0;currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 57: break;\n        case 13: \n          { yybegin(STRING);return currentTokType;\n          }\n        case 58: break;\n        case 36: \n          { positionInc = 1; return EMAIL;\n          }\n        case 59: break;\n        case 35: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 60: break;\n        case 4: \n          { positionInc = 1;currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 61: break;\n        case 17: \n          { /* ignore STRING */\n          }\n        case 62: break;\n        case 40: \n          { currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 63: break;\n        case 20: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 64: break;\n        case 12: \n          { currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 65: break;\n        case 27: \n          { numBalanced = 0;currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 66: break;\n        case 33: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 67: break;\n        case 16: \n          { yybegin(DOUBLE_BRACE_STATE); return currentTokType;\n          }\n        case 68: break;\n        case 29: \n          { positionInc = 1; return HOST;\n          }\n        case 69: break;\n        case 32: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 70: break;\n        case 25: \n          { currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 71: break;\n        case 23: \n          { positionInc = 0; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 72: break;\n        case 14: \n          { currentTokType = SUB_HEADING; yybegin(STRING);\n          }\n        case 73: break;\n        case 28: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 74: break;\n        case 30: \n          { positionInc = 1; return NUM;\n          }\n        case 75: break;\n        case 15: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); return currentTokType;\n          }\n        case 76: break;\n        case 6: \n          { yybegin(INTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 77: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 78: break;\n        case 31: \n          { positionInc = 1; return COMPANY;\n          }\n        case 79: break;\n        case 10: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 80: break;\n        case 8: \n          { positionInc = 1; currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE);return currentTokType;\n          }\n        case 81: break;\n        case 38: \n          { positionInc = 0; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 82: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95692f9a6440b2a1c83c2c8ae5224be54319db4c","date":1199477722,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","sourceNew":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 7: \n          { /* ignore */\n          }\n        case 44: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 45: break;\n        case 28: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 46: break;\n        case 9: \n          { numLinkToks = 0; positionInc = 0; yybegin(YYINITIAL);\n          }\n        case 47: break;\n        case 39: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 48: break;\n        case 11: \n          { currentTokType = ITALICS; yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 49: break;\n        case 23: \n          { positionInc = 1; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 50: break;\n        case 5: \n          { yybegin(CATEGORY_STATE); return currentTokType;\n          }\n        case 51: break;\n        case 36: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 52: break;\n        case 8: \n          { if (numLinkToks == 0){positionInc = 0;} else{positionInc = 1;} currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 53: break;\n        case 24: \n          { positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 54: break;\n        case 22: \n          { positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 55: break;\n        case 41: \n          { positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 56: break;\n        case 18: \n          { yybegin(STRING); return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 57: break;\n        case 21: \n          { positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 58: break;\n        case 1: \n          { positionInc = 1;\n          }\n        case 59: break;\n        case 43: \n          { numBalanced = 0;currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 60: break;\n        case 25: \n          { yybegin(YYINITIAL);\n          }\n        case 61: break;\n        case 40: \n          { positionInc = 1; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 62: break;\n        case 19: \n          { numBalanced = 0;currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 63: break;\n        case 13: \n          { yybegin(STRING);return currentTokType;\n          }\n        case 64: break;\n        case 38: \n          { positionInc = 1; return EMAIL;\n          }\n        case 65: break;\n        case 37: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 66: break;\n        case 4: \n          { positionInc = 1;currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 67: break;\n        case 17: \n          { /* ignore STRING */\n          }\n        case 68: break;\n        case 42: \n          { currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 69: break;\n        case 20: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 70: break;\n        case 12: \n          { currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 71: break;\n        case 29: \n          { numBalanced = 0;currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 72: break;\n        case 35: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 73: break;\n        case 16: \n          { yybegin(DOUBLE_BRACE_STATE); return currentTokType;\n          }\n        case 74: break;\n        case 31: \n          { positionInc = 1; return HOST;\n          }\n        case 75: break;\n        case 34: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 76: break;\n        case 27: \n          { currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 77: break;\n        case 14: \n          { currentTokType = SUB_HEADING; yybegin(STRING);\n          }\n        case 78: break;\n        case 30: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 79: break;\n        case 32: \n          { positionInc = 1; return NUM;\n          }\n        case 80: break;\n        case 15: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); return currentTokType;\n          }\n        case 81: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 82: break;\n        case 33: \n          { positionInc = 1; return COMPANY;\n          }\n        case 83: break;\n        case 10: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 84: break;\n        case 6: \n          { if (numLinkToks == 1){positionInc = 0;} else{positionInc = 1;} yybegin(INTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 85: break;\n        case 26: \n          { numLinkToks = 0; yybegin(YYINITIAL);\n          }\n        case 86: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 7: \n          { /* ignore */\n          }\n        case 42: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 43: break;\n        case 26: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 44: break;\n        case 37: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 45: break;\n        case 11: \n          { currentTokType = ITALICS; yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 46: break;\n        case 5: \n          { yybegin(CATEGORY_STATE); return currentTokType;\n          }\n        case 47: break;\n        case 34: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 48: break;\n        case 24: \n          { positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 49: break;\n        case 22: \n          { positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 50: break;\n        case 39: \n          { positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 51: break;\n        case 18: \n          { yybegin(STRING); return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 52: break;\n        case 21: \n          { positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 53: break;\n        case 1: \n          { positionInc = 1;\n          }\n        case 54: break;\n        case 41: \n          { numBalanced = 0;currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 55: break;\n        case 9: \n          { yybegin(YYINITIAL);\n          }\n        case 56: break;\n        case 19: \n          { numBalanced = 0;currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 57: break;\n        case 13: \n          { yybegin(STRING);return currentTokType;\n          }\n        case 58: break;\n        case 36: \n          { positionInc = 1; return EMAIL;\n          }\n        case 59: break;\n        case 35: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 60: break;\n        case 4: \n          { positionInc = 1;currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 61: break;\n        case 17: \n          { /* ignore STRING */\n          }\n        case 62: break;\n        case 40: \n          { currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 63: break;\n        case 20: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 64: break;\n        case 12: \n          { currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 65: break;\n        case 27: \n          { numBalanced = 0;currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 66: break;\n        case 33: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 67: break;\n        case 16: \n          { yybegin(DOUBLE_BRACE_STATE); return currentTokType;\n          }\n        case 68: break;\n        case 29: \n          { positionInc = 1; return HOST;\n          }\n        case 69: break;\n        case 32: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 70: break;\n        case 25: \n          { currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 71: break;\n        case 23: \n          { positionInc = 0; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 72: break;\n        case 14: \n          { currentTokType = SUB_HEADING; yybegin(STRING);\n          }\n        case 73: break;\n        case 28: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 74: break;\n        case 30: \n          { positionInc = 1; return NUM;\n          }\n        case 75: break;\n        case 15: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); return currentTokType;\n          }\n        case 76: break;\n        case 6: \n          { yybegin(INTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 77: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 78: break;\n        case 31: \n          { positionInc = 1; return COMPANY;\n          }\n        case 79: break;\n        case 10: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 80: break;\n        case 8: \n          { positionInc = 1; currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE);return currentTokType;\n          }\n        case 81: break;\n        case 38: \n          { positionInc = 0; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 82: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48aaa86d97259d1aa57d972cae27fe4f522aa70d","date":1199478983,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","sourceNew":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 7: \n          { /* ignore */\n          }\n        case 44: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 45: break;\n        case 28: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 46: break;\n        case 9: \n          { numLinkToks = 0; positionInc = 0; yybegin(YYINITIAL);\n          }\n        case 47: break;\n        case 4: \n          { positionInc = 1; currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 48: break;\n        case 39: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 49: break;\n        case 11: \n          { currentTokType = ITALICS; yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 50: break;\n        case 23: \n          { positionInc = 1; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 51: break;\n        case 5: \n          { yybegin(CATEGORY_STATE); return currentTokType;\n          }\n        case 52: break;\n        case 36: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 53: break;\n        case 8: \n          { if (numLinkToks == 0){positionInc = 0;} else{positionInc = 1;} currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 54: break;\n        case 24: \n          { positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 55: break;\n        case 22: \n          { positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 56: break;\n        case 41: \n          { positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 57: break;\n        case 18: \n          { yybegin(STRING); return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 58: break;\n        case 21: \n          { positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 59: break;\n        case 1: \n          { positionInc = 1;\n          }\n        case 60: break;\n        case 43: \n          { numBalanced = 0;currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 61: break;\n        case 25: \n          { yybegin(YYINITIAL);\n          }\n        case 62: break;\n        case 40: \n          { positionInc = 1; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 63: break;\n        case 19: \n          { numBalanced = 0;currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 64: break;\n        case 13: \n          { yybegin(STRING);return currentTokType;\n          }\n        case 65: break;\n        case 38: \n          { positionInc = 1; return EMAIL;\n          }\n        case 66: break;\n        case 37: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 67: break;\n        case 17: \n          { /* ignore STRING */\n          }\n        case 68: break;\n        case 42: \n          { currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 69: break;\n        case 20: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 70: break;\n        case 12: \n          { currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 71: break;\n        case 29: \n          { numBalanced = 0;currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 72: break;\n        case 35: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 73: break;\n        case 16: \n          { yybegin(DOUBLE_BRACE_STATE); return currentTokType;\n          }\n        case 74: break;\n        case 31: \n          { positionInc = 1; return HOST;\n          }\n        case 75: break;\n        case 34: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 76: break;\n        case 27: \n          { currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 77: break;\n        case 14: \n          { currentTokType = SUB_HEADING; yybegin(STRING);\n          }\n        case 78: break;\n        case 30: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 79: break;\n        case 32: \n          { positionInc = 1; return NUM;\n          }\n        case 80: break;\n        case 15: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); return currentTokType;\n          }\n        case 81: break;\n        case 6: \n          { yybegin(INTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 82: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 83: break;\n        case 33: \n          { positionInc = 1; return COMPANY;\n          }\n        case 84: break;\n        case 10: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 85: break;\n        case 26: \n          { numLinkToks = 0; yybegin(YYINITIAL);\n          }\n        case 86: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 7: \n          { /* ignore */\n          }\n        case 44: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 45: break;\n        case 28: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 46: break;\n        case 9: \n          { numLinkToks = 0; positionInc = 0; yybegin(YYINITIAL);\n          }\n        case 47: break;\n        case 39: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 48: break;\n        case 11: \n          { currentTokType = ITALICS; yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 49: break;\n        case 23: \n          { positionInc = 1; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 50: break;\n        case 5: \n          { yybegin(CATEGORY_STATE); return currentTokType;\n          }\n        case 51: break;\n        case 36: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 52: break;\n        case 8: \n          { if (numLinkToks == 0){positionInc = 0;} else{positionInc = 1;} currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 53: break;\n        case 24: \n          { positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 54: break;\n        case 22: \n          { positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 55: break;\n        case 41: \n          { positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 56: break;\n        case 18: \n          { yybegin(STRING); return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 57: break;\n        case 21: \n          { positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 58: break;\n        case 1: \n          { positionInc = 1;\n          }\n        case 59: break;\n        case 43: \n          { numBalanced = 0;currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 60: break;\n        case 25: \n          { yybegin(YYINITIAL);\n          }\n        case 61: break;\n        case 40: \n          { positionInc = 1; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 62: break;\n        case 19: \n          { numBalanced = 0;currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 63: break;\n        case 13: \n          { yybegin(STRING);return currentTokType;\n          }\n        case 64: break;\n        case 38: \n          { positionInc = 1; return EMAIL;\n          }\n        case 65: break;\n        case 37: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 66: break;\n        case 4: \n          { positionInc = 1;currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 67: break;\n        case 17: \n          { /* ignore STRING */\n          }\n        case 68: break;\n        case 42: \n          { currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 69: break;\n        case 20: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 70: break;\n        case 12: \n          { currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 71: break;\n        case 29: \n          { numBalanced = 0;currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 72: break;\n        case 35: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 73: break;\n        case 16: \n          { yybegin(DOUBLE_BRACE_STATE); return currentTokType;\n          }\n        case 74: break;\n        case 31: \n          { positionInc = 1; return HOST;\n          }\n        case 75: break;\n        case 34: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 76: break;\n        case 27: \n          { currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 77: break;\n        case 14: \n          { currentTokType = SUB_HEADING; yybegin(STRING);\n          }\n        case 78: break;\n        case 30: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 79: break;\n        case 32: \n          { positionInc = 1; return NUM;\n          }\n        case 80: break;\n        case 15: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); return currentTokType;\n          }\n        case 81: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 82: break;\n        case 33: \n          { positionInc = 1; return COMPANY;\n          }\n        case 83: break;\n        case 10: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 84: break;\n        case 6: \n          { if (numLinkToks == 1){positionInc = 0;} else{positionInc = 1;} yybegin(INTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 85: break;\n        case 26: \n          { numLinkToks = 0; yybegin(YYINITIAL);\n          }\n        case 86: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"decc8a7344e9231708f9991fa09db2cafec7a2dd","date":1201187153,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","sourceNew":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 8: \n          { /* ignore */\n          }\n        case 46: break;\n        case 28: \n          { currentTokType = INTERNAL_LINK; numWikiTokensSeen = 0; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 47: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 48: break;\n        case 30: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 49: break;\n        case 10: \n          { numLinkToks = 0; positionInc = 0; yybegin(YYINITIAL);\n          }\n        case 50: break;\n        case 41: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 51: break;\n        case 7: \n          { yybegin(INTERNAL_LINK_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 52: break;\n        case 23: \n          { numWikiTokensSeen = 0; positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 53: break;\n        case 38: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 54: break;\n        case 17: \n          { yybegin(DOUBLE_BRACE_STATE); numWikiTokensSeen = 0; return currentTokType;\n          }\n        case 55: break;\n        case 24: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 56: break;\n        case 14: \n          { yybegin(STRING); numWikiTokensSeen++; return currentTokType;\n          }\n        case 57: break;\n        case 5: \n          { positionInc = 1;\n          }\n        case 58: break;\n        case 43: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 59: break;\n        case 26: \n          { yybegin(YYINITIAL);\n          }\n        case 60: break;\n        case 20: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 61: break;\n        case 1: \n          { numWikiTokensSeen = 0;  positionInc = 1;\n          }\n        case 62: break;\n        case 40: \n          { positionInc = 1; return EMAIL;\n          }\n        case 63: break;\n        case 25: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 64: break;\n        case 39: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 65: break;\n        case 9: \n          { if (numLinkToks == 0){positionInc = 0;} else{positionInc = 1;} numWikiTokensSeen++; currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 66: break;\n        case 22: \n          { numWikiTokensSeen = 0; positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 67: break;\n        case 31: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 68: break;\n        case 15: \n          { currentTokType = SUB_HEADING; numWikiTokensSeen = 0; yybegin(STRING);\n          }\n        case 69: break;\n        case 18: \n          { /* ignore STRING */\n          }\n        case 70: break;\n        case 42: \n          { positionInc = 1; numWikiTokensSeen++; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 71: break;\n        case 21: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 72: break;\n        case 37: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 73: break;\n        case 33: \n          { positionInc = 1; return HOST;\n          }\n        case 74: break;\n        case 45: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 75: break;\n        case 36: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 76: break;\n        case 13: \n          { currentTokType = EXTERNAL_LINK; numWikiTokensSeen = 0; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 77: break;\n        case 16: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 78: break;\n        case 12: \n          { currentTokType = ITALICS; numWikiTokensSeen++;  yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 79: break;\n        case 6: \n          { yybegin(CATEGORY_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 80: break;\n        case 32: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 81: break;\n        case 19: \n          { yybegin(STRING); numWikiTokensSeen++; return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 82: break;\n        case 34: \n          { positionInc = 1; return NUM;\n          }\n        case 83: break;\n        case 44: \n          { currentTokType = CATEGORY; numWikiTokensSeen = 0; yybegin(CATEGORY_STATE);\n          }\n        case 84: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 85: break;\n        case 35: \n          { positionInc = 1; return COMPANY;\n          }\n        case 86: break;\n        case 11: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 87: break;\n        case 29: \n          { currentTokType = INTERNAL_LINK; numWikiTokensSeen = 0;  yybegin(INTERNAL_LINK_STATE);\n          }\n        case 88: break;\n        case 4: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 89: break;\n        case 27: \n          { numLinkToks = 0; yybegin(YYINITIAL);\n          }\n        case 90: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 7: \n          { /* ignore */\n          }\n        case 44: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 45: break;\n        case 28: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 46: break;\n        case 9: \n          { numLinkToks = 0; positionInc = 0; yybegin(YYINITIAL);\n          }\n        case 47: break;\n        case 4: \n          { positionInc = 1; currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 48: break;\n        case 39: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 49: break;\n        case 11: \n          { currentTokType = ITALICS; yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 50: break;\n        case 23: \n          { positionInc = 1; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 51: break;\n        case 5: \n          { yybegin(CATEGORY_STATE); return currentTokType;\n          }\n        case 52: break;\n        case 36: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 53: break;\n        case 8: \n          { if (numLinkToks == 0){positionInc = 0;} else{positionInc = 1;} currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 54: break;\n        case 24: \n          { positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 55: break;\n        case 22: \n          { positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 56: break;\n        case 41: \n          { positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 57: break;\n        case 18: \n          { yybegin(STRING); return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 58: break;\n        case 21: \n          { positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 59: break;\n        case 1: \n          { positionInc = 1;\n          }\n        case 60: break;\n        case 43: \n          { numBalanced = 0;currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 61: break;\n        case 25: \n          { yybegin(YYINITIAL);\n          }\n        case 62: break;\n        case 40: \n          { positionInc = 1; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 63: break;\n        case 19: \n          { numBalanced = 0;currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 64: break;\n        case 13: \n          { yybegin(STRING);return currentTokType;\n          }\n        case 65: break;\n        case 38: \n          { positionInc = 1; return EMAIL;\n          }\n        case 66: break;\n        case 37: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 67: break;\n        case 17: \n          { /* ignore STRING */\n          }\n        case 68: break;\n        case 42: \n          { currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 69: break;\n        case 20: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 70: break;\n        case 12: \n          { currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 71: break;\n        case 29: \n          { numBalanced = 0;currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 72: break;\n        case 35: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 73: break;\n        case 16: \n          { yybegin(DOUBLE_BRACE_STATE); return currentTokType;\n          }\n        case 74: break;\n        case 31: \n          { positionInc = 1; return HOST;\n          }\n        case 75: break;\n        case 34: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 76: break;\n        case 27: \n          { currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 77: break;\n        case 14: \n          { currentTokType = SUB_HEADING; yybegin(STRING);\n          }\n        case 78: break;\n        case 30: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 79: break;\n        case 32: \n          { positionInc = 1; return NUM;\n          }\n        case 80: break;\n        case 15: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); return currentTokType;\n          }\n        case 81: break;\n        case 6: \n          { yybegin(INTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 82: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 83: break;\n        case 33: \n          { positionInc = 1; return COMPANY;\n          }\n        case 84: break;\n        case 10: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 85: break;\n        case 26: \n          { numLinkToks = 0; yybegin(YYINITIAL);\n          }\n        case 86: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl#getNextToken().mjava","sourceNew":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 8: \n          { /* ignore */\n          }\n        case 46: break;\n        case 28: \n          { currentTokType = INTERNAL_LINK; numWikiTokensSeen = 0; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 47: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 48: break;\n        case 30: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 49: break;\n        case 10: \n          { numLinkToks = 0; positionInc = 0; yybegin(YYINITIAL);\n          }\n        case 50: break;\n        case 41: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 51: break;\n        case 7: \n          { yybegin(INTERNAL_LINK_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 52: break;\n        case 23: \n          { numWikiTokensSeen = 0; positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 53: break;\n        case 38: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 54: break;\n        case 17: \n          { yybegin(DOUBLE_BRACE_STATE); numWikiTokensSeen = 0; return currentTokType;\n          }\n        case 55: break;\n        case 24: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 56: break;\n        case 14: \n          { yybegin(STRING); numWikiTokensSeen++; return currentTokType;\n          }\n        case 57: break;\n        case 5: \n          { positionInc = 1;\n          }\n        case 58: break;\n        case 43: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 59: break;\n        case 26: \n          { yybegin(YYINITIAL);\n          }\n        case 60: break;\n        case 20: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 61: break;\n        case 1: \n          { numWikiTokensSeen = 0;  positionInc = 1;\n          }\n        case 62: break;\n        case 40: \n          { positionInc = 1; return EMAIL;\n          }\n        case 63: break;\n        case 25: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 64: break;\n        case 39: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 65: break;\n        case 9: \n          { if (numLinkToks == 0){positionInc = 0;} else{positionInc = 1;} numWikiTokensSeen++; currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 66: break;\n        case 22: \n          { numWikiTokensSeen = 0; positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 67: break;\n        case 31: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 68: break;\n        case 15: \n          { currentTokType = SUB_HEADING; numWikiTokensSeen = 0; yybegin(STRING);\n          }\n        case 69: break;\n        case 18: \n          { /* ignore STRING */\n          }\n        case 70: break;\n        case 42: \n          { positionInc = 1; numWikiTokensSeen++; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 71: break;\n        case 21: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 72: break;\n        case 37: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 73: break;\n        case 33: \n          { positionInc = 1; return HOST;\n          }\n        case 74: break;\n        case 45: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 75: break;\n        case 36: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 76: break;\n        case 13: \n          { currentTokType = EXTERNAL_LINK; numWikiTokensSeen = 0; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 77: break;\n        case 16: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 78: break;\n        case 12: \n          { currentTokType = ITALICS; numWikiTokensSeen++;  yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 79: break;\n        case 6: \n          { yybegin(CATEGORY_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 80: break;\n        case 32: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 81: break;\n        case 19: \n          { yybegin(STRING); numWikiTokensSeen++; return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 82: break;\n        case 34: \n          { positionInc = 1; return NUM;\n          }\n        case 83: break;\n        case 44: \n          { currentTokType = CATEGORY; numWikiTokensSeen = 0; yybegin(CATEGORY_STATE);\n          }\n        case 84: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 85: break;\n        case 35: \n          { positionInc = 1; return COMPANY;\n          }\n        case 86: break;\n        case 11: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 87: break;\n        case 29: \n          { currentTokType = INTERNAL_LINK; numWikiTokensSeen = 0;  yybegin(INTERNAL_LINK_STATE);\n          }\n        case 88: break;\n        case 4: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 89: break;\n        case 27: \n          { numLinkToks = 0; yybegin(YYINITIAL);\n          }\n        case 90: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = zzLexicalState;\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          int zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 8: \n          { /* ignore */\n          }\n        case 46: break;\n        case 28: \n          { currentTokType = INTERNAL_LINK; numWikiTokensSeen = 0; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 47: break;\n        case 3: \n          { positionInc = 1; return CJ;\n          }\n        case 48: break;\n        case 30: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end italics*/\n          }\n        case 49: break;\n        case 10: \n          { numLinkToks = 0; positionInc = 0; yybegin(YYINITIAL);\n          }\n        case 50: break;\n        case 41: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end bold italics*/\n          }\n        case 51: break;\n        case 7: \n          { yybegin(INTERNAL_LINK_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 52: break;\n        case 23: \n          { numWikiTokensSeen = 0; positionInc = 1; yybegin(DOUBLE_EQUALS_STATE);\n          }\n        case 53: break;\n        case 38: \n          { numBalanced = 0;currentTokType = ALPHANUM; yybegin(YYINITIAL);/*end sub header*/\n          }\n        case 54: break;\n        case 17: \n          { yybegin(DOUBLE_BRACE_STATE); numWikiTokensSeen = 0; return currentTokType;\n          }\n        case 55: break;\n        case 24: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = INTERNAL_LINK; yybegin(INTERNAL_LINK_STATE);\n          }\n        case 56: break;\n        case 14: \n          { yybegin(STRING); numWikiTokensSeen++; return currentTokType;\n          }\n        case 57: break;\n        case 5: \n          { positionInc = 1;\n          }\n        case 58: break;\n        case 43: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = CATEGORY; yybegin(CATEGORY_STATE);\n          }\n        case 59: break;\n        case 26: \n          { yybegin(YYINITIAL);\n          }\n        case 60: break;\n        case 20: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = EXTERNAL_LINK;yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 61: break;\n        case 1: \n          { numWikiTokensSeen = 0;  positionInc = 1;\n          }\n        case 62: break;\n        case 40: \n          { positionInc = 1; return EMAIL;\n          }\n        case 63: break;\n        case 25: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = CITATION; yybegin(DOUBLE_BRACE_STATE);\n          }\n        case 64: break;\n        case 39: \n          { positionInc = 1; return ACRONYM;\n          }\n        case 65: break;\n        case 9: \n          { if (numLinkToks == 0){positionInc = 0;} else{positionInc = 1;} numWikiTokensSeen++; currentTokType = EXTERNAL_LINK; yybegin(EXTERNAL_LINK_STATE); numLinkToks++; return currentTokType;\n          }\n        case 66: break;\n        case 22: \n          { numWikiTokensSeen = 0; positionInc = 1; if (numBalanced == 0){numBalanced++;yybegin(TWO_SINGLE_QUOTES_STATE);} else{numBalanced = 0;}\n          }\n        case 67: break;\n        case 31: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = INTERNAL_LINK;yybegin(INTERNAL_LINK_STATE);\n          }\n        case 68: break;\n        case 15: \n          { currentTokType = SUB_HEADING; numWikiTokensSeen = 0; yybegin(STRING);\n          }\n        case 69: break;\n        case 18: \n          { /* ignore STRING */\n          }\n        case 70: break;\n        case 42: \n          { positionInc = 1; numWikiTokensSeen++; yybegin(EXTERNAL_LINK_STATE); return currentTokType;\n          }\n        case 71: break;\n        case 21: \n          { yybegin(STRING); return currentTokType;/*pipe*/\n          }\n        case 72: break;\n        case 37: \n          { numBalanced = 0;currentTokType = ALPHANUM;yybegin(YYINITIAL);/*end bold*/\n          }\n        case 73: break;\n        case 33: \n          { positionInc = 1; return HOST;\n          }\n        case 74: break;\n        case 45: \n          { numBalanced = 0; numWikiTokensSeen = 0; currentTokType = CATEGORY;yybegin(CATEGORY_STATE);\n          }\n        case 75: break;\n        case 36: \n          { currentTokType = BOLD_ITALICS;  yybegin(FIVE_SINGLE_QUOTES_STATE);\n          }\n        case 76: break;\n        case 13: \n          { currentTokType = EXTERNAL_LINK; numWikiTokensSeen = 0; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 77: break;\n        case 16: \n          { currentTokType = HEADING; yybegin(DOUBLE_EQUALS_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 78: break;\n        case 12: \n          { currentTokType = ITALICS; numWikiTokensSeen++;  yybegin(STRING); return currentTokType;/*italics*/\n          }\n        case 79: break;\n        case 6: \n          { yybegin(CATEGORY_STATE); numWikiTokensSeen++; return currentTokType;\n          }\n        case 80: break;\n        case 32: \n          { positionInc = 1; return APOSTROPHE;\n          }\n        case 81: break;\n        case 19: \n          { yybegin(STRING); numWikiTokensSeen++; return currentTokType;/* STRING ALPHANUM*/\n          }\n        case 82: break;\n        case 34: \n          { positionInc = 1; return NUM;\n          }\n        case 83: break;\n        case 44: \n          { currentTokType = CATEGORY; numWikiTokensSeen = 0; yybegin(CATEGORY_STATE);\n          }\n        case 84: break;\n        case 2: \n          { positionInc = 1; return ALPHANUM;\n          }\n        case 85: break;\n        case 35: \n          { positionInc = 1; return COMPANY;\n          }\n        case 86: break;\n        case 11: \n          { currentTokType = BOLD;  yybegin(THREE_SINGLE_QUOTES_STATE);\n          }\n        case 87: break;\n        case 29: \n          { currentTokType = INTERNAL_LINK; numWikiTokensSeen = 0;  yybegin(INTERNAL_LINK_STATE);\n          }\n        case 88: break;\n        case 4: \n          { numWikiTokensSeen = 0; positionInc = 1; currentTokType = EXTERNAL_LINK_URL; yybegin(EXTERNAL_LINK_STATE);\n          }\n        case 89: break;\n        case 27: \n          { numLinkToks = 0; yybegin(YYINITIAL);\n          }\n        case 90: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n            return YYEOF;\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"decc8a7344e9231708f9991fa09db2cafec7a2dd":["48aaa86d97259d1aa57d972cae27fe4f522aa70d"],"b305cb92ee47ddf7b15c6eeefe489c04d05b22ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95692f9a6440b2a1c83c2c8ae5224be54319db4c":["b305cb92ee47ddf7b15c6eeefe489c04d05b22ba"],"48aaa86d97259d1aa57d972cae27fe4f522aa70d":["95692f9a6440b2a1c83c2c8ae5224be54319db4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["decc8a7344e9231708f9991fa09db2cafec7a2dd"]},"commit2Childs":{"decc8a7344e9231708f9991fa09db2cafec7a2dd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b305cb92ee47ddf7b15c6eeefe489c04d05b22ba":["95692f9a6440b2a1c83c2c8ae5224be54319db4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b305cb92ee47ddf7b15c6eeefe489c04d05b22ba"],"95692f9a6440b2a1c83c2c8ae5224be54319db4c":["48aaa86d97259d1aa57d972cae27fe4f522aa70d"],"48aaa86d97259d1aa57d972cae27fe4f522aa70d":["decc8a7344e9231708f9991fa09db2cafec7a2dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}