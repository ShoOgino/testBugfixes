{"path":"solr/core/src/java/org/apache/solr/rest/RestManager.RestManagerManagedResource#doGet(BaseSolrResource,String).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager.RestManagerManagedResource#doGet(BaseSolrResource,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void doGet(BaseSolrResource endpoint, String childId) {\n      \n      // filter results by /schema or /config\n      String path = ManagedEndpoint.resolveResourceId(endpoint.getRequest());\n      Matcher resourceIdMatcher = resourceIdRegex.matcher(path);\n      if (!resourceIdMatcher.matches()) {\n        // extremely unlikely but didn't want to squelch it either\n        throw new ResourceException(Status.SERVER_ERROR_NOT_IMPLEMENTED, path);\n      }\n      \n      String filter = resourceIdMatcher.group(1);\n            \n      List<Map<String,String>> regList = new ArrayList<>();\n      for (ManagedResourceRegistration reg : restManager.registry.getRegistered()) {\n        if (!reg.resourceId.startsWith(filter))\n          continue; // doesn't match filter\n        \n        if (RestManagerManagedResource.class.isAssignableFrom(reg.implClass))\n          continue; // internal, no need to expose to outside\n        \n        regList.add(reg.getInfo());          \n      }\n      \n      endpoint.getSolrResponse().add(\"managedResources\", regList);      \n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager.RestManagerManagedResource#doGet(BaseSolrResource,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager.RestManagerManagedResource#doGet(BaseSolrResource,String).mjava","sourceNew":"    @Override\n    public void doGet(BaseSolrResource endpoint, String childId) {\n      \n      // filter results by /schema or /config\n      String path = ManagedEndpoint.resolveResourceId(endpoint.getSolrRequest().getPath());\n      Matcher resourceIdMatcher = resourceIdRegex.matcher(path);\n      if (!resourceIdMatcher.matches()) {\n        // extremely unlikely but didn't want to squelch it either\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Requests to path \"+path+\" not supported!\");\n      }\n      \n      String filter = resourceIdMatcher.group(1);\n            \n      List<Map<String,String>> regList = new ArrayList<>();\n      for (ManagedResourceRegistration reg : restManager.registry.getRegistered()) {\n        if (!reg.resourceId.startsWith(filter))\n          continue; // doesn't match filter\n        \n        if (RestManagerManagedResource.class.isAssignableFrom(reg.implClass))\n          continue; // internal, no need to expose to outside\n        \n        regList.add(reg.getInfo());          \n      }\n      \n      endpoint.getSolrResponse().add(\"managedResources\", regList);      \n    }    \n\n","sourceOld":"    @Override\n    public void doGet(BaseSolrResource endpoint, String childId) {\n      \n      // filter results by /schema or /config\n      String path = ManagedEndpoint.resolveResourceId(endpoint.getRequest());\n      Matcher resourceIdMatcher = resourceIdRegex.matcher(path);\n      if (!resourceIdMatcher.matches()) {\n        // extremely unlikely but didn't want to squelch it either\n        throw new ResourceException(Status.SERVER_ERROR_NOT_IMPLEMENTED, path);\n      }\n      \n      String filter = resourceIdMatcher.group(1);\n            \n      List<Map<String,String>> regList = new ArrayList<>();\n      for (ManagedResourceRegistration reg : restManager.registry.getRegistered()) {\n        if (!reg.resourceId.startsWith(filter))\n          continue; // doesn't match filter\n        \n        if (RestManagerManagedResource.class.isAssignableFrom(reg.implClass))\n          continue; // internal, no need to expose to outside\n        \n        regList.add(reg.getInfo());          \n      }\n      \n      endpoint.getSolrResponse().add(\"managedResources\", regList);      \n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}