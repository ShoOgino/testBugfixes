{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#iterator().mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#iterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        assert doc == lead.doc;\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        // We are moving to the next doc ID, so scorers in 'lead' need to go in\n        // 'tail'. If there is not enough space in 'tail', then we take the least\n        // costly scorers and advance them.\n        for (DisiWrapper s = lead; s != null; s = s.next) {\n          final DisiWrapper evicted = insertTailWithOverFlow(s);\n          if (evicted != null) {\n            if (evicted.doc == doc) {\n              evicted.doc = evicted.iterator.nextDoc();\n            } else {\n              evicted.doc = evicted.iterator.advance(doc + 1);\n            }\n            head.add(evicted);\n          }\n        }\n\n        setDocAndFreq();\n        return doNext();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        // Same logic as in nextDoc\n        for (DisiWrapper s = lead; s != null; s = s.next) {\n          final DisiWrapper evicted = insertTailWithOverFlow(s);\n          if (evicted != null) {\n            evicted.doc = evicted.iterator.advance(target);\n            head.add(evicted);\n          }\n        }\n\n        // But this time there might also be scorers in 'head' behind the desired\n        // target so we need to do the same thing that we did on 'lead' on 'head'\n        DisiWrapper headTop = head.top();\n        while (headTop.doc < target) {\n          final DisiWrapper evicted = insertTailWithOverFlow(headTop);\n          // We know that the tail is full since it contains at most\n          // minShouldMatch - 1 entries and we just moved at least minShouldMatch\n          // entries to it, so evicted is not null\n          evicted.doc = evicted.iterator.advance(target);\n          headTop = head.updateTop(evicted);\n        }\n\n        setDocAndFreq();\n        return doNext();\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baaf56c979845f343a1699ffbd02afb3e6e08093","date":1503508180,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator());\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        assert doc == lead.doc;\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        // We are moving to the next doc ID, so scorers in 'lead' need to go in\n        // 'tail'. If there is not enough space in 'tail', then we take the least\n        // costly scorers and advance them.\n        for (DisiWrapper s = lead; s != null; s = s.next) {\n          final DisiWrapper evicted = insertTailWithOverFlow(s);\n          if (evicted != null) {\n            if (evicted.doc == doc) {\n              evicted.doc = evicted.iterator.nextDoc();\n            } else {\n              evicted.doc = evicted.iterator.advance(doc + 1);\n            }\n            head.add(evicted);\n          }\n        }\n\n        setDocAndFreq();\n        return doNext();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        // Same logic as in nextDoc\n        for (DisiWrapper s = lead; s != null; s = s.next) {\n          final DisiWrapper evicted = insertTailWithOverFlow(s);\n          if (evicted != null) {\n            evicted.doc = evicted.iterator.advance(target);\n            head.add(evicted);\n          }\n        }\n\n        // But this time there might also be scorers in 'head' behind the desired\n        // target so we need to do the same thing that we did on 'lead' on 'head'\n        DisiWrapper headTop = head.top();\n        while (headTop.doc < target) {\n          final DisiWrapper evicted = insertTailWithOverFlow(headTop);\n          // We know that the tail is full since it contains at most\n          // minShouldMatch - 1 entries and we just moved at least minShouldMatch\n          // entries to it, so evicted is not null\n          evicted.doc = evicted.iterator.advance(target);\n          headTop = head.updateTop(evicted);\n        }\n\n        setDocAndFreq();\n        return doNext();\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator());\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        assert doc == lead.doc;\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        // We are moving to the next doc ID, so scorers in 'lead' need to go in\n        // 'tail'. If there is not enough space in 'tail', then we take the least\n        // costly scorers and advance them.\n        for (DisiWrapper s = lead; s != null; s = s.next) {\n          final DisiWrapper evicted = insertTailWithOverFlow(s);\n          if (evicted != null) {\n            if (evicted.doc == doc) {\n              evicted.doc = evicted.iterator.nextDoc();\n            } else {\n              evicted.doc = evicted.iterator.advance(doc + 1);\n            }\n            head.add(evicted);\n          }\n        }\n\n        setDocAndFreq();\n        return doNext();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        // Same logic as in nextDoc\n        for (DisiWrapper s = lead; s != null; s = s.next) {\n          final DisiWrapper evicted = insertTailWithOverFlow(s);\n          if (evicted != null) {\n            evicted.doc = evicted.iterator.advance(target);\n            head.add(evicted);\n          }\n        }\n\n        // But this time there might also be scorers in 'head' behind the desired\n        // target so we need to do the same thing that we did on 'lead' on 'head'\n        DisiWrapper headTop = head.top();\n        while (headTop.doc < target) {\n          final DisiWrapper evicted = insertTailWithOverFlow(headTop);\n          // We know that the tail is full since it contains at most\n          // minShouldMatch - 1 entries and we just moved at least minShouldMatch\n          // entries to it, so evicted is not null\n          evicted.doc = evicted.iterator.advance(target);\n          headTop = head.updateTop(evicted);\n        }\n\n        setDocAndFreq();\n        return doNext();\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator());\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() {\n    return new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        assert doc == lead.doc;\n        return doc;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        // We are moving to the next doc ID, so scorers in 'lead' need to go in\n        // 'tail'. If there is not enough space in 'tail', then we take the least\n        // costly scorers and advance them.\n        for (DisiWrapper s = lead; s != null; s = s.next) {\n          final DisiWrapper evicted = insertTailWithOverFlow(s);\n          if (evicted != null) {\n            if (evicted.doc == doc) {\n              evicted.doc = evicted.iterator.nextDoc();\n            } else {\n              evicted.doc = evicted.iterator.advance(doc + 1);\n            }\n            head.add(evicted);\n          }\n        }\n\n        setDocAndFreq();\n        return doNext();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        // Same logic as in nextDoc\n        for (DisiWrapper s = lead; s != null; s = s.next) {\n          final DisiWrapper evicted = insertTailWithOverFlow(s);\n          if (evicted != null) {\n            evicted.doc = evicted.iterator.advance(target);\n            head.add(evicted);\n          }\n        }\n\n        // But this time there might also be scorers in 'head' behind the desired\n        // target so we need to do the same thing that we did on 'lead' on 'head'\n        DisiWrapper headTop = head.top();\n        while (headTop.doc < target) {\n          final DisiWrapper evicted = insertTailWithOverFlow(headTop);\n          // We know that the tail is full since it contains at most\n          // minShouldMatch - 1 entries and we just moved at least minShouldMatch\n          // entries to it, so evicted is not null\n          evicted.doc = evicted.iterator.advance(target);\n          headTop = head.updateTop(evicted);\n        }\n\n        setDocAndFreq();\n        return doNext();\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"baaf56c979845f343a1699ffbd02afb3e6e08093":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["7dd748bb245633a8195281556bb0e68a6ea97d18","182384b20c064aa16998ddebe9f36e649279c5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["7dd748bb245633a8195281556bb0e68a6ea97d18","baaf56c979845f343a1699ffbd02afb3e6e08093"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182384b20c064aa16998ddebe9f36e649279c5a6"]},"commit2Childs":{"baaf56c979845f343a1699ffbd02afb3e6e08093":["182384b20c064aa16998ddebe9f36e649279c5a6"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["baaf56c979845f343a1699ffbd02afb3e6e08093","3a7809d1d753b67f48b1a706e17034bf8b624ea3","182384b20c064aa16998ddebe9f36e649279c5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}