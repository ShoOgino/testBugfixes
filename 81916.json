{"path":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#NumericRangeTermEnum(IndexReader).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#NumericRangeTermEnum(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    NumericRangeTermEnum(final IndexReader reader) throws IOException {\n      this.reader = reader;\n      \n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) minBound++;\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) maxBound--;\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            //@Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) minBound++;\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) maxBound--;\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            //@Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n      \n      // seek to first term\n      next();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff","date":1246028569,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#NumericRangeTermEnum(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#NumericRangeTermEnum(IndexReader).mjava","sourceNew":"    NumericRangeTermEnum(final IndexReader reader) throws IOException {\n      this.reader = reader;\n      \n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            //@Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            //@Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n      \n      // seek to first term\n      next();\n    }\n\n","sourceOld":"    NumericRangeTermEnum(final IndexReader reader) throws IOException {\n      this.reader = reader;\n      \n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) minBound++;\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) maxBound--;\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            //@Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) minBound++;\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) maxBound--;\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            //@Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n      \n      // seek to first term\n      next();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#NumericRangeTermEnum(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#NumericRangeTermEnum(IndexReader).mjava","sourceNew":"    NumericRangeTermEnum(final IndexReader reader) throws IOException {\n      this.reader = reader;\n      \n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n      \n      // seek to first term\n      next();\n    }\n\n","sourceOld":"    NumericRangeTermEnum(final IndexReader reader) throws IOException {\n      this.reader = reader;\n      \n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            //@Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            //@Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n      \n      // seek to first term\n      next();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#NumericRangeTermEnum(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#NumericRangeTermEnum(IndexReader).mjava","sourceNew":"    NumericRangeTermEnum(final IndexReader reader) throws IOException {\n      this.reader = reader;\n      \n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n      \n      // seek to first term\n      next();\n    }\n\n","sourceOld":"    NumericRangeTermEnum(final IndexReader reader) throws IOException {\n      this.reader = reader;\n      \n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(String minPrefixCoded, String maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n      \n      // seek to first term\n      next();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff":["53b6c192847de8643a5da505cc433cbf8476a175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70a9e462a51fd525218b83cdc33329f5ee00ca20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"53b6c192847de8643a5da505cc433cbf8476a175":["7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff"],"7203bbd52dabe8a6e36d5bc785f4be70ba0f61ff":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}