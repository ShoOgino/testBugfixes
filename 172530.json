{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testBinaryFields().mjava","sourceNew":null,"sourceOld":"    public void testBinaryFields() throws IOException {\n        Directory dir = newDirectory();\n        byte[] bin = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        \n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n        \n        for (int i = 0; i < 10; i++) {\n          addDoc(writer, \"document number \" + (i + 1));\n          addDocumentWithFields(writer);\n          addDocumentWithDifferentFields(writer);\n          addDocumentWithTermVectorFields(writer);\n        }\n        writer.close();\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        Document doc = new Document();\n        doc.add(new StoredField(\"bin1\", bin));\n        doc.add(new TextField(\"junk\", \"junk text\"));\n        writer.addDocument(doc);\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        Document doc2 = reader.document(reader.maxDoc() - 1);\n        IndexableField[] fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        IndexableField b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        BytesRef bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        // force merge\n\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.forceMerge(1);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        doc2 = reader.document(reader.maxDoc() - 1);\n        fields = doc2.getFields(\"bin1\");\n        assertNotNull(fields);\n        assertEquals(1, fields.length);\n        b1 = fields[0];\n        assertTrue(b1.binaryValue() != null);\n        bytesRef = b1.binaryValue();\n        assertEquals(bin.length, bytesRef.length);\n        for (int i = 0; i < bin.length; i++) {\n          assertEquals(bin[i], bytesRef.bytes[i + bytesRef.offset]);\n        }\n        reader.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}