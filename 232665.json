{"path":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","commits":[{"id":"a92cc2b646f64bb8587798072b1685133c7a54a9","date":1176237767,"type":1,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryFilter#bits(IndexReader).mjava","sourceNew":"  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n    return bits;\n  }\n\n","sourceOld":"  public BitSet bits(IndexReader reader) throws IOException {\n\n    if (cache == null) {\n      cache = new WeakHashMap();\n    }\n\n    synchronized (cache) {  // check cache\n      BitSet cached = (BitSet) cache.get(reader);\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","sourceNew":"  /**\n   * @deprecated Use {@link #getDocIdSet(IndexReader)} instead.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n    return bits;\n  }\n\n","sourceOld":"  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","sourceNew":"  /**\n   * @deprecated Use {@link #getDocIdSet(IndexReader)} instead.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new MultiReaderHitCollector() {\n      private int base = -1;\n      public final void collect(int doc, float score) {\n        bits.set(doc + base);  // set bit for hit\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n    });\n    return bits;\n  }\n\n","sourceOld":"  /**\n   * @deprecated Use {@link #getDocIdSet(IndexReader)} instead.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) {\n        bits.set(doc);  // set bit for hit\n      }\n    });\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","sourceNew":"  /**\n   * @deprecated Use {@link #getDocIdSet(IndexReader)} instead.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new Collector() {\n      private int base = 0;\n      public void setScorer(Scorer scorer) throws IOException {\n        // score is not needed by this collector \n      }\n      public final void collect(int doc) {\n        bits.set(doc + base);  // set bit for hit\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n    });\n    return bits;\n  }\n\n","sourceOld":"  /**\n   * @deprecated Use {@link #getDocIdSet(IndexReader)} instead.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new MultiReaderHitCollector() {\n      private int base = -1;\n      public final void collect(int doc, float score) {\n        bits.set(doc + base);  // set bit for hit\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n    });\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","sourceNew":"  /**\n   * @deprecated Use {@link #getDocIdSet(IndexReader)} instead.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new Collector() {\n      private int base = 0;\n      public void setScorer(Scorer scorer) throws IOException {\n        // score is not needed by this collector \n      }\n      public final void collect(int doc) {\n        bits.set(doc + base);  // set bit for hit\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    return bits;\n  }\n\n","sourceOld":"  /**\n   * @deprecated Use {@link #getDocIdSet(IndexReader)} instead.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new Collector() {\n      private int base = 0;\n      public void setScorer(Scorer scorer) throws IOException {\n        // score is not needed by this collector \n      }\n      public final void collect(int doc) {\n        bits.set(doc + base);  // set bit for hit\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n    });\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bd365049a486e1ddff4a17c8aaab9b002969a0","date":1254951825,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/QueryWrapperFilter#bits(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated Use {@link #getDocIdSet(IndexReader)} instead.\n   */\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n\n    new IndexSearcher(reader).search(query, new Collector() {\n      private int base = 0;\n      public void setScorer(Scorer scorer) throws IOException {\n        // score is not needed by this collector \n      }\n      public final void collect(int doc) {\n        bits.set(doc + base);  // set bit for hit\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a92cc2b646f64bb8587798072b1685133c7a54a9"],"a92cc2b646f64bb8587798072b1685133c7a54a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["052fac7830290bd38a04cddee1a121ee07656b56"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a92cc2b646f64bb8587798072b1685133c7a54a9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a92cc2b646f64bb8587798072b1685133c7a54a9":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}