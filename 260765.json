{"path":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PerFieldCodecWrapper#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Set<Codec> seen = new HashSet<Codec>();\n    final Codec[] codecArray = codecs;\n    for (Codec codec : codecArray) {\n      if (!seen.contains(codec)) {\n        seen.add(codec);\n        codec.files(dir, info, files);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    Iterator<Codec> it = fields.values().iterator();\n    Set<Codec> seen = new HashSet<Codec>();\n    while(it.hasNext()) {\n      final Codec codec = it.next();\n      if (!seen.contains(codec)) {\n        seen.add(codec);\n        codec.files(dir, info, files);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PerFieldCodecWrapper#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Set<Codec> seen = new HashSet<Codec>();\n    final Codec[] codecArray = codecs;\n    for (Codec codec : codecArray) {\n      if (!seen.contains(codec)) {\n        seen.add(codec);\n        codec.files(dir, info, files);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    Iterator<Codec> it = fields.values().iterator();\n    Set<Codec> seen = new HashSet<Codec>();\n    while(it.hasNext()) {\n      final Codec codec = it.next();\n      if (!seen.contains(codec)) {\n        seen.add(codec);\n        codec.files(dir, info, files);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, \"\"+i, files);\n    }      \n      \n  }\n\n","sourceOld":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Set<Codec> seen = new HashSet<Codec>();\n    final Codec[] codecArray = codecs;\n    for (Codec codec : codecArray) {\n      if (!seen.contains(codec)) {\n        seen.add(codec);\n        codec.files(dir, info, files);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, \"\"+i, files);\n    }      \n      \n  }\n\n","sourceOld":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Set<Codec> seen = new HashSet<Codec>();\n    final Codec[] codecArray = codecs;\n    for (Codec codec : codecArray) {\n      if (!seen.contains(codec)) {\n        seen.add(codec);\n        codec.files(dir, info, files);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, \"\"+i, files);\n    }      \n      \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, i, files);\n    }      \n      \n  }\n\n","sourceOld":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, \"\"+i, files);\n    }      \n      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, i, files);\n    }      \n      \n  }\n\n","sourceOld":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, \"\"+i, files);\n    }      \n      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, i, files);\n    }      \n      \n  }\n\n","sourceOld":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, \"\"+i, files);\n    }      \n      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentCodecs#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":null,"sourceOld":"  void files(Directory dir, SegmentInfo info, Set<String> files)\n      throws IOException {\n    final Codec[] codecArray = codecs;\n    for (int i = 0; i < codecArray.length; i++) {\n      codecArray[i].files(dir, info, i, files);\n    }      \n      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","2e8d7ba2175f47e280231533f7d3016249cea88b"],"7b91922b55d15444d554721b352861d028eb8278":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","d619839baa8ce5503e496b94a9e42ad6f079293f"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85a883878c0af761245ab048babc63d099f835f3","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7b91922b55d15444d554721b352861d028eb8278"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","9ab1f5591dc05f1f2b5407d809c9699f75554a32","d619839baa8ce5503e496b94a9e42ad6f079293f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","85a883878c0af761245ab048babc63d099f835f3"],"85a883878c0af761245ab048babc63d099f835f3":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}