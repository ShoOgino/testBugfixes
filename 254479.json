{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(DocsEnum,boolean,Sorter.DocMap).mjava","commits":[{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(DocsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(DocsEnum,boolean,int[]).mjava","sourceNew":"    public SortingDocsEnum(final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.withFreqs = withFreqs;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        freqs = new int[docs.length];\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n        SorterTemplate sorter = new DocFreqSorterTemplate(docs, freqs);\n        sorter.quickSort(0, i - 1);\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n        Arrays.sort(docs, 0, i);\n      }\n      upto = i;\n    }\n\n","sourceOld":"    public SortingDocsEnum(final DocsEnum in, boolean withFreqs, final int[] old2new) throws IOException {\n      super(in);\n      this.withFreqs = withFreqs;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        freqs = new int[docs.length];\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = old2new[doc];\n          freqs[i] = in.freq();\n          ++i;\n        }\n        SorterTemplate sorter = new DocFreqSorterTemplate(docs, freqs);\n        sorter.quickSort(0, i - 1);\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = old2new[doc];\n        }\n        Arrays.sort(docs, 0, i);\n      }\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d666f5b596b5ce43296739e9453ff761c7ddde3f","date":1363451610,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(DocsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(DocsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    public SortingDocsEnum(final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.withFreqs = withFreqs;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        freqs = new int[docs.length];\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      new DocFreqSorterTemplate(docs, freqs).timSort(0, i - 1);\n      upto = i;\n    }\n\n","sourceOld":"    public SortingDocsEnum(final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.withFreqs = withFreqs;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        freqs = new int[docs.length];\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n        SorterTemplate sorter = new DocFreqSorterTemplate(docs, freqs);\n        sorter.quickSort(0, i - 1);\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n        Arrays.sort(docs, 0, i);\n      }\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a260e1fefced66a58d52044266f9fa20d81ae74b","date":1363613778,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(DocsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      new DocFreqSorterTemplate(docs, freqs).timSort(0, i - 1);\n      upto = i;\n    }\n\n","sourceOld":"    public SortingDocsEnum(final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.withFreqs = withFreqs;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        freqs = new int[docs.length];\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      new DocFreqSorterTemplate(docs, freqs).timSort(0, i - 1);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a260e1fefced66a58d52044266f9fa20d81ae74b":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"d666f5b596b5ce43296739e9453ff761c7ddde3f":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a260e1fefced66a58d52044266f9fa20d81ae74b"]},"commit2Childs":{"a260e1fefced66a58d52044266f9fa20d81ae74b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d666f5b596b5ce43296739e9453ff761c7ddde3f":["a260e1fefced66a58d52044266f9fa20d81ae74b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}