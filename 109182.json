{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testLookupRandomStrings().mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testLookupRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"requires english dictionary\")\n  public void testLookupRandomStrings() throws Exception {\n    dict = new HashSet<>(words);\n    List<String> tokens = new ArrayList<>();\n    for (int i = 0; i < 1_000_000; i++) {\n      String s;\n      do  {\n        s = randomString();\n      } while (dict.contains(s));\n      tokens.add(s);\n    }\n    final FST<Object> fstBase = buildEnglishFST(false);\n    final FST<Object> fstOpto = buildFST(words, true);\n    long seed = random().nextLong();\n    for (int i = 0; i < 10; i++) {\n      random.setSeed(seed);\n      long timeBase = timeLookupRandomStrings(fstBase, tokens);\n      random.setSeed(seed);\n      long timeOpto = timeLookupRandomStrings(fstOpto, tokens);\n      printf(\"Sought %d absent terms in %d ms (base) / %d ms (opto), a %d%% change\", COUNT, nsToMs(timeBase), nsToMs(timeOpto),\n             -100 * (timeBase - timeOpto) / timeBase);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a1204a92958bea883656169000a87a6c55c2d0","date":1562106073,"type":4,"author":"Michael Sokolov","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testLookupRandomStrings().mjava","sourceNew":null,"sourceOld":"  @Ignore(\"requires english dictionary\")\n  public void testLookupRandomStrings() throws Exception {\n    dict = new HashSet<>(words);\n    List<String> tokens = new ArrayList<>();\n    for (int i = 0; i < 1_000_000; i++) {\n      String s;\n      do  {\n        s = randomString();\n      } while (dict.contains(s));\n      tokens.add(s);\n    }\n    final FST<Object> fstBase = buildEnglishFST(false);\n    final FST<Object> fstOpto = buildFST(words, true);\n    long seed = random().nextLong();\n    for (int i = 0; i < 10; i++) {\n      random.setSeed(seed);\n      long timeBase = timeLookupRandomStrings(fstBase, tokens);\n      random.setSeed(seed);\n      long timeOpto = timeLookupRandomStrings(fstOpto, tokens);\n      printf(\"Sought %d absent terms in %d ms (base) / %d ms (opto), a %d%% change\", COUNT, nsToMs(timeBase), nsToMs(timeOpto),\n             -100 * (timeBase - timeOpto) / timeBase);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59a1204a92958bea883656169000a87a6c55c2d0":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a1204a92958bea883656169000a87a6c55c2d0"]},"commit2Childs":{"59a1204a92958bea883656169000a87a6c55c2d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["59a1204a92958bea883656169000a87a6c55c2d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}