{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","commits":[{"id":"1e5f642aea415d0cbee35d1b3208b193a62d7f15","date":1439490669,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"791c4fb1ff970967cf1802cf4d4875ba12c2eb01","date":1446659977,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7","date":1501726570,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n    String zkDir = createTempDir(\"testExternalClusterStateChangeBehavior\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(zkClient);\n      close(overseerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["1e5f642aea415d0cbee35d1b3208b193a62d7f15","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testExternalClusterStateChangeBehavior().mjava","sourceNew":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n      createCollection(\"c1\", 1);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      final String testCollectionName = \"test\";\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + testCollectionName, true);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", testCollectionName,\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      // Wait for the overseer to create state.json for the collection\n      waitForCollections(reader, testCollectionName);\n\n      final String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + testCollectionName + \"/state.json\";\n      byte[] data = zkClient.getData(path, null, null, true);\n      // Simulate an external modification of state.json\n      zkClient.setData(path, data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", testCollectionName,\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", testCollectionName,\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      // Verify replica creation worked ok in spite of external update of state.json (although in theory such updates\n      // do not happen unless an old overseer is still updating ZK after a new Overseer got elected...).\n      verifyReplicaStatus(reader, testCollectionName, \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExternalClusterStateChangeBehavior() throws Exception {\n\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      zkClient.create(\"/collections/test\", null, CreateMode.PERSISTENT, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"c1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.DOWN);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"c1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(\"/clusterstate.json\", null, stat, true);\n      // Simulate an external modification\n      zkClient.setData(\"/clusterstate.json\", data, true);\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", \"test\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          DocCollection.STATE_FORMAT, \"2\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATESHARD.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.REPLICATION_FACTOR, \"1\"\n      );\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDREPLICA.toLower(),\n          \"collection\", \"test\",\n          ZkStateReader.SHARD_ID_PROP, \"x\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.STATE_PROP, Replica.State.DOWN.toString()\n      );\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, \"test\");\n      verifyReplicaStatus(reader, \"test\", \"x\", \"core_node1\", Replica.State.DOWN);\n\n      waitForCollections(reader, \"c1\");\n      verifyReplicaStatus(reader, \"c1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","bugFix":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01","a9b4296bd51ca61b482138791478afdd0f7d3a3d","1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01","19498030e0adab22f604f935cae3c03dcf0952a6"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["af2638813028b254a88b418ebeafb541afb49653"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["af2638813028b254a88b418ebeafb541afb49653","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["af2638813028b254a88b418ebeafb541afb49653","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"19498030e0adab22f604f935cae3c03dcf0952a6":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","6240b74b884c5587f2a4062dd27d6c32bf228889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}