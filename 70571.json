{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","pathOld":"/dev/null","sourceNew":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n        \n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","pathOld":"/dev/null","sourceNew":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n        \n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","pathOld":"/dev/null","sourceNew":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n        \n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c824b5854f7ad30cd53f0634fc7cb533df74590b","date":1344024196,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","sourceNew":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n        \n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","sourceNew":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardLeaders().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","sourceNew":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n            break; // we found the leader for this shard\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n        \n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardLeaders().mjava","sourceNew":null,"sourceOld":"\tprivate void getShardLeaders() {\n    Set<Entry<String,Map<String,Slice>>> collections = collectionStates.entrySet();\n    for (Entry<String,Map<String,Slice>> collection : collections) {\n      Map<String,Slice> state = collection.getValue();\n      Set<Entry<String,Slice>> slices = state.entrySet();\n      for (Entry<String,Slice> sliceEntry : slices) {\n        Slice slice = sliceEntry.getValue();\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        Set<Entry<String,ZkNodeProps>> shardsEntries = shards.entrySet();\n        for (Entry<String,ZkNodeProps> shardEntry : shardsEntries) {\n          ZkNodeProps props = shardEntry.getValue();\n          if (props.containsKey(ZkStateReader.LEADER_PROP)) {\n            Map<String,ZkNodeProps> leadersForCollection = leaders.get(collection.getKey());\n            if (leadersForCollection == null) {\n              leadersForCollection = new HashMap<String,ZkNodeProps>();\n        \n              leaders.put(collection.getKey(), leadersForCollection);\n            }\n            leadersForCollection.put(sliceEntry.getKey(), props);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["c824b5854f7ad30cd53f0634fc7cb533df74590b"],"c824b5854f7ad30cd53f0634fc7cb533df74590b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c824b5854f7ad30cd53f0634fc7cb533df74590b":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c824b5854f7ad30cd53f0634fc7cb533df74590b","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}