{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#readVectors().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#readVectors().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#readVectors().mjava","sourceNew":"    private void readVectors() throws IOException {\n      termAndPostings = new TermAndPostings[numTerms];\n      BytesRef lastTerm = new BytesRef();\n      for (int i = 0; i < numTerms; i++) {\n        TermAndPostings t = new TermAndPostings();\n        BytesRef term = new BytesRef();\n        term.copyBytes(lastTerm);\n        final int start = tvf.readVInt();\n        final int deltaLen = tvf.readVInt();\n        term.length = start + deltaLen;\n        term.grow(term.length);\n        tvf.readBytes(term.bytes, start, deltaLen);\n        t.term = term;\n        int freq = tvf.readVInt();\n        t.freq = freq;\n        \n        if (storePositions) {\n          int positions[] = new int[freq];\n          int pos = 0;\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            pos += tvf.readVInt();\n            positions[posUpto] = pos;\n          }\n          t.positions = positions;\n        }\n\n        if (storeOffsets) {\n          int startOffsets[] = new int[freq];\n          int endOffsets[] = new int[freq];\n          int offset = 0;\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            startOffsets[posUpto] = offset + tvf.readVInt();\n            offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n          }\n          t.startOffsets = startOffsets;\n          t.endOffsets = endOffsets;\n        }\n        lastTerm.copyBytes(term);\n        termAndPostings[i] = t;\n      }\n    }\n\n","sourceOld":"    private void readVectors() throws IOException {\n      termAndPostings = new TermAndPostings[numTerms];\n      BytesRef lastTerm = new BytesRef();\n      for (int i = 0; i < numTerms; i++) {\n        TermAndPostings t = new TermAndPostings();\n        BytesRef term = new BytesRef();\n        term.copyBytes(lastTerm);\n        final int start = tvf.readVInt();\n        final int deltaLen = tvf.readVInt();\n        term.length = start + deltaLen;\n        term.grow(term.length);\n        tvf.readBytes(term.bytes, start, deltaLen);\n        t.term = term;\n        int freq = tvf.readVInt();\n        t.freq = freq;\n        \n        if (storePositions) {\n          int positions[] = new int[freq];\n          int pos = 0;\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            pos += tvf.readVInt();\n            positions[posUpto] = pos;\n          }\n          t.positions = positions;\n        }\n\n        if (storeOffsets) {\n          int startOffsets[] = new int[freq];\n          int endOffsets[] = new int[freq];\n          int offset = 0;\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            startOffsets[posUpto] = offset + tvf.readVInt();\n            offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n          }\n          t.startOffsets = startOffsets;\n          t.endOffsets = endOffsets;\n        }\n        lastTerm.copyBytes(term);\n        termAndPostings[i] = t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader.TVTermsEnum#readVectors().mjava","sourceNew":null,"sourceOld":"    private void readVectors() throws IOException {\n      termAndPostings = new TermAndPostings[numTerms];\n      BytesRef lastTerm = new BytesRef();\n      for (int i = 0; i < numTerms; i++) {\n        TermAndPostings t = new TermAndPostings();\n        BytesRef term = new BytesRef();\n        term.copyBytes(lastTerm);\n        final int start = tvf.readVInt();\n        final int deltaLen = tvf.readVInt();\n        term.length = start + deltaLen;\n        term.grow(term.length);\n        tvf.readBytes(term.bytes, start, deltaLen);\n        t.term = term;\n        int freq = tvf.readVInt();\n        t.freq = freq;\n        \n        if (storePositions) {\n          int positions[] = new int[freq];\n          int pos = 0;\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            pos += tvf.readVInt();\n            positions[posUpto] = pos;\n          }\n          t.positions = positions;\n        }\n\n        if (storeOffsets) {\n          int startOffsets[] = new int[freq];\n          int endOffsets[] = new int[freq];\n          int offset = 0;\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            startOffsets[posUpto] = offset + tvf.readVInt();\n            offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n          }\n          t.startOffsets = startOffsets;\n          t.endOffsets = endOffsets;\n        }\n        lastTerm.copyBytes(term);\n        termAndPostings[i] = t;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}