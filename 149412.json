{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(BasicStats,Explanation,double).mjava","commits":[{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(BasicStats,Explanation,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(BasicStats,int,Explanation,double).mjava","sourceNew":"  @Override\n  protected Explanation explain(\n      BasicStats stats, Explanation freq, double docLen) {    \n    List<Explanation> subs = new ArrayList<>();\n    double f = freq.getValue().doubleValue();\n    explain(subs, stats, f, docLen);\n    \n    double score = tf(stats, f, docLen)\n        * ln(stats, f, docLen)\n        * tfln(stats, f, docLen)\n        * idf(stats, f, docLen)\n        - gamma(stats, f, docLen);\n\n    Explanation explanation = Explanation.match((float) score,\n        \"score(\" + getClass().getSimpleName() + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n    if (stats.boost != 1f) {\n      explanation = Explanation.match((float) (score * stats.boost), \"Boosted score, computed as (score * boost) from:\",\n          explanation,\n          Explanation.match((float) stats.boost, \"Query boost\"));\n    }\n    if (score < 0) {\n      explanation = Explanation.match(0, \"max of:\",\n          Explanation.match(0, \"Minimum legal score\"),\n          explanation);\n    }\n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  protected Explanation explain(\n      BasicStats stats, int doc, Explanation freq, double docLen) {    \n    List<Explanation> subs = new ArrayList<>();\n    double f = freq.getValue().doubleValue();\n    explain(subs, stats, doc, f, docLen);\n    \n    double score = tf(stats, f, docLen)\n        * ln(stats, f, docLen)\n        * tfln(stats, f, docLen)\n        * idf(stats, f, docLen)\n        - gamma(stats, f, docLen);\n\n    Explanation explanation = Explanation.match((float) score,\n        \"score(\" + getClass().getSimpleName() + \", doc=\" + doc + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n    if (stats.boost != 1f) {\n      explanation = Explanation.match((float) (score * stats.boost), \"Boosted score, computed as (score * boost) from:\",\n          explanation,\n          Explanation.match((float) stats.boost, \"Query boost\"));\n    }\n    if (score < 0) {\n      explanation = Explanation.match(0, \"max of:\",\n          Explanation.match(0, \"Minimum legal score\"),\n          explanation);\n    }\n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(BasicStats,Explanation,double).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Explanation explain(\n      BasicStats stats, Explanation freq, double docLen) {    \n    List<Explanation> subs = new ArrayList<>();\n    double f = freq.getValue().doubleValue();\n    explain(subs, stats, f, docLen);\n    \n    double score = tf(stats, f, docLen)\n        * ln(stats, f, docLen)\n        * tfln(stats, f, docLen)\n        * idf(stats, f, docLen)\n        - gamma(stats, f, docLen);\n\n    Explanation explanation = Explanation.match((float) score,\n        \"score(\" + getClass().getSimpleName() + \", freq=\" + freq.getValue() +\"), computed from:\",\n        subs);\n    if (stats.boost != 1f) {\n      explanation = Explanation.match((float) (score * stats.boost), \"Boosted score, computed as (score * boost) from:\",\n          explanation,\n          Explanation.match((float) stats.boost, \"Query boost\"));\n    }\n    if (score < 0) {\n      explanation = Explanation.match(0, \"max of:\",\n          Explanation.match(0, \"Minimum legal score\"),\n          explanation);\n    }\n    return explanation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}