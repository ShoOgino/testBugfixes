{"path":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","sourceNew":"      protected void processPayload(Similarity similarity) throws IOException {\n        if (positions.isPayloadAvailable()) {\n          payload = positions.getPayload(payload, 0);\n          payloadScore = function.currentScore(doc, term.field(),\n              spans.start(), spans.end(), payloadsSeen, payloadScore,\n              similarity.scorePayload(doc, term.field(), spans.start(), spans\n                  .end(), payload, 0, positions.getPayloadLength()));\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","sourceOld":"      protected void processPayload(Similarity similarity) throws IOException {\n        if (positions.isPayloadAvailable()) {\n          payload = positions.getPayload(payload, 0);\n          payloadScore = function.currentScore(doc, term.field(),\n              spans.start(), spans.end(), payloadsSeen, payloadScore,\n              similarity.scorePayload(doc, term.field(), spans.start(), spans\n                  .end(), payload, 0, positions.getPayloadLength()));\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","sourceNew":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, term.field(), spans.start(),\n                                                                         spans.end(), payload.bytes,\n                                                                         payload.offset,\n                                                                         payload.length));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, term.field(), spans.start(),\n                                                                         spans.end(), null,\n                                                                         0,\n                                                                         0));\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","sourceOld":"      protected void processPayload(Similarity similarity) throws IOException {\n        if (positions.isPayloadAvailable()) {\n          payload = positions.getPayload(payload, 0);\n          payloadScore = function.currentScore(doc, term.field(),\n              spans.start(), spans.end(), payloadsSeen, payloadScore,\n              similarity.scorePayload(doc, term.field(), spans.start(), spans\n                  .end(), payload, 0, positions.getPayloadLength()));\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","sourceNew":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, spans.start(),\n                                                                         spans.end(), payload.bytes,\n                                                                         payload.offset,\n                                                                         payload.length));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, spans.start(),\n                                                                         spans.end(), null,\n                                                                         0,\n                                                                         0));\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","sourceOld":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, term.field(), spans.start(),\n                                                                         spans.end(), payload.bytes,\n                                                                         payload.offset,\n                                                                         payload.length));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, term.field(), spans.start(),\n                                                                         spans.end(), null,\n                                                                         0,\n                                                                         0));\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","sourceNew":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, spans.start(),\n                                                                         spans.end(), payload.bytes,\n                                                                         payload.offset,\n                                                                         payload.length));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, spans.start(),\n                                                                         spans.end(), null,\n                                                                         0,\n                                                                         0));\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","sourceOld":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, term.field(), spans.start(),\n                                                                         spans.end(), payload.bytes,\n                                                                         payload.offset,\n                                                                         payload.length));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, term.field(), spans.start(),\n                                                                         spans.end(), null,\n                                                                         0,\n                                                                         0));\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","sourceNew":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, spans.start(),\n                                                                         spans.end(), payload.bytes,\n                                                                         payload.offset,\n                                                                         payload.length));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, spans.start(),\n                                                                         spans.end(), null,\n                                                                         0,\n                                                                         0));\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","sourceOld":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, term.field(), spans.start(),\n                                                                         spans.end(), payload.bytes,\n                                                                         payload.offset,\n                                                                         payload.length));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, term.field(), spans.start(),\n                                                                         spans.end(), null,\n                                                                         0,\n                                                                         0));\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0952c55e47c70ea2d8c8e2b634da066f9bde4e38","date":1310506639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","sourceNew":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 docScorer.computePayloadFactor(doc, spans.start(), spans.end(), payload));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore, 1F);\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","sourceOld":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, spans.start(),\n                                                                         spans.end(), payload.bytes,\n                                                                         payload.offset,\n                                                                         payload.length));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 similarity.scorePayload(doc, spans.start(),\n                                                                         spans.end(), null,\n                                                                         0,\n                                                                         0));\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer#processPayload(Similarity).mjava","sourceNew":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 docScorer.computePayloadFactor(doc, spans.start(), spans.end(), payload));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore, 1F);\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","sourceOld":"      protected void processPayload(Similarity similarity) throws IOException {\n        final DocsAndPositionsEnum postings = termSpans.getPostings();\n        if (postings.hasPayload()) {\n          payload = postings.getPayload();\n          if (payload != null) {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore,\n                                                 docScorer.computePayloadFactor(doc, spans.start(), spans.end(), payload));\n          } else {\n            payloadScore = function.currentScore(doc, term.field(),\n                                                 spans.start(), spans.end(), payloadsSeen, payloadScore, 1F);\n          }\n          payloadsSeen++;\n\n        } else {\n          // zero out the payload?\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0952c55e47c70ea2d8c8e2b634da066f9bde4e38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","0952c55e47c70ea2d8c8e2b634da066f9bde4e38","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}