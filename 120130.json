{"path":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ccffc7ac75591780f9b7d53e22b8bea58eb4166","date":1285352709,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o)\n      return true;\n    if (!super.equals(o))\n      return false;\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o)\n      return true;\n    if (!super.equals(o))\n      return false;\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","sourceNew":null,"sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o)\n      return true;\n    if (!super.equals(o))\n      return false;\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","sourceNew":null,"sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o)\n      return true;\n    if (!super.equals(o))\n      return false;\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/function/ValueSourceQuery#equals(Object).mjava","sourceNew":null,"sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o)\n      return true;\n    if (!super.equals(o))\n      return false;\n    if (getClass() != o.getClass()) {\n      return false;\n    }\n    ValueSourceQuery other = (ValueSourceQuery)o;\n    return this.getBoost() == other.getBoost()\n           && this.valSrc.equals(other.valSrc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["1ccffc7ac75591780f9b7d53e22b8bea58eb4166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ccffc7ac75591780f9b7d53e22b8bea58eb4166":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1ccffc7ac75591780f9b7d53e22b8bea58eb4166"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1ccffc7ac75591780f9b7d53e22b8bea58eb4166","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["1ccffc7ac75591780f9b7d53e22b8bea58eb4166","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1ccffc7ac75591780f9b7d53e22b8bea58eb4166":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1ccffc7ac75591780f9b7d53e22b8bea58eb4166","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}