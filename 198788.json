{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new OrQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new OrQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new OrQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new BooleanQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new OrQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new OrQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"310eb79d86136f629020f95e0a4072b5b4a01291","date":1444135437,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor#preProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n          } else {\n            List<QueryNode> children = new ArrayList<>(fields.length);\n\n            children.add(fieldNode);\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n              } catch (CloneNotSupportedException e) {\n                throw new RuntimeException(e);\n              }\n            }\n\n            return new GroupQueryNode(new OrQueryNode(children));\n          }\n        }\n      }\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode preProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof FieldableNode) {\n      this.processChildren = false;\n      FieldableNode fieldNode = (FieldableNode) node;\n\n      if (fieldNode.getField() == null) {\n        CharSequence[] fields = getQueryConfigHandler().get(ConfigurationKeys.MULTI_FIELDS);\n\n        if (fields == null) {\n          throw new IllegalArgumentException(\n              \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_FIELDS should be set on the QueryConfigHandler\");\n        }\n\n        if (fields != null && fields.length > 0) {\n          fieldNode.setField(fields[0]);\n\n          if (fields.length == 1) {\n            return fieldNode;\n\n          } else {\n            LinkedList<QueryNode> children = new LinkedList<>();\n            children.add(fieldNode);\n\n            for (int i = 1; i < fields.length; i++) {\n              try {\n                fieldNode = (FieldableNode) fieldNode.cloneTree();\n                fieldNode.setField(fields[i]);\n\n                children.add(fieldNode);\n\n              } catch (CloneNotSupportedException e) {\n                // should never happen\n              }\n\n            }\n\n            return new GroupQueryNode(new OrQueryNode(children));\n\n          }\n\n        }\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"310eb79d86136f629020f95e0a4072b5b4a01291":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["310eb79d86136f629020f95e0a4072b5b4a01291"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["310eb79d86136f629020f95e0a4072b5b4a01291"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"310eb79d86136f629020f95e0a4072b5b4a01291":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}