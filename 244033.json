{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","sourceNew":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> replicaInfo, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.replicaInfo = replicaInfo;\n    this.violations = violations;\n  }\n\n","sourceOld":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> replicaInfo, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.replicaInfo = replicaInfo;\n    this.violations = violations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","sourceNew":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.violations = violations;\n  }\n\n","sourceOld":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> replicaInfo, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.replicaInfo = replicaInfo;\n    this.violations = violations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","pathOld":"/dev/null","sourceNew":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.violations = violations;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","pathOld":"/dev/null","sourceNew":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.violations = violations;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause],boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","sourceNew":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String,\n      Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, List<Clause> violations, boolean isLive) {\n    this.node = node;\n    this.isLive = isLive;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.violations = violations;\n  }\n\n","sourceOld":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.violations = violations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#Row(String,Cell[],boolean,Map[String,Map[String,List[ReplicaInfo]]],List[Clause]).mjava","sourceNew":"  public Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.violations = violations;\n  }\n\n","sourceOld":"  Row(String node, Cell[] cells, boolean anyValueMissing, Map<String, Map<String, List<ReplicaInfo>>> collectionVsShardVsReplicas, List<Clause> violations) {\n    this.node = node;\n    this.cells = new Cell[cells.length];\n    for (int i = 0; i < this.cells.length; i++) {\n      this.cells[i] = cells[i].copy();\n\n    }\n    this.anyValueMissing = anyValueMissing;\n    this.collectionVsShardVsReplicas = collectionVsShardVsReplicas;\n    this.violations = violations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"1f6b20dc453cee198956989b90aa24bef0232bcf":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","1f6b20dc453cee198956989b90aa24bef0232bcf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}