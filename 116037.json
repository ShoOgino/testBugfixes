{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#pointInTriangle(double,double,double,double,double,double,double,double).mjava","commits":[{"id":"2876300d536c5dc264af3b279464bb01bd71f3a0","date":1548228350,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#pointInTriangle(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  //This should be moved when LatLonShape is moved from sandbox!\n  /**\n   * Compute whether the given x, y point is in a triangle; uses the winding order method */\n  private static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#pointInTriangle(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  //This should be moved when LatLonShape is moved from sandbox!\n  /**\n   * Compute whether the given x, y point is in a triangle; uses the winding order method */\n  private static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1277bce5122ddd82fb8cce58045ae85df0714a4","date":1549639178,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#pointInTriangle(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#pointInTriangle(double,double,double,double,double,double,double,double).mjava","sourceNew":"  //This should be moved when LatLonShape is moved from sandbox!\n  /**\n   * Compute whether the given x, y point is in a triangle; uses the winding order method */\n  protected static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  //This should be moved when LatLonShape is moved from sandbox!\n  /**\n   * Compute whether the given x, y point is in a triangle; uses the winding order method */\n  private static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Component2D#pointInTriangle(double,double,double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#pointInTriangle(double,double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Compute whether the given x, y point is in a triangle; uses the winding order method */\n  static boolean pointInTriangle(double minX, double maxX, double minY, double maxY, double x, double y, double aX, double aY, double bX, double bY, double cX, double cY) {\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY) {\n      int a = orient(x, y, aX, aY, bX, bY);\n      int b = orient(x, y, bX, bY, cX, cY);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cX, cY, aX, aY);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  //This should be moved when LatLonShape is moved from sandbox!\n  /**\n   * Compute whether the given x, y point is in a triangle; uses the winding order method */\n  protected static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#pointInTriangle(double,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  //This should be moved when LatLonShape is moved from sandbox!\n  /**\n   * Compute whether the given x, y point is in a triangle; uses the winding order method */\n  protected static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"2876300d536c5dc264af3b279464bb01bd71f3a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["2876300d536c5dc264af3b279464bb01bd71f3a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["f1277bce5122ddd82fb8cce58045ae85df0714a4","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2876300d536c5dc264af3b279464bb01bd71f3a0"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"2876300d536c5dc264af3b279464bb01bd71f3a0":["f1277bce5122ddd82fb8cce58045ae85df0714a4","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2876300d536c5dc264af3b279464bb01bd71f3a0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}