{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testCreateCollectionPolicy().mjava","commits":[{"id":"611797611928fc8d5afd1c468ef7522f1cc03b61","date":1496234454,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testCreateCollectionPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: 'REPLACEPORT'}]}}\".replace(\"REPLACEPORT\",String.valueOf(port));\n    Utils.fromJSONString(commands);\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = cluster.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollection(\"policiesTest\",2, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b","date":1496237185,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testCreateCollectionPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: 'REPLACEPORT'}]}}\".replace(\"REPLACEPORT\",String.valueOf(port));\n    Utils.fromJSONString(commands);\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = cluster.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: 'REPLACEPORT'}]}}\".replace(\"REPLACEPORT\",String.valueOf(port));\n    Utils.fromJSONString(commands);\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = cluster.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollection(\"policiesTest\",2, 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b":["611797611928fc8d5afd1c468ef7522f1cc03b61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["d118ef896fa37a21d831f7e8ffcb8c44b9afc13b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["611797611928fc8d5afd1c468ef7522f1cc03b61","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d118ef896fa37a21d831f7e8ffcb8c44b9afc13b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}