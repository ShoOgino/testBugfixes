{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#getAllRecords(Reader).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#getAllRecords(Reader).mjava","pathOld":"/dev/null","sourceNew":"  public List<Map<String, Object>> getAllRecords(Reader r) {\n    final List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();\n    streamRecords(r, new Handler() {\n      public void handle(Map<String, Object> record, String s) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b14ccda0bdb398cf86bc3804e1c136a615dbd89b","date":1253269935,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#getAllRecords(Reader).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /** \n   * Uses {@link #streamRecords streamRecords} to parse the XML source but \n   * collects the emitted records into a List which is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   *\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) {\n    final List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();\n    streamRecords(r, new Handler() {\n      public void handle(Map<String, Object> record, String s) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":"  public List<Map<String, Object>> getAllRecords(Reader r) {\n    final List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();\n    streamRecords(r, new Handler() {\n      public void handle(Map<String, Object> record, String s) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f2a93a28913071a0b713be1d4b8a1181388d550","date":1254814948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#getAllRecords(Reader).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /** \n   * Uses {@link #streamRecords streamRecords} to parse the XML source but with\n   * a handler that collects all the emitted records into a single List which \n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) {\n    final List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();\n    streamRecords(r, new Handler() {\n      public void handle(Map<String, Object> record, String s) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":"  /** \n   * Uses {@link #streamRecords streamRecords} to parse the XML source but \n   * collects the emitted records into a List which is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   *\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) {\n    final List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();\n    streamRecords(r, new Handler() {\n      public void handle(Map<String, Object> record, String s) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#getAllRecords(Reader).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#getAllRecords(Reader).mjava","sourceNew":"  /** \n   * Uses {@link #streamRecords streamRecords} to parse the XML source but with\n   * a handler that collects all the emitted records into a single List which \n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) {\n    final List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();\n    streamRecords(r, new Handler() {\n      public void handle(Map<String, Object> record, String s) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","sourceOld":"  /** \n   * Uses {@link #streamRecords streamRecords} to parse the XML source but with\n   * a handler that collects all the emitted records into a single List which \n   * is returned upon completion.\n   *\n   * @param r the stream reader\n   * @return results a List of emitted records\n   */\n  public List<Map<String, Object>> getAllRecords(Reader r) {\n    final List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();\n    streamRecords(r, new Handler() {\n      public void handle(Map<String, Object> record, String s) {\n        results.add(record);\n      }\n    });\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f2a93a28913071a0b713be1d4b8a1181388d550":["b14ccda0bdb398cf86bc3804e1c136a615dbd89b"],"b14ccda0bdb398cf86bc3804e1c136a615dbd89b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["b14ccda0bdb398cf86bc3804e1c136a615dbd89b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7f2a93a28913071a0b713be1d4b8a1181388d550":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b14ccda0bdb398cf86bc3804e1c136a615dbd89b":["7f2a93a28913071a0b713be1d4b8a1181388d550"]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}