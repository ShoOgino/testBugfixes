{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","commits":[{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int,float[]).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch, float[] coord) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.coord = coord;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","pathOld":"/dev/null","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers.stream().map(Scorer::iterator).mapToLong(DocIdSetIterator::cost), scorers.size(), minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers.stream().map(Scorer::iterator).mapToLong(DocIdSetIterator::cost), scorers.size(), minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers, minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ae065817023d886f3de2bc162e9e1ad71c7a02","date":1485164116,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    this.cost = cost(scorers.stream().map(Scorer::iterator).mapToLong(DocIdSetIterator::cost), scorers.size(), minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers.stream().map(Scorer::iterator).mapToLong(DocIdSetIterator::cost), scorers.size(), minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d88f2d3d3107907144cec6455db31ccebd65475a","date":1485171003,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers.stream().map(Scorer::iterator).mapToLong(DocIdSetIterator::cost), scorers.size(), minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    this.cost = cost(scorers.stream().map(Scorer::iterator).mapToLong(DocIdSetIterator::cost), scorers.size(), minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c9e07c6618087aa30ff83c3a54818165e76c3a8","date":1487684665,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#MinShouldMatchSumScorer(Weight,Collection[Scorer],int).mjava","sourceNew":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    this.cost = cost(scorers.stream().map(Scorer::iterator).mapToLong(DocIdSetIterator::cost), scorers.size(), minShouldMatch);\n  }\n\n","sourceOld":"  MinShouldMatchSumScorer(Weight weight, Collection<Scorer> scorers, int minShouldMatch) {\n    super(weight);\n\n    if (minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be <= the number of scorers\");\n    }\n    if (minShouldMatch < 1) {\n      throw new IllegalArgumentException(\"minShouldMatch should be >= 1\");\n    }\n\n    this.minShouldMatch = minShouldMatch;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size() - minShouldMatch + 1);\n    // there can be at most minShouldMatch - 1 scorers beyond the current position\n    // otherwise we might be skipping over matching documents\n    tail = new DisiWrapper[minShouldMatch - 1];\n\n    for (Scorer scorer : scorers) {\n      addLead(new DisiWrapper(scorer));\n    }\n\n    List<ChildScorer> children = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      children.add(new ChildScorer(scorer, \"SHOULD\"));\n    }\n    this.childScorers = Collections.unmodifiableCollection(children);\n    this.cost = cost(scorers.stream().map(Scorer::iterator).mapToLong(DocIdSetIterator::cost), scorers.size(), minShouldMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["c8a0e442f7b61f811680273b25da95994a724466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["d88f2d3d3107907144cec6455db31ccebd65475a"],"c8a0e442f7b61f811680273b25da95994a724466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d88f2d3d3107907144cec6455db31ccebd65475a":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["26ae065817023d886f3de2bc162e9e1ad71c7a02","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8a0e442f7b61f811680273b25da95994a724466":["dca67e06c96e95a8d9ef07418b6299bfd981523b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d88f2d3d3107907144cec6455db31ccebd65475a":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d88f2d3d3107907144cec6455db31ccebd65475a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}