{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n    \n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, weightComparator, num);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n    \n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, weightComparator, num);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n    \n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, weightComparator, num);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e54fda1eb029b24dd806a3b668c0d78b1625fd9","date":1350933798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0976cda1a864caa753e58d43b5b11b8b9d9fbef","date":1353438038,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<Long>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.<LookupResult>emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<LookupResult>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (Result<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    MinResult<Long> completions[] = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (MinResult<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,Set[BytesRef],boolean,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#lookup(CharSequence,boolean,int).mjava","sourceNew":"  @Override\n  public List<LookupResult> lookup(CharSequence key, Set<BytesRef> contexts, boolean onlyMorePopular, int num) {\n    if (contexts != null) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (Result<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<LookupResult> lookup(CharSequence key, boolean onlyMorePopular, int num) {\n    assert num > 0;\n\n    if (onlyMorePopular) {\n      throw new IllegalArgumentException(\"this suggester only works with onlyMorePopular=false\");\n    }\n\n    if (fst == null) {\n      return Collections.emptyList();\n    }\n\n    BytesRef scratch = new BytesRef(key);\n    int prefixLength = scratch.length;\n    Arc<Long> arc = new Arc<>();\n    \n    // match the prefix portion exactly\n    Long prefixOutput = null;\n    try {\n      prefixOutput = lookupPrefix(scratch, arc);\n    } catch (IOException bogus) { throw new RuntimeException(bogus); }\n    \n    if (prefixOutput == null) {\n      return Collections.emptyList();\n    }\n    \n    List<LookupResult> results = new ArrayList<>(num);\n    CharsRef spare = new CharsRef();\n    if (exactFirst && arc.isFinal()) {\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(prefixOutput + arc.nextFinalOutput)));\n      if (--num == 0) {\n        return results; // that was quick\n      }\n    }\n\n    // complete top-N\n    TopResults<Long> completions = null;\n    try {\n      completions = Util.shortestPaths(fst, arc, prefixOutput, weightComparator, num, !exactFirst);\n      assert completions.isComplete;\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n    \n    BytesRef suffix = new BytesRef(8);\n    for (Result<Long> completion : completions) {\n      scratch.length = prefixLength;\n      // append suffix\n      Util.toBytesRef(completion.input, suffix);\n      scratch.append(suffix);\n      spare.grow(scratch.length);\n      UnicodeUtil.UTF8toUTF16(scratch, spare);\n      results.add(new LookupResult(spare.toString(), decodeWeight(completion.output)));\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e0976cda1a864caa753e58d43b5b11b8b9d9fbef"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e0976cda1a864caa753e58d43b5b11b8b9d9fbef":["3e54fda1eb029b24dd806a3b668c0d78b1625fd9"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"3e54fda1eb029b24dd806a3b668c0d78b1625fd9":["6ce825e9276493231308229152c48f755ce1a0a5"],"62e52115b56781006682fd92c6938efaf174304d":["6ce825e9276493231308229152c48f755ce1a0a5","3e54fda1eb029b24dd806a3b668c0d78b1625fd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3e54fda1eb029b24dd806a3b668c0d78b1625fd9","e0976cda1a864caa753e58d43b5b11b8b9d9fbef"],"6ce825e9276493231308229152c48f755ce1a0a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"e0976cda1a864caa753e58d43b5b11b8b9d9fbef":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6ce825e9276493231308229152c48f755ce1a0a5"],"3e54fda1eb029b24dd806a3b668c0d78b1625fd9":["e0976cda1a864caa753e58d43b5b11b8b9d9fbef","62e52115b56781006682fd92c6938efaf174304d","407687e67faf6e1f02a211ca078d8e3eed631027"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"6ce825e9276493231308229152c48f755ce1a0a5":["3e54fda1eb029b24dd806a3b668c0d78b1625fd9","62e52115b56781006682fd92c6938efaf174304d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}