{"path":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","commits":[{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc() != 0 && node.numArcs != scratchArc.numArcs()) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd2f2532659e458b6f27a7635d90f1977e99c89","date":1564491376,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.isPackedArray() && node.numArcs != scratchArc.numArcs()) {\n      return false;\n    }\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc() != 0 && node.numArcs != scratchArc.numArcs()) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.isPackedArray() && node.numArcs != scratchArc.numArcs()) {\n      return false;\n    }\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.isPackedArray() && node.numArcs != scratchArc.numArcs()) {\n      return false;\n    }\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11","06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(FSTCompiler.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(FSTCompiler.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final FSTCompiler.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((FSTCompiler.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(FSTCompiler.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(FSTCompiler.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final FSTCompiler.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((FSTCompiler.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["9cd2f2532659e458b6f27a7635d90f1977e99c89"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["71d31a7d5773508492505519bb5230b87c8937ad","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["71d31a7d5773508492505519bb5230b87c8937ad"],"9cd2f2532659e458b6f27a7635d90f1977e99c89":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"f8061ddd97f3352007d927dae445884a6f3d857b":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","9cd2f2532659e458b6f27a7635d90f1977e99c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["9cd2f2532659e458b6f27a7635d90f1977e99c89"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["54204c8a3ca26aeafd273139fc29baf70d0f6786","8917bfede3b4ca30f4305c1e391e9218959cd723","f8061ddd97f3352007d927dae445884a6f3d857b"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","8917bfede3b4ca30f4305c1e391e9218959cd723"],"71d31a7d5773508492505519bb5230b87c8937ad":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"9cd2f2532659e458b6f27a7635d90f1977e99c89":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}