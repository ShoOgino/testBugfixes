{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"77f264c55cbf75404f8601ae7290d69157273a56","date":1380484282,"type":2,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(si.attributes());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3cc329405ce41b8ef462b4cd30611eca1567620","date":1408661910,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffaaa53a7627f931502c0365432b7c5a6b6501dc","date":1410633735,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 4 || version.major > 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be 4 or 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1","date":1411047434,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 4) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 4 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 4 || version.major > 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be 4 or 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77d177b70aefca41f3edc910b0a703c76283d8b6","date":1411650976,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 4) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 4 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 4) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 4 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 4) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 4 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene46SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46SegmentInfoFormat.CODEC_NAME, Lucene46SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 4) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 4 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["77f264c55cbf75404f8601ae7290d69157273a56","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["77f264c55cbf75404f8601ae7290d69157273a56"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["057a1793765d068ea9302f1a29e21734ee58d41e"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1","77d177b70aefca41f3edc910b0a703c76283d8b6"],"ffaaa53a7627f931502c0365432b7c5a6b6501dc":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"77f264c55cbf75404f8601ae7290d69157273a56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"057a1793765d068ea9302f1a29e21734ee58d41e":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1":["ffaaa53a7627f931502c0365432b7c5a6b6501dc"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","057a1793765d068ea9302f1a29e21734ee58d41e"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77f264c55cbf75404f8601ae7290d69157273a56"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ffaaa53a7627f931502c0365432b7c5a6b6501dc":["50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["ffaaa53a7627f931502c0365432b7c5a6b6501dc"],"77f264c55cbf75404f8601ae7290d69157273a56":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"057a1793765d068ea9302f1a29e21734ee58d41e":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1":["77d177b70aefca41f3edc910b0a703c76283d8b6","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}