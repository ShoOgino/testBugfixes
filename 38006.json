{"path":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (int i = min; i <= max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().intValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().intValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (int i = min; i <= max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().intValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().intValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (int i = min; i <= max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().intValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().intValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (int i = min; i <= max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().intValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().intValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterable[Integer],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (int i = min; i <= max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().intValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().intValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Integer> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    final FixedBitSet bits=useBitSet ? new FixedBitSet(upper-lower+1) : null;\n    final Iterator<Integer> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n    \n    LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (int i = min; i <= max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (i == max) break;\n        }\n        if (neededBounds == null)\n          return;\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"0x\"+Integer.toHexString(min>>>shift)+\",0x\"+Integer.toHexString(max>>>shift)+\")/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().intValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().intValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0, upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}