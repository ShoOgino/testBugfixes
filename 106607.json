{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceAsInactive(String).mjava","commits":[{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceAsInactive(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void setSliceAsInactive(String slice) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<String, Object>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, Slice.INACTIVE);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(Slice.INACTIVE)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as INACTIVE\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceAsInactive(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void setSliceAsInactive(String slice) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<String, Object>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, Slice.INACTIVE);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(Slice.INACTIVE)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as INACTIVE\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceAsInactive(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceAsInactive(String).mjava","sourceNew":"  protected void setSliceAsInactive(String slice) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, Slice.INACTIVE);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(Slice.INACTIVE)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as INACTIVE\");\n    }\n  }\n\n","sourceOld":"  protected void setSliceAsInactive(String slice) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<String, Object>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, Slice.INACTIVE);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(Slice.INACTIVE)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as INACTIVE\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a982453fa5a954e86ce77b1be9daf749881c13b3","date":1400848395,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceAsInactive(String).mjava","sourceNew":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceAsInactive(String slice) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, Slice.INACTIVE);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(Slice.INACTIVE)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as INACTIVE\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a982453fa5a954e86ce77b1be9daf749881c13b3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a982453fa5a954e86ce77b1be9daf749881c13b3"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a982453fa5a954e86ce77b1be9daf749881c13b3"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"a982453fa5a954e86ce77b1be9daf749881c13b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}