{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#copyFrom(DistribStateManager,boolean).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#copyFrom(DistribStateManager,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy all content from another DistribStateManager.\n   * @param other another state manager.\n   * @param failOnExists abort copy when one or more paths already exist (the state of this manager remains unchanged).\n   */\n  public void copyFrom(DistribStateManager other, boolean failOnExists) throws InterruptedException, IOException, KeeperException, AlreadyExistsException, BadVersionException {\n    List<String> tree = other.listTree(\"/\");\n    // check if any node exists\n    for (String path : tree) {\n      if (hasData(path) && failOnExists) {\n        throw new AlreadyExistsException(path);\n      }\n    }\n    for (String path : tree) {\n      VersionedData data = other.getData(path);\n      if (hasData(path)) {\n        setData(path, data.getData(), -1);\n      } else {\n        makePath(path, data.getData(), data.getMode(), failOnExists);\n      }\n      // hack: set the version to be the same as the source\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      n.version = data.getVersion();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#copyFrom(DistribStateManager,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#copyFrom(DistribStateManager,boolean).mjava","sourceNew":"  /**\n   * Copy all content from another DistribStateManager.\n   * @param other another state manager.\n   * @param failOnExists abort copy when one or more paths already exist (the state of this manager remains unchanged).\n   */\n  public void copyFrom(DistribStateManager other, boolean failOnExists) throws InterruptedException, IOException, KeeperException, AlreadyExistsException, BadVersionException {\n    List<String> tree = other.listTree(\"/\");\n    log.info(\"- copying \" + tree.size() + \" resources...\");\n    // check if any node exists\n    for (String path : tree) {\n      if (hasData(path) && failOnExists) {\n        throw new AlreadyExistsException(path);\n      }\n    }\n    for (String path : tree) {\n      VersionedData data = other.getData(path);\n      if (hasData(path)) {\n        setData(path, data.getData(), -1);\n      } else {\n        makePath(path, data.getData(), data.getMode(), failOnExists);\n      }\n      // hack: set the version and owner to be the same as the source\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      n.version = data.getVersion();\n      n.owner = data.getOwner();\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy all content from another DistribStateManager.\n   * @param other another state manager.\n   * @param failOnExists abort copy when one or more paths already exist (the state of this manager remains unchanged).\n   */\n  public void copyFrom(DistribStateManager other, boolean failOnExists) throws InterruptedException, IOException, KeeperException, AlreadyExistsException, BadVersionException {\n    List<String> tree = other.listTree(\"/\");\n    // check if any node exists\n    for (String path : tree) {\n      if (hasData(path) && failOnExists) {\n        throw new AlreadyExistsException(path);\n      }\n    }\n    for (String path : tree) {\n      VersionedData data = other.getData(path);\n      if (hasData(path)) {\n        setData(path, data.getData(), -1);\n      } else {\n        makePath(path, data.getData(), data.getMode(), failOnExists);\n      }\n      // hack: set the version to be the same as the source\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      n.version = data.getVersion();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#copyFrom(DistribStateManager,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#copyFrom(DistribStateManager,boolean).mjava","sourceNew":"  /**\n   * Copy all content from another DistribStateManager.\n   * @param other another state manager.\n   * @param failOnExists abort copy when one or more paths already exist (the state of this manager remains unchanged).\n   */\n  public void copyFrom(DistribStateManager other, boolean failOnExists) throws InterruptedException, IOException, KeeperException, AlreadyExistsException, BadVersionException {\n    List<String> tree = other.listTree(\"/\");\n    if (log.isInfoEnabled()) {\n      log.info(\"- copying {} resources...\", tree.size());\n    }\n    // check if any node exists\n    for (String path : tree) {\n      if (hasData(path) && failOnExists) {\n        throw new AlreadyExistsException(path);\n      }\n    }\n    for (String path : tree) {\n      VersionedData data = other.getData(path);\n      if (hasData(path)) {\n        setData(path, data.getData(), -1);\n      } else {\n        makePath(path, data.getData(), data.getMode(), failOnExists);\n      }\n      // hack: set the version and owner to be the same as the source\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      n.version = data.getVersion();\n      n.owner = data.getOwner();\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy all content from another DistribStateManager.\n   * @param other another state manager.\n   * @param failOnExists abort copy when one or more paths already exist (the state of this manager remains unchanged).\n   */\n  public void copyFrom(DistribStateManager other, boolean failOnExists) throws InterruptedException, IOException, KeeperException, AlreadyExistsException, BadVersionException {\n    List<String> tree = other.listTree(\"/\");\n    log.info(\"- copying \" + tree.size() + \" resources...\");\n    // check if any node exists\n    for (String path : tree) {\n      if (hasData(path) && failOnExists) {\n        throw new AlreadyExistsException(path);\n      }\n    }\n    for (String path : tree) {\n      VersionedData data = other.getData(path);\n      if (hasData(path)) {\n        setData(path, data.getData(), -1);\n      } else {\n        makePath(path, data.getData(), data.getMode(), failOnExists);\n      }\n      // hack: set the version and owner to be the same as the source\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      n.version = data.getVersion();\n      n.owner = data.getOwner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#copyFrom(DistribStateManager,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy all content from another DistribStateManager.\n   * @param other another state manager.\n   * @param failOnExists abort copy when one or more paths already exist (the state of this manager remains unchanged).\n   */\n  public void copyFrom(DistribStateManager other, boolean failOnExists) throws InterruptedException, IOException, KeeperException, AlreadyExistsException, BadVersionException {\n    List<String> tree = other.listTree(\"/\");\n    if (log.isInfoEnabled()) {\n      log.info(\"- copying {} resources...\", tree.size());\n    }\n    // check if any node exists\n    for (String path : tree) {\n      if (hasData(path) && failOnExists) {\n        throw new AlreadyExistsException(path);\n      }\n    }\n    for (String path : tree) {\n      VersionedData data = other.getData(path);\n      if (hasData(path)) {\n        setData(path, data.getData(), -1);\n      } else {\n        makePath(path, data.getData(), data.getMode(), failOnExists);\n      }\n      // hack: set the version and owner to be the same as the source\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      n.version = data.getVersion();\n      n.owner = data.getOwner();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["e35f2dde06b35aa9904949a3a93fabd090371077"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}