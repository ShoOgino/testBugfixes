{"path":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","pathOld":"/dev/null","sourceNew":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      try {\n        UpdateResponse rsp = update(params(),\n                                    doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                                    doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n                                    ).process(c);\n        fail(\"did not get a top level exception when more then 10 docs failed: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n                     400, e.code());\n      }\n        \n      // verify malformed deleteByQuerys fail\n      try {\n        UpdateResponse rsp = update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c);\n        fail(\"sanity check for malformed DBQ didn't fail: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      }\n      \n      // verify oportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        try {\n          UpdateResponse rsp = r.process(c);\n          fail(\"sanity check for oportunistic concurrency delete didn't fail: \"\n               + r.toString() + \" => \" + rsp.toString());\n        } catch (SolrException e) {\n          assertEquals(\"not the expected oportunistic concurrency failure code: \"\n                       + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","sourceNew":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      try {\n        UpdateResponse rsp = update(params(),\n                                    doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                                    doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n                                    ).process(c);\n        fail(\"did not get a top level exception when more then 10 docs failed: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n                     400, e.code());\n      }\n        \n      // verify malformed deleteByQuerys fail\n      try {\n        UpdateResponse rsp = update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c);\n        fail(\"sanity check for malformed DBQ didn't fail: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      }\n      \n      // verify opportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        try {\n          UpdateResponse rsp = r.process(c);\n          fail(\"sanity check for opportunistic concurrency delete didn't fail: \"\n               + r.toString() + \" => \" + rsp.toString());\n        } catch (SolrException e) {\n          assertEquals(\"not the expected opportunistic concurrency failure code: \"\n                       + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      try {\n        UpdateResponse rsp = update(params(),\n                                    doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                                    doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n                                    ).process(c);\n        fail(\"did not get a top level exception when more then 10 docs failed: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n                     400, e.code());\n      }\n        \n      // verify malformed deleteByQuerys fail\n      try {\n        UpdateResponse rsp = update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c);\n        fail(\"sanity check for malformed DBQ didn't fail: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      }\n      \n      // verify oportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        try {\n          UpdateResponse rsp = r.process(c);\n          fail(\"sanity check for oportunistic concurrency delete didn't fail: \"\n               + r.toString() + \" => \" + rsp.toString());\n        } catch (SolrException e) {\n          assertEquals(\"not the expected oportunistic concurrency failure code: \"\n                       + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","sourceNew":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      try {\n        UpdateResponse rsp = update(params(),\n                                    doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                                    doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n                                    ).process(c);\n        fail(\"did not get a top level exception when more then 10 docs failed: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n                     400, e.code());\n      }\n        \n      // verify malformed deleteByQuerys fail\n      try {\n        UpdateResponse rsp = update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c);\n        fail(\"sanity check for malformed DBQ didn't fail: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      }\n      \n      // verify opportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        try {\n          UpdateResponse rsp = r.process(c);\n          fail(\"sanity check for opportunistic concurrency delete didn't fail: \"\n               + r.toString() + \" => \" + rsp.toString());\n        } catch (SolrException e) {\n          assertEquals(\"not the expected opportunistic concurrency failure code: \"\n                       + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      try {\n        UpdateResponse rsp = update(params(),\n                                    doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                                    doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n                                    ).process(c);\n        fail(\"did not get a top level exception when more then 10 docs failed: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n                     400, e.code());\n      }\n        \n      // verify malformed deleteByQuerys fail\n      try {\n        UpdateResponse rsp = update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c);\n        fail(\"sanity check for malformed DBQ didn't fail: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      }\n      \n      // verify oportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        try {\n          UpdateResponse rsp = r.process(c);\n          fail(\"sanity check for oportunistic concurrency delete didn't fail: \"\n               + r.toString() + \" => \" + rsp.toString());\n        } catch (SolrException e) {\n          assertEquals(\"not the expected oportunistic concurrency failure code: \"\n                       + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","sourceNew":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      try {\n        UpdateResponse rsp = update(params(),\n                                    doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                                    doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n                                    ).process(c);\n        fail(\"did not get a top level exception when more then 10 docs failed: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n                     400, e.code());\n      }\n        \n      // verify malformed deleteByQuerys fail\n      try {\n        UpdateResponse rsp = update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c);\n        fail(\"sanity check for malformed DBQ didn't fail: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      }\n      \n      // verify opportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        try {\n          UpdateResponse rsp = r.process(c);\n          fail(\"sanity check for opportunistic concurrency delete didn't fail: \"\n               + r.toString() + \" => \" + rsp.toString());\n        } catch (SolrException e) {\n          assertEquals(\"not the expected opportunistic concurrency failure code: \"\n                       + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      try {\n        UpdateResponse rsp = update(params(),\n                                    doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                                    doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n                                    ).process(c);\n        fail(\"did not get a top level exception when more then 10 docs failed: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n                     400, e.code());\n      }\n        \n      // verify malformed deleteByQuerys fail\n      try {\n        UpdateResponse rsp = update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c);\n        fail(\"sanity check for malformed DBQ didn't fail: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      }\n      \n      // verify oportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        try {\n          UpdateResponse rsp = r.process(c);\n          fail(\"sanity check for oportunistic concurrency delete didn't fail: \"\n               + r.toString() + \" => \" + rsp.toString());\n        } catch (SolrException e) {\n          assertEquals(\"not the expected oportunistic concurrency failure code: \"\n                       + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testSanity().mjava","sourceNew":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      SolrException e = expectThrows(SolrException.class,\n          \"did not get a top level exception when more then 10 docs failed\", () ->\n              update(params(),\n                  doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                  doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n              ).process(c)\n      );\n      assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n          400, e.code());\n        \n      // verify malformed deleteByQuerys fail\n      e = expectThrows(SolrException.class,\n          \"sanity check for malformed DBQ didn't fail\",\n          () -> update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c));\n      assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      \n      // verify opportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        e = expectThrows(SolrException.class, \"sanity check for opportunistic concurrency delete didn't fail\",\n            () -> r.process(c)\n        );\n        assertEquals(\"not the expected opportunistic concurrency failure code: \"\n            + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n      }\n    }\n  }\n\n","sourceOld":"  public void testSanity() throws Exception {\n    \n    // verify some basic sanity checking of indexing & querying across the collection\n    // w/o using our custom update processor chain\n    \n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_ONE_PRE + \"1\"),\n                                         f(\"foo_i\", 42))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.add(doc(f(\"id\", S_TWO_PRE + \"2\"),\n                                         f(\"foo_i\", 66))).getStatus());\n    assertEquals(0, CLOUD_CLIENT.commit().getStatus());\n\n    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,\n                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,\n                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {\n      assertQueryDocIds(c, true, S_ONE_PRE + \"1\",  S_TWO_PRE + \"2\");\n      assertQueryDocIds(c, false, \"id_not_exists\");\n\n      // verify adding 2 broken docs causes a clint exception\n      try {\n        UpdateResponse rsp = update(params(),\n                                    doc(f(\"id\", S_ONE_PRE + \"X\"), f(\"foo_i\", \"bogus_val_X\")),\n                                    doc(f(\"id\", S_TWO_PRE + \"Y\"), f(\"foo_i\", \"bogus_val_Y\"))\n                                    ).process(c);\n        fail(\"did not get a top level exception when more then 10 docs failed: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the type of error we were expecting (\"+e.code()+\"): \" + e.toString(),\n                     400, e.code());\n      }\n        \n      // verify malformed deleteByQuerys fail\n      try {\n        UpdateResponse rsp = update(params()).deleteByQuery(\"foo_i:not_a_num\").process(c);\n        fail(\"sanity check for malformed DBQ didn't fail: \" + rsp.toString());\n      } catch (SolrException e) {\n        assertEquals(\"not the expected DBQ failure: \" + e.getMessage(), 400, e.code());\n      }\n      \n      // verify opportunistic concurrency deletions fail as we expect when docs are / aren't present\n      for (UpdateRequest r : new UpdateRequest[] {\n          update(params(\"commit\", \"true\")).deleteById(S_ONE_PRE + \"1\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(S_TWO_PRE + \"2\", -1L),\n          update(params(\"commit\", \"true\")).deleteById(\"id_not_exists\",  1L)    }) {\n        try {\n          UpdateResponse rsp = r.process(c);\n          fail(\"sanity check for opportunistic concurrency delete didn't fail: \"\n               + r.toString() + \" => \" + rsp.toString());\n        } catch (SolrException e) {\n          assertEquals(\"not the expected opportunistic concurrency failure code: \"\n                       + r.toString() + \" => \" + e.getMessage(), 409, e.code());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["92f789dbd1886e4b468e61b0def88b29a3f55228","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}