{"path":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","commits":[{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"/dev/null","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk sometimes here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.SOMETIMES);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["c3a8a449466c1ff7ce2274fe73dab487256964b4","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","32f306edd62f81390a6e263e8b913f089f3e98a1"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}