{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getNumLeftLeafNodes(int).mjava","commits":[{"id":"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7","date":1588412059,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getNumLeftLeafNodes(int).mjava","pathOld":"/dev/null","sourceNew":"  private int getNumLeftLeafNodes(int numLeaves) {\n    assert numLeaves > 1: \"getNumLeftLeaveNodes() called with \" + numLeaves;\n    // return the level that can be filled with this number of leaves\n    int lastFullLevel = 31 - Integer.numberOfLeadingZeros(numLeaves);\n    // how many leaf nodes are in the full level\n    int leavesFullLevel = 1 << lastFullLevel;\n    // half of the leaf nodes from the full level goes to the left\n    int numLeftLeafNodes = leavesFullLevel / 2;\n    // leaf nodes that do not fit in the full level\n    int unbalancedLeafNodes = numLeaves - leavesFullLevel;\n    // distribute unbalanced leaf nodes\n    numLeftLeafNodes += Math.min(unbalancedLeafNodes, numLeftLeafNodes);\n    // we should always place unbalanced leaf nodes on the left\n    assert numLeftLeafNodes >= numLeaves - numLeftLeafNodes && numLeftLeafNodes <= 2L * (numLeaves - numLeftLeafNodes);\n    return numLeftLeafNodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7"],"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}