{"path":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","commits":[{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    checkPerformance(new KNearestNeighborClassifier(100), new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":4,"author":"Tommaso Teofili","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    checkPerformance(new KNearestNeighborClassifier(100), new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 2, 2, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6ba8fc7f78f1a96eecf248637ea9ac90178c79c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c707e50d5d9db6929b753b3c0b0254186ee0986","date":1445602910,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy > 0d);\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 2, 2, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"572306117bc719f253d957bbaaa58ee0f8e482f8","date":1452262992,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy > 0d);\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca594895cca337a1205d045f7629bea3b78e608d","date":1460106403,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ba8fc7f78f1a96eecf248637ea9ac90178c79c3","date":1522138495,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiTerms.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    int numDocs = atLeast(10);\n    LeafReader leafReader = getRandomIndex(analyzer,  numDocs);\n    try {\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiTerms.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      KNearestNeighborClassifier kNearestNeighborClassifier = new KNearestNeighborClassifier(leafReader, null,\n          analyzer, null, 1, 1, 1, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          kNearestNeighborClassifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiTerms.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ca594895cca337a1205d045f7629bea3b78e608d":["572306117bc719f253d957bbaaa58ee0f8e482f8"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","6ba8fc7f78f1a96eecf248637ea9ac90178c79c3"],"2c707e50d5d9db6929b753b3c0b0254186ee0986":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"572306117bc719f253d957bbaaa58ee0f8e482f8":["2c707e50d5d9db6929b753b3c0b0254186ee0986"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["45ae8f6354b0826d27014deff71fe330604a9783"],"45ae8f6354b0826d27014deff71fe330604a9783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57c6c784f777a2cc8fa014507ea129526822714d":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["572306117bc719f253d957bbaaa58ee0f8e482f8","ca594895cca337a1205d045f7629bea3b78e608d"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"6ba8fc7f78f1a96eecf248637ea9ac90178c79c3":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"ca594895cca337a1205d045f7629bea3b78e608d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"2c707e50d5d9db6929b753b3c0b0254186ee0986":["572306117bc719f253d957bbaaa58ee0f8e482f8"],"572306117bc719f253d957bbaaa58ee0f8e482f8":["ca594895cca337a1205d045f7629bea3b78e608d","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"45ae8f6354b0826d27014deff71fe330604a9783":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["2c707e50d5d9db6929b753b3c0b0254186ee0986"],"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ae8f6354b0826d27014deff71fe330604a9783"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","6ba8fc7f78f1a96eecf248637ea9ac90178c79c3"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["57c6c784f777a2cc8fa014507ea129526822714d"],"6ba8fc7f78f1a96eecf248637ea9ac90178c79c3":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}