{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"081b68cb9e8f4b5405b40bfb223fd7c587171aa1","date":1360072766,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      IOUtils.close(reader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":["76e8057ae19512a2185e111004c56dc858689ab0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      IOUtils.close(reader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76e8057ae19512a2185e111004c56dc858689ab0","date":1365504657,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      IOUtils.close(reader);\n    }\n\n    return terms;\n  }\n\n","bugFix":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,float,TokenStream,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, float boost, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, boost, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException If there is a low-level I/O error\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName;\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      IOUtils.close(internalReader);\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["76e8057ae19512a2185e111004c56dc858689ab0"],"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"76e8057ae19512a2185e111004c56dc858689ab0":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","76e8057ae19512a2185e111004c56dc858689ab0"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76e8057ae19512a2185e111004c56dc858689ab0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}