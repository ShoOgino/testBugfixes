{"path":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","commits":[{"id":"3cdc80a62bb2b084e97738303ef870bcea0310ac","date":1352398860,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      final Source source = reader.docValues(mergeState.fieldInfo.name).getDirectSource();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          add(source.getBytes(i, bytes));\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","sourceNew":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      final Source source = reader.docValues(mergeState.fieldInfo.name).getDirectSource();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          add(source.getBytes(i, bytes));\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","sourceOld":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      final Source source = reader.docValues(mergeState.fieldInfo.name).getDirectSource();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          add(source.getBytes(i, bytes));\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","sourceNew":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n\n      // nocommit what if this is null...?  need default source?\n      final BinaryDocValues source = reader.getBinaryDocValues(mergeState.fieldInfo.name);\n\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          source.get(i, bytes);\n          add(bytes);\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","sourceOld":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      final Source source = reader.docValues(mergeState.fieldInfo.name).getDirectSource();\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          add(source.getBytes(i, bytes));\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6295f14d43685811599f8a8f02a63d75ec6bd8fe","date":1353248103,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","sourceNew":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n\n      BinaryDocValues source = reader.getBinaryDocValues(mergeState.fieldInfo.name);\n      if (source == null) {\n        source = BinaryDocValues.DEFAULT;\n      }\n\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          source.get(i, bytes);\n          add(bytes);\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","sourceOld":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n\n      // nocommit what if this is null...?  need default source?\n      final BinaryDocValues source = reader.getBinaryDocValues(mergeState.fieldInfo.name);\n\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          source.get(i, bytes);\n          add(bytes);\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e05b279040cd7b938223b77c3772786678160cf6","date":1353297629,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","sourceNew":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n\n      BinaryDocValues source = reader.getBinaryDocValues(mergeState.fieldInfo.name);\n      if (source == null) {\n        source = new BinaryDocValues.EMPTY(maxDoc);\n      }\n\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          source.get(i, bytes);\n          add(bytes);\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","sourceOld":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n\n      BinaryDocValues source = reader.getBinaryDocValues(mergeState.fieldInfo.name);\n      if (source == null) {\n        source = BinaryDocValues.DEFAULT;\n      }\n\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          source.get(i, bytes);\n          add(bytes);\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b53a9a930ee01857178a1b512fbab24642f3fa8","date":1354471097,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState,List[BinaryDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","sourceNew":"  public int merge(MergeState mergeState, List<BinaryDocValues> toMerge) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (int readerIDX=0;readerIDX<toMerge.size();readerIDX++) {\n      AtomicReader reader = mergeState.readers.get(readerIDX);\n      int maxDoc = reader.maxDoc();\n      Bits liveDocs = reader.getLiveDocs();\n\n      BinaryDocValues values = toMerge.get(readerIDX);\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          values.get(i, bytes);\n          add(bytes);\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","sourceOld":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n\n      BinaryDocValues source = reader.getBinaryDocValues(mergeState.fieldInfo.name);\n      if (source == null) {\n        source = new BinaryDocValues.EMPTY(maxDoc);\n      }\n\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          source.get(i, bytes);\n          add(bytes);\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b53a9a930ee01857178a1b512fbab24642f3fa8","date":1354471097,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NumericDocValuesConsumer#merge(MergeState,List[NumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BinaryDocValuesConsumer#merge(MergeState).mjava","sourceNew":"  public int merge(MergeState mergeState, List<NumericDocValues> toMerge) throws IOException {\n    int docCount = 0;\n    for (int readerIDX=0;readerIDX<toMerge.size();readerIDX++) {\n      AtomicReader reader = mergeState.readers.get(readerIDX);\n      int maxDoc = reader.maxDoc();\n      Bits liveDocs = reader.getLiveDocs();\n      NumericDocValues values = toMerge.get(readerIDX);\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          add(values.get(i));\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","sourceOld":"  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    final BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n\n      BinaryDocValues source = reader.getBinaryDocValues(mergeState.fieldInfo.name);\n      if (source == null) {\n        source = new BinaryDocValues.EMPTY(maxDoc);\n      }\n\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          source.get(i, bytes);\n          add(bytes);\n        }\n        docCount++;\n        mergeState.checkAbort.work(300);\n      }\n    }\n    finish();\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e05b279040cd7b938223b77c3772786678160cf6":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["3cdc80a62bb2b084e97738303ef870bcea0310ac"],"3cdc80a62bb2b084e97738303ef870bcea0310ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["e05b279040cd7b938223b77c3772786678160cf6"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e05b279040cd7b938223b77c3772786678160cf6":["4b53a9a930ee01857178a1b512fbab24642f3fa8"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"3cdc80a62bb2b084e97738303ef870bcea0310ac":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["e05b279040cd7b938223b77c3772786678160cf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdc80a62bb2b084e97738303ef870bcea0310ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":[],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b53a9a930ee01857178a1b512fbab24642f3fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}