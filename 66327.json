{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","commits":[{"id":"df2d68685a69bd82bf79243e28623c0775eb7bd8","date":1185567892,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insert(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = (TermDf) pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insert(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = (TermDf) pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insert(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = (TermDf) pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = (TermDf) pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insert(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = (TermDf) pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = (TermDf) pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["4256bc1b3c94786287ccdfc751230374521843cf"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4256bc1b3c94786287ccdfc751230374521843cf":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}