{"path":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#assertParsedDate(String,Date,String).mjava","commits":[{"id":"859b2291aebaa8cffe0ab3f919fc27e980c23999","date":1534305849,"type":0,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#assertParsedDate(String,Date,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); // should match \"*_dt\" dynamic field\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertTrue(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\") instanceof Date);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d6383c8f942fbf6f463c167383e952d927aca0","date":1534307117,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#assertParsedDate(String,Date,String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); // should match \"*_dt\" dynamic field\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertTrue(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\") instanceof Date);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f","date":1561505163,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#assertParsedDate(String,Date,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#assertParsedDate(String,Date,String).mjava","sourceNew":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); // should match \"*_dt\" dynamic field\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertThat(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\"), IS_DATE);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n\n","sourceOld":"  private void assertParsedDate(String inputDateString, Date expectedDate, String chain) throws IOException {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"date_dt\")); // should match \"*_dt\" dynamic field\n    SolrInputDocument d = processAdd(chain, doc(f(\"id\", \"1\"), f(\"date_dt\", inputDateString)));\n    assertNotNull(d);\n    assertTrue(\"Date string: \" + inputDateString + \" was not parsed as a date\",\n        d.getFieldValue(\"date_dt\") instanceof Date);\n    assertEquals(expectedDate, d.getField(\"date_dt\").getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859b2291aebaa8cffe0ab3f919fc27e980c23999":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["11d6383c8f942fbf6f463c167383e952d927aca0"],"11d6383c8f942fbf6f463c167383e952d927aca0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","859b2291aebaa8cffe0ab3f919fc27e980c23999"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"]},"commit2Childs":{"859b2291aebaa8cffe0ab3f919fc27e980c23999":["11d6383c8f942fbf6f463c167383e952d927aca0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["859b2291aebaa8cffe0ab3f919fc27e980c23999","11d6383c8f942fbf6f463c167383e952d927aca0"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11d6383c8f942fbf6f463c167383e952d927aca0":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}