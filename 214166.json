{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#getAll(File[],Analyzer[]).mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#getAll(File[],Analyzer[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\r\n     * Prepare a list of benchmark data, using all possible combinations of\r\n     * benchmark parameters.\r\n     *\r\n     * @param sources   list of directories containing different source document\r\n     *                  collections\r\n     * @param analyzers of analyzers to use.\r\n     */\r\n    public static TestData[] getAll(File[] sources, Analyzer[] analyzers)\r\n    {\r\n        List res = new ArrayList(50);\r\n        TestData ref = new TestData();\r\n        for (int q = 0; q < analyzers.length; q++)\r\n        {\r\n            for (int m = 0; m < sources.length; m++)\r\n            {\r\n                for (int i = 0; i < MAX_BUFFERED_DOCS_COUNTS.length; i++)\r\n                {\r\n                    for (int k = 0; k < MERGEFACTOR_COUNTS.length; k++)\r\n                    {\r\n                        for (int n = 0; n < Constants.BOOLEANS.length; n++)\r\n                        {\r\n                            for (int p = 0; p < Constants.BOOLEANS.length; p++)\r\n                            {\r\n                                ref.id = \"td-\" + q + m + i + k + n + p;\r\n                                ref.source = sources[m];\r\n                                ref.analyzer = analyzers[q];\r\n                                ref.maxBufferedDocs = MAX_BUFFERED_DOCS_COUNTS[i];\r\n                                ref.mergeFactor = MERGEFACTOR_COUNTS[k];\r\n                                ref.compound = Constants.BOOLEANS[n].booleanValue();\r\n                                ref.optimize = Constants.BOOLEANS[p].booleanValue();\r\n                                try\r\n                                {\r\n                                    res.add(ref.clone());\r\n                                }\r\n                                catch (Exception e)\r\n                                {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (TestData[]) res.toArray(new TestData[0]);\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#getAll(File[],Analyzer[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#getAll(File[],Analyzer[]).mjava","sourceNew":"    /**\n     * Prepare a list of benchmark data, using all possible combinations of\n     * benchmark parameters.\n     *\n     * @param sources   list of directories containing different source document\n     *                  collections\n     * @param analyzers of analyzers to use.\n     */\n    public static TestData[] getAll(File[] sources, Analyzer[] analyzers)\n    {\n        List res = new ArrayList(50);\n        TestData ref = new TestData();\n        for (int q = 0; q < analyzers.length; q++)\n        {\n            for (int m = 0; m < sources.length; m++)\n            {\n                for (int i = 0; i < MAX_BUFFERED_DOCS_COUNTS.length; i++)\n                {\n                    for (int k = 0; k < MERGEFACTOR_COUNTS.length; k++)\n                    {\n                        for (int n = 0; n < Constants.BOOLEANS.length; n++)\n                        {\n                            for (int p = 0; p < Constants.BOOLEANS.length; p++)\n                            {\n                                ref.id = \"td-\" + q + m + i + k + n + p;\n                                ref.source = sources[m];\n                                ref.analyzer = analyzers[q];\n                                ref.maxBufferedDocs = MAX_BUFFERED_DOCS_COUNTS[i];\n                                ref.mergeFactor = MERGEFACTOR_COUNTS[k];\n                                ref.compound = Constants.BOOLEANS[n].booleanValue();\n                                ref.optimize = Constants.BOOLEANS[p].booleanValue();\n                                try\n                                {\n                                    res.add(ref.clone());\n                                }\n                                catch (Exception e)\n                                {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return (TestData[]) res.toArray(new TestData[0]);\n    }\n\n","sourceOld":"    /**\r\n     * Prepare a list of benchmark data, using all possible combinations of\r\n     * benchmark parameters.\r\n     *\r\n     * @param sources   list of directories containing different source document\r\n     *                  collections\r\n     * @param analyzers of analyzers to use.\r\n     */\r\n    public static TestData[] getAll(File[] sources, Analyzer[] analyzers)\r\n    {\r\n        List res = new ArrayList(50);\r\n        TestData ref = new TestData();\r\n        for (int q = 0; q < analyzers.length; q++)\r\n        {\r\n            for (int m = 0; m < sources.length; m++)\r\n            {\r\n                for (int i = 0; i < MAX_BUFFERED_DOCS_COUNTS.length; i++)\r\n                {\r\n                    for (int k = 0; k < MERGEFACTOR_COUNTS.length; k++)\r\n                    {\r\n                        for (int n = 0; n < Constants.BOOLEANS.length; n++)\r\n                        {\r\n                            for (int p = 0; p < Constants.BOOLEANS.length; p++)\r\n                            {\r\n                                ref.id = \"td-\" + q + m + i + k + n + p;\r\n                                ref.source = sources[m];\r\n                                ref.analyzer = analyzers[q];\r\n                                ref.maxBufferedDocs = MAX_BUFFERED_DOCS_COUNTS[i];\r\n                                ref.mergeFactor = MERGEFACTOR_COUNTS[k];\r\n                                ref.compound = Constants.BOOLEANS[n].booleanValue();\r\n                                ref.optimize = Constants.BOOLEANS[p].booleanValue();\r\n                                try\r\n                                {\r\n                                    res.add(ref.clone());\r\n                                }\r\n                                catch (Exception e)\r\n                                {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (TestData[]) res.toArray(new TestData[0]);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#getAll(File[],Analyzer[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#getAll(File[],Analyzer[]).mjava","sourceNew":"    /**\n     * Prepare a list of benchmark data, using all possible combinations of\n     * benchmark parameters.\n     *\n     * @param sources   list of directories containing different source document\n     *                  collections\n     * @param analyzers of analyzers to use.\n     */\n    public static TestData[] getAll(File[] sources, Analyzer[] analyzers)\n    {\n        List<TestData> res = new ArrayList<TestData>(50);\n        TestData ref = new TestData();\n        for (int q = 0; q < analyzers.length; q++)\n        {\n            for (int m = 0; m < sources.length; m++)\n            {\n                for (int i = 0; i < MAX_BUFFERED_DOCS_COUNTS.length; i++)\n                {\n                    for (int k = 0; k < MERGEFACTOR_COUNTS.length; k++)\n                    {\n                        for (int n = 0; n < Constants.BOOLEANS.length; n++)\n                        {\n                            for (int p = 0; p < Constants.BOOLEANS.length; p++)\n                            {\n                                ref.id = \"td-\" + q + m + i + k + n + p;\n                                ref.source = sources[m];\n                                ref.analyzer = analyzers[q];\n                                ref.maxBufferedDocs = MAX_BUFFERED_DOCS_COUNTS[i];\n                                ref.mergeFactor = MERGEFACTOR_COUNTS[k];\n                                ref.compound = Constants.BOOLEANS[n].booleanValue();\n                                ref.optimize = Constants.BOOLEANS[p].booleanValue();\n                                try\n                                {\n                                    res.add((TestData)ref.clone());\n                                }\n                                catch (Exception e)\n                                {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return res.toArray(new TestData[0]);\n    }\n\n","sourceOld":"    /**\n     * Prepare a list of benchmark data, using all possible combinations of\n     * benchmark parameters.\n     *\n     * @param sources   list of directories containing different source document\n     *                  collections\n     * @param analyzers of analyzers to use.\n     */\n    public static TestData[] getAll(File[] sources, Analyzer[] analyzers)\n    {\n        List res = new ArrayList(50);\n        TestData ref = new TestData();\n        for (int q = 0; q < analyzers.length; q++)\n        {\n            for (int m = 0; m < sources.length; m++)\n            {\n                for (int i = 0; i < MAX_BUFFERED_DOCS_COUNTS.length; i++)\n                {\n                    for (int k = 0; k < MERGEFACTOR_COUNTS.length; k++)\n                    {\n                        for (int n = 0; n < Constants.BOOLEANS.length; n++)\n                        {\n                            for (int p = 0; p < Constants.BOOLEANS.length; p++)\n                            {\n                                ref.id = \"td-\" + q + m + i + k + n + p;\n                                ref.source = sources[m];\n                                ref.analyzer = analyzers[q];\n                                ref.maxBufferedDocs = MAX_BUFFERED_DOCS_COUNTS[i];\n                                ref.mergeFactor = MERGEFACTOR_COUNTS[k];\n                                ref.compound = Constants.BOOLEANS[n].booleanValue();\n                                ref.optimize = Constants.BOOLEANS[p].booleanValue();\n                                try\n                                {\n                                    res.add(ref.clone());\n                                }\n                                catch (Exception e)\n                                {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return (TestData[]) res.toArray(new TestData[0]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#getAll(File[],Analyzer[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestData#getAll(File[],Analyzer[]).mjava","sourceNew":"    /**\n     * Prepare a list of benchmark data, using all possible combinations of\n     * benchmark parameters.\n     *\n     * @param sources   list of directories containing different source document\n     *                  collections\n     * @param analyzers of analyzers to use.\n     */\n    public static TestData[] getAll(File[] sources, Analyzer[] analyzers)\n    {\n        List<TestData> res = new ArrayList<TestData>(50);\n        TestData ref = new TestData();\n        for (int q = 0; q < analyzers.length; q++)\n        {\n            for (int m = 0; m < sources.length; m++)\n            {\n                for (int i = 0; i < MAX_BUFFERED_DOCS_COUNTS.length; i++)\n                {\n                    for (int k = 0; k < MERGEFACTOR_COUNTS.length; k++)\n                    {\n                        for (int n = 0; n < Constants.BOOLEANS.length; n++)\n                        {\n                            for (int p = 0; p < Constants.BOOLEANS.length; p++)\n                            {\n                                ref.id = \"td-\" + q + m + i + k + n + p;\n                                ref.source = sources[m];\n                                ref.analyzer = analyzers[q];\n                                ref.maxBufferedDocs = MAX_BUFFERED_DOCS_COUNTS[i];\n                                ref.mergeFactor = MERGEFACTOR_COUNTS[k];\n                                ref.compound = Constants.BOOLEANS[n].booleanValue();\n                                ref.optimize = Constants.BOOLEANS[p].booleanValue();\n                                try\n                                {\n                                    res.add((TestData)ref.clone());\n                                }\n                                catch (Exception e)\n                                {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return res.toArray(new TestData[0]);\n    }\n\n","sourceOld":"    /**\n     * Prepare a list of benchmark data, using all possible combinations of\n     * benchmark parameters.\n     *\n     * @param sources   list of directories containing different source document\n     *                  collections\n     * @param analyzers of analyzers to use.\n     */\n    public static TestData[] getAll(File[] sources, Analyzer[] analyzers)\n    {\n        List<TestData> res = new ArrayList<TestData>(50);\n        TestData ref = new TestData();\n        for (int q = 0; q < analyzers.length; q++)\n        {\n            for (int m = 0; m < sources.length; m++)\n            {\n                for (int i = 0; i < MAX_BUFFERED_DOCS_COUNTS.length; i++)\n                {\n                    for (int k = 0; k < MERGEFACTOR_COUNTS.length; k++)\n                    {\n                        for (int n = 0; n < Constants.BOOLEANS.length; n++)\n                        {\n                            for (int p = 0; p < Constants.BOOLEANS.length; p++)\n                            {\n                                ref.id = \"td-\" + q + m + i + k + n + p;\n                                ref.source = sources[m];\n                                ref.analyzer = analyzers[q];\n                                ref.maxBufferedDocs = MAX_BUFFERED_DOCS_COUNTS[i];\n                                ref.mergeFactor = MERGEFACTOR_COUNTS[k];\n                                ref.compound = Constants.BOOLEANS[n].booleanValue();\n                                ref.optimize = Constants.BOOLEANS[p].booleanValue();\n                                try\n                                {\n                                    res.add((TestData)ref.clone());\n                                }\n                                catch (Exception e)\n                                {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return res.toArray(new TestData[0]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}