{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#getSampleIntersectionPoint(PlanetModel,Plane).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#getSampleIntersectionPoint(PlanetModel,Plane).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#getSampleIntersectionPoint(PlanetModel,Plane).mjava","sourceNew":"  /**\n   * Find a sample point on the intersection between two planes and the unit sphere.\n   */\n  public GeoPoint getSampleIntersectionPoint(final PlanetModel planetModel, final Plane q) {\n    final GeoPoint[] intersections = findIntersections(planetModel, q, NO_BOUNDS, NO_BOUNDS);\n    if (intersections.length == 0)\n      return null;\n    return intersections[0];\n  }\n\n","sourceOld":"  /**\n   * Find a sample point on the intersection between two planes and the unit sphere.\n   */\n  public GeoPoint getSampleIntersectionPoint(final PlanetModel planetModel, final Plane q) {\n    final GeoPoint[] intersections = findIntersections(planetModel, q, NO_BOUNDS, NO_BOUNDS);\n    if (intersections.length == 0)\n      return null;\n    return intersections[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48c2726dec3381fb15aa3b90f7857635b6bdf74","date":1436825583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#getSampleIntersectionPoint(PlanetModel,Plane).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#getSampleIntersectionPoint(PlanetModel,Plane).mjava","sourceNew":"  /**\n   * Find a sample point on the intersection between two planes and the world.\n   * @param planetModel is the planet model.\n   * @param q is the second plane to consider.\n   * @return a sample point that is on the intersection between the two planes and the world.\n   */\n  public GeoPoint getSampleIntersectionPoint(final PlanetModel planetModel, final Plane q) {\n    final GeoPoint[] intersections = findIntersections(planetModel, q, NO_BOUNDS, NO_BOUNDS);\n    if (intersections.length == 0)\n      return null;\n    return intersections[0];\n  }\n\n","sourceOld":"  /**\n   * Find a sample point on the intersection between two planes and the unit sphere.\n   */\n  public GeoPoint getSampleIntersectionPoint(final PlanetModel planetModel, final Plane q) {\n    final GeoPoint[] intersections = findIntersections(planetModel, q, NO_BOUNDS, NO_BOUNDS);\n    if (intersections.length == 0)\n      return null;\n    return intersections[0];\n  }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#getSampleIntersectionPoint(PlanetModel,Plane).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#getSampleIntersectionPoint(PlanetModel,Plane).mjava","sourceNew":"  /**\n   * Find a sample point on the intersection between two planes and the world.\n   * @param planetModel is the planet model.\n   * @param q is the second plane to consider.\n   * @return a sample point that is on the intersection between the two planes and the world.\n   */\n  public GeoPoint getSampleIntersectionPoint(final PlanetModel planetModel, final Plane q) {\n    final GeoPoint[] intersections = findIntersections(planetModel, q, NO_BOUNDS, NO_BOUNDS);\n    if (intersections.length == 0)\n      return null;\n    return intersections[0];\n  }\n\n","sourceOld":"  /**\n   * Find a sample point on the intersection between two planes and the world.\n   * @param planetModel is the planet model.\n   * @param q is the second plane to consider.\n   * @return a sample point that is on the intersection between the two planes and the world.\n   */\n  public GeoPoint getSampleIntersectionPoint(final PlanetModel planetModel, final Plane q) {\n    final GeoPoint[] intersections = findIntersections(planetModel, q, NO_BOUNDS, NO_BOUNDS);\n    if (intersections.length == 0)\n      return null;\n    return intersections[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"b4e444678504caf66a8060b1d514383aa4feac0c":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}