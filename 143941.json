{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    if (refCount.getAndDecrement() == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936f1eae75daf11568fe1480aec9e06d2ef55367","date":1323215013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        commit();\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55d8646422d890ae0ab115271c3e0fa4395428fb","date":1323625972,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87d59b89777d04788b870fb4621d3280a39ada32","date":1323644570,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then pending\n   * changes (if any) are committed to the index and this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in commit() or doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.getAndDecrement();\n    if (rc == 1) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc <= 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount was \" + rc + \" before decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      readerFinished();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["6f8a4ddee78d8bc3c8c736c1cdb130b94cde0b89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#decRef().mjava","sourceNew":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: decreases the refCount of this IndexReader\n   * instance.  If the refCount drops to 0, then this\n   * reader is closed.  If an exception is hit, the refCount\n   * is unchanged.\n   *\n   * @throws IOException in case an IOException occurs in  doClose()\n   *\n   * @see #incRef\n   */\n  public final void decRef() throws IOException {\n    ensureOpen();\n    final int rc = refCount.decrementAndGet();\n    if (rc == 0) {\n      boolean success = false;\n      try {\n        doClose();\n        success = true;\n      } finally {\n        if (!success) {\n          // Put reference back on failure\n          refCount.incrementAndGet();\n        }\n      }\n      notifyReaderClosedListeners();\n    } else if (rc < 0) {\n      throw new IllegalStateException(\"too many decRef calls: refCount is \" + rc + \" after decrement\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","87d59b89777d04788b870fb4621d3280a39ada32"],"87d59b89777d04788b870fb4621d3280a39ada32":["55d8646422d890ae0ab115271c3e0fa4395428fb"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"55d8646422d890ae0ab115271c3e0fa4395428fb":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["87d59b89777d04788b870fb4621d3280a39ada32"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","936f1eae75daf11568fe1480aec9e06d2ef55367"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"87d59b89777d04788b870fb4621d3280a39ada32":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"55d8646422d890ae0ab115271c3e0fa4395428fb":["87d59b89777d04788b870fb4621d3280a39ada32"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","e1f693ce507c40f77e3a92acd16c6b79cdd730e4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["936f1eae75daf11568fe1480aec9e06d2ef55367"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","55d8646422d890ae0ab115271c3e0fa4395428fb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}