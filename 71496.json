{"path":"lucene/core/src/java/org/apache/lucene/index/StoredDocument#get(String).mjava","commits":[{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredDocument#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/StoredDocument#get(String).mjava","sourceNew":"   /** Returns the string value of the field with the given name if any exist in\n    * this document, or null.  If multiple fields exist with this name, this\n    * method returns the first value added. If only binary fields with this name\n    * exist, returns null.\n    * For {@link IntField}, {@link LongField}, {@link\n    * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n    * the actual numeric field instance back, use {@link #getField}.\n    */\n   public final String get(String name) {\n     for (StorableField field : fields) {\n       if (field.name().equals(name) && field.stringValue() != null) {\n         return field.stringValue();\n       }\n     }\n     return null;\n   }\n\n","sourceOld":"   /** Returns the string value of the field with the given name if any exist in\n    * this document, or null.  If multiple fields exist with this name, this\n    * method returns the first value added. If only binary fields with this name\n    * exist, returns null.\n    * For {@link IntField}, {@link LongField}, {@link\n    * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n    * the actual numeric field instance back, use {@link #getField}.\n    */\n   public final String get(String name) {\n     for (StorableField field : fields) {\n       if (field.name().equals(name) && field.stringValue() != null) {\n         return field.stringValue();\n       }\n     }\n     return null;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredDocument#get(String).mjava","pathOld":"/dev/null","sourceNew":"   /** Returns the string value of the field with the given name if any exist in\n    * this document, or null.  If multiple fields exist with this name, this\n    * method returns the first value added. If only binary fields with this name\n    * exist, returns null.\n    * For {@link IntField}, {@link LongField}, {@link\n    * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n    * the actual numeric field instance back, use {@link #getField}.\n    */\n   public final String get(String name) {\n     for (StorableField field : fields) {\n       if (field.name().equals(name) && field.stringValue() != null) {\n         return field.stringValue();\n       }\n     }\n     return null;\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredDocument#get(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredDocument#get(String).mjava","sourceNew":"   /** Returns the string value of the field with the given name if any exist in\n    * this document, or null.  If multiple fields exist with this name, this\n    * method returns the first value added. If only binary fields with this name\n    * exist, returns null.\n    * For {@link org.apache.lucene.document.LegacyIntField}, {@link org.apache.lucene.document.LegacyLongField}, {@link\n    * org.apache.lucene.document.LegacyFloatField} and {@link org.apache.lucene.document.LegacyDoubleField} it returns the string value of the number. If you want\n    * the actual numeric field instance back, use {@link #getField}.\n    */\n   public final String get(String name) {\n     for (StorableField field : fields) {\n       if (field.name().equals(name) && field.stringValue() != null) {\n         return field.stringValue();\n       }\n     }\n     return null;\n   }\n\n","sourceOld":"   /** Returns the string value of the field with the given name if any exist in\n    * this document, or null.  If multiple fields exist with this name, this\n    * method returns the first value added. If only binary fields with this name\n    * exist, returns null.\n    * For {@link IntField}, {@link LongField}, {@link\n    * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n    * the actual numeric field instance back, use {@link #getField}.\n    */\n   public final String get(String name) {\n     for (StorableField field : fields) {\n       if (field.name().equals(name) && field.stringValue() != null) {\n         return field.stringValue();\n       }\n     }\n     return null;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredDocument#get(String).mjava","sourceNew":null,"sourceOld":"   /** Returns the string value of the field with the given name if any exist in\n    * this document, or null.  If multiple fields exist with this name, this\n    * method returns the first value added. If only binary fields with this name\n    * exist, returns null.\n    * For {@link org.apache.lucene.document.LegacyIntField}, {@link org.apache.lucene.document.LegacyLongField}, {@link\n    * org.apache.lucene.document.LegacyFloatField} and {@link org.apache.lucene.document.LegacyDoubleField} it returns the string value of the number. If you want\n    * the actual numeric field instance back, use {@link #getField}.\n    */\n   public final String get(String name) {\n     for (StorableField field : fields) {\n       if (field.name().equals(name) && field.stringValue() != null) {\n         return field.stringValue();\n       }\n     }\n     return null;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","409324b31a1419d7c05a38211168cf317e39be77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}