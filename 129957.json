{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","sourceNew":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(CategoryPath)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized(categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized(ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","sourceOld":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(CategoryPath)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized(categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized(ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","sourceNew":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(CategoryPath)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized (categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized (ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","sourceOld":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(CategoryPath)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized(categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized(ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","sourceNew":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(CategoryPath)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized (categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized (ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","sourceOld":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(CategoryPath)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized(categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized(ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","sourceNew":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(FacetLabel)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized (categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized (ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","sourceOld":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(CategoryPath)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized (categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized (ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#setCacheSize(int).mjava","sourceNew":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(FacetLabel)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized (categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized (ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","sourceOld":"  /**\n   * setCacheSize controls the maximum allowed size of each of the caches\n   * used by {@link #getPath(int)} and {@link #getOrdinal(CategoryPath)}.\n   * <P>\n   * Currently, if the given size is smaller than the current size of\n   * a cache, it will not shrink, and rather we be limited to its current\n   * size.\n   * @param size the new maximum cache size, in number of entries.\n   */\n  public void setCacheSize(int size) {\n    ensureOpen();\n    synchronized (categoryCache) {\n      categoryCache.setMaxSize(size);\n    }\n    synchronized (ordinalCache) {\n      ordinalCache.setMaxSize(size);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["407687e67faf6e1f02a211ca078d8e3eed631027","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}