{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#clausesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","commits":[{"id":"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f","date":1536587656,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#clausesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#policiesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","sourceNew":"  public static Map<String, List<Clause>> clausesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::create)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.getGlobalTag().name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","sourceOld":"  public static Map<String, List<Clause>> policiesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::create)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.getGlobalTag().name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#clausesFromMap(Map[String,List[Map[String,Object]]],List[String]).mjava","sourceNew":null,"sourceOld":"  public static Map<String, List<Clause>> clausesFromMap(Map<String, List<Map<String, Object>>> map, List<String> newParams) {\n    Map<String, List<Clause>> newPolicies = new HashMap<>();\n    map.forEach((s, l1) ->\n        newPolicies.put(s, l1.stream()\n            .map(Clause::create)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.getGlobalTag().name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(newParams);\n              return true;\n            })\n            .sorted()\n            .collect(collectingAndThen(toList(), Collections::unmodifiableList))));\n    return newPolicies;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}