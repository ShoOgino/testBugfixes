{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","commits":[{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) ObjectBuilder.getVal(new JSONParser(\n            new StringReader(response)));\n      } catch (JSONParser.ParseException e) {\n        fail(e.getMessage());\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["61d55d0cc95bfc03461b5c355153ca28c49076eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) ObjectBuilder.getVal(new JSONParser(\n            new StringReader(response)));\n      } catch (JSONParser.ParseException e) {\n        fail(e.getMessage());\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d55d0cc95bfc03461b5c355153ca28c49076eb","date":1515469157,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","sourceNew":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) ObjectBuilder.getVal(new JSONParser(\n            new StringReader(response)));\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) ObjectBuilder.getVal(new JSONParser(\n            new StringReader(response)));\n      } catch (JSONParser.ParseException e) {\n        fail(e.getMessage());\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","bugFix":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","sourceNew":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) ObjectBuilder.getVal(new JSONParser(\n            new StringReader(response)));\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) ObjectBuilder.getVal(new JSONParser(\n            new StringReader(response)));\n      } catch (JSONParser.ParseException e) {\n        fail(e.getMessage());\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","sourceNew":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) ObjectBuilder.getVal(new JSONParser(\n            new StringReader(response)));\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":"  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#postDataAndGetResponse(CloudSolrClient,String,ByteBuffer,String,String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        httpPost.addHeader(new BasicHeader(\"user\", username));\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      log.info(\"Uploading configset with user {}\", username);\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map postDataAndGetResponse(CloudSolrClient cloudClient,\n      String uri, ByteBuffer bytarr, String username, String password) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Map m = null;\n    \n    try {\n      httpPost = new HttpPost(uri);\n      \n      if (username != null) {\n        String userPass = username + \":\" + password;\n        String encoded = Base64.byteArrayToBase64(userPass.getBytes(UTF_8));\n        BasicHeader header = new BasicHeader(\"Authorization\", \"Basic \" + encoded);\n        httpPost.setHeader(header);\n      }\n\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr\n          .arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost)\n          .getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        m = (Map) Utils.fromJSONString(response);\n      } catch (JSONParser.ParseException e) {\n        System.err.println(\"err response: \" + response);\n        throw new AssertionError(e);\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["917e62f3497c83634a13edd833e8e21dd6cc6496","61d55d0cc95bfc03461b5c355153ca28c49076eb"],"61d55d0cc95bfc03461b5c355153ca28c49076eb":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3732e34f27916e98704736cc6924a34fffca249a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7612891097d4751617c396cdd7a092833799147"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["b94236357aaa22b76c10629851fe4e376e0cea82","61d55d0cc95bfc03461b5c355153ca28c49076eb"],"b94236357aaa22b76c10629851fe4e376e0cea82":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"61d55d0cc95bfc03461b5c355153ca28c49076eb":["b94236357aaa22b76c10629851fe4e376e0cea82"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["c7612891097d4751617c396cdd7a092833799147"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["917e62f3497c83634a13edd833e8e21dd6cc6496","3732e34f27916e98704736cc6924a34fffca249a"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3732e34f27916e98704736cc6924a34fffca249a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3732e34f27916e98704736cc6924a34fffca249a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}