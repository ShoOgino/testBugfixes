{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","commits":[{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      if (minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, acceptDocs);\n      }\n\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, acceptDocs);\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return super.bulkScorer(context, acceptDocs);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (optional.size() == 0) {\n        return null;\n      }\n\n      return new BooleanScorer(this, disableCoord, maxCoord, optional);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      if (minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, acceptDocs);\n      }\n\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, acceptDocs);\n        } else if (c.isProhibited()) {\n          // TODO: there are some cases where BooleanScorer could do this faster\n          return super.bulkScorer(context, acceptDocs);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      if (optional.size() == 0) {\n        return null;\n      }\n\n      return new BooleanScorer(this, disableCoord, maxCoord, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs, needsScores);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs, needsScores);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs, needsScores);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs, needsScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n      if (bulkScorer != null) { // BooleanScorer is applicable\n        // TODO: what is the right heuristic here?\n        final long costThreshold;\n        if (minNrShouldMatch <= 1) {\n          // when all clauses are optional, use BooleanScorer aggressively\n          // TODO: is there actually a threshold under which we should rather\n          // use the regular scorer?\n          costThreshold = -1;\n        } else {\n          // when a minimum number of clauses should match, BooleanScorer is\n          // going to score all windows that have at least minNrShouldMatch\n          // matches in the window. But there is no way to know if there is\n          // an intersection (all clauses might match a different doc ID and\n          // there will be no matches in the end) so we should only use\n          // BooleanScorer if matches are very dense\n          costThreshold = context.reader().maxDoc() / 3;\n        }\n\n        if (bulkScorer.cost() > costThreshold) {\n          return bulkScorer;\n        }\n      }\n      return super.bulkScorer(context, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["fb17639909a369c1e64866842e5c213440acc17e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}