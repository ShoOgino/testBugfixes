{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(delTerm, docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends IndexDocument> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f6df47cbfd656ea50ca2996361f7954531ee18b","date":1464133540,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        long seqNo = docWriter.updateDocuments(docs, analyzer, delTerm);\n        if (seqNo < 0) {\n          seqNo = -seqNo;\n          processEvents(true, false);\n        }\n        success = true;\n        return seqNo;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n\n      // dead code but javac disagrees\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ebfabc294f23b88b6a39722a02c9d39b353195","date":1464343867,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        long seqNo = docWriter.updateDocuments(docs, analyzer, delTerm);\n        if (seqNo < 0) {\n          seqNo = -seqNo;\n          processEvents(true, false);\n        }\n        success = true;\n        return seqNo;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n\n      // dead code but javac disagrees\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        long seqNo = docWriter.updateDocuments(docs, analyzer, delTerm);\n        if (seqNo < 0) {\n          seqNo = -seqNo;\n          processEvents(true, false);\n        }\n        success = true;\n        return seqNo;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n\n      // dead code but javac disagrees\n      return -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        long seqNo = docWriter.updateDocuments(docs, analyzer, delTerm);\n        if (seqNo < 0) {\n          seqNo = -seqNo;\n          processEvents(true, false);\n        }\n        success = true;\n        return seqNo;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n\n      // dead code but javac disagrees\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        long seqNo = docWriter.updateDocuments(docs, analyzer, delTerm);\n        if (seqNo < 0) {\n          seqNo = -seqNo;\n          processEvents(true, false);\n        }\n        success = true;\n        return seqNo;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n\n      // dead code but javac disagrees\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        long seqNo = docWriter.updateDocuments(docs, analyzer, delTerm);\n        if (seqNo < 0) {\n          seqNo = -seqNo;\n          processEvents(true, false);\n        }\n        success = true;\n        return seqNo;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n\n      // dead code but javac disagrees\n      return -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        if (docWriter.updateDocuments(docs, analyzer, delTerm)) {\n          processEvents(true, false);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments(delTerm == null ? null : DocumentsWriterDeleteQueue.newNode(delTerm), docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically deletes documents matching the provided\n   * delTerm and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents. \n   *\n   * See {@link #addDocuments(Iterable)}.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long updateDocuments(Term delTerm, Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      try {\n        long seqNo = docWriter.updateDocuments(docs, analyzer, delTerm);\n        if (seqNo < 0) {\n          seqNo = -seqNo;\n          processEvents(true, false);\n        }\n        success = true;\n        return seqNo;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"updateDocuments\");\n\n      // dead code but javac disagrees\n      return -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6483e4260c08168709c02238ae083a51519a28dd":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","16ebfabc294f23b88b6a39722a02c9d39b353195"],"191128ac5b85671b1671e2c857437694283b6ebf":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6483e4260c08168709c02238ae083a51519a28dd"],"110125c995236a7f61057dd04b039ed2d267f3a1":["191128ac5b85671b1671e2c857437694283b6ebf"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["0f6df47cbfd656ea50ca2996361f7954531ee18b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","191128ac5b85671b1671e2c857437694283b6ebf"],"1d028314cced5858683a1bb4741423d0f934257b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0f6df47cbfd656ea50ca2996361f7954531ee18b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["110125c995236a7f61057dd04b039ed2d267f3a1"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["110125c995236a7f61057dd04b039ed2d267f3a1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["6483e4260c08168709c02238ae083a51519a28dd"],"110125c995236a7f61057dd04b039ed2d267f3a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0f6df47cbfd656ea50ca2996361f7954531ee18b":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f6df47cbfd656ea50ca2996361f7954531ee18b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}