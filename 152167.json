{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","sourceNew":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n    \n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    \n  }\n\n","sourceOld":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n    \n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","sourceNew":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n\n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n    \n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","sourceNew":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n\n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n\n  }\n\n","sourceOld":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n    \n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}