{"path":"src/test/org/apache/lucene/search/TestPositionIncrement#testIncrementingPositions().mjava","commits":[{"id":"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca","date":1064151933,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testIncrementingPositions().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Basic analyzer behavior should be to keep sequential terms in one\n   * increment from one another.\n   */\n  public void testIncrementingPositions() throws Exception {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"field\",\n                                new StringReader(\"one two three four five\"));\n\n    while (true) {\n      Token token = ts.next();\n      if (token == null) break;\n      assertEquals(token.termText(), 1, token.getPositionIncrement());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testIncrementingPositions().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testIncrementingPositions().mjava","sourceNew":"  /**\n   * Basic analyzer behavior should be to keep sequential terms in one\n   * increment from one another.\n   */\n  public void testIncrementingPositions() throws Exception {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"field\",\n                                new StringReader(\"one two three four five\"));\n    final Token reusableToken = new Token();\n    for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n      assertEquals(nextToken.term(), 1, nextToken.getPositionIncrement());\n    }\n  }\n\n","sourceOld":"  /**\n   * Basic analyzer behavior should be to keep sequential terms in one\n   * increment from one another.\n   */\n  public void testIncrementingPositions() throws Exception {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"field\",\n                                new StringReader(\"one two three four five\"));\n\n    while (true) {\n      Token token = ts.next();\n      if (token == null) break;\n      assertEquals(token.termText(), 1, token.getPositionIncrement());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testIncrementingPositions().mjava","sourceNew":null,"sourceOld":"  /**\n   * Basic analyzer behavior should be to keep sequential terms in one\n   * increment from one another.\n   */\n  public void testIncrementingPositions() throws Exception {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    TokenStream ts = analyzer.tokenStream(\"field\",\n                                new StringReader(\"one two three four five\"));\n    final Token reusableToken = new Token();\n    for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n      assertEquals(nextToken.term(), 1, nextToken.getPositionIncrement());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca"],"17a7e7afb30f1107a3e43eb28dfc3dc4fb07b1ca":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}