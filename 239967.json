{"path":"solr/core/src/java/org/apache/solr/handler/export/FloatValue#setCurrentValue(int).mjava","commits":[{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/FloatValue#setCurrentValue(int).mjava","pathOld":"/dev/null","sourceNew":"  public void setCurrentValue(int docId) throws IOException {\n    if (docId < lastDocID) {\n      throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + docId);\n    }\n    lastDocID = docId;\n    int curDocID = vals.docID();\n    if (docId > curDocID) {\n      curDocID = vals.advance(docId);\n    }\n    if (docId == curDocID) {\n      currentValue = Float.intBitsToFloat((int)vals.longValue());\n    } else {\n      currentValue = 0f;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7eb5b8b79759ebbe90a0605a50c666ba0b83789","date":1535046490,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/FloatValue#setCurrentValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/FloatValue#setCurrentValue(int).mjava","sourceNew":"  public void setCurrentValue(int docId) throws IOException {\n    if (docId < lastDocID) {\n      throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + docId);\n    }\n    lastDocID = docId;\n    int curDocID = vals.docID();\n    if (docId > curDocID) {\n      curDocID = vals.advance(docId);\n    }\n    if (docId == curDocID) {\n      present = true;\n      currentValue = Float.intBitsToFloat((int)vals.longValue());\n    } else {\n      present = false;\n      currentValue = 0f;\n    }\n  }\n\n","sourceOld":"  public void setCurrentValue(int docId) throws IOException {\n    if (docId < lastDocID) {\n      throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + docId);\n    }\n    lastDocID = docId;\n    int curDocID = vals.docID();\n    if (docId > curDocID) {\n      curDocID = vals.advance(docId);\n    }\n    if (docId == curDocID) {\n      currentValue = Float.intBitsToFloat((int)vals.longValue());\n    } else {\n      currentValue = 0f;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7eb5b8b79759ebbe90a0605a50c666ba0b83789":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7eb5b8b79759ebbe90a0605a50c666ba0b83789"]},"commit2Childs":{"a7eb5b8b79759ebbe90a0605a50c666ba0b83789":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a7eb5b8b79759ebbe90a0605a50c666ba0b83789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}