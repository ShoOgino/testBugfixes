{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","commits":[{"id":"1346e81f172438a4f28d91266cdd03851f94b831","date":1318404834,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead,ValueType type)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      docToOrdIndex = PackedInts.getReader(idxIn);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28088b0a688977b79dec2cc9119cff2fb4aab7ee","date":1321197996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,Type,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#BytesSortedSourceBase(IndexInput,IndexInput,Comparator[BytesRef],PagedBytes,long,ValueType,boolean).mjava","sourceNew":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, Type type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","sourceOld":"    protected BytesSortedSourceBase(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comp, PagedBytes pagedBytes, long bytesToRead, ValueType type, boolean hasOffsets)\n        throws IOException {\n      super(type, comp);\n      assert bytesToRead <= datIn.length() : \" file size is less than the expected size diff: \"\n          + (bytesToRead - datIn.length()) + \" pos: \" + datIn.getFilePointer();\n      this.datIn = datIn;\n      this.pagedBytes = pagedBytes;\n      this.pagedBytes.copy(datIn, bytesToRead);\n      data = pagedBytes.freeze(true);\n      this.idxIn = idxIn;\n      ordToOffsetIndex = hasOffsets ? PackedInts.getReader(idxIn) : null; \n      docToOrdIndex = PackedInts.getReader(idxIn);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1346e81f172438a4f28d91266cdd03851f94b831":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["1346e81f172438a4f28d91266cdd03851f94b831"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["28088b0a688977b79dec2cc9119cff2fb4aab7ee","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"1346e81f172438a4f28d91266cdd03851f94b831":["28088b0a688977b79dec2cc9119cff2fb4aab7ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1346e81f172438a4f28d91266cdd03851f94b831"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"28088b0a688977b79dec2cc9119cff2fb4aab7ee":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}