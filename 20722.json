{"path":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","commits":[{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","sourceNew":"  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    return parse(rdr, Collections.emptySet());\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794ba1462fc458bbb71357c1da71ce10fc286e15","date":1496295780,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","sourceNew":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","sourceNew":"  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    return parse(rdr, Collections.emptySet());\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n    parser.setFlags(parser.getFlags() |\n        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |\n        JSONParser.OPTIONAL_OUTER_BRACES\n    );\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","sourceNew":"  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    return parse(rdr, Collections.emptySet());\n\n  }\n\n","sourceOld":"  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    return parse(rdr, Collections.emptySet());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/CommandOperation#parse(Reader).mjava","sourceNew":"  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    return parse(rdr, Collections.emptySet());\n\n  }\n\n","sourceOld":"  /**\n   * Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if (parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for (; ; ) {\n      int ev = parser.nextEvent();\n      if (ev == JSONParser.OBJECT_END) return operations;\n      Object key = ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          if (!(o instanceof Map)) {\n            operations.add(new CommandOperation(String.valueOf(key), list));\n            break;\n          } else {\n            operations.add(new CommandOperation(String.valueOf(key), o));\n          }\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["794ba1462fc458bbb71357c1da71ce10fc286e15","a513b6a92751e54c76fb5447948c9e7d437163a7"],"794ba1462fc458bbb71357c1da71ce10fc286e15":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"28288370235ed02234a64753cdbf0c6ec096304a":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["794ba1462fc458bbb71357c1da71ce10fc286e15","a513b6a92751e54c76fb5447948c9e7d437163a7","28288370235ed02234a64753cdbf0c6ec096304a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"794ba1462fc458bbb71357c1da71ce10fc286e15":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}