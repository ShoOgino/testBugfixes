{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","commits":[{"id":"d6d62214e818b74b9fa407c0c51956e44878a46a","date":1438266500,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    try(HttpSolrClient server = new HttpSolrClient(jetty.getBaseUrl().toString() +\n        \"/debug/foo\")) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7492876210e3fede4e4b3ec121c53501c6c85d40","date":1438289337,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","sourceNew":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    try(HttpSolrClient server = new HttpSolrClient(jetty.getBaseUrl().toString() +\n        \"/debug/foo\")) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","sourceOld":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    try(HttpSolrClient server = new HttpSolrClient(jetty.getBaseUrl().toString() +\n        \"/debug/foo\")) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","sourceNew":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient server = getHttpSolrClient(clientUrl)) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","sourceOld":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    try(HttpSolrClient server = new HttpSolrClient(jetty.getBaseUrl().toString() +\n        \"/debug/foo\")) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","sourceNew":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient server = getHttpSolrClient(clientUrl)) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","sourceOld":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    try(HttpSolrClient server = new HttpSolrClient(jetty.getBaseUrl().toString() +\n        \"/debug/foo\")) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","sourceNew":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient server = getHttpSolrClient(clientUrl)) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      expectThrows(Exception.class, () -> server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET));\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","sourceOld":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient server = getHttpSolrClient(clientUrl)) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","sourceNew":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient server = getHttpSolrClient(clientUrl)) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      expectThrows(Exception.class, () -> server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET));\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","sourceOld":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient server = getHttpSolrClient(clientUrl)) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testInterceptors().mjava","sourceNew":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient server = getHttpSolrClient(clientUrl)) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      expectThrows(Exception.class, () -> server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET));\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","sourceOld":"  /**\n   * Set cookies via interceptor\n   * Change the request via an interceptor\n   * Ensure cookies are actually set and that request is actually changed\n   */\n  @Test\n  public void testInterceptors() {\n    DebugServlet.clear();\n    HttpClientUtil.addRequestInterceptor(changeRequestInterceptor);\n    HttpClientUtil.addRequestInterceptor(cookieSettingRequestInterceptor);    \n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient server = getHttpSolrClient(clientUrl)) {\n\n      SolrQuery q = new SolrQuery(\"foo\");\n      q.setParam(\"a\", \"\\u1234\");\n      try {\n        server.query(q, random().nextBoolean()?METHOD.POST:METHOD.GET);\n      } catch (Throwable t) {}\n\n      // Assert cookies from UseContextCallback \n      assertNotNull(DebugServlet.cookies);\n      boolean foundCookie = false;\n      for (javax.servlet.http.Cookie cookie : DebugServlet.cookies) {\n        if (cookieName.equals(cookie.getName())\n            && cookieValue.equals(cookie.getValue())) {\n          foundCookie = true;\n          break;\n        }\n      }\n      assertTrue(foundCookie);\n\n      // Assert request changes by ChangeRequestCallback\n      assertEquals(\"\\u1234\", DebugServlet.parameters.get(\"a\")[0]);\n      assertEquals(\"\\u4321\", DebugServlet.parameters.get(\"b\")[0]);\n\n    } catch (IOException ex) {\n      throw new RuntimeException(ex);\n    } finally {\n      HttpClientUtil.removeRequestInterceptor(changeRequestInterceptor);\n      HttpClientUtil.removeRequestInterceptor(cookieSettingRequestInterceptor);    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6d62214e818b74b9fa407c0c51956e44878a46a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["7492876210e3fede4e4b3ec121c53501c6c85d40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7492876210e3fede4e4b3ec121c53501c6c85d40","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"7492876210e3fede4e4b3ec121c53501c6c85d40":["d6d62214e818b74b9fa407c0c51956e44878a46a"]},"commit2Childs":{"d6d62214e818b74b9fa407c0c51956e44878a46a":["7492876210e3fede4e4b3ec121c53501c6c85d40"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"7492876210e3fede4e4b3ec121c53501c6c85d40":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}