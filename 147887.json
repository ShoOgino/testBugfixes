{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene84/TestForDeltaUtil#testEncodeDecode().mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene84/TestForDeltaUtil#testEncodeDecode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 50, 1000);\n    final int[] values = new int[iterations * ForUtil.BLOCK_SIZE];\n\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = TestUtil.nextInt(random(), 1, 31-7);\n      for (int j = 0; j < ForUtil.BLOCK_SIZE; ++j) {\n        values[i * ForUtil.BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n            1, (int) PackedInts.maxValue(bpv));\n      }\n    }\n\n    final Directory d = new ByteBuffersDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForDeltaUtil forDeltaUtil = new ForDeltaUtil(new ForUtil());\n\n      for (int i = 0; i < iterations; ++i) {\n        long[] source = new long[ForUtil.BLOCK_SIZE];\n        for (int j = 0; j < ForUtil.BLOCK_SIZE; ++j) {\n          source[j] = values[i*ForUtil.BLOCK_SIZE+j];\n        }\n        forDeltaUtil.encodeDeltas(source, out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForDeltaUtil forDeltaUtil = new ForDeltaUtil(new ForUtil());\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextInt(5) == 0) {\n          forDeltaUtil.skip(in);\n          continue;\n        }\n        long base = 0;\n        final long[] restored = new long[ForUtil.BLOCK_SIZE];\n        forDeltaUtil.decodeAndPrefixSum(in, base, restored);\n        final long[] expected = new long[ForUtil.BLOCK_SIZE];\n        for (int j = 0; j < ForUtil.BLOCK_SIZE; ++j) {\n          expected[j] = values[i*ForUtil.BLOCK_SIZE+j];\n          if (j > 0) {\n            expected[j] += expected[j-1];\n          } else {\n            expected[j] += base;\n          }\n        }\n        assertArrayEquals(Arrays.toString(restored), expected, restored);\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}