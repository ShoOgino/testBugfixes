{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","commits":[{"id":"f4fbde3b8cf6b01501201d080622f6a282d0b5df","date":1383267008,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"/dev/null","sourceNew":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    response = CollectionAdminRequest.createCollection(\"solrj_collection\",\n                                                       2, 2, null,\n                                                       null, \"conf1\", \"myOwnField\",\n                                                       server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.createCollection(\"solrj_implicit\",\n                                                       \"shardA,shardB\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    response = CollectionAdminRequest.createShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_implicit\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    response = CollectionAdminRequest.createCollection(\"conf1\", 4, server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    response = CollectionAdminRequest.reloadCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.createAlias(\"solrj_alias\", \"conf1,solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.deleteAlias(\"solrj_alias\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.splitShard(\"conf1\", \"shard1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4405038d08faececfb7bbe91bcfcd096354b97b6","date":1383315247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    response = CollectionAdminRequest.createCollection(\"solrj_collection\",\n                                                       2, 2, null,\n                                                       null, \"conf1\", \"myOwnField\",\n                                                       server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.createCollection(\"solrj_implicit\",\n                                                       \"shardA,shardB\", \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    response = CollectionAdminRequest.createShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_implicit\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    response = CollectionAdminRequest.createCollection(\"conf1\", 4, \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    response = CollectionAdminRequest.reloadCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.createAlias(\"solrj_alias\", \"conf1,solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.deleteAlias(\"solrj_alias\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.splitShard(\"conf1\", \"shard1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","sourceOld":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    response = CollectionAdminRequest.createCollection(\"solrj_collection\",\n                                                       2, 2, null,\n                                                       null, \"conf1\", \"myOwnField\",\n                                                       server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.createCollection(\"solrj_implicit\",\n                                                       \"shardA,shardB\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    response = CollectionAdminRequest.createShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_implicit\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    response = CollectionAdminRequest.createCollection(\"conf1\", 4, server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    response = CollectionAdminRequest.reloadCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.createAlias(\"solrj_alias\", \"conf1,solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.deleteAlias(\"solrj_alias\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.splitShard(\"conf1\", \"shard1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    response = CollectionAdminRequest.createCollection(\"solrj_collection\",\n                                                       2, 2, 1000,\n                                                       null, \"conf1\", \"myOwnField\",\n                                                       server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.createCollection(\"solrj_implicit\",\n                                                       \"shardA,shardB\", \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    response = CollectionAdminRequest.createShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_implicit\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    response = CollectionAdminRequest.createCollection(\"conf1\", 4, \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    response = CollectionAdminRequest.reloadCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.createAlias(\"solrj_alias\", \"conf1,solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.deleteAlias(\"solrj_alias\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.splitShard(\"conf1\", \"shard1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","sourceOld":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    response = CollectionAdminRequest.createCollection(\"solrj_collection\",\n                                                       2, 2, null,\n                                                       null, \"conf1\", \"myOwnField\",\n                                                       server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.createCollection(\"solrj_implicit\",\n                                                       \"shardA,shardB\", \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    response = CollectionAdminRequest.createShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_implicit\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    response = CollectionAdminRequest.createCollection(\"conf1\", 4, \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    response = CollectionAdminRequest.reloadCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.createAlias(\"solrj_alias\", \"conf1,solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.deleteAlias(\"solrj_alias\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.splitShard(\"conf1\", \"shard1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    response = CollectionAdminRequest.createCollection(\"solrj_collection\",\n                                                       2, 2, null,\n                                                       null, \"conf1\", \"myOwnField\",\n                                                       server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.createCollection(\"solrj_implicit\",\n                                                       \"shardA,shardB\", \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    response = CollectionAdminRequest.createShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_implicit\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    response = CollectionAdminRequest.createCollection(\"conf1\", 4, \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    response = CollectionAdminRequest.reloadCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.createAlias(\"solrj_alias\", \"conf1,solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.deleteAlias(\"solrj_alias\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.splitShard(\"conf1\", \"shard1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","sourceOld":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    response = CollectionAdminRequest.createCollection(\"solrj_collection\",\n                                                       2, 2, 1000,\n                                                       null, \"conf1\", \"myOwnField\",\n                                                       server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.createCollection(\"solrj_implicit\",\n                                                       \"shardA,shardB\", \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    response = CollectionAdminRequest.createShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_implicit\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    response = CollectionAdminRequest.createCollection(\"conf1\", 4, \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    response = CollectionAdminRequest.reloadCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.createAlias(\"solrj_alias\", \"conf1,solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.deleteAlias(\"solrj_alias\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.splitShard(\"conf1\", \"shard1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a7d7ef06ef6f04ba2de657e90e0458048a967c6","date":1409691631,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_collection\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    // TODO: This test tries to validates defaulting to implicit router.\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_implicit\");\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(\"solrj_implicit\");\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(\"solrj_implicit\");\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_implicit\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"conf1\");\n    createCollectionRequest.setNumShards(4);\n    createCollectionRequest.setConfigName(\"conf1\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    CollectionAdminRequest.Reload reloadCollectionRequest = new CollectionAdminRequest.Reload();\n    reloadCollectionRequest.setCollectionName(\"conf1\");\n    response = reloadCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.CreateAlias createAliasRequest = new CollectionAdminRequest\n        .CreateAlias();\n    createAliasRequest.setCollectionName(\"solrj_alias\");\n    createAliasRequest.setAliasedCollections(\"conf1,solrj_collection\");\n    response = createAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.DeleteAlias deleteAliasRequest = new CollectionAdminRequest.DeleteAlias();\n    deleteAliasRequest.setCollectionName(\"solrj_alias\");\n    deleteAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(\"conf1\");\n    splitShardRequest.setShardName(\"shard1\");\n    response = splitShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"conf1\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_collection\");\n    deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","sourceOld":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    response = CollectionAdminRequest.createCollection(\"solrj_collection\",\n                                                       2, 2, null,\n                                                       null, \"conf1\", \"myOwnField\",\n                                                       server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    response = CollectionAdminRequest.createCollection(\"solrj_implicit\",\n                                                       \"shardA,shardB\", \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    response = CollectionAdminRequest.createShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteShard(\"solrj_implicit\", \"shardC\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_implicit\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    response = CollectionAdminRequest.createCollection(\"conf1\", 4, \"conf1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    response = CollectionAdminRequest.reloadCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.createAlias(\"solrj_alias\", \"conf1,solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.deleteAlias(\"solrj_alias\", server);\n    assertEquals(0, response.getStatus());\n\n    response = CollectionAdminRequest.splitShard(\"conf1\", \"shard1\", server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    response = CollectionAdminRequest.deleteCollection(\"conf1\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    response = CollectionAdminRequest.deleteCollection(\"solrj_collection\", server);\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df52b06b04088e482ec7d53e7640065aab893e4f","date":1415031082,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_collection\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    // TODO: This test tries to validates defaulting to implicit router.\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_implicit\");\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(\"solrj_implicit\");\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(\"solrj_implicit\");\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_implicit\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"conf1\");\n    createCollectionRequest.setNumShards(4);\n    createCollectionRequest.setConfigName(\"conf1\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    CollectionAdminRequest.Reload reloadCollectionRequest = new CollectionAdminRequest.Reload();\n    reloadCollectionRequest.setCollectionName(\"conf1\");\n    response = reloadCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.CreateAlias createAliasRequest = new CollectionAdminRequest\n        .CreateAlias();\n    createAliasRequest.setCollectionName(\"solrj_alias\");\n    createAliasRequest.setAliasedCollections(\"conf1,solrj_collection\");\n    response = createAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.DeleteAlias deleteAliasRequest = new CollectionAdminRequest.DeleteAlias();\n    deleteAliasRequest.setCollectionName(\"solrj_alias\");\n    deleteAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(\"conf1\");\n    splitShardRequest.setShardName(\"shard1\");\n    response = splitShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_1_replica1\").get(\"status\"));\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"conf1\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_collection\");\n    deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","sourceOld":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_collection\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    // TODO: This test tries to validates defaulting to implicit router.\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_implicit\");\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(\"solrj_implicit\");\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(\"solrj_implicit\");\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_implicit\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"conf1\");\n    createCollectionRequest.setNumShards(4);\n    createCollectionRequest.setConfigName(\"conf1\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    CollectionAdminRequest.Reload reloadCollectionRequest = new CollectionAdminRequest.Reload();\n    reloadCollectionRequest.setCollectionName(\"conf1\");\n    response = reloadCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.CreateAlias createAliasRequest = new CollectionAdminRequest\n        .CreateAlias();\n    createAliasRequest.setCollectionName(\"solrj_alias\");\n    createAliasRequest.setAliasedCollections(\"conf1,solrj_collection\");\n    response = createAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.DeleteAlias deleteAliasRequest = new CollectionAdminRequest.DeleteAlias();\n    deleteAliasRequest.setCollectionName(\"solrj_alias\");\n    deleteAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(\"conf1\");\n    splitShardRequest.setShardName(\"shard1\");\n    response = splitShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"conf1\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_collection\");\n    deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d959b945238803001aea70046c4f14f69a542394","date":1418941658,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_collection\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    // TODO: This test tries to validates defaulting to implicit router.\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_implicit\");\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    // Test Creating a collection with new stateformat.\n    String collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setStateFormat(2);\n    \n    response = createCollectionRequest.process(server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    CollectionAdminRequest requestStatusRequest = new CollectionAdminRequest.RequestStatus();\n    requestStatusRequest.setCollectionName(collectionName);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() ,\n        stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCollection#getStateFormat() must be > 1\",\n        cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n    \n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(\"solrj_implicit\");\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(\"solrj_implicit\");\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_implicit\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"conf1\");\n    createCollectionRequest.setNumShards(4);\n    createCollectionRequest.setConfigName(\"conf1\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    CollectionAdminRequest.Reload reloadCollectionRequest = new CollectionAdminRequest.Reload();\n    reloadCollectionRequest.setCollectionName(\"conf1\");\n    response = reloadCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.CreateAlias createAliasRequest = new CollectionAdminRequest\n        .CreateAlias();\n    createAliasRequest.setCollectionName(\"solrj_alias\");\n    createAliasRequest.setAliasedCollections(\"conf1,solrj_collection\");\n    response = createAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.DeleteAlias deleteAliasRequest = new CollectionAdminRequest.DeleteAlias();\n    deleteAliasRequest.setCollectionName(\"solrj_alias\");\n    deleteAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(\"conf1\");\n    splitShardRequest.setShardName(\"shard1\");\n    response = splitShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_1_replica1\").get(\"status\"));\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"conf1\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_collection\");\n    deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","sourceOld":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_collection\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    // TODO: This test tries to validates defaulting to implicit router.\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_implicit\");\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(\"solrj_implicit\");\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(\"solrj_implicit\");\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_implicit\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"conf1\");\n    createCollectionRequest.setNumShards(4);\n    createCollectionRequest.setConfigName(\"conf1\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    CollectionAdminRequest.Reload reloadCollectionRequest = new CollectionAdminRequest.Reload();\n    reloadCollectionRequest.setCollectionName(\"conf1\");\n    response = reloadCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.CreateAlias createAliasRequest = new CollectionAdminRequest\n        .CreateAlias();\n    createAliasRequest.setCollectionName(\"solrj_alias\");\n    createAliasRequest.setAliasedCollections(\"conf1,solrj_collection\");\n    response = createAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.DeleteAlias deleteAliasRequest = new CollectionAdminRequest.DeleteAlias();\n    deleteAliasRequest.setCollectionName(\"solrj_alias\");\n    deleteAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(\"conf1\");\n    splitShardRequest.setShardName(\"shard1\");\n    response = splitShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_1_replica1\").get(\"status\"));\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"conf1\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_collection\");\n    deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2373ef7aa009ed6c0126304bf9bfda9bdc15f7e8","date":1418943994,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_collection\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    // TODO: This test tries to validates defaulting to implicit router.\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_implicit\");\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    // Test Creating a collection with new stateformat.\n    String collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setStateFormat(2);\n    \n    response = createCollectionRequest.process(server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n    \n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(\"solrj_implicit\");\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(\"solrj_implicit\");\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_implicit\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"conf1\");\n    createCollectionRequest.setNumShards(4);\n    createCollectionRequest.setConfigName(\"conf1\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    CollectionAdminRequest.Reload reloadCollectionRequest = new CollectionAdminRequest.Reload();\n    reloadCollectionRequest.setCollectionName(\"conf1\");\n    response = reloadCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.CreateAlias createAliasRequest = new CollectionAdminRequest\n        .CreateAlias();\n    createAliasRequest.setCollectionName(\"solrj_alias\");\n    createAliasRequest.setAliasedCollections(\"conf1,solrj_collection\");\n    response = createAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.DeleteAlias deleteAliasRequest = new CollectionAdminRequest.DeleteAlias();\n    deleteAliasRequest.setCollectionName(\"solrj_alias\");\n    deleteAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(\"conf1\");\n    splitShardRequest.setShardName(\"shard1\");\n    response = splitShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_1_replica1\").get(\"status\"));\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"conf1\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_collection\");\n    deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","sourceOld":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_collection\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    // TODO: This test tries to validates defaulting to implicit router.\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_implicit\");\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    // Test Creating a collection with new stateformat.\n    String collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setStateFormat(2);\n    \n    response = createCollectionRequest.process(server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    CollectionAdminRequest requestStatusRequest = new CollectionAdminRequest.RequestStatus();\n    requestStatusRequest.setCollectionName(collectionName);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() ,\n        stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCollection#getStateFormat() must be > 1\",\n        cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n    \n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(\"solrj_implicit\");\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(\"solrj_implicit\");\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_implicit\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"conf1\");\n    createCollectionRequest.setNumShards(4);\n    createCollectionRequest.setConfigName(\"conf1\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    CollectionAdminRequest.Reload reloadCollectionRequest = new CollectionAdminRequest.Reload();\n    reloadCollectionRequest.setCollectionName(\"conf1\");\n    response = reloadCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.CreateAlias createAliasRequest = new CollectionAdminRequest\n        .CreateAlias();\n    createAliasRequest.setCollectionName(\"solrj_alias\");\n    createAliasRequest.setAliasedCollections(\"conf1,solrj_collection\");\n    response = createAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.DeleteAlias deleteAliasRequest = new CollectionAdminRequest.DeleteAlias();\n    deleteAliasRequest.setCollectionName(\"solrj_alias\");\n    deleteAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(\"conf1\");\n    splitShardRequest.setShardName(\"shard1\");\n    response = splitShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_1_replica1\").get(\"status\"));\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"conf1\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_collection\");\n    deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd01cddc46c498fba02505e77f225300f83242db","date":1419298241,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":null,"sourceOld":"  private void testSolrJAPICalls() throws Exception {\n    SolrServer server = createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0)));\n    CollectionAdminResponse response;\n    Map<String, NamedList<Integer>> coresStatus;\n    Map<String, NamedList<Integer>> nodesStatus;\n\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_collection\");\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(\"solrj_collection_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    // TODO: This test tries to validates defaulting to implicit router.\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"solrj_implicit\");\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    // Test Creating a collection with new stateformat.\n    String collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setStateFormat(2);\n    \n    response = createCollectionRequest.process(server);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n    \n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(\"solrj_implicit\");\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(\"solrj_implicit_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(\"solrj_implicit\");\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_implicit\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(2, nodesStatus.size());\n\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(\"conf1\");\n    createCollectionRequest.setNumShards(4);\n    createCollectionRequest.setConfigName(\"conf1\");\n    response = createCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    CollectionAdminRequest.Reload reloadCollectionRequest = new CollectionAdminRequest.Reload();\n    reloadCollectionRequest.setCollectionName(\"conf1\");\n    response = reloadCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.CreateAlias createAliasRequest = new CollectionAdminRequest\n        .CreateAlias();\n    createAliasRequest.setCollectionName(\"solrj_alias\");\n    createAliasRequest.setAliasedCollections(\"conf1,solrj_collection\");\n    response = createAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.DeleteAlias deleteAliasRequest = new CollectionAdminRequest.DeleteAlias();\n    deleteAliasRequest.setCollectionName(\"solrj_alias\");\n    deleteAliasRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = new CollectionAdminRequest.SplitShard();\n    splitShardRequest.setCollectionName(\"conf1\");\n    splitShardRequest.setShardName(\"shard1\");\n    response = splitShardRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_0_replica1\").get(\"status\"));\n    assertEquals(0, (int) coresStatus.get(\"conf1_shard1_1_replica1\").get(\"status\"));\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"conf1\");\n    response = deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n\n    deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(\"solrj_collection\");\n    deleteCollectionRequest.process(server);\n\n    assertEquals(0, response.getStatus());\n    nodesStatus = response.getCollectionNodesStatus();\n    assertTrue(response.isSuccess());\n    assertEquals(4, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df52b06b04088e482ec7d53e7640065aab893e4f":["4a7d7ef06ef6f04ba2de657e90e0458048a967c6"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"cd01cddc46c498fba02505e77f225300f83242db":["2373ef7aa009ed6c0126304bf9bfda9bdc15f7e8"],"4a7d7ef06ef6f04ba2de657e90e0458048a967c6":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"d3a46663789411cdf016145a96a40cf861798ae3":["4405038d08faececfb7bbe91bcfcd096354b97b6"],"f4fbde3b8cf6b01501201d080622f6a282d0b5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d959b945238803001aea70046c4f14f69a542394":["df52b06b04088e482ec7d53e7640065aab893e4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4405038d08faececfb7bbe91bcfcd096354b97b6":["f4fbde3b8cf6b01501201d080622f6a282d0b5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd01cddc46c498fba02505e77f225300f83242db"],"2373ef7aa009ed6c0126304bf9bfda9bdc15f7e8":["d959b945238803001aea70046c4f14f69a542394"]},"commit2Childs":{"df52b06b04088e482ec7d53e7640065aab893e4f":["d959b945238803001aea70046c4f14f69a542394"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["4a7d7ef06ef6f04ba2de657e90e0458048a967c6"],"4a7d7ef06ef6f04ba2de657e90e0458048a967c6":["df52b06b04088e482ec7d53e7640065aab893e4f"],"cd01cddc46c498fba02505e77f225300f83242db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"f4fbde3b8cf6b01501201d080622f6a282d0b5df":["4405038d08faececfb7bbe91bcfcd096354b97b6"],"d959b945238803001aea70046c4f14f69a542394":["2373ef7aa009ed6c0126304bf9bfda9bdc15f7e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4fbde3b8cf6b01501201d080622f6a282d0b5df"],"4405038d08faececfb7bbe91bcfcd096354b97b6":["d3a46663789411cdf016145a96a40cf861798ae3"],"2373ef7aa009ed6c0126304bf9bfda9bdc15f7e8":["cd01cddc46c498fba02505e77f225300f83242db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}