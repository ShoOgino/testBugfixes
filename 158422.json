{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"/dev/null","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", Similarity.getDefault().encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", Similarity.getDefault().encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", Similarity.getDefault().encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", Similarity.getDefault().encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":5,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, File oldIndexDir) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":null,"sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", (float) 2.0);\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,File).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexNoAdds(Random,String).mjava","sourceNew":"  public void changeIndexNoAdds(Random random, File oldIndexDir) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexNoAdds(Random random, String dirName) throws IOException {\n\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 34, hits.length);\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n\n    // make sure we can do a delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(22, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 33, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 33, searcher.getIndexReader());\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["3cdad2c6b6234338031bcc1f24c001a5ad66f714","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}