{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03276b2744036b1b19a7a2dd4b74ba7bc484f107","date":1274048508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new StopAnalyzer(TEST_VERSION_CURRENT, StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"the\", \"in\", \"are\", \"this\" )));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testPositionIncrement().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(\n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    qp.setEnablePositionIncrements(true);\n\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    // 0 2 5 7 8\n    int expectedPositions[] = { 1, 3, 4, 6, 9 };\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt, \"a\");\n    // System.out.println(\"Query text: \"+qtxt);\n    // System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      // System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \" + i + \" = \" + t[i] + \" has wrong term-position!\",\n          expectedPositions[i], pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"a3776dccca01c11e7046323cfad46a3b4a471233":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}