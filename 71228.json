{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getConfig().mjava","commits":[{"id":"861042e9f93a922bfb6b6b2c3d44b61fb3504894","date":1587133827,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getConfig().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the raw config node /zookeeper/config as returned by server. Response may look like\n   * <pre>\n   * server.1=localhost:2780:2783:participant;localhost:2791\n   * server.2=localhost:2781:2784:participant;localhost:2792\n   * server.3=localhost:2782:2785:participant;localhost:2793\n   * version=400000003\n   * </pre>\n   * @return Multi line string representing the config. For standalone ZK this will return empty string\n   */\n  public String getConfig() {\n    try {\n      Stat stat = new Stat();\n      keeper.sync(ZooDefs.CONFIG_NODE, null, null);\n      byte[] data = keeper.getConfig(false, stat);\n      if (data == null || data.length == 0) {\n        return \"\";\n      }\n      return new String(data, StandardCharsets.UTF_8);\n    } catch (KeeperException|InterruptedException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to get config from zookeeper\", ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"461da995df1f34c382102a6671ce9ef622c0853e","date":1597361548,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getConfig().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getConfig().mjava","sourceNew":"  /**\n   * Gets the raw config node /zookeeper/config as returned by server. Response may look like\n   * <pre>\n   * server.1=localhost:2780:2783:participant;localhost:2791\n   * server.2=localhost:2781:2784:participant;localhost:2792\n   * server.3=localhost:2782:2785:participant;localhost:2793\n   * version=400000003\n   * </pre>\n   * @return Multi line string representing the config. For standalone ZK this will return empty string\n   */\n  public String getConfig() {\n    try {\n      Stat stat = new Stat();\n      keeper.sync(ZooDefs.CONFIG_NODE, null, null);\n      byte[] data = keeper.getConfig(false, stat);\n      if (data == null || data.length == 0) {\n        return \"\";\n      }\n      return new String(data, StandardCharsets.UTF_8);\n    } catch (NoNodeException nne) {\n      log.debug(\"Zookeeper does not have the /zookeeper/config znode, assuming old ZK version\");\n      return \"\";\n    } catch (KeeperException|InterruptedException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to get config from zookeeper\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the raw config node /zookeeper/config as returned by server. Response may look like\n   * <pre>\n   * server.1=localhost:2780:2783:participant;localhost:2791\n   * server.2=localhost:2781:2784:participant;localhost:2792\n   * server.3=localhost:2782:2785:participant;localhost:2793\n   * version=400000003\n   * </pre>\n   * @return Multi line string representing the config. For standalone ZK this will return empty string\n   */\n  public String getConfig() {\n    try {\n      Stat stat = new Stat();\n      keeper.sync(ZooDefs.CONFIG_NODE, null, null);\n      byte[] data = keeper.getConfig(false, stat);\n      if (data == null || data.length == 0) {\n        return \"\";\n      }\n      return new String(data, StandardCharsets.UTF_8);\n    } catch (KeeperException|InterruptedException ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed to get config from zookeeper\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"461da995df1f34c382102a6671ce9ef622c0853e":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["461da995df1f34c382102a6671ce9ef622c0853e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["461da995df1f34c382102a6671ce9ef622c0853e"],"461da995df1f34c382102a6671ce9ef622c0853e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}