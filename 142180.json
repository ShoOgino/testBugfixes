{"path":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","sourceNew":"    synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e623f9a0e45508ab149c2fb3e0fd0c2503f98186","date":1295889977,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","sourceNew":"    public synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","bugFix":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","sourceNew":"    public synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","sourceNew":"    public synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","sourceOld":"    synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#checkAborted(Directory).mjava","sourceNew":"    public synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","sourceOld":"    public synchronized void checkAborted(Directory dir) throws MergeAbortedException {\n      if (aborted) {\n        throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n      }\n\n      while (paused) {\n        try {\n          // In theory we could wait() indefinitely, but we\n          // do 1000 msec, defensively\n          wait(1000);\n        } catch (InterruptedException ie) {\n          throw new RuntimeException(ie);\n        }\n        if (aborted) {\n          throw new MergeAbortedException(\"merge is aborted: \" + segString(dir));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e623f9a0e45508ab149c2fb3e0fd0c2503f98186"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","e623f9a0e45508ab149c2fb3e0fd0c2503f98186"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e623f9a0e45508ab149c2fb3e0fd0c2503f98186":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["9454a6510e2db155fb01faa5c049b06ece95fab9","e623f9a0e45508ab149c2fb3e0fd0c2503f98186"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e623f9a0e45508ab149c2fb3e0fd0c2503f98186":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","e623f9a0e45508ab149c2fb3e0fd0c2503f98186","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}