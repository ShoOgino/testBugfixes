{"path":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71946974c05b5dc4d3201f8abf4ecd2609bba400","date":1319655558,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getJSONWrap(String).mjava","sourceNew":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","sourceOld":"  private String getJSONWrap(String xmlResult) {  // TODO: maybe noggit or Solr's JSON utilities can make this cleaner?\n    // escape the double quotes and backslashes\n    String replace1 = xmlResult.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n    replace1 = replace1.replaceAll(\"\\\\n\", \"\\\\\\\\n\");\n    replace1 = replace1.replaceAll(\"\\\\r\", \"\\\\\\\\r\");\n    String replaced = replace1.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\");\n    // wrap it in a JSON object\n    return \"{\\\"result\\\":\\\"\" + replaced + \"\\\"}\";\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71946974c05b5dc4d3201f8abf4ecd2609bba400"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}