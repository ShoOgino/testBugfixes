{"path":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","commits":[{"id":"d0e70591e1e23afedf79324b42591f71a3e711b5","date":1355181494,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = new CoreContainer(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = new CoreContainer(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = CoreContainer.createAndLoad(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = new CoreContainer(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = new CoreContainer(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = CoreContainer.createAndLoad(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = CoreContainer.createAndLoad(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = new CoreContainer(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = CoreContainer.createAndLoad(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = new CoreContainer(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = CoreContainer.createAndLoad(home);\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = CoreContainer.createAndLoad(home, new File(home, \"solr.xml\"));\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT)) {\n      expectThrows(ZooKeeperException.class,\n          \"did not get a top level exception when more then 4 updates failed\",\n          () -> {\n        assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n            zkClient.exists(chroot, true));\n        cores = CoreContainer.createAndLoad(home);\n      });\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n    \n    SolrZkClient zkClient = null;\n    \n    try {\n      zkClient = new SolrZkClient(zkServer.getZkHost(),\n          AbstractZkTestCase.TIMEOUT);\n      assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n          zkClient.exists(chroot, true));\n      cores = CoreContainer.createAndLoad(home);\n      fail(\"There should be a zk exception, as the initial path doesn't exist\");\n    } catch (ZooKeeperException e) {\n      // expected\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n      if (zkClient != null) zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8","date":1584125777,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","sourceNew":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      expectThrows(ZooKeeperException.class,\n          \"did not get a top level exception when more then 4 updates failed\",\n          () -> {\n        assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n            zkClient.exists(chroot, true));\n        cores = CoreContainer.createAndLoad(home);\n      });\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT)) {\n      expectThrows(ZooKeeperException.class,\n          \"did not get a top level exception when more then 4 updates failed\",\n          () -> {\n        assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n            zkClient.exists(chroot, true));\n        cores = CoreContainer.createAndLoad(home);\n      });\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    } finally {\n      if (cores != null) cores.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestZkChroot#testNoBootstrapConf().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNoBootstrapConf() throws Exception {\n    String chroot = \"/foo/bar2\";\n    \n    System.setProperty(\"bootstrap_conf\", \"false\");\n    System.setProperty(\"zkHost\", zkServer.getZkHost() + chroot);\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      expectThrows(ZooKeeperException.class,\n          \"did not get a top level exception when more then 4 updates failed\",\n          () -> {\n        assertFalse(\"Path '\" + chroot + \"' should not exist before the test\",\n            zkClient.exists(chroot, true));\n        cores = CoreContainer.createAndLoad(home);\n      });\n      assertFalse(\"Path shouldn't have been created\",\n          zkClient.exists(chroot, true));// check the path was not created\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0e70591e1e23afedf79324b42591f71a3e711b5"],"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["ff4ad7cb63f081454a1fa1e599d1cac95034f0b8"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["7116474e2e390259937401cf928323e0cbc75e60"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d0e70591e1e23afedf79324b42591f71a3e711b5","7116474e2e390259937401cf928323e0cbc75e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d0e70591e1e23afedf79324b42591f71a3e711b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d264f386d864b5751209060e8886ca9845f70469":["d0e70591e1e23afedf79324b42591f71a3e711b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"ff4ad7cb63f081454a1fa1e599d1cac95034f0b8":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7116474e2e390259937401cf928323e0cbc75e60":["a626ec4d1c92e59fe390724d6220081047b03ce7","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d0e70591e1e23afedf79324b42591f71a3e711b5"],"d0e70591e1e23afedf79324b42591f71a3e711b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["ff4ad7cb63f081454a1fa1e599d1cac95034f0b8"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}