{"path":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum],\n          Store.YES, Index.ANALYZED));\n      doc.add(new Field(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum],\n          Store.NO, Index.ANALYZED));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum],\n          Store.YES, Index.ANALYZED));\n      doc.add(new Field(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum],\n          Store.NO, Index.ANALYZED));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum],\n          Store.YES, Index.ANALYZED));\n      doc.add(new Field(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum],\n          Store.NO, Index.ANALYZED));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, TextField.TYPE_STORED, SimpleUtils.docTitles[docNum]));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum],\n          Store.YES, Index.ANALYZED));\n      doc.add(new Field(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum],\n          Store.NO, Index.ANALYZED));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], TextField.TYPE_STORED));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, TextField.TYPE_STORED, SimpleUtils.docTitles[docNum]));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], TextField.TYPE_STORED));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], TextField.TYPE_STORED));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/association/AssociationIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], TextField.TYPE_STORED));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and categories.\n   * \n   * @param indexDir\n   *            Directory in which the index should be created.\n   * @param taxoDir\n   *            Directory in which the taxonomy index should be created.\n   * @throws Exception\n   *             on error (no detailed exception handling here for sample\n   *             simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir) throws Exception {\n\n    // create and open an index writer\n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(ExampleUtils.EXAMPLE_VER, SimpleUtils.analyzer));\n\n    // create and open a taxonomy writer\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    // loop over sample documents\n    int nDocsAdded = 0;\n    int nFacetsAdded = 0;\n    for (int docNum = 0; docNum < SimpleUtils.docTexts.length; docNum++) {\n      ExampleUtils.log(\" ++++ DOC ID: \" + docNum);\n      // obtain the sample categories for current document\n      CategoryContainer categoryContainer = new CategoryContainer();\n      for (CategoryPath path : SimpleUtils.categories[docNum]) {\n        categoryContainer.addCategory(path);\n        ExampleUtils.log(\"\\t ++++ PATH: \" + path);\n      }\n      // and also those with associations\n      CategoryPath[] associationsPaths = AssociationUtils.categories[docNum];\n      AssociationProperty[] associationProps = AssociationUtils.associations[docNum];\n      for (int i = 0; i < associationsPaths.length; i++) {\n        categoryContainer.addCategory(associationsPaths[i], associationProps[i]);\n        ExampleUtils.log(\"\\t $$$$ Association: (\"\n            + associationsPaths[i] + \",\" + associationProps[i]\n            + \")\");\n      }\n\n      // we do not alter indexing parameters!\n      // a category document builder will add the categories to a document\n      // once build() is called\n      CategoryDocumentBuilder categoryDocBuilder = new EnhancementsDocumentBuilder(\n          taxo, AssociationUtils.assocIndexingParams);\n      categoryDocBuilder.setCategories(categoryContainer);\n\n      // create a plain Lucene document and add some regular Lucene fields\n      // to it\n      Document doc = new Document();\n      doc.add(new Field(SimpleUtils.TITLE, SimpleUtils.docTitles[docNum], TextField.TYPE_STORED));\n      doc.add(new TextField(SimpleUtils.TEXT, SimpleUtils.docTexts[docNum]));\n\n      // invoke the category document builder for adding categories to the\n      // document and,\n      // as required, to the taxonomy index\n      categoryDocBuilder.build(doc);\n\n      // finally add the document to the index\n      iw.addDocument(doc);\n\n      nDocsAdded++;\n      nFacetsAdded += categoryContainer.size();\n    }\n\n    // commit changes.\n    // we commit changes to the taxonomy index prior to committing them to\n    // the search index.\n    // this is important, so that all facets referred to by documents in the\n    // search index\n    // will indeed exist in the taxonomy index.\n    taxo.commit();\n    iw.commit();\n\n    // close the taxonomy index and the index - all modifications are\n    // now safely in the provided directories: indexDir and taxoDir.\n    taxo.close();\n    iw.close();\n\n    ExampleUtils.log(\"Indexed \" + nDocsAdded + \" documents with overall \"\n        + nFacetsAdded + \" facets.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}