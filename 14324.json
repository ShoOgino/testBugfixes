{"path":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","commits":[{"id":"7e0644fd1d7df35f8fa936857eb37b7d3c92aff5","date":1246038314,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"/dev/null","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    for (int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(2);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      int id = 0;\n      int value = 100;\n\n      for (int i = 0; i < 7; i++) {\n        addDoc(modifier, ++id, value);\n      }\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 1 doc (so we will have something buffered)\n      addDoc(modifier, 99, value);\n\n      // Delete all\n      modifier.deleteAll();\n\n      // Delete all shouldn't be on disk yet\n      reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 2 new docs (after the deleteAll, before the commit)      \n      addDoc(modifier, 101, value);\n      addDoc(modifier, 102, value);\n\n      // commit the delete all\n      modifier.commit();\n\n      // Validate there are no docs left\n      reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n      reader.close();\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b50af45ec38b6b806553e48a4a5e7e3134a58f30","date":1246357151,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    for (int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(2);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      int id = 0;\n      int value = 100;\n\n      for (int i = 0; i < 7; i++) {\n        addDoc(modifier, ++id, value);\n      }\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 1 doc (so we will have something buffered)\n      addDoc(modifier, 99, value);\n\n      // Delete all\n      modifier.deleteAll();\n\n      // Delete all shouldn't be on disk yet\n      reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add a doc and update a doc (after the deleteAll, before the commit)\n      addDoc(modifier, 101, value);\n      updateDoc(modifier, 102, value);\n\n      // commit the delete all\n      modifier.commit();\n\n      // Validate there are no docs left\n      reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n      reader.close();\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    for (int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(2);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      int id = 0;\n      int value = 100;\n\n      for (int i = 0; i < 7; i++) {\n        addDoc(modifier, ++id, value);\n      }\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 1 doc (so we will have something buffered)\n      addDoc(modifier, 99, value);\n\n      // Delete all\n      modifier.deleteAll();\n\n      // Delete all shouldn't be on disk yet\n      reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 2 new docs (after the deleteAll, before the commit)      \n      addDoc(modifier, 101, value);\n      addDoc(modifier, 102, value);\n\n      // commit the delete all\n      modifier.commit();\n\n      // Validate there are no docs left\n      reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n      reader.close();\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    for (int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(2);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      int id = 0;\n      int value = 100;\n\n      for (int i = 0; i < 7; i++) {\n        addDoc(modifier, ++id, value);\n      }\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 1 doc (so we will have something buffered)\n      addDoc(modifier, 99, value);\n\n      // Delete all\n      modifier.deleteAll();\n\n      // Delete all shouldn't be on disk yet\n      reader = IndexReader.open(dir, true);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add a doc and update a doc (after the deleteAll, before the commit)\n      addDoc(modifier, 101, value);\n      updateDoc(modifier, 102, value);\n\n      // commit the delete all\n      modifier.commit();\n\n      // Validate there are no docs left\n      reader = IndexReader.open(dir, true);\n      assertEquals(2, reader.numDocs());\n      reader.close();\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    for (int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(2);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      int id = 0;\n      int value = 100;\n\n      for (int i = 0; i < 7; i++) {\n        addDoc(modifier, ++id, value);\n      }\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 1 doc (so we will have something buffered)\n      addDoc(modifier, 99, value);\n\n      // Delete all\n      modifier.deleteAll();\n\n      // Delete all shouldn't be on disk yet\n      reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add a doc and update a doc (after the deleteAll, before the commit)\n      addDoc(modifier, 101, value);\n      updateDoc(modifier, 102, value);\n\n      // commit the delete all\n      modifier.commit();\n\n      // Validate there are no docs left\n      reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n      reader.close();\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    for (int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(2);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      int id = 0;\n      int value = 100;\n\n      for (int i = 0; i < 7; i++) {\n        addDoc(modifier, ++id, value);\n      }\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 1 doc (so we will have something buffered)\n      addDoc(modifier, 99, value);\n\n      // Delete all\n      modifier.deleteAll();\n\n      // Delete all shouldn't be on disk yet\n      reader = IndexReader.open(dir, true);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add a doc and update a doc (after the deleteAll, before the commit)\n      addDoc(modifier, 101, value);\n      updateDoc(modifier, 102, value);\n\n      // commit the delete all\n      modifier.commit();\n\n      // Validate there are no docs left\n      reader = IndexReader.open(dir, true);\n      assertEquals(2, reader.numDocs());\n      reader.close();\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    for (int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(2);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      int id = 0;\n      int value = 100;\n\n      for (int i = 0; i < 7; i++) {\n        addDoc(modifier, ++id, value);\n      }\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 1 doc (so we will have something buffered)\n      addDoc(modifier, 99, value);\n\n      // Delete all\n      modifier.deleteAll();\n\n      // Delete all shouldn't be on disk yet\n      reader = IndexReader.open(dir);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add a doc and update a doc (after the deleteAll, before the commit)\n      addDoc(modifier, 101, value);\n      updateDoc(modifier, 102, value);\n\n      // commit the delete all\n      modifier.commit();\n\n      // Validate there are no docs left\n      reader = IndexReader.open(dir);\n      assertEquals(2, reader.numDocs());\n      reader.close();\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    for (int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setMaxBufferedDocs(2);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      int id = 0;\n      int value = 100;\n\n      for (int i = 0; i < 7; i++) {\n        addDoc(modifier, ++id, value);\n      }\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add 1 doc (so we will have something buffered)\n      addDoc(modifier, 99, value);\n\n      // Delete all\n      modifier.deleteAll();\n\n      // Delete all shouldn't be on disk yet\n      reader = IndexReader.open(dir, true);\n      assertEquals(7, reader.numDocs());\n      reader.close();\n\n      // Add a doc and update a doc (after the deleteAll, before the commit)\n      addDoc(modifier, 101, value);\n      updateDoc(modifier, 102, value);\n\n      // commit the delete all\n      modifier.commit();\n\n      // Validate there are no docs left\n      reader = IndexReader.open(dir, true);\n      assertEquals(2, reader.numDocs());\n      reader.close();\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = IndexReader.open(dir, true);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b50af45ec38b6b806553e48a4a5e7e3134a58f30","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"b50af45ec38b6b806553e48a4a5e7e3134a58f30":["7e0644fd1d7df35f8fa936857eb37b7d3c92aff5"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b50af45ec38b6b806553e48a4a5e7e3134a58f30"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"7e0644fd1d7df35f8fa936857eb37b7d3c92aff5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"b50af45ec38b6b806553e48a4a5e7e3134a58f30":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e0644fd1d7df35f8fa936857eb37b7d3c92aff5"],"7e0644fd1d7df35f8fa936857eb37b7d3c92aff5":["b50af45ec38b6b806553e48a4a5e7e3134a58f30"],"87c966e9308847938a7c905c2e46a56d8df788b8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}