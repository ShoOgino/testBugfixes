{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum,boolean).mjava","commits":[{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean bothHaveFreqs) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (bothHaveFreqs) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean bothHaveFreqs) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (bothHaveFreqs) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean bothHaveFreqs) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (bothHaveFreqs) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean bothHaveFreqs) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (bothHaveFreqs) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}