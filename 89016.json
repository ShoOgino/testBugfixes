{"path":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","sourceNew":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infinite norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#vectorDistance(double[],double[],double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Calculate the p-norm (i.e. length) between two vectors\n   *\n   * @param vec1         The first vector\n   * @param vec2         The second vector\n   * @param power        The power (2 for Euclidean distance, 1 for manhattan, etc.)\n   * @param oneOverPower If you've precalculated oneOverPower and cached it, use this method to save one division operation over {@link #vectorDistance(double[], double[], double)}.\n   * @return The length.\n   */\n  public static double vectorDistance(double[] vec1, double[] vec2, double power, double oneOverPower) {\n    double result = 0;\n\n    if (power == 0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i] == 0 ? 0 : 1;\n      }\n\n    } else if (power == 1.0) {\n      for (int i = 0; i < vec1.length; i++) {\n        result += vec1[i] - vec2[i];\n      }\n    } else if (power == 2.0) {\n      result = Math.sqrt(squaredEuclideanDistance(vec1, vec2));\n    } else if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {//infininte norm?\n      for (int i = 0; i < vec1.length; i++) {\n        result = Math.max(result, Math.max(vec1[i], vec2[i]));\n      }\n    } else {\n      for (int i = 0; i < vec1.length; i++) {\n        result += Math.pow(vec1[i] - vec2[i], power);\n      }\n      result = Math.pow(result, oneOverPower);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}