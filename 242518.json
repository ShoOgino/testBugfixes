{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + Integer.BYTES);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + Integer.BYTES);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + Integer.BYTES);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + Integer.BYTES);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + Integer.BYTES);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["a870f9917149dc600c4ad4417d615c1795de5864","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["419a8f52c6635419beb951255cacbbb281044c57","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["419a8f52c6635419beb951255cacbbb281044c57","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"419a8f52c6635419beb951255cacbbb281044c57":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"a870f9917149dc600c4ad4417d615c1795de5864":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}