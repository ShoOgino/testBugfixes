{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum#pushFrame(int).mjava","commits":[{"id":"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","date":1400179494,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum#pushFrame(int).mjava","pathOld":"/dev/null","sourceNew":"  private Frame pushFrame(int state) throws IOException {\n    final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fr.parent.fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fr.parent.fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7266c313bb3b4fbcde3dcc82556182e1fae90080","date":1400183760,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum#pushFrame(int).mjava","sourceNew":"  private Frame pushFrame(int state) throws IOException {\n    final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fr.parent.fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fr.parent.fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":"  private Frame pushFrame(int state) throws IOException {\n    final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fr.parent.fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fr.parent.fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7266c313bb3b4fbcde3dcc82556182e1fae90080":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7266c313bb3b4fbcde3dcc82556182e1fae90080":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["7266c313bb3b4fbcde3dcc82556182e1fae90080"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7266c313bb3b4fbcde3dcc82556182e1fae90080","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}