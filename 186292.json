{"path":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","date":1455407361,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.legacy.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.legacy.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.legacy.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link org.apache.lucene.analysis.LegacyNumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 0..31\n    if ((shift & ~0x1f) != 0) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31; got shift=\" + shift);\n    }\n    int nChars = (((31-shift)*37)>>8) + 1;    // i/7 is the same as (i*37)>>8 for i in 0..63\n    bytes.setLength(nChars+1);   // one extra for the byte that contains the shift info\n    bytes.grow(LegacyNumericUtils.BUF_SIZE_LONG);  // use the max\n    bytes.setByteAt(0, (byte)(SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.setByteAt(nChars--, (byte)(sortableBits & 0x7f));\n      sortableBits >>>= 7;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}