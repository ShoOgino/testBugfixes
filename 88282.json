{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEmptyNullComponents().mjava","commits":[{"id":"9f98959552975d79aafaf0f964262eac98ded407","date":1359372702,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEmptyNullComponents().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new CategoryPath(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new CategoryPath(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new CategoryPath(\"test/\", '/'));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":0,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEmptyNullComponents().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new CategoryPath(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new CategoryPath(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new CategoryPath(\"test/\", '/'));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEmptyNullComponents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEmptyNullComponents().mjava","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new FacetLabel(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new FacetLabel(\"test/\", '/'));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new CategoryPath(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new CategoryPath(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new CategoryPath(\"test/\", '/'));\n    \n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEmptyNullComponents().mjava","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new FacetLabel(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new FacetLabel(\"test/\", '/'));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new FacetLabel(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new FacetLabel(\"test/\", '/'));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEmptyNullComponents().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new CategoryPath(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new CategoryPath(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new CategoryPath(\"test/\", '/'));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f98959552975d79aafaf0f964262eac98ded407":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78522aad83283ca58fae08fd89406b65429d0229":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["9f98959552975d79aafaf0f964262eac98ded407","78522aad83283ca58fae08fd89406b65429d0229"],"de522d9303bd67c8473a269a1319125d1f3700e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f98959552975d79aafaf0f964262eac98ded407"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["9f98959552975d79aafaf0f964262eac98ded407"]},"commit2Childs":{"9f98959552975d79aafaf0f964262eac98ded407":["3cc728b07df73b197e6d940d27f9b08b63918f13","de522d9303bd67c8473a269a1319125d1f3700e0","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f98959552975d79aafaf0f964262eac98ded407","de522d9303bd67c8473a269a1319125d1f3700e0"],"78522aad83283ca58fae08fd89406b65429d0229":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["78522aad83283ca58fae08fd89406b65429d0229"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}