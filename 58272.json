{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  public synchronized boolean hasDeletions() throws IOException {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public synchronized boolean hasDeletions() throws IOException {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  public synchronized boolean hasDeletions() throws IOException {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public synchronized boolean hasDeletions() throws IOException {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  public synchronized boolean hasDeletions() throws IOException {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public synchronized boolean hasDeletions() throws IOException {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public synchronized boolean hasDeletions() throws IOException {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public synchronized boolean hasDeletions() throws IOException {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3b4a63b6b0155323dde6b827e0dc22a43580753","date":1346168671,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including buffered deletions).\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including buffered deletions).\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3af8c90c5e965a1a8011e827ab59de734c7dfb79","date":1368108782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including buffered deletions).\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyPendingDeletes()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if this index has deletions (including buffered deletions).\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including buffered deletions).\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyPendingDeletes()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if this index has deletions (including buffered deletions).\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedDeletesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyPendingDeletes()) {\n      return true;\n    }\n    for (final SegmentInfoPerCommit info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a096817b3d3d58eea4747031d6f7a0ff58690d0","date":1389965834,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyPendingDeletes()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if this index has deletions (including buffered deletions).\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyPendingDeletes()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyPendingDeletes()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyPendingDeletes()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyPendingDeletes()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasDeletions().mjava","sourceNew":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()\n        || docWriter.anyDeletions()\n        || readerPool.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if this index has deletions (including\n   * buffered deletions).  Note that this will return true\n   * if there are buffered Term/Query deletions, even if it\n   * turns out those buffered deletions don't match any\n   * documents.\n   */\n  public synchronized boolean hasDeletions() {\n    ensureOpen();\n    if (bufferedUpdatesStream.any()) {\n      return true;\n    }\n    if (docWriter.anyDeletions()) {\n      return true;\n    }\n    if (readerPool.anyDeletions()) {\n      return true;\n    }\n    for (final SegmentCommitInfo info : segmentInfos) {\n      if (info.hasDeletions()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"a3b4a63b6b0155323dde6b827e0dc22a43580753":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","a3b4a63b6b0155323dde6b827e0dc22a43580753"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["6a096817b3d3d58eea4747031d6f7a0ff58690d0","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"3af8c90c5e965a1a8011e827ab59de734c7dfb79":["a3b4a63b6b0155323dde6b827e0dc22a43580753"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["6a096817b3d3d58eea4747031d6f7a0ff58690d0"],"6a096817b3d3d58eea4747031d6f7a0ff58690d0":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"f592209545c71895260367152601e9200399776d":["6a096817b3d3d58eea4747031d6f7a0ff58690d0","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["6a096817b3d3d58eea4747031d6f7a0ff58690d0"],"a3b4a63b6b0155323dde6b827e0dc22a43580753":["05a14b2611ead08655a2b2bdc61632eb31316e57","3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9d153abcf92dc5329d98571a8c3035df9bd80648","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3af8c90c5e965a1a8011e827ab59de734c7dfb79":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["a3b4a63b6b0155323dde6b827e0dc22a43580753","05a14b2611ead08655a2b2bdc61632eb31316e57","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b70042a8a492f7054d480ccdd2be9796510d4327","8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","f592209545c71895260367152601e9200399776d"],"6a096817b3d3d58eea4747031d6f7a0ff58690d0":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","fe33227f6805edab2036cbb80645cc4e2d1fa424","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}