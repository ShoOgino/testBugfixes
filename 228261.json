{"path":"solr/core/src/test/org/apache/solr/cloud/TestSSLRandomization#testSSLRandomizer().mjava","commits":[{"id":"3beec0828e9973095a4de926b078ebc3bdbfd2aa","date":1464816871,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSSLRandomization#testSSLRandomizer().mjava","pathOld":"/dev/null","sourceNew":"  public void testSSLRandomizer() {\n    SSLRandomizer r;\n    // for some cases, we know exactly what the config should be regardless of randomization factors\n    SSLTestConfig conf;\n\n    for (Class c : Arrays.asList(FullyAnnotated.class, InheritedFullyAnnotated.class,\n                                 GrandchildInheritedEmptyAnnotatationWithOverride.class )) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.42D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.33D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"foo\"));\n    }\n\n    for (Class c : Arrays.asList(NotAnnotated.class, InheritedNotAnnotated.class)) { \n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"not specified\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(Suppressed.class,\n                                 InheritedSuppressed.class,\n                                 InheritedAnnotationButSuppressed.class,\n                                 InheritedSuppressedWithIgnoredAnnotation.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(Suppressed.class);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"SuppressSSL\"));\n      assertTrue(c.toString(), r.debug.contains(\"fakeBugUrl\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(EmptyAnnotated.class, InheritedEmptyAnnotated.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.clientAuth, 0.0D);\n    }\n\n    for (Class c : Arrays.asList(SimplyAnnotated.class, InheritedEmptyAnnotatationWithOverride.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.5D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.5D, r.clientAuth, 0.0D);\n    }\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MinAnnotated.class);\n    assertEquals(0.0D, r.ssl, 0.0D);\n    assertEquals(0.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(false, conf.isSSLMode());\n    assertEquals(false, conf.isClientAuthMode());\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);\n    assertEquals(1.0D, r.ssl, 0.0D);\n    assertEquals(1.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(true, conf.isSSLMode());\n    assertEquals(true, conf.isClientAuthMode());\n\n    r = SSLRandomizer.getSSLRandomizerForClass(SSlButNoClientAuthAnnotated.class);\n    assertEquals(0.42D, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    r = SSLRandomizer.getSSLRandomizerForClass(ClientAuthButNoSSLAnnotated.class);\n    assertEquals(RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    for (Class c : Arrays.asList(SSLOutOfRangeAnnotated.class,\n                                 ClientAuthOutOfRangeAnnotated.class,\n                                 InheritedOutOfRangeAnnotated.class)) {\n      expectThrows(IllegalArgumentException.class, () -> {\n          Object trash = SSLRandomizer.getSSLRandomizerForClass(c);\n        });\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSSLRandomization#testSSLRandomizer().mjava","pathOld":"/dev/null","sourceNew":"  public void testSSLRandomizer() {\n    SSLRandomizer r;\n    // for some cases, we know exactly what the config should be regardless of randomization factors\n    SSLTestConfig conf;\n\n    for (Class c : Arrays.asList(FullyAnnotated.class, InheritedFullyAnnotated.class,\n                                 GrandchildInheritedEmptyAnnotatationWithOverride.class )) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.42D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.33D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"foo\"));\n    }\n\n    for (Class c : Arrays.asList(NotAnnotated.class, InheritedNotAnnotated.class)) { \n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"not specified\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(Suppressed.class,\n                                 InheritedSuppressed.class,\n                                 InheritedAnnotationButSuppressed.class,\n                                 InheritedSuppressedWithIgnoredAnnotation.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(Suppressed.class);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"SuppressSSL\"));\n      assertTrue(c.toString(), r.debug.contains(\"fakeBugUrl\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(EmptyAnnotated.class, InheritedEmptyAnnotated.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.clientAuth, 0.0D);\n    }\n\n    for (Class c : Arrays.asList(SimplyAnnotated.class, InheritedEmptyAnnotatationWithOverride.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.5D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.5D, r.clientAuth, 0.0D);\n    }\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MinAnnotated.class);\n    assertEquals(0.0D, r.ssl, 0.0D);\n    assertEquals(0.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(false, conf.isSSLMode());\n    assertEquals(false, conf.isClientAuthMode());\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);\n    assertEquals(1.0D, r.ssl, 0.0D);\n    assertEquals(1.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(true, conf.isSSLMode());\n    assertEquals(true, conf.isClientAuthMode());\n\n    r = SSLRandomizer.getSSLRandomizerForClass(SSlButNoClientAuthAnnotated.class);\n    assertEquals(0.42D, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    r = SSLRandomizer.getSSLRandomizerForClass(ClientAuthButNoSSLAnnotated.class);\n    assertEquals(RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    for (Class c : Arrays.asList(SSLOutOfRangeAnnotated.class,\n                                 ClientAuthOutOfRangeAnnotated.class,\n                                 InheritedOutOfRangeAnnotated.class)) {\n      expectThrows(IllegalArgumentException.class, () -> {\n          Object trash = SSLRandomizer.getSSLRandomizerForClass(c);\n        });\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSSLRandomization#testSSLRandomizer().mjava","pathOld":"/dev/null","sourceNew":"  public void testSSLRandomizer() {\n    SSLRandomizer r;\n    // for some cases, we know exactly what the config should be regardless of randomization factors\n    SSLTestConfig conf;\n\n    for (Class c : Arrays.asList(FullyAnnotated.class, InheritedFullyAnnotated.class,\n                                 GrandchildInheritedEmptyAnnotatationWithOverride.class )) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.42D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.33D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"foo\"));\n    }\n\n    for (Class c : Arrays.asList(NotAnnotated.class, InheritedNotAnnotated.class)) { \n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"not specified\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(Suppressed.class,\n                                 InheritedSuppressed.class,\n                                 InheritedAnnotationButSuppressed.class,\n                                 InheritedSuppressedWithIgnoredAnnotation.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(Suppressed.class);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"SuppressSSL\"));\n      assertTrue(c.toString(), r.debug.contains(\"fakeBugUrl\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(EmptyAnnotated.class, InheritedEmptyAnnotated.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.clientAuth, 0.0D);\n    }\n\n    for (Class c : Arrays.asList(SimplyAnnotated.class, InheritedEmptyAnnotatationWithOverride.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.5D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.5D, r.clientAuth, 0.0D);\n    }\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MinAnnotated.class);\n    assertEquals(0.0D, r.ssl, 0.0D);\n    assertEquals(0.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(false, conf.isSSLMode());\n    assertEquals(false, conf.isClientAuthMode());\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);\n    assertEquals(1.0D, r.ssl, 0.0D);\n    assertEquals(1.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(true, conf.isSSLMode());\n    assertEquals(true, conf.isClientAuthMode());\n\n    r = SSLRandomizer.getSSLRandomizerForClass(SSlButNoClientAuthAnnotated.class);\n    assertEquals(0.42D, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    r = SSLRandomizer.getSSLRandomizerForClass(ClientAuthButNoSSLAnnotated.class);\n    assertEquals(RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    for (Class c : Arrays.asList(SSLOutOfRangeAnnotated.class,\n                                 ClientAuthOutOfRangeAnnotated.class,\n                                 InheritedOutOfRangeAnnotated.class)) {\n      expectThrows(IllegalArgumentException.class, () -> {\n          Object trash = SSLRandomizer.getSSLRandomizerForClass(c);\n        });\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSSLRandomization#testSSLRandomizer().mjava","pathOld":"/dev/null","sourceNew":"  public void testSSLRandomizer() {\n    SSLRandomizer r;\n    // for some cases, we know exactly what the config should be regardless of randomization factors\n    SSLTestConfig conf;\n\n    for (Class c : Arrays.asList(FullyAnnotated.class, InheritedFullyAnnotated.class,\n                                 GrandchildInheritedEmptyAnnotatationWithOverride.class )) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.42D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.33D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"foo\"));\n    }\n\n    for (Class c : Arrays.asList(NotAnnotated.class, InheritedNotAnnotated.class)) { \n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"not specified\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(Suppressed.class,\n                                 InheritedSuppressed.class,\n                                 InheritedAnnotationButSuppressed.class,\n                                 InheritedSuppressedWithIgnoredAnnotation.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(Suppressed.class);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"SuppressSSL\"));\n      assertTrue(c.toString(), r.debug.contains(\"fakeBugUrl\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(EmptyAnnotated.class, InheritedEmptyAnnotated.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.clientAuth, 0.0D);\n    }\n\n    for (Class c : Arrays.asList(SimplyAnnotated.class, InheritedEmptyAnnotatationWithOverride.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.5D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.5D, r.clientAuth, 0.0D);\n    }\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MinAnnotated.class);\n    assertEquals(0.0D, r.ssl, 0.0D);\n    assertEquals(0.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(false, conf.isSSLMode());\n    assertEquals(false, conf.isClientAuthMode());\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);\n    assertEquals(1.0D, r.ssl, 0.0D);\n    assertEquals(1.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(true, conf.isSSLMode());\n    assertEquals(true, conf.isClientAuthMode());\n\n    r = SSLRandomizer.getSSLRandomizerForClass(SSlButNoClientAuthAnnotated.class);\n    assertEquals(0.42D, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    r = SSLRandomizer.getSSLRandomizerForClass(ClientAuthButNoSSLAnnotated.class);\n    assertEquals(RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    for (Class c : Arrays.asList(SSLOutOfRangeAnnotated.class,\n                                 ClientAuthOutOfRangeAnnotated.class,\n                                 InheritedOutOfRangeAnnotated.class)) {\n      expectThrows(IllegalArgumentException.class, () -> {\n          Object trash = SSLRandomizer.getSSLRandomizerForClass(c);\n        });\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSSLRandomization#testSSLRandomizer().mjava","pathOld":"/dev/null","sourceNew":"  public void testSSLRandomizer() {\n    SSLRandomizer r;\n    // for some cases, we know exactly what the config should be regardless of randomization factors\n    SSLTestConfig conf;\n\n    for (Class c : Arrays.asList(FullyAnnotated.class, InheritedFullyAnnotated.class,\n                                 GrandchildInheritedEmptyAnnotatationWithOverride.class )) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.42D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.33D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"foo\"));\n    }\n\n    for (Class c : Arrays.asList(NotAnnotated.class, InheritedNotAnnotated.class)) { \n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"not specified\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(Suppressed.class,\n                                 InheritedSuppressed.class,\n                                 InheritedAnnotationButSuppressed.class,\n                                 InheritedSuppressedWithIgnoredAnnotation.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(Suppressed.class);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"SuppressSSL\"));\n      assertTrue(c.toString(), r.debug.contains(\"fakeBugUrl\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(EmptyAnnotated.class, InheritedEmptyAnnotated.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.clientAuth, 0.0D);\n    }\n\n    for (Class c : Arrays.asList(SimplyAnnotated.class, InheritedEmptyAnnotatationWithOverride.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.5D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.5D, r.clientAuth, 0.0D);\n    }\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MinAnnotated.class);\n    assertEquals(0.0D, r.ssl, 0.0D);\n    assertEquals(0.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(false, conf.isSSLMode());\n    assertEquals(false, conf.isClientAuthMode());\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);\n    assertEquals(1.0D, r.ssl, 0.0D);\n    assertEquals(1.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(true, conf.isSSLMode());\n    assertEquals(true, conf.isClientAuthMode());\n\n    r = SSLRandomizer.getSSLRandomizerForClass(SSlButNoClientAuthAnnotated.class);\n    assertEquals(0.42D, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    r = SSLRandomizer.getSSLRandomizerForClass(ClientAuthButNoSSLAnnotated.class);\n    assertEquals(RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    for (Class c : Arrays.asList(SSLOutOfRangeAnnotated.class,\n                                 ClientAuthOutOfRangeAnnotated.class,\n                                 InheritedOutOfRangeAnnotated.class)) {\n      expectThrows(IllegalArgumentException.class, () -> {\n          Object trash = SSLRandomizer.getSSLRandomizerForClass(c);\n        });\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSSLRandomization#testSSLRandomizer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSSLRandomization#testSSLRandomizer().mjava","sourceNew":"  public void testSSLRandomizer() {\n    SSLRandomizer r;\n    // for some cases, we know exactly what the config should be regardless of randomization factors\n    SSLTestConfig conf;\n\n    for (@SuppressWarnings({\"rawtypes\"})Class c : Arrays.asList(FullyAnnotated.class, InheritedFullyAnnotated.class,\n                                 GrandchildInheritedEmptyAnnotatationWithOverride.class )) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.42D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.33D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"foo\"));\n    }\n\n    for (@SuppressWarnings({\"rawtypes\"})Class c : Arrays.asList(NotAnnotated.class, InheritedNotAnnotated.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"not specified\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (@SuppressWarnings({\"rawtypes\"})Class c : Arrays.asList(Suppressed.class,\n                                 InheritedSuppressed.class,\n                                 InheritedAnnotationButSuppressed.class,\n                                 InheritedSuppressedWithIgnoredAnnotation.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(Suppressed.class);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"SuppressSSL\"));\n      assertTrue(c.toString(), r.debug.contains(\"fakeBugUrl\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (@SuppressWarnings({\"rawtypes\"})Class c : Arrays.asList(EmptyAnnotated.class, InheritedEmptyAnnotated.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.clientAuth, 0.0D);\n    }\n\n    for (@SuppressWarnings({\"rawtypes\"})Class c : Arrays.asList(SimplyAnnotated.class, InheritedEmptyAnnotatationWithOverride.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.5D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.5D, r.clientAuth, 0.0D);\n    }\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MinAnnotated.class);\n    assertEquals(0.0D, r.ssl, 0.0D);\n    assertEquals(0.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(false, conf.isSSLMode());\n    assertEquals(false, conf.isClientAuthMode());\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);\n    assertEquals(1.0D, r.ssl, 0.0D);\n    assertEquals(1.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(true, conf.isSSLMode());\n    assertEquals(true, conf.isClientAuthMode());\n\n    r = SSLRandomizer.getSSLRandomizerForClass(SSlButNoClientAuthAnnotated.class);\n    assertEquals(0.42D, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    r = SSLRandomizer.getSSLRandomizerForClass(ClientAuthButNoSSLAnnotated.class);\n    assertEquals(RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    for (@SuppressWarnings({\"rawtypes\"})Class c : Arrays.asList(SSLOutOfRangeAnnotated.class,\n                                 ClientAuthOutOfRangeAnnotated.class,\n                                 InheritedOutOfRangeAnnotated.class)) {\n      expectThrows(IllegalArgumentException.class, () -> {\n          Object trash = SSLRandomizer.getSSLRandomizerForClass(c);\n        });\n    }\n    \n  }\n\n","sourceOld":"  public void testSSLRandomizer() {\n    SSLRandomizer r;\n    // for some cases, we know exactly what the config should be regardless of randomization factors\n    SSLTestConfig conf;\n\n    for (Class c : Arrays.asList(FullyAnnotated.class, InheritedFullyAnnotated.class,\n                                 GrandchildInheritedEmptyAnnotatationWithOverride.class )) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.42D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.33D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"foo\"));\n    }\n\n    for (Class c : Arrays.asList(NotAnnotated.class, InheritedNotAnnotated.class)) { \n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"not specified\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(Suppressed.class,\n                                 InheritedSuppressed.class,\n                                 InheritedAnnotationButSuppressed.class,\n                                 InheritedSuppressedWithIgnoredAnnotation.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(Suppressed.class);\n      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);\n      assertTrue(c.toString(), r.debug.contains(\"SuppressSSL\"));\n      assertTrue(c.toString(), r.debug.contains(\"fakeBugUrl\"));\n      conf = r.createSSLTestConfig();\n      assertEquals(c.toString(), false, conf.isSSLMode());\n      assertEquals(c.toString(), false, conf.isClientAuthMode());\n    }\n\n    for (Class c : Arrays.asList(EmptyAnnotated.class, InheritedEmptyAnnotated.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.clientAuth, 0.0D);\n    }\n\n    for (Class c : Arrays.asList(SimplyAnnotated.class, InheritedEmptyAnnotatationWithOverride.class)) {\n      r = SSLRandomizer.getSSLRandomizerForClass(c);\n      assertEquals(c.toString(), 0.5D, r.ssl, 0.0D);\n      assertEquals(c.toString(), 0.5D, r.clientAuth, 0.0D);\n    }\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MinAnnotated.class);\n    assertEquals(0.0D, r.ssl, 0.0D);\n    assertEquals(0.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(false, conf.isSSLMode());\n    assertEquals(false, conf.isClientAuthMode());\n    \n    r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);\n    assertEquals(1.0D, r.ssl, 0.0D);\n    assertEquals(1.0D, r.clientAuth, 0.0D);\n    conf = r.createSSLTestConfig();\n    assertEquals(true, conf.isSSLMode());\n    assertEquals(true, conf.isClientAuthMode());\n\n    r = SSLRandomizer.getSSLRandomizerForClass(SSlButNoClientAuthAnnotated.class);\n    assertEquals(0.42D, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    r = SSLRandomizer.getSSLRandomizerForClass(ClientAuthButNoSSLAnnotated.class);\n    assertEquals(RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);\n    assertEquals(0.42D, r.clientAuth, 0.0D);\n\n    for (Class c : Arrays.asList(SSLOutOfRangeAnnotated.class,\n                                 ClientAuthOutOfRangeAnnotated.class,\n                                 InheritedOutOfRangeAnnotated.class)) {\n      expectThrows(IllegalArgumentException.class, () -> {\n          Object trash = SSLRandomizer.getSSLRandomizerForClass(c);\n        });\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1f69e96b07e265f3e18957be540909b01fae36f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f69e96b07e265f3e18957be540909b01fae36f8"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3beec0828e9973095a4de926b078ebc3bdbfd2aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f69e96b07e265f3e18957be540909b01fae36f8":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"3beec0828e9973095a4de926b078ebc3bdbfd2aa":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}