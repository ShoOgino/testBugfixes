{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    public GeoCircle(double lat, double lon, double cutoffAngle)\n    {\n        super();\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of bounds\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of bounds\");\n        if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n            throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n        double sinAngle = Math.sin(cutoffAngle);\n        double cosAngle = Math.cos(cutoffAngle);\n        this.center = new GeoPoint(lat,lon);\n        this.cutoffNormalDistance = sinAngle;\n        // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n        double xDiff = 1.0 - cosAngle;\n        this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n        this.cutoffAngle = cutoffAngle;\n        this.circlePlane = new SidedPlane(center, center, -cosAngle);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","sourceNew":"    public GeoCircle(final double lat, final double lon, final double cutoffAngle)\n    {\n        super();\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of bounds\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of bounds\");\n        if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n            throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n        final double sinAngle = Math.sin(cutoffAngle);\n        final double cosAngle = Math.cos(cutoffAngle);\n        this.center = new GeoPoint(lat,lon);\n        this.cutoffNormalDistance = sinAngle;\n        // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n        final double xDiff = 1.0 - cosAngle;\n        this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n        this.cutoffAngle = cutoffAngle;\n        this.circlePlane = new SidedPlane(center, center, -cosAngle);\n        \n        // Compute a point on the circle boundary.  This can be any point that is easy to compute.\n        // This requires some math, so I've implemented it in Plane.\n        this.edgePoints = new GeoPoint[]{center.getSamplePoint(sinAngle,cosAngle)};\n    }\n\n","sourceOld":"    public GeoCircle(double lat, double lon, double cutoffAngle)\n    {\n        super();\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of bounds\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of bounds\");\n        if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n            throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n        double sinAngle = Math.sin(cutoffAngle);\n        double cosAngle = Math.cos(cutoffAngle);\n        this.center = new GeoPoint(lat,lon);\n        this.cutoffNormalDistance = sinAngle;\n        // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n        double xDiff = 1.0 - cosAngle;\n        this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n        this.cutoffAngle = cutoffAngle;\n        this.circlePlane = new SidedPlane(center, center, -cosAngle);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","sourceNew":"    public GeoCircle(final double lat, final double lon, final double cutoffAngle)\n    {\n        super();\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of bounds\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of bounds\");\n        if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n            throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n        final double sinAngle = Math.sin(cutoffAngle);\n        final double cosAngle = Math.cos(cutoffAngle);\n        this.center = new GeoPoint(lat,lon);\n        this.cutoffNormalDistance = sinAngle;\n        // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n        final double xDiff = 1.0 - cosAngle;\n        this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n        this.cutoffAngle = cutoffAngle;\n        this.circlePlane = new SidedPlane(center, center, -cosAngle);\n        \n        // Compute a point on the circle boundary. \n        if (cutoffAngle == Math.PI)\n            this.edgePoints = new GeoPoint[0];\n        else {\n            // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n            double newLat = lat + cutoffAngle;\n            double newLon = lon;\n            if (newLat > Math.PI * 0.5) {\n                newLat = Math.PI - newLat;\n                newLon += Math.PI;\n            }\n            while (newLon > Math.PI) {\n                newLon -= Math.PI * 2.0;\n            }\n            final GeoPoint edgePoint = new GeoPoint(newLat,newLon);\n            //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n            //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n            this.edgePoints = new GeoPoint[]{edgePoint};\n        }\n    }\n\n","sourceOld":"    public GeoCircle(final double lat, final double lon, final double cutoffAngle)\n    {\n        super();\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of bounds\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of bounds\");\n        if (cutoffAngle < 0.0 || cutoffAngle > Math.PI)\n            throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n        final double sinAngle = Math.sin(cutoffAngle);\n        final double cosAngle = Math.cos(cutoffAngle);\n        this.center = new GeoPoint(lat,lon);\n        this.cutoffNormalDistance = sinAngle;\n        // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n        final double xDiff = 1.0 - cosAngle;\n        this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n        this.cutoffAngle = cutoffAngle;\n        this.circlePlane = new SidedPlane(center, center, -cosAngle);\n        \n        // Compute a point on the circle boundary.  This can be any point that is easy to compute.\n        // This requires some math, so I've implemented it in Plane.\n        this.edgePoints = new GeoPoint[]{center.getSamplePoint(sinAngle,cosAngle)};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","sourceNew":"  public GeoCircle(final double lat, final double lon, final double cutoffAngle) {\n    super();\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double sinAngle = Math.sin(cutoffAngle);\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(lat, lon);\n    this.cutoffNormalDistance = sinAngle;\n    // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n    final double xDiff = 1.0 - cosAngle;\n    this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n    this.cutoffAngle = cutoffAngle;\n    this.circlePlane = new SidedPlane(center, center, -cosAngle);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","sourceOld":"    public GeoCircle(final double lat, final double lon, final double cutoffAngle)\n    {\n        super();\n        if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n            throw new IllegalArgumentException(\"Latitude out of bounds\");\n        if (lon < -Math.PI || lon > Math.PI)\n            throw new IllegalArgumentException(\"Longitude out of bounds\");\n        if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n            throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n        final double sinAngle = Math.sin(cutoffAngle);\n        final double cosAngle = Math.cos(cutoffAngle);\n        this.center = new GeoPoint(lat,lon);\n        this.cutoffNormalDistance = sinAngle;\n        // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n        final double xDiff = 1.0 - cosAngle;\n        this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n        this.cutoffAngle = cutoffAngle;\n        this.circlePlane = new SidedPlane(center, center, -cosAngle);\n        \n        // Compute a point on the circle boundary. \n        if (cutoffAngle == Math.PI)\n            this.edgePoints = new GeoPoint[0];\n        else {\n            // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n            double newLat = lat + cutoffAngle;\n            double newLon = lon;\n            if (newLat > Math.PI * 0.5) {\n                newLat = Math.PI - newLat;\n                newLon += Math.PI;\n            }\n            while (newLon > Math.PI) {\n                newLon -= Math.PI * 2.0;\n            }\n            final GeoPoint edgePoint = new GeoPoint(newLat,newLon);\n            //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n            //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n            this.edgePoints = new GeoPoint[]{edgePoint};\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  public GeoCircle(final double lat, final double lon, final double cutoffAngle) {\n    super();\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double sinAngle = Math.sin(cutoffAngle);\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(lat, lon);\n    this.cutoffNormalDistance = sinAngle;\n    // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n    final double xDiff = 1.0 - cosAngle;\n    this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n    this.cutoffAngle = cutoffAngle;\n    this.circlePlane = new SidedPlane(center, center, -cosAngle);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(planetModel, lat, lon);\n    final double magnitude = center.magnitude();\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // The plane's normal vector needs to be normalized, since we compute D on that basis\n    this.circlePlane = new SidedPlane(center, center.normalize(), -cosAngle * magnitude);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // We already have circle plane, which is the definitive determination of the edge of the \"circle\".\n      // Next, compute vertical plane going through origin and the center point (C = 0, D = 0).\n      Plane verticalPlane = Plane.constructNormalizedVerticalPlane(this.center.x, this.center.y);\n      if (verticalPlane == null) {\n        verticalPlane = new Plane(1.0,0.0);\n      }\n      // Finally, use Plane.findIntersections() to find the intersection points.\n      final GeoPoint edgePoint = this.circlePlane.getSampleIntersectionPoint(planetModel, verticalPlane);\n      if (edgePoint == null) {\n        throw new RuntimeException(\"Could not find edge point for circle at lat=\"+lat+\" lon=\"+lon+\" cutoffAngle=\"+cutoffAngle+\" planetModel=\"+planetModel);\n      }\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final double lat, final double lon, final double cutoffAngle) {\n    super();\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double sinAngle = Math.sin(cutoffAngle);\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(lat, lon);\n    this.cutoffNormalDistance = sinAngle;\n    // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n    final double xDiff = 1.0 - cosAngle;\n    this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n    this.cutoffAngle = cutoffAngle;\n    this.circlePlane = new SidedPlane(center, center, -cosAngle);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":["5f38c0ec58dc5223e6494ed9a1195d20e8ca5676","5f38c0ec58dc5223e6494ed9a1195d20e8ca5676"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":5,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(planetModel, lat, lon);\n    final double magnitude = center.magnitude();\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // The plane's normal vector needs to be normalized, since we compute D on that basis\n    this.circlePlane = new SidedPlane(center, center.normalize(), -cosAngle * magnitude);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // We already have circle plane, which is the definitive determination of the edge of the \"circle\".\n      // Next, compute vertical plane going through origin and the center point (C = 0, D = 0).\n      Plane verticalPlane = Plane.constructNormalizedVerticalPlane(this.center.x, this.center.y);\n      if (verticalPlane == null) {\n        verticalPlane = new Plane(1.0,0.0);\n      }\n      // Finally, use Plane.findIntersections() to find the intersection points.\n      final GeoPoint edgePoint = this.circlePlane.getSampleIntersectionPoint(planetModel, verticalPlane);\n      if (edgePoint == null) {\n        throw new RuntimeException(\"Could not find edge point for circle at lat=\"+lat+\" lon=\"+lon+\" cutoffAngle=\"+cutoffAngle+\" planetModel=\"+planetModel);\n      }\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final double lat, final double lon, final double cutoffAngle) {\n    super();\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double sinAngle = Math.sin(cutoffAngle);\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(lat, lon);\n    this.cutoffNormalDistance = sinAngle;\n    // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n    final double xDiff = 1.0 - cosAngle;\n    this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n    this.cutoffAngle = cutoffAngle;\n    this.circlePlane = new SidedPlane(center, center, -cosAngle);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}