{"path":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#get(SegmentCommitInfo,boolean).mjava","commits":[{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#get(SegmentCommitInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Obtain a ReadersAndLiveDocs instance from the\n   * readerPool.  If create is true, you must later call\n   * {@link #release(ReadersAndUpdates, boolean)}.\n   */\n  synchronized ReadersAndUpdates get(SegmentCommitInfo info, boolean create) {\n    assert info.info.dir ==  originalDirectory: \"info.dir=\" + info.info.dir + \" vs \" + originalDirectory;\n    if (closed.get()) {\n      assert readerMap.isEmpty() : \"Reader map is not empty: \" + readerMap;\n      throw new AlreadyClosedException(\"ReaderPool is already closed\");\n    }\n\n    ReadersAndUpdates rld = readerMap.get(info);\n    if (rld == null) {\n      if (create == false) {\n        return null;\n      }\n      rld = new ReadersAndUpdates(segmentInfos.getIndexCreatedVersionMajor(), info, newPendingDeletes(info));\n      // Steal initial reference:\n      readerMap.put(info, rld);\n    } else {\n      assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + assertInfoIsLive(rld.info)\n          + \" vs \" + assertInfoIsLive(info);\n    }\n\n    if (create) {\n      // Return ref to caller:\n      rld.incRef();\n    }\n\n    assert noDups();\n\n    return rld;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#get(SegmentCommitInfo,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#get(SegmentCommitInfo,boolean).mjava","sourceNew":"  /**\n   * Obtain a ReadersAndLiveDocs instance from the\n   * readerPool.  If create is true, you must later call\n   * {@link #release(ReadersAndUpdates, boolean)}.\n   */\n  synchronized ReadersAndUpdates get(SegmentCommitInfo info, boolean create) {\n    assert info.info.dir ==  originalDirectory: \"info.dir=\" + info.info.dir + \" vs \" + originalDirectory;\n    if (closed.get()) {\n      assert readerMap.isEmpty() : \"Reader map is not empty: \" + readerMap;\n      throw new AlreadyClosedException(\"ReaderPool is already closed\");\n    }\n\n    ReadersAndUpdates rld = readerMap.get(info);\n    if (rld == null) {\n      if (create == false) {\n        return null;\n      }\n      rld = new ReadersAndUpdates(segmentInfos.getIndexCreatedVersionMajor(), info, newPendingDeletes(info), readerAttributes);\n      // Steal initial reference:\n      readerMap.put(info, rld);\n    } else {\n      assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + assertInfoIsLive(rld.info)\n          + \" vs \" + assertInfoIsLive(info);\n    }\n\n    if (create) {\n      // Return ref to caller:\n      rld.incRef();\n    }\n\n    assert noDups();\n\n    return rld;\n  }\n\n","sourceOld":"  /**\n   * Obtain a ReadersAndLiveDocs instance from the\n   * readerPool.  If create is true, you must later call\n   * {@link #release(ReadersAndUpdates, boolean)}.\n   */\n  synchronized ReadersAndUpdates get(SegmentCommitInfo info, boolean create) {\n    assert info.info.dir ==  originalDirectory: \"info.dir=\" + info.info.dir + \" vs \" + originalDirectory;\n    if (closed.get()) {\n      assert readerMap.isEmpty() : \"Reader map is not empty: \" + readerMap;\n      throw new AlreadyClosedException(\"ReaderPool is already closed\");\n    }\n\n    ReadersAndUpdates rld = readerMap.get(info);\n    if (rld == null) {\n      if (create == false) {\n        return null;\n      }\n      rld = new ReadersAndUpdates(segmentInfos.getIndexCreatedVersionMajor(), info, newPendingDeletes(info));\n      // Steal initial reference:\n      readerMap.put(info, rld);\n    } else {\n      assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + assertInfoIsLive(rld.info)\n          + \" vs \" + assertInfoIsLive(info);\n    }\n\n    if (create) {\n      // Return ref to caller:\n      rld.incRef();\n    }\n\n    assert noDups();\n\n    return rld;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#get(SegmentCommitInfo,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#get(SegmentCommitInfo,boolean).mjava","sourceNew":"  /**\n   * Obtain a ReadersAndLiveDocs instance from the\n   * readerPool.  If create is true, you must later call\n   * {@link #release(ReadersAndUpdates, boolean)}.\n   */\n  synchronized ReadersAndUpdates get(SegmentCommitInfo info, boolean create) {\n    assert info.info.dir ==  originalDirectory: \"info.dir=\" + info.info.dir + \" vs \" + originalDirectory;\n    if (closed.get()) {\n      assert readerMap.isEmpty() : \"Reader map is not empty: \" + readerMap;\n      throw new AlreadyClosedException(\"ReaderPool is already closed\");\n    }\n\n    ReadersAndUpdates rld = readerMap.get(info);\n    if (rld == null) {\n      if (create == false) {\n        return null;\n      }\n      rld = new ReadersAndUpdates(segmentInfos.getIndexCreatedVersionMajor(), info, newPendingDeletes(info));\n      // Steal initial reference:\n      readerMap.put(info, rld);\n    } else {\n      assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + assertInfoIsLive(rld.info)\n          + \" vs \" + assertInfoIsLive(info);\n    }\n\n    if (create) {\n      // Return ref to caller:\n      rld.incRef();\n    }\n\n    assert noDups();\n\n    return rld;\n  }\n\n","sourceOld":"  /**\n   * Obtain a ReadersAndLiveDocs instance from the\n   * readerPool.  If create is true, you must later call\n   * {@link #release(ReadersAndUpdates, boolean)}.\n   */\n  synchronized ReadersAndUpdates get(SegmentCommitInfo info, boolean create) {\n    assert info.info.dir ==  originalDirectory: \"info.dir=\" + info.info.dir + \" vs \" + originalDirectory;\n    if (closed.get()) {\n      assert readerMap.isEmpty() : \"Reader map is not empty: \" + readerMap;\n      throw new AlreadyClosedException(\"ReaderPool is already closed\");\n    }\n\n    ReadersAndUpdates rld = readerMap.get(info);\n    if (rld == null) {\n      if (create == false) {\n        return null;\n      }\n      rld = new ReadersAndUpdates(segmentInfos.getIndexCreatedVersionMajor(), info, newPendingDeletes(info), readerAttributes);\n      // Steal initial reference:\n      readerMap.put(info, rld);\n    } else {\n      assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + assertInfoIsLive(rld.info)\n          + \" vs \" + assertInfoIsLive(info);\n    }\n\n    if (create) {\n      // Return ref to caller:\n      rld.incRef();\n    }\n\n    assert noDups();\n\n    return rld;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1926100d9b67becc9701c54266fee3ba7878a5f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"]},"commit2Childs":{"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}