{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps().mjava","commits":[{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public Map getSecurityProps() {\n    try {\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        return (Map) ZkStateReader.fromJSON(getZkClient()\n            .getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, new Stat(), true)) ;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps().mjava","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public Map getSecurityProps() {\n    try {\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        return (Map) Utils.fromJSON(getZkClient()\n            .getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, new Stat(), true)) ;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public Map getSecurityProps() {\n    try {\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        return (Map) ZkStateReader.fromJSON(getZkClient()\n            .getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, new Stat(), true)) ;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps().mjava","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        byte[] data = getZkClient()\n            .getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public Map getSecurityProps() {\n    try {\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        return (Map) Utils.fromJSON(getZkClient()\n            .getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, new Stat(), true)) ;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["5f6502a4045d17684af5347826b9c6cf24b8beac"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdcb86c29922edae9a14852e636303bc52df094"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["6bdcb86c29922edae9a14852e636303bc52df094"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}