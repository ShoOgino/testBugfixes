{"path":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitIntRange().mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}