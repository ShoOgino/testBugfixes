{"path":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesDependingOnNonAddShouldThrowException().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesDependingOnNonAddShouldThrowException().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testApplyPartialUpdatesDependingOnNonAddShouldThrowException() {\n    ulogAdd(ulog, null, sdoc(\"id\", \"1\", \"title_s\", \"title1\", \"val1_i_dvo\", \"1\", \"_version_\", \"100\"));\n    ulogDelete(ulog, \"1\", 500L, false); // dbi\n    ulogAdd(ulog, 500L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"2\", \"_version_\", \"501\"));\n    ulogAdd(ulog, 501L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"3\", \"_version_\", \"502\"));\n\n    Object partialUpdate = ulog.lookup(DOC_1_INDEXED_ID);\n    SolrDocument partialDoc = RealTimeGetComponent.toSolrDoc((SolrInputDocument)((List)partialUpdate).get(4), h.getCore().getLatestSchema());\n    long prevVersion = (Long)((List)partialUpdate).get(3);\n    long prevPointer = (Long)((List)partialUpdate).get(2);\n\n    assertEquals(3L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertEquals(502L, ((NumericDocValuesField)partialDoc.getFieldValue(\"_version_\")).numericValue());\n    assertFalse(partialDoc.containsKey(\"title_s\"));\n\n    // If an in-place update depends on a non-add (i.e. DBI), assert that an exception is thrown.\n    SolrException ex = expectThrows(SolrException.class, () -> {\n        long returnVal = ulog.applyPartialUpdates(DOC_1_INDEXED_ID, prevPointer, prevVersion, null, partialDoc);\n        fail(\"502 depends on 501, 501 depends on 500, but 500 is a\"\n             + \" DELETE. This should've generated an exception. returnVal is: \"+returnVal);\n      });\n    assertEquals(ex.toString(), SolrException.ErrorCode.INVALID_STATE.code, ex.code());\n    assertThat(ex.getMessage(), containsString(\"should've been either ADD or UPDATE_INPLACE\"));\n    assertThat(ex.getMessage(), containsString(\"looking for id=1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesDependingOnNonAddShouldThrowException().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testApplyPartialUpdatesDependingOnNonAddShouldThrowException() {\n    ulogAdd(ulog, null, sdoc(\"id\", \"1\", \"title_s\", \"title1\", \"val1_i_dvo\", \"1\", \"_version_\", \"100\"));\n    ulogDelete(ulog, \"1\", 500L, false); // dbi\n    ulogAdd(ulog, 500L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"2\", \"_version_\", \"501\"));\n    ulogAdd(ulog, 501L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"3\", \"_version_\", \"502\"));\n\n    Object partialUpdate = ulog.lookup(DOC_1_INDEXED_ID);\n    SolrDocument partialDoc = RealTimeGetComponent.toSolrDoc((SolrInputDocument)((List)partialUpdate).get(4), h.getCore().getLatestSchema());\n    long prevVersion = (Long)((List)partialUpdate).get(3);\n    long prevPointer = (Long)((List)partialUpdate).get(2);\n\n    assertEquals(3L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertEquals(502L, ((NumericDocValuesField)partialDoc.getFieldValue(\"_version_\")).numericValue());\n    assertFalse(partialDoc.containsKey(\"title_s\"));\n\n    // If an in-place update depends on a non-add (i.e. DBI), assert that an exception is thrown.\n    SolrException ex = expectThrows(SolrException.class, () -> {\n        long returnVal = ulog.applyPartialUpdates(DOC_1_INDEXED_ID, prevPointer, prevVersion, null, partialDoc);\n        fail(\"502 depends on 501, 501 depends on 500, but 500 is a\"\n             + \" DELETE. This should've generated an exception. returnVal is: \"+returnVal);\n      });\n    assertEquals(ex.toString(), SolrException.ErrorCode.INVALID_STATE.code, ex.code());\n    assertThat(ex.getMessage(), containsString(\"should've been either ADD or UPDATE_INPLACE\"));\n    assertThat(ex.getMessage(), containsString(\"looking for id=1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["415bbbe7da8065dd3c477bdc3c703c6425622998"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}