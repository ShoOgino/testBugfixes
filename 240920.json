{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"/dev/null","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, new DefaultExecuteResultHandler());\n\n        // brief wait before proceeding on Windows\n        try {\n          Thread.sleep(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n\n      } else {\n        code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["22a8ff44db4462084a2b445ffe5b7d28110e13ea","18bd9f981b4c68e58f6f9d0078d58d283da2a288"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22a8ff44db4462084a2b445ffe5b7d28110e13ea","date":1464087391,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, new DefaultExecuteResultHandler());\n\n        // brief wait before proceeding on Windows\n        try {\n          Thread.sleep(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n\n      } else {\n        code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, new DefaultExecuteResultHandler());\n\n        // brief wait before proceeding on Windows\n        try {\n          Thread.sleep(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n\n      } else {\n        code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":["4ca20be81c9284c840498143264e583ccbb8525a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, new DefaultExecuteResultHandler());\n\n        // brief wait before proceeding on Windows\n        try {\n          Thread.sleep(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n\n      } else {\n        code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, new DefaultExecuteResultHandler());\n\n        // brief wait before proceeding on Windows\n        try {\n          Thread.sleep(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n\n      } else {\n        code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0383eb61be84beb71a9984dd1fad5269f18abfde","date":1491252834,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor();\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, new DefaultExecuteResultHandler());\n\n        // brief wait before proceeding on Windows\n        try {\n          Thread.sleep(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n\n      } else {\n        code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c54f28891fedfb53dca3c596f11c9e600e016ae5","date":1491284551,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor();\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fcdd3150fb338948a0c761aa0e8b4384a6e1a8e","date":1491292979,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"585311e6f81a3bcaecbdca38eebafa6b58e6da83","date":1491296430,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor();\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, new DefaultExecuteResultHandler());\n\n        // brief wait before proceeding on Windows\n        try {\n          Thread.sleep(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n\n      } else {\n        code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b5f1276774f2a661d2ed2b3889458efb7ffcf3d","date":1491296431,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor();\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6be2c7edd63ccd60b1494e6f92962e187ccb54b5","date":1491296431,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18bd9f981b4c68e58f6f9d0078d58d283da2a288","date":1495099579,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":["4ca20be81c9284c840498143264e583ccbb8525a"],"bugIntro":["a59de96770cbe3d301903724443b13cd45b755aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a59de96770cbe3d301903724443b13cd45b755aa","date":1495836027,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":["18bd9f981b4c68e58f6f9d0078d58d283da2a288"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"%s start %s -p %d -s \\\"%s\\\" %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.RunExampleTool#startSolr(File,boolean,CommandLine,int,String,int).mjava","sourceNew":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (Map.Entry<String, String> entry : procEnv.entrySet()) {\n            String envVar = entry.getKey();\n            String envVarVal = entry.getValue();\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","sourceOld":"    protected Map<String,Object> startSolr(File solrHomeDir,\n                                           boolean cloudMode,\n                                           CommandLine cli,\n                                           int port,\n                                           String zkHost,\n                                           int maxWaitSecs)\n        throws Exception\n    {\n\n      String extraArgs = readExtraArgs(cli.getArgs());\n\n      String host = cli.getOptionValue('h');\n      String memory = cli.getOptionValue('m');\n\n      String hostArg = (host != null && !\"localhost\".equals(host)) ? \" -h \"+host : \"\";\n      String zkHostArg = (zkHost != null) ? \" -z \"+zkHost : \"\";\n      String memArg = (memory != null) ? \" -m \"+memory : \"\";\n      String cloudModeArg = cloudMode ? \"-cloud \" : \"\";\n      String forceArg = cli.hasOption(\"force\") ? \" -force\" : \"\";\n\n      String addlOpts = cli.getOptionValue('a');\n      String addlOptsArg = (addlOpts != null) ? \" -a \\\"\"+addlOpts+\"\\\"\" : \"\";\n\n      File cwd = new File(System.getProperty(\"user.dir\"));\n      File binDir = (new File(script)).getParentFile();\n\n      boolean isWindows = (OS.isFamilyDOS() || OS.isFamilyWin9x() || OS.isFamilyWindows());\n      String callScript = (!isWindows && cwd.equals(binDir.getParentFile())) ? \"bin/solr\" : script;\n\n      String cwdPath = cwd.getAbsolutePath();\n      String solrHome = solrHomeDir.getAbsolutePath();\n\n      // don't display a huge path for solr home if it is relative to the cwd\n      if (!isWindows && cwdPath.length() > 1 && solrHome.startsWith(cwdPath))\n        solrHome = solrHome.substring(cwdPath.length()+1);\n\n      String startCmd =\n          String.format(Locale.ROOT, \"\\\"%s\\\" start %s -p %d -s \\\"%s\\\" %s %s %s %s %s %s\",\n              callScript, cloudModeArg, port, solrHome, hostArg, zkHostArg, memArg, forceArg, extraArgs, addlOptsArg);\n      startCmd = startCmd.replaceAll(\"\\\\s+\", \" \").trim(); // for pretty printing\n\n      echo(\"\\nStarting up Solr on port \" + port + \" using command:\");\n      echo(startCmd + \"\\n\");\n\n      String solrUrl =\n          String.format(Locale.ROOT, \"%s://%s:%d/solr\", urlScheme, (host != null ? host : \"localhost\"), port);\n\n      Map<String,Object> nodeStatus = checkPortConflict(solrUrl, solrHomeDir, port, cli);\n      if (nodeStatus != null)\n        return nodeStatus; // the server they are trying to start is already running\n\n      int code = 0;\n      if (isWindows) {\n        // On Windows, the execution doesn't return, so we have to execute async\n        // and when calling the script, it seems to be inheriting the environment that launched this app\n        // so we have to prune out env vars that may cause issues\n        Map<String,String> startEnv = new HashMap<>();\n        Map<String,String> procEnv = EnvironmentUtils.getProcEnvironment();\n        if (procEnv != null) {\n          for (String envVar : procEnv.keySet()) {\n            String envVarVal = procEnv.get(envVar);\n            if (envVarVal != null && !\"EXAMPLE\".equals(envVar) && !envVar.startsWith(\"SOLR_\")) {\n              startEnv.put(envVar, envVarVal);\n            }\n          }\n        }\n        DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();\n        executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd), startEnv, handler);\n\n        // wait for execution.\n        try {\n          handler.waitFor(3000);\n        } catch (InterruptedException ie) {\n          // safe to ignore ...\n          Thread.interrupted();\n        }\n        if (handler.hasResult() && handler.getExitValue() != 0) {\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+handler.getException());\n        }\n      } else {\n        try {\n          code = executor.execute(org.apache.commons.exec.CommandLine.parse(startCmd));\n        } catch(ExecuteException e){\n          throw new Exception(\"Failed to start Solr using command: \"+startCmd+\" Exception : \"+ e);\n        }\n      }\n      if (code != 0)\n        throw new Exception(\"Failed to start Solr using command: \"+startCmd);\n\n      return getNodeStatus(solrUrl, maxWaitSecs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b5f1276774f2a661d2ed2b3889458efb7ffcf3d":["585311e6f81a3bcaecbdca38eebafa6b58e6da83"],"585311e6f81a3bcaecbdca38eebafa6b58e6da83":["22a8ff44db4462084a2b445ffe5b7d28110e13ea"],"0fcdd3150fb338948a0c761aa0e8b4384a6e1a8e":["c54f28891fedfb53dca3c596f11c9e600e016ae5"],"22a8ff44db4462084a2b445ffe5b7d28110e13ea":["4ca20be81c9284c840498143264e583ccbb8525a"],"c54f28891fedfb53dca3c596f11c9e600e016ae5":["0383eb61be84beb71a9984dd1fad5269f18abfde"],"6be2c7edd63ccd60b1494e6f92962e187ccb54b5":["8b5f1276774f2a661d2ed2b3889458efb7ffcf3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4ca20be81c9284c840498143264e583ccbb8525a","22a8ff44db4462084a2b445ffe5b7d28110e13ea"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0383eb61be84beb71a9984dd1fad5269f18abfde":["22a8ff44db4462084a2b445ffe5b7d28110e13ea"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6be2c7edd63ccd60b1494e6f92962e187ccb54b5","a59de96770cbe3d301903724443b13cd45b755aa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a59de96770cbe3d301903724443b13cd45b755aa":["18bd9f981b4c68e58f6f9d0078d58d283da2a288"],"18bd9f981b4c68e58f6f9d0078d58d283da2a288":["0fcdd3150fb338948a0c761aa0e8b4384a6e1a8e"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["18bd9f981b4c68e58f6f9d0078d58d283da2a288","a59de96770cbe3d301903724443b13cd45b755aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"8b5f1276774f2a661d2ed2b3889458efb7ffcf3d":["6be2c7edd63ccd60b1494e6f92962e187ccb54b5"],"585311e6f81a3bcaecbdca38eebafa6b58e6da83":["8b5f1276774f2a661d2ed2b3889458efb7ffcf3d"],"0fcdd3150fb338948a0c761aa0e8b4384a6e1a8e":["18bd9f981b4c68e58f6f9d0078d58d283da2a288"],"22a8ff44db4462084a2b445ffe5b7d28110e13ea":["585311e6f81a3bcaecbdca38eebafa6b58e6da83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0383eb61be84beb71a9984dd1fad5269f18abfde"],"c54f28891fedfb53dca3c596f11c9e600e016ae5":["0fcdd3150fb338948a0c761aa0e8b4384a6e1a8e"],"6be2c7edd63ccd60b1494e6f92962e187ccb54b5":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f97fc3d287be2a8d7f513f0de3249b50dda47299","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4ca20be81c9284c840498143264e583ccbb8525a":["22a8ff44db4462084a2b445ffe5b7d28110e13ea","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0383eb61be84beb71a9984dd1fad5269f18abfde":["c54f28891fedfb53dca3c596f11c9e600e016ae5"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"a59de96770cbe3d301903724443b13cd45b755aa":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"18bd9f981b4c68e58f6f9d0078d58d283da2a288":["a59de96770cbe3d301903724443b13cd45b755aa","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}