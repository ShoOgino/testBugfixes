{"path":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"CLOUD_UPDATE_DELAY\", \"1\");\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.put(\"configName\", \"conf1\");\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/collections/testcore\", props2.store(), CreateMode.PERSISTENT);\n    zkClient.makePath(\"/collections/testcore/shards\", CreateMode.PERSISTENT);\n    zkClient.close();\n    \n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(host + \":1661_solr_testcore\")) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(host + \":1661_solr_testcore\"));\n\n    Slice slice = slices.get(host + \":1661_solr_testcore\");\n    assertEquals(host + \":1661_solr_testcore\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(\"node_name\"));\n\n    assertEquals(\"http://\" + host + \":1661/solr/testcore\", zkProps.get(\"url\"));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["3f767f8c99eaedb984df754fe61f21c5de260f94","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}