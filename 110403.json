{"path":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            docs.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            docs.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            docs.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            docs.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n      PostingsWriterBase docs = new StandardPostingsWriter(state);\n\n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      TermsIndexWriterBase indexWriter;\n      boolean success = false;\n      try {\n        indexWriter = new FixedGapTermsIndexWriter(state);\n        success = true;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, docs);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            docs.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","95ae76773bf2b95987d5f9c8f566ab3738953fb4","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}