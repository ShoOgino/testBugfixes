{"path":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ROOT);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":["2f817aae860ca9095006da5d6c61eef0a1c8eb63","2f817aae860ca9095006da5d6c61eef0a1c8eb63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ROOT);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ROOT);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ROOT);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ROOT);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ROOT);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f817aae860ca9095006da5d6c61eef0a1c8eb63","date":1438798872,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ROOT);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":["9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    //TODO upgrade to Java 8 DateTimeFormatter. But how to deal with the GMT as a default?\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba","date":1459362686,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    //TODO upgrade to Java 8 DateTimeFormatter. But how to deal with the GMT as a default?\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","date":1459364429,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    //TODO upgrade to Java 8 DateTimeFormatter. But how to deal with the GMT as a default?\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["2f817aae860ca9095006da5d6c61eef0a1c8eb63"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["c26f00b574427b55127e869b935845554afde1fa"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c26f00b574427b55127e869b935845554afde1fa","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"46d8ada1fff8d18cb197c38c7983225162599948":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"2f817aae860ca9095006da5d6c61eef0a1c8eb63":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"c26f00b574427b55127e869b935845554afde1fa":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"2f817aae860ca9095006da5d6c61eef0a1c8eb63":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["2f817aae860ca9095006da5d6c61eef0a1c8eb63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}