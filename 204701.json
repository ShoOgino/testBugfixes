{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(StorableField,BytesRefBuilder).mjava","sourceNew":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCodedBytes(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCodedBytes(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  private void storedToIndexed(StorableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCodedBytes(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCodedBytes(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","date":1455407361,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","sourceNew":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","sourceOld":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCodedBytes(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCodedBytes(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCodedBytes(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCodedBytes(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCodedBytes(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","sourceNew":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the old BinaryField encoding is no longer supported\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n    }\n  }\n\n","sourceOld":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","sourceNew":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the old BinaryField encoding is no longer supported\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n    }\n  }\n\n","sourceOld":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the old BinaryField encoding is no longer supported\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n    }\n  }\n\n","bugFix":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#storedToIndexed(IndexableField,BytesRefBuilder).mjava","sourceNew":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the old BinaryField encoding is no longer supported\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n    }\n  }\n\n","sourceOld":"  private void storedToIndexed(IndexableField f, final BytesRefBuilder bytes) {\n    final Number val = f.numericValue();\n    if (val != null) {\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);\n          break;\n        case FLOAT:\n          LegacyNumericUtils.intToPrefixCoded(LegacyNumericUtils.floatToSortableInt(val.floatValue()), 0, bytes);\n          break;\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(val.longValue(), 0, bytes);\n          break;\n        case DOUBLE:\n          LegacyNumericUtils.longToPrefixCoded(LegacyNumericUtils.doubleToSortableLong(val.doubleValue()), 0, bytes);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    } else {\n      // the following code is \"deprecated\" and only to support pre-3.2 indexes using the old BinaryField encoding:\n      final BytesRef bytesRef = f.binaryValue();\n      if (bytesRef==null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid field contents: \"+f.name());\n      switch (type) {\n        case INTEGER:\n          LegacyNumericUtils.intToPrefixCoded(toInt(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case FLOAT: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from float two times\n          // code in next 2 lines is identical to: int v = LegacyNumericUtils.floatToSortableInt(Float.intBitsToFloat(toInt(arr)));\n          int v = toInt(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffff;\n          LegacyNumericUtils.intToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        case LONG: //fallthrough!\n        case DATE:\n          LegacyNumericUtils.longToPrefixCoded(toLong(bytesRef.bytes, bytesRef.offset), 0, bytes);\n          break;\n        case DOUBLE: {\n          // WARNING: Code Duplication! Keep in sync with o.a.l.util.LegacyNumericUtils!\n          // copied from LegacyNumericUtils to not convert to/from double two times\n          // code in next 2 lines is identical to: long v = LegacyNumericUtils.doubleToSortableLong(Double.longBitsToDouble(toLong(arr)));\n          long v = toLong(bytesRef.bytes, bytesRef.offset);\n          if (v<0) v ^= 0x7fffffffffffffffL;\n          LegacyNumericUtils.longToPrefixCoded(v, 0, bytes);\n          break;\n        }\n        default:\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + f.name());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["733eaf468f18297b1bcc51031353bdfdd1913bdf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}