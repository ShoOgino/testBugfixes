{"path":"solr/core/src/java/org/apache/solr/handler/export/StringFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","commits":[{"id":"a7eb5b8b79759ebbe90a0605a50c666ba0b83789","date":1535046490,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/StringFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter ew, int fieldIndex) throws IOException {\n    BytesRef ref;\n    SortValue sortValue = sortDoc.getSortValue(this.field);\n    if (sortValue != null) {\n      if (sortValue.isPresent()) {\n        ref = (BytesRef) sortValue.getCurrentValue();\n      } else { //empty-value\n        return false;\n      }\n    } else {\n      // field is not part of 'sort' param, but part of 'fl' param\n      SortedDocValues vals = DocValues.getSorted(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) {\n        return false;\n      }\n      int ord = vals.ordValue();\n      ref = vals.lookupOrd(ord);\n    }\n    fieldType.indexedToReadable(ref, cref);\n    ew.put(this.field, cref.toString());\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b2ba7b58bce0f80c97a5eb2f11febac26681566","date":1542686312,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/StringFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/StringFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","sourceNew":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter ew, int fieldIndex) throws IOException {\n    BytesRef ref;\n    SortValue sortValue = sortDoc.getSortValue(this.field);\n    if (sortValue != null) {\n      if (sortValue.isPresent()) {\n        ref = (BytesRef) sortValue.getCurrentValue();\n      } else { //empty-value\n        return false;\n      }\n    } else {\n      // field is not part of 'sort' param, but part of 'fl' param\n      SortedDocValues vals = DocValues.getSorted(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) {\n        return false;\n      }\n      int ord = vals.ordValue();\n      ref = vals.lookupOrd(ord);\n    }\n\n    if (ew instanceof JavaBinCodec.BinEntryWriter) {\n      ew.put(this.field, utf8.reset(ref.bytes, ref.offset, ref.length, null));\n    } else {\n      fieldType.indexedToReadable(ref, cref);\n      String v = cref.toString();\n      ew.put(this.field, v);\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter ew, int fieldIndex) throws IOException {\n    BytesRef ref;\n    SortValue sortValue = sortDoc.getSortValue(this.field);\n    if (sortValue != null) {\n      if (sortValue.isPresent()) {\n        ref = (BytesRef) sortValue.getCurrentValue();\n      } else { //empty-value\n        return false;\n      }\n    } else {\n      // field is not part of 'sort' param, but part of 'fl' param\n      SortedDocValues vals = DocValues.getSorted(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) {\n        return false;\n      }\n      int ord = vals.ordValue();\n      ref = vals.lookupOrd(ord);\n    }\n    fieldType.indexedToReadable(ref, cref);\n    ew.put(this.field, cref.toString());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/StringFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/StringFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","sourceNew":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter ew, int fieldIndex) throws IOException {\n    BytesRef ref;\n    SortValue sortValue = sortDoc.getSortValue(this.field);\n    if (sortValue != null) {\n      if (sortValue.isPresent()) {\n        ref = (BytesRef) sortValue.getCurrentValue();\n      } else { //empty-value\n        return false;\n      }\n    } else {\n      // field is not part of 'sort' param, but part of 'fl' param\n      SortedDocValues vals = DocValues.getSorted(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) {\n        return false;\n      }\n      int ord = vals.ordValue();\n      ref = vals.lookupOrd(ord);\n    }\n\n    if (ew instanceof JavaBinCodec.BinEntryWriter) {\n      ew.put(this.field, utf8.reset(ref.bytes, ref.offset, ref.length, null));\n    } else {\n      String v = null;\n      if(sortValue != null) {\n        v = ((StringValue) sortValue).getLastString();\n        if(v == null) {\n          fieldType.indexedToReadable(ref, cref);\n          v = cref.toString();\n          ((StringValue) sortValue).setLastString(v);\n        }\n      } else {\n        fieldType.indexedToReadable(ref, cref);\n        v = cref.toString();\n      }\n\n      ew.put(this.field, v);\n\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter ew, int fieldIndex) throws IOException {\n    BytesRef ref;\n    SortValue sortValue = sortDoc.getSortValue(this.field);\n    if (sortValue != null) {\n      if (sortValue.isPresent()) {\n        ref = (BytesRef) sortValue.getCurrentValue();\n      } else { //empty-value\n        return false;\n      }\n    } else {\n      // field is not part of 'sort' param, but part of 'fl' param\n      SortedDocValues vals = DocValues.getSorted(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) {\n        return false;\n      }\n      int ord = vals.ordValue();\n      ref = vals.lookupOrd(ord);\n    }\n\n    if (ew instanceof JavaBinCodec.BinEntryWriter) {\n      ew.put(this.field, utf8.reset(ref.bytes, ref.offset, ref.length, null));\n    } else {\n      fieldType.indexedToReadable(ref, cref);\n      String v = cref.toString();\n      ew.put(this.field, v);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/StringFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/StringFieldWriter#write(SortDoc,LeafReader,MapWriter.EntryWriter,int).mjava","sourceNew":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter ew, int fieldIndex) throws IOException {\n    BytesRef ref;\n    SortValue sortValue = sortDoc.getSortValue(this.field);\n    if (sortValue != null) {\n      if (sortValue.isPresent()) {\n        ref = (BytesRef) sortValue.getCurrentValue();\n      } else { //empty-value\n        return false;\n      }\n    } else {\n      // field is not part of 'sort' param, but part of 'fl' param\n      SortedDocValues vals = lastDocValues.get(sortDoc.ord);\n      if (vals == null || vals.docID() >= sortDoc.docId) {\n        vals = DocValues.getSorted(reader, this.field);\n        lastDocValues.put(sortDoc.ord, vals);\n      }\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) {\n        return false;\n      }\n      int ord = vals.ordValue();\n      ref = vals.lookupOrd(ord);\n    }\n\n    if (ew instanceof JavaBinCodec.BinEntryWriter) {\n      ew.put(this.field, utf8.reset(ref.bytes, ref.offset, ref.length, null));\n    } else {\n      String v = null;\n      if (sortValue != null) {\n        v = ((StringValue) sortValue).getLastString();\n        if (v == null) {\n          fieldType.indexedToReadable(ref, cref);\n          v = cref.toString();\n          ((StringValue) sortValue).setLastString(v);\n        }\n      } else {\n        fieldType.indexedToReadable(ref, cref);\n        v = cref.toString();\n      }\n\n      ew.put(this.field, v);\n\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean write(SortDoc sortDoc, LeafReader reader, MapWriter.EntryWriter ew, int fieldIndex) throws IOException {\n    BytesRef ref;\n    SortValue sortValue = sortDoc.getSortValue(this.field);\n    if (sortValue != null) {\n      if (sortValue.isPresent()) {\n        ref = (BytesRef) sortValue.getCurrentValue();\n      } else { //empty-value\n        return false;\n      }\n    } else {\n      // field is not part of 'sort' param, but part of 'fl' param\n      SortedDocValues vals = DocValues.getSorted(reader, this.field);\n      if (vals.advance(sortDoc.docId) != sortDoc.docId) {\n        return false;\n      }\n      int ord = vals.ordValue();\n      ref = vals.lookupOrd(ord);\n    }\n\n    if (ew instanceof JavaBinCodec.BinEntryWriter) {\n      ew.put(this.field, utf8.reset(ref.bytes, ref.offset, ref.length, null));\n    } else {\n      String v = null;\n      if(sortValue != null) {\n        v = ((StringValue) sortValue).getLastString();\n        if(v == null) {\n          fieldType.indexedToReadable(ref, cref);\n          v = cref.toString();\n          ((StringValue) sortValue).setLastString(v);\n        }\n      } else {\n        fieldType.indexedToReadable(ref, cref);\n        v = cref.toString();\n      }\n\n      ew.put(this.field, v);\n\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a7eb5b8b79759ebbe90a0605a50c666ba0b83789":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["a7eb5b8b79759ebbe90a0605a50c666ba0b83789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"]},"commit2Childs":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7eb5b8b79759ebbe90a0605a50c666ba0b83789":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7eb5b8b79759ebbe90a0605a50c666ba0b83789"],"804a8d5358fe7b7563b85ee7838714d720b89272":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}