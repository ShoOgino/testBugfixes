{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e302b4ecab1242453fbd12784e424ad50c66398","date":1501517060,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    @SuppressWarnings({\"rawtypes\"})\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testConcurrentUpdates().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testConcurrentUpdates() throws Exception {\n    int COUNT = 50;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);\n    Runnable r = () -> {\n      for (int i = 0; i < COUNT; i++) {\n        String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_added_trigger1',\" +\n            \"'event' : 'nodeAdded',\" +\n            \"'waitFor' : '0s',\" +\n            \"'enabled' : true\" +\n            \"}}\";\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n        NamedList<Object> response = null;\n        try {\n          response = solrClient.request(req);\n          assertEquals(response.get(\"result\").toString(), \"success\");\n        } catch (Exception e) {\n          fail(e.toString());\n        } finally {\n          updateLatch.countDown();\n        }\n      }\n    };\n    Thread t1 = new Thread(r);\n    Thread t2 = new Thread(r);\n    t1.start();\n    t2.start();\n    boolean await = updateLatch.await(60, TimeUnit.SECONDS);\n    assertTrue(\"not all updates executed in time, remaining=\" + updateLatch.getCount(), await);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    NamedList<Object> response = solrClient.request(req);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    @SuppressWarnings({\"rawtypes\"})\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e302b4ecab1242453fbd12784e424ad50c66398"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89948af0461fead48f44ba8fb7866f107ce83f22":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9e302b4ecab1242453fbd12784e424ad50c66398":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["9e302b4ecab1242453fbd12784e424ad50c66398"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"560c18d71dad43d675158783c3840f8c80d6d39c":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"9e302b4ecab1242453fbd12784e424ad50c66398":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}