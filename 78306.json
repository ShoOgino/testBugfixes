{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n      }\n    }\n  }\n\n","sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}