{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#getAvailableSession(int,long).mjava","commits":[{"id":"e17627eb9673daf01d17fdfb583c621c55c34208","date":1593028963,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#getAvailableSession(int,long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n       * Returns an available session from the cache (the best one once cache strategies are defined), or null if no session\n       * from the cache is available (i.e. all are still COMPUTING, are too old, wrong zk version or the cache is empty).<p>\n       * This method must be called while holding the monitor on {@link #lockObj}.<p>\n       * The method updates the session status to computing.\n       */\n    private SessionWrapper getAvailableSession(int zkVersion, long oldestUpdateTimeNs) {\n      for (SessionWrapper sw : sessionWrapperSet) {\n        if (sw.status == Status.EXECUTING && sw.getLastUpdateTime() >= oldestUpdateTimeNs && sw.zkVersion == zkVersion) {\n          sw.status = Status.COMPUTING;\n          return sw;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#getAvailableSession(int,long).mjava","sourceNew":null,"sourceOld":"    /**\n       * Returns an available session from the cache (the best one once cache strategies are defined), or null if no session\n       * from the cache is available (i.e. all are still COMPUTING, are too old, wrong zk version or the cache is empty).<p>\n       * This method must be called while holding the monitor on {@link #lockObj}.<p>\n       * The method updates the session status to computing.\n       */\n    private SessionWrapper getAvailableSession(int zkVersion, long oldestUpdateTimeNs) {\n      for (SessionWrapper sw : sessionWrapperSet) {\n        if (sw.status == Status.EXECUTING && sw.getLastUpdateTime() >= oldestUpdateTimeNs && sw.zkVersion == zkVersion) {\n          sw.status = Status.COMPUTING;\n          return sw;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e17627eb9673daf01d17fdfb583c621c55c34208":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e17627eb9673daf01d17fdfb583c621c55c34208"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"e17627eb9673daf01d17fdfb583c621c55c34208":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e17627eb9673daf01d17fdfb583c621c55c34208"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}