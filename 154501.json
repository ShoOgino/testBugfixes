{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd0491419a55db5050f375ec779df63ce76d9db5","date":1302545750,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa213e2e0dd99953e6b110fe2f801d00ae6a477","date":1329289301,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = IndexReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", WhitespaceAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexReader reader = DirectoryReader.open(runData.getDirectory());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fa213e2e0dd99953e6b110fe2f801d00ae6a477":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","fd0491419a55db5050f375ec779df63ce76d9db5"],"fd0491419a55db5050f375ec779df63ce76d9db5":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd0491419a55db5050f375ec779df63ce76d9db5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8fa213e2e0dd99953e6b110fe2f801d00ae6a477"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","fd0491419a55db5050f375ec779df63ce76d9db5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["fd0491419a55db5050f375ec779df63ce76d9db5"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"8fa213e2e0dd99953e6b110fe2f801d00ae6a477":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"fd0491419a55db5050f375ec779df63ce76d9db5":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"962d04139994fce5193143ef35615499a9a96d78":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","fd0491419a55db5050f375ec779df63ce76d9db5","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["8fa213e2e0dd99953e6b110fe2f801d00ae6a477","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}