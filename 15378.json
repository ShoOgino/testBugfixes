{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedCoreNodeName(ClusterState,ZkNodeProps).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedCoreNodeName(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"      private String getAssignedCoreNodeName(ClusterState state, ZkNodeProps message) {\n        Collection<Slice> slices = state.getSlices(message.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              String msgBaseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n              String msgCore = message.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              if (baseUrl.equals(msgBaseUrl) && core.equals(msgCore)) {\n                return replica.getName();\n              }\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedCoreNodeName(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"      private String getAssignedCoreNodeName(ClusterState state, ZkNodeProps message) {\n        Collection<Slice> slices = state.getSlices(message.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              String msgBaseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n              String msgCore = message.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              if (baseUrl.equals(msgBaseUrl) && core.equals(msgCore)) {\n                return replica.getName();\n              }\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d","date":1395095209,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedCoreNodeName(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedCoreNodeName(ClusterState,ZkNodeProps).mjava","sourceNew":"      private String getAssignedCoreNodeName(ClusterState state, ZkNodeProps message) {\n        Collection<Slice> slices = state.getSlices(message.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n              String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              String msgNodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n              String msgCore = message.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n                return replica.getName();\n              }\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      private String getAssignedCoreNodeName(ClusterState state, ZkNodeProps message) {\n        Collection<Slice> slices = state.getSlices(message.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n              String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              String msgBaseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n              String msgCore = message.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              if (baseUrl.equals(msgBaseUrl) && core.equals(msgCore)) {\n                return replica.getName();\n              }\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedCoreNodeName(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"      private String getAssignedCoreNodeName(ClusterState state, ZkNodeProps message) {\n        Collection<Slice> slices = state.getSlices(message.getStr(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n              String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              String msgNodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n              String msgCore = message.getStr(ZkStateReader.CORE_NAME_PROP);\n              \n              if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n                return replica.getName();\n              }\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cc9dd0d6ff8e58a4ce40ba13d20664a95589de3d":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}