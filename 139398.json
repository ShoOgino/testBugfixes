{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setMaxRetries(int).mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setMaxRetries(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set maximum number of retries to attempt in the event of transient errors.\n   * \n   * @param maxRetries\n   *          No more than 1 recommended\n   * @see #maxRetries\n   */\n  public void setMaxRetries(int maxRetries) {\n    if (maxRetries > 1) {\n      log.warn(\"CommonsHttpSolrServer: maximum Retries \" + maxRetries\n          + \" > 1. Maximum recommended retries is 1.\");\n    }\n    this.maxRetries = maxRetries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"212912761d471e5bfe06cf8027bad27e60a37695","date":1335188643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setMaxRetries(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setMaxRetries(int).mjava","sourceNew":"  /**\n   * Set maximum number of retries to attempt in the event of transient errors.\n   * <p>\n   * Maximum number of retries to attempt in the event of transient errors.\n   * Default: 0 (no) retries. No more than 1 recommended.\n   * </p>\n   * @param maxRetries\n   *          No more than 1 recommended\n   */\n  public void setMaxRetries(int maxRetries) {\n    if (maxRetries > 1) {\n      log.warn(\"CommonsHttpSolrServer: maximum Retries \" + maxRetries\n          + \" > 1. Maximum recommended retries is 1.\");\n    }\n    this.maxRetries = maxRetries;\n  }\n\n","sourceOld":"  /**\n   * Set maximum number of retries to attempt in the event of transient errors.\n   * \n   * @param maxRetries\n   *          No more than 1 recommended\n   * @see #maxRetries\n   */\n  public void setMaxRetries(int maxRetries) {\n    if (maxRetries > 1) {\n      log.warn(\"CommonsHttpSolrServer: maximum Retries \" + maxRetries\n          + \" > 1. Maximum recommended retries is 1.\");\n    }\n    this.maxRetries = maxRetries;\n  }\n\n","bugFix":null,"bugIntro":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setMaxRetries(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setMaxRetries(int).mjava","sourceNew":"  /**\n   * Set maximum number of retries to attempt in the event of transient errors.\n   * <p>\n   * Maximum number of retries to attempt in the event of transient errors.\n   * Default: 0 (no) retries. No more than 1 recommended.\n   * </p>\n   * @param maxRetries\n   *          No more than 1 recommended\n   */\n  public void setMaxRetries(int maxRetries) {\n    if (maxRetries > 1) {\n      log.warn(\"HttpSolrServer: maximum Retries \" + maxRetries\n          + \" > 1. Maximum recommended retries is 1.\");\n    }\n    this.maxRetries = maxRetries;\n  }\n\n","sourceOld":"  /**\n   * Set maximum number of retries to attempt in the event of transient errors.\n   * <p>\n   * Maximum number of retries to attempt in the event of transient errors.\n   * Default: 0 (no) retries. No more than 1 recommended.\n   * </p>\n   * @param maxRetries\n   *          No more than 1 recommended\n   */\n  public void setMaxRetries(int maxRetries) {\n    if (maxRetries > 1) {\n      log.warn(\"CommonsHttpSolrServer: maximum Retries \" + maxRetries\n          + \" > 1. Maximum recommended retries is 1.\");\n    }\n    this.maxRetries = maxRetries;\n  }\n\n","bugFix":null,"bugIntro":["3022960bd0a67a6f828074db6d078b29b254d1f5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#setMaxRetries(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#setMaxRetries(int).mjava","sourceNew":"  /**\n   * Set maximum number of retries to attempt in the event of transient errors.\n   * <p>\n   * Maximum number of retries to attempt in the event of transient errors.\n   * Default: 0 (no) retries. No more than 1 recommended.\n   * </p>\n   * @param maxRetries\n   *          No more than 1 recommended\n   */\n  public void setMaxRetries(int maxRetries) {\n    if (maxRetries > 1) {\n      log.warn(\"HttpSolrServer: maximum Retries \" + maxRetries\n          + \" > 1. Maximum recommended retries is 1.\");\n    }\n    this.maxRetries = maxRetries;\n  }\n\n","sourceOld":"  /**\n   * Set maximum number of retries to attempt in the event of transient errors.\n   * <p>\n   * Maximum number of retries to attempt in the event of transient errors.\n   * Default: 0 (no) retries. No more than 1 recommended.\n   * </p>\n   * @param maxRetries\n   *          No more than 1 recommended\n   */\n  public void setMaxRetries(int maxRetries) {\n    if (maxRetries > 1) {\n      log.warn(\"HttpSolrServer: maximum Retries \" + maxRetries\n          + \" > 1. Maximum recommended retries is 1.\");\n    }\n    this.maxRetries = maxRetries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"212912761d471e5bfe06cf8027bad27e60a37695":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["212912761d471e5bfe06cf8027bad27e60a37695"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["212912761d471e5bfe06cf8027bad27e60a37695"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"212912761d471e5bfe06cf8027bad27e60a37695":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}