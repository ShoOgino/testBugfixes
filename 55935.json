{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,PackedInts.Format).mjava","commits":[{"id":"c8ee441d3e61e4669e10566a8d028a41333642b7","date":1371579547,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,PackedInts.Format).mjava","pathOld":"/dev/null","sourceNew":"  /** Same as {@link #getMutable(int, int, float)} with a pre-computed number\n   *  of bits per value and format.\n   *  @lucene.internal */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, PackedInts.Format format) {\n    assert valueCount >= 0;\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(valueCount);\n          case 16:\n            return new Direct16(valueCount);\n          case 32:\n            return new Direct32(valueCount);\n          case 64:\n            return new Direct64(valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(valueCount);\n            }\n            break;\n        }\n        return new Packed64(valueCount, bitsPerValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,PackedInts.Format).mjava","pathOld":"/dev/null","sourceNew":"  /** Same as {@link #getMutable(int, int, float)} with a pre-computed number\n   *  of bits per value and format.\n   *  @lucene.internal */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, PackedInts.Format format) {\n    assert valueCount >= 0;\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(valueCount);\n          case 16:\n            return new Direct16(valueCount);\n          case 32:\n            return new Direct32(valueCount);\n          case 64:\n            return new Direct64(valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(valueCount);\n            }\n            break;\n        }\n        return new Packed64(valueCount, bitsPerValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f440d3f04c39b9b18e8e48a78ef7b9f840674e22","date":1568209549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,PackedInts.Format).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getMutable(int,int,PackedInts.Format).mjava","sourceNew":"  /** Same as {@link #getMutable(int, int, float)} with a pre-computed number\n   *  of bits per value and format.\n   *  @lucene.internal */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, PackedInts.Format format) {\n    assert valueCount >= 0;\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(valueCount, bitsPerValue);\n      case PACKED:\n        return new Packed64(valueCount, bitsPerValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /** Same as {@link #getMutable(int, int, float)} with a pre-computed number\n   *  of bits per value and format.\n   *  @lucene.internal */\n  public static Mutable getMutable(int valueCount,\n      int bitsPerValue, PackedInts.Format format) {\n    assert valueCount >= 0;\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(valueCount);\n          case 16:\n            return new Direct16(valueCount);\n          case 32:\n            return new Direct32(valueCount);\n          case 64:\n            return new Direct64(valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(valueCount);\n            }\n            break;\n        }\n        return new Packed64(valueCount, bitsPerValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8ee441d3e61e4669e10566a8d028a41333642b7"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["c8ee441d3e61e4669e10566a8d028a41333642b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8ee441d3e61e4669e10566a8d028a41333642b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c8ee441d3e61e4669e10566a8d028a41333642b7"],"c8ee441d3e61e4669e10566a8d028a41333642b7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f440d3f04c39b9b18e8e48a78ef7b9f840674e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}