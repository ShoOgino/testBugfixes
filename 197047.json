{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","commits":[{"id":"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","date":1445865000,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n    \n    bulkScorer.score(collector, acceptDocs, windowMin, end);\n    \n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c82b0d4b7bf499a159eeff92add20bac6599cc1","date":1465223716,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","sourceNew":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector, LeafCollector singleClauseCollector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n    \n    bulkScorer.score(singleClauseCollector, acceptDocs, windowMin, end);\n    \n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","sourceOld":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n    \n    bulkScorer.score(collector, acceptDocs, windowMin, end);\n    \n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","sourceNew":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector, LeafCollector singleClauseCollector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n    \n    bulkScorer.score(singleClauseCollector, acceptDocs, windowMin, end);\n    \n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","sourceOld":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n    \n    bulkScorer.score(collector, acceptDocs, windowMin, end);\n    \n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int,int).mjava","sourceNew":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n\n    bulkScorer.score(collector, acceptDocs, windowMin, end);\n\n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","sourceOld":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector, LeafCollector singleClauseCollector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n    \n    bulkScorer.score(singleClauseCollector, acceptDocs, windowMin, end);\n    \n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","sourceNew":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n\n    bulkScorer.score(collector, acceptDocs, windowMin, end);\n\n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","sourceOld":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n    \n    bulkScorer.score(collector, acceptDocs, windowMin, end);\n    \n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindowSingleScorer(BulkScorerAndDoc,LeafCollector,Bits,int,int,int).mjava","sourceNew":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n\n    bulkScorer.score(collector, acceptDocs, windowMin, end);\n\n    // reset the scorer that should be used for the general case\n    collector.setScorer(scoreAndDoc);\n  }\n\n","sourceOld":"  private void scoreWindowSingleScorer(BulkScorerAndDoc bulkScorer, LeafCollector collector,\n      Bits acceptDocs, int windowMin, int windowMax, int max) throws IOException {\n    assert tail.size() == 0;\n    final int nextWindowBase = head.top().next & ~MASK;\n    final int end = Math.max(windowMax, Math.min(max, nextWindowBase));\n\n    bulkScorer.score(collector, acceptDocs, windowMin, end);\n\n    // reset the scorer that should be used for the general case\n    collector.setScorer(fakeScorer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["c8a0e442f7b61f811680273b25da95994a724466"],"c8a0e442f7b61f811680273b25da95994a724466":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["7c82b0d4b7bf499a159eeff92add20bac6599cc1","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8a0e442f7b61f811680273b25da95994a724466":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"191128ac5b85671b1671e2c857437694283b6ebf":["c8a0e442f7b61f811680273b25da95994a724466"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}