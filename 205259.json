{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDimensionalValues#intersect(String,IntersectVisitor).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDimensionalValues#intersect(String,IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void intersect(String field, IntersectVisitor visitor) throws IOException {\n      in.intersect(field,\n                   new IntersectVisitor() {\n                     @Override\n                     public void visit(int docID) throws IOException {\n                       visitor.visit(docMap.newToOld(docID));\n                     }\n\n                     @Override\n                     public void visit(int docID, byte[] packedValue) throws IOException {\n                       visitor.visit(docMap.newToOld(docID), packedValue);\n                     }\n\n                     @Override\n                     public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                       return visitor.compare(minPackedValue, maxPackedValue);\n                     }\n                   });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDimensionalValues#intersect(String,IntersectVisitor).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDimensionalValues#intersect(String,IntersectVisitor).mjava","sourceNew":"    @Override\n    public void intersect(String field, IntersectVisitor visitor) throws IOException {\n      in.intersect(field,\n                   new IntersectVisitor() {\n                     @Override\n                     public void visit(int docID) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID));\n                     }\n\n                     @Override\n                     public void visit(int docID, byte[] packedValue) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID), packedValue);\n                     }\n\n                     @Override\n                     public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                       return visitor.compare(minPackedValue, maxPackedValue);\n                     }\n                   });\n    }\n\n","sourceOld":"    @Override\n    public void intersect(String field, IntersectVisitor visitor) throws IOException {\n      in.intersect(field,\n                   new IntersectVisitor() {\n                     @Override\n                     public void visit(int docID) throws IOException {\n                       visitor.visit(docMap.newToOld(docID));\n                     }\n\n                     @Override\n                     public void visit(int docID, byte[] packedValue) throws IOException {\n                       visitor.visit(docMap.newToOld(docID), packedValue);\n                     }\n\n                     @Override\n                     public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                       return visitor.compare(minPackedValue, maxPackedValue);\n                     }\n                   });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecf331f9d7bdd234863d2df2bb5c1f019979422f","date":1452250335,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDimensionalValues#intersect(String,IntersectVisitor).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDimensionalValues#intersect(String,IntersectVisitor).mjava","sourceNew":"    @Override\n    public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n      in.intersect(fieldName,\n                   new IntersectVisitor() {\n                     @Override\n                     public void visit(int docID) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID));\n                     }\n\n                     @Override\n                     public void visit(int docID, byte[] packedValue) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID), packedValue);\n                     }\n\n                     @Override\n                     public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                       return visitor.compare(minPackedValue, maxPackedValue);\n                     }\n                   });\n    }\n\n","sourceOld":"    @Override\n    public void intersect(String field, IntersectVisitor visitor) throws IOException {\n      in.intersect(field,\n                   new IntersectVisitor() {\n                     @Override\n                     public void visit(int docID) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID));\n                     }\n\n                     @Override\n                     public void visit(int docID, byte[] packedValue) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID), packedValue);\n                     }\n\n                     @Override\n                     public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                       return visitor.compare(minPackedValue, maxPackedValue);\n                     }\n                   });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingPointValues#intersect(String,IntersectVisitor).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingDimensionalValues#intersect(String,IntersectVisitor).mjava","sourceNew":"    @Override\n    public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n      in.intersect(fieldName,\n                   new IntersectVisitor() {\n                     @Override\n                     public void visit(int docID) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID));\n                     }\n\n                     @Override\n                     public void visit(int docID, byte[] packedValue) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID), packedValue);\n                     }\n\n                     @Override\n                     public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                       return visitor.compare(minPackedValue, maxPackedValue);\n                     }\n                   });\n    }\n\n","sourceOld":"    @Override\n    public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n      in.intersect(fieldName,\n                   new IntersectVisitor() {\n                     @Override\n                     public void visit(int docID) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID));\n                     }\n\n                     @Override\n                     public void visit(int docID, byte[] packedValue) throws IOException {\n                       visitor.visit(docMap.oldToNew(docID), packedValue);\n                     }\n\n                     @Override\n                     public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                       return visitor.compare(minPackedValue, maxPackedValue);\n                     }\n                   });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}