{"path":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","sourceNew":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#makeCountingSumScorerSomeReq().mjava","sourceNew":null,"sourceOld":"  private Scorer makeCountingSumScorerSomeReq() throws IOException { // At least one required scorer.\n    if (optionalScorers.size() == minNrShouldMatch) { // all optional scorers also required.\n      ArrayList<Scorer> allReq = new ArrayList<Scorer>(requiredScorers);\n      allReq.addAll(optionalScorers);\n      return addProhibitedScorers(countingConjunctionSumScorer(allReq));\n    } else { // optionalScorers.size() > minNrShouldMatch, and at least one required scorer\n      Scorer requiredCountingSumScorer =\n            requiredScorers.size() == 1\n            ? new SingleMatchScorer(requiredScorers.get(0))\n            : countingConjunctionSumScorer(requiredScorers);\n      if (minNrShouldMatch > 0) { // use a required disjunction scorer over the optional scorers\n        return addProhibitedScorers( \n                      dualConjunctionSumScorer( // non counting\n                              requiredCountingSumScorer,\n                              countingDisjunctionSumScorer(\n                                      optionalScorers,\n                                      minNrShouldMatch)));\n      } else { // minNrShouldMatch == 0\n        return new ReqOptSumScorer(\n                      addProhibitedScorers(requiredCountingSumScorer),\n                      optionalScorers.size() == 1\n                        ? new SingleMatchScorer(optionalScorers.get(0))\n                        // require 1 in combined, optional scorer.\n                        : countingDisjunctionSumScorer(optionalScorers, 1));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}