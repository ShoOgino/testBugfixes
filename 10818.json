{"path":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","commits":[{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties).mjava","sourceNew":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    this.shardState = props.getProperty(CloudDescriptor.SHARD_STATE, Slice.ACTIVE);\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    this.shardRange = props.getProperty(CloudDescriptor.SHARD_RANGE, null);\n    this.shardParent = props.getProperty(CloudDescriptor.SHARD_PARENT, null);\n  }\n\n","sourceOld":"  public CloudDescriptor(String coreName, Properties props) {\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    this.shardState = props.getProperty(CloudDescriptor.SHARD_STATE, Slice.ACTIVE);\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    this.shardRange = props.getProperty(CloudDescriptor.SHARD_RANGE, null);\n    this.shardParent = props.getProperty(CloudDescriptor.SHARD_PARENT, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a234e8fc54f31f81256b691a1a134f969ef3d01c","date":1392683993,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","sourceNew":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n  }\n\n","sourceOld":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    this.shardState = props.getProperty(CloudDescriptor.SHARD_STATE, Slice.ACTIVE);\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    this.shardRange = props.getProperty(CloudDescriptor.SHARD_RANGE, null);\n    this.shardParent = props.getProperty(CloudDescriptor.SHARD_PARENT, null);\n  }\n\n","bugFix":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","bc841231667f1f315bae6799c068f9aad6543967"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","sourceNew":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n  }\n\n","sourceOld":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","sourceNew":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n  }\n\n","sourceOld":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","sourceNew":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    String replicaTypeStr = props.getProperty(CloudDescriptor.REPLICA_TYPE);\n    if (Strings.isNullOrEmpty(replicaTypeStr)) {\n      this.replicaType = Replica.Type.NRT;\n    } else {\n      this.replicaType = Replica.Type.valueOf(replicaTypeStr);\n    }\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n  }\n\n","sourceOld":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","sourceNew":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    String replicaTypeStr = props.getProperty(CloudDescriptor.REPLICA_TYPE);\n    if (Strings.isNullOrEmpty(replicaTypeStr)) {\n      this.replicaType = Replica.Type.NRT;\n    } else {\n      this.replicaType = Replica.Type.valueOf(replicaTypeStr);\n    }\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n  }\n\n","sourceOld":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(CoreDescriptor,String,Properties,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudDescriptor#CloudDescriptor(String,Properties,CoreDescriptor).mjava","sourceNew":"  public CloudDescriptor(CoreDescriptor cd, String coreName, Properties props, ZkController zkController) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    String replicaTypeStr = props.getProperty(CloudDescriptor.REPLICA_TYPE);\n    if (Strings.isNullOrEmpty(replicaTypeStr)) {\n      this.replicaType = Replica.Type.NRT;\n    } else {\n      this.replicaType = Replica.Type.valueOf(replicaTypeStr);\n    }\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n    // The configSet comes from ZK, not from CD's properties like it does in standalone.\n    // But we want to put it on CD because CD has getConfigSet() which is sensible; don't want that to return null.\n    if (zkController != null) { // there's a test where we pass null 'cause it wanted a dummy instance.  Yuck?\n      try {\n        //TODO readConfigName() also validates the configSet exists but seems needless.  We'll get errors soon enough.\n        String configSetName = zkController.getZkStateReader().readConfigName(collectionName);\n        props.setProperty(CORE_CONFIGSET, configSetName);\n        //noinspection StringEquality\n        assert cd.getConfigSet() == configSetName;\n      } catch (KeeperException ex) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Trouble resolving configSet for collection \" + collectionName + \": \" + ex.getMessage());\n      }\n    }\n  }\n\n","sourceOld":"  public CloudDescriptor(String coreName, Properties props, CoreDescriptor cd) {\n    this.cd = cd;\n    this.shardId = props.getProperty(CoreDescriptor.CORE_SHARD, null);\n    if (Strings.isNullOrEmpty(shardId))\n      this.shardId = null;\n    // If no collection name is specified, we default to the core name\n    this.collectionName = props.getProperty(CoreDescriptor.CORE_COLLECTION, coreName);\n    this.roles = props.getProperty(CoreDescriptor.CORE_ROLES, null);\n    this.nodeName = props.getProperty(CoreDescriptor.CORE_NODE_NAME);\n    if (Strings.isNullOrEmpty(nodeName))\n      this.nodeName = null;\n    this.numShards = PropertiesUtil.toInteger(props.getProperty(CloudDescriptor.NUM_SHARDS), null);\n    String replicaTypeStr = props.getProperty(CloudDescriptor.REPLICA_TYPE);\n    if (Strings.isNullOrEmpty(replicaTypeStr)) {\n      this.replicaType = Replica.Type.NRT;\n    } else {\n      this.replicaType = Replica.Type.valueOf(replicaTypeStr);\n    }\n    for (String propName : props.stringPropertyNames()) {\n      if (propName.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n        collectionParams.put(propName.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), props.getProperty(propName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["a234e8fc54f31f81256b691a1a134f969ef3d01c"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a234e8fc54f31f81256b691a1a134f969ef3d01c":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e4fb176991e13ab85dfe62dceeb287dde115745"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","3e4fb176991e13ab85dfe62dceeb287dde115745"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["a234e8fc54f31f81256b691a1a134f969ef3d01c"],"a234e8fc54f31f81256b691a1a134f969ef3d01c":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}