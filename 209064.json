{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#parseShape(String).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#parseShape(String).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#parseShape(String).mjava","sourceNew":"  /** Detects a range pattern and parses it, otherwise it's parsed as one shape via\n   * {@link #parseUnitShape(String)}.  The range pattern looks like this BNF:\n   * <pre>\n   *   '[' + parseShapeLV + ' TO ' + parseShapeLV + ']'\n   * </pre>\n   * It's the same thing as the toString() of the range shape, notwithstanding range optimization.\n   *\n   * @param str not null or empty\n   * @return not null\n   * @throws java.text.ParseException If there is a problem\n   */\n  public NRShape parseShape(String str) throws ParseException {\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    if (str.charAt(0) == '[') {\n      if (str.charAt(str.length()-1) != ']')\n        throw new ParseException(\"If starts with [ must end with ]; got \"+str, str.length()-1);\n      int middle = str.indexOf(\" TO \");\n      if (middle < 0)\n        throw new ParseException(\"If starts with [ must contain ' TO '; got \"+str, -1);\n      String leftStr = str.substring(1, middle);\n      String rightStr = str.substring(middle + \" TO \".length(), str.length()-1);\n      return toRangeShape(parseUnitShape(leftStr), parseUnitShape(rightStr));\n    } else if (str.charAt(0) == '{') {\n      throw new ParseException(\"Exclusive ranges not supported; got \"+str, 0);\n    } else {\n      return parseUnitShape(str);\n    }\n  }\n\n","sourceOld":"  /** Detects a range pattern and parses it, otherwise it's parsed as one shape via\n   * {@link #parseUnitShape(String)}.  The range pattern looks like this BNF:\n   * <pre>\n   *   '[' + parseShapeLV + ' TO ' + parseShapeLV + ']'\n   * </pre>\n   * It's the same thing as the toString() of the range shape, notwithstanding range optimization.\n   *\n   * @param str not null or empty\n   * @return not null\n   * @throws java.text.ParseException If there is a problem\n   */\n  public NRShape parseShape(String str) throws ParseException {\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    if (str.charAt(0) == '[') {\n      if (str.charAt(str.length()-1) != ']')\n        throw new ParseException(\"If starts with [ must end with ]; got \"+str, str.length()-1);\n      int middle = str.indexOf(\" TO \");\n      if (middle < 0)\n        throw new ParseException(\"If starts with [ must contain ' TO '; got \"+str, -1);\n      String leftStr = str.substring(1, middle);\n      String rightStr = str.substring(middle + \" TO \".length(), str.length()-1);\n      return toRangeShape(parseUnitShape(leftStr), parseUnitShape(rightStr));\n    } else if (str.charAt(0) == '{') {\n      throw new ParseException(\"Exclusive ranges not supported; got \"+str, 0);\n    } else {\n      return parseUnitShape(str);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#parseShape(String).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#parseShape(String).mjava","sourceNew":"  /** Detects a range pattern and parses it, otherwise it's parsed as one shape via\n   * {@link #parseUnitShape(String)}.  The range pattern looks like this BNF:\n   * <pre>\n   *   '[' + parseShapeLV + ' TO ' + parseShapeLV + ']'\n   * </pre>\n   * It's the same thing as the toString() of the range shape, notwithstanding range optimization.\n   *\n   * @param str not null or empty\n   * @return not null\n   * @throws java.text.ParseException If there is a problem\n   */\n  public NRShape parseShape(String str) throws ParseException {\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    if (str.charAt(0) == '[') {\n      if (str.charAt(str.length()-1) != ']')\n        throw new ParseException(\"If starts with [ must end with ]; got \"+str, str.length()-1);\n      int middle = str.indexOf(\" TO \");\n      if (middle < 0)\n        throw new ParseException(\"If starts with [ must contain ' TO '; got \"+str, -1);\n      String leftStr = str.substring(1, middle);\n      String rightStr = str.substring(middle + \" TO \".length(), str.length()-1);\n      return toRangeShape(parseUnitShape(leftStr), parseUnitShape(rightStr));\n    } else if (str.charAt(0) == '{') {\n      throw new ParseException(\"Exclusive ranges not supported; got \"+str, 0);\n    } else {\n      return parseUnitShape(str);\n    }\n  }\n\n","sourceOld":"  /** Detects a range pattern and parses it, otherwise it's parsed as one shape via\n   * {@link #parseUnitShape(String)}.  The range pattern looks like this BNF:\n   * <pre>\n   *   '[' + parseShapeLV + ' TO ' + parseShapeLV + ']'\n   * </pre>\n   * It's the same thing as the toString() of the range shape, notwithstanding range optimization.\n   *\n   * @param str not null or empty\n   * @return not null\n   * @throws java.text.ParseException If there is a problem\n   */\n  public NRShape parseShape(String str) throws ParseException {\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    if (str.charAt(0) == '[') {\n      if (str.charAt(str.length()-1) != ']')\n        throw new ParseException(\"If starts with [ must end with ]; got \"+str, str.length()-1);\n      int middle = str.indexOf(\" TO \");\n      if (middle < 0)\n        throw new ParseException(\"If starts with [ must contain ' TO '; got \"+str, -1);\n      String leftStr = str.substring(1, middle);\n      String rightStr = str.substring(middle + \" TO \".length(), str.length()-1);\n      return toRangeShape(parseUnitShape(leftStr), parseUnitShape(rightStr));\n    } else if (str.charAt(0) == '{') {\n      throw new ParseException(\"Exclusive ranges not supported; got \"+str, 0);\n    } else {\n      return parseUnitShape(str);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}