{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#CJKBigramFilter(TokenStream,int,boolean).mjava","commits":[{"id":"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9","date":1344119834,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#CJKBigramFilter(TokenStream,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CJKBigramFilter, specifying which writing systems should be bigrammed,\n   * and whether or not unigrams should also be output.\n   * @param flags OR'ed set from {@link CJKBigramFilter#HAN}, {@link CJKBigramFilter#HIRAGANA}, \n   *        {@link CJKBigramFilter#KATAKANA}, {@link CJKBigramFilter#HANGUL}\n   * @param outputUnigrams true if unigrams for the selected writing systems should also be output.\n   *        when this is false, this is only done when there are no adjacent characters to form\n   *        a bigram.\n   */\n  public CJKBigramFilter(TokenStream in, int flags, boolean outputUnigrams) {\n    super(in);\n    doHan =      (flags & HAN) == 0      ? NO : HAN_TYPE;\n    doHiragana = (flags & HIRAGANA) == 0 ? NO : HIRAGANA_TYPE;\n    doKatakana = (flags & KATAKANA) == 0 ? NO : KATAKANA_TYPE;\n    doHangul =   (flags & HANGUL) == 0   ? NO : HANGUL_TYPE;\n    this.outputUnigrams = outputUnigrams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#CJKBigramFilter(TokenStream,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CJKBigramFilter, specifying which writing systems should be bigrammed,\n   * and whether or not unigrams should also be output.\n   * @param flags OR'ed set from {@link CJKBigramFilter#HAN}, {@link CJKBigramFilter#HIRAGANA}, \n   *        {@link CJKBigramFilter#KATAKANA}, {@link CJKBigramFilter#HANGUL}\n   * @param outputUnigrams true if unigrams for the selected writing systems should also be output.\n   *        when this is false, this is only done when there are no adjacent characters to form\n   *        a bigram.\n   */\n  public CJKBigramFilter(TokenStream in, int flags, boolean outputUnigrams) {\n    super(in);\n    doHan =      (flags & HAN) == 0      ? NO : HAN_TYPE;\n    doHiragana = (flags & HIRAGANA) == 0 ? NO : HIRAGANA_TYPE;\n    doKatakana = (flags & KATAKANA) == 0 ? NO : KATAKANA_TYPE;\n    doHangul =   (flags & HANGUL) == 0   ? NO : HANGUL_TYPE;\n    this.outputUnigrams = outputUnigrams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#CJKBigramFilter(TokenStream,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CJKBigramFilter, specifying which writing systems should be bigrammed,\n   * and whether or not unigrams should also be output.\n   * @param flags OR'ed set from {@link CJKBigramFilter#HAN}, {@link CJKBigramFilter#HIRAGANA}, \n   *        {@link CJKBigramFilter#KATAKANA}, {@link CJKBigramFilter#HANGUL}\n   * @param outputUnigrams true if unigrams for the selected writing systems should also be output.\n   *        when this is false, this is only done when there are no adjacent characters to form\n   *        a bigram.\n   */\n  public CJKBigramFilter(TokenStream in, int flags, boolean outputUnigrams) {\n    super(in);\n    doHan =      (flags & HAN) == 0      ? NO : HAN_TYPE;\n    doHiragana = (flags & HIRAGANA) == 0 ? NO : HIRAGANA_TYPE;\n    doKatakana = (flags & KATAKANA) == 0 ? NO : KATAKANA_TYPE;\n    doHangul =   (flags & HANGUL) == 0   ? NO : HANGUL_TYPE;\n    this.outputUnigrams = outputUnigrams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}