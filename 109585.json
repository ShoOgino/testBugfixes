{"path":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testResetValueMultipleDocs().mjava","commits":[{"id":"33adea025f43af3243278587a46b8d9fd2e8ccf9","date":1525885077,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testResetValueMultipleDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testResetValueMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int numDocs = 10 + random().nextInt(50);\n    int currentSeqId = 0;\n    int[] seqId = new int[5];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int id = random().nextInt(5);\n      seqId[id] = currentSeqId;\n      doc.add(new StringField(\"id\",  \"\" + id, Store.YES));\n      doc.add(new NumericDocValuesField(\"seqID\", currentSeqId++));\n      doc.add(new NumericDocValuesField(\"is_live\", 1));\n      if (i > 0) {\n        writer.updateDocValues(new Term(\"id\", \"\" + id), new NumericDocValuesField(\"is_live\", null));\n      }\n      writer.addDocument(doc);\n      if (random().nextBoolean()) {\n        writer.flush();\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    try(DirectoryReader reader = writer.getReader()) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      TopDocs is_live = searcher.search(new DocValuesFieldExistsQuery(\"is_live\"), 5);\n      assertEquals(5, is_live.totalHits);\n      for (ScoreDoc doc : is_live.scoreDocs) {\n        int id = Integer.parseInt(reader.document(doc.doc).get(\"id\"));\n        int i = ReaderUtil.subIndex(doc.doc, reader.leaves());\n        assertTrue(i >= 0);\n        LeafReaderContext leafReaderContext = reader.leaves().get(i);\n        NumericDocValues seqID = leafReaderContext.reader().getNumericDocValues(\"seqID\");\n        assertNotNull(seqID);\n        assertTrue(seqID.advanceExact(doc.doc - leafReaderContext.docBase));\n        assertEquals(seqId[id], seqID.longValue());\n      }\n    }\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff09a63f7e0b004377090bd813e7c9b67d15bfdf","date":1525897822,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testResetValueMultipleDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testResetValueMultipleDocs().mjava","sourceNew":"  public void testResetValueMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int numDocs = 10 + random().nextInt(50);\n    int currentSeqId = 0;\n    int[] seqId = new int[] {-1, -1, -1, -1, -1};\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int id = random().nextInt(5);\n      seqId[id] = currentSeqId;\n      doc.add(new StringField(\"id\",  \"\" + id, Store.YES));\n      doc.add(new NumericDocValuesField(\"seqID\", currentSeqId++));\n      doc.add(new NumericDocValuesField(\"is_live\", 1));\n      if (i > 0) {\n        writer.updateDocValues(new Term(\"id\", \"\" + id), new NumericDocValuesField(\"is_live\", null));\n      }\n      writer.addDocument(doc);\n      if (random().nextBoolean()) {\n        writer.flush();\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    int numHits = 0; // check if every doc has been selected at least once\n    for (int i : seqId) {\n      if (i > -1) {\n        numHits++;\n      }\n    }\n    try(DirectoryReader reader = writer.getReader()) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      TopDocs is_live = searcher.search(new DocValuesFieldExistsQuery(\"is_live\"), 5);\n      assertEquals(numHits, is_live.totalHits);\n      for (ScoreDoc doc : is_live.scoreDocs) {\n        int id = Integer.parseInt(reader.document(doc.doc).get(\"id\"));\n        int i = ReaderUtil.subIndex(doc.doc, reader.leaves());\n        assertTrue(i >= 0);\n        LeafReaderContext leafReaderContext = reader.leaves().get(i);\n        NumericDocValues seqID = leafReaderContext.reader().getNumericDocValues(\"seqID\");\n        assertNotNull(seqID);\n        assertTrue(seqID.advanceExact(doc.doc - leafReaderContext.docBase));\n        assertEquals(seqId[id], seqID.longValue());\n      }\n    }\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":"  public void testResetValueMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int numDocs = 10 + random().nextInt(50);\n    int currentSeqId = 0;\n    int[] seqId = new int[5];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int id = random().nextInt(5);\n      seqId[id] = currentSeqId;\n      doc.add(new StringField(\"id\",  \"\" + id, Store.YES));\n      doc.add(new NumericDocValuesField(\"seqID\", currentSeqId++));\n      doc.add(new NumericDocValuesField(\"is_live\", 1));\n      if (i > 0) {\n        writer.updateDocValues(new Term(\"id\", \"\" + id), new NumericDocValuesField(\"is_live\", null));\n      }\n      writer.addDocument(doc);\n      if (random().nextBoolean()) {\n        writer.flush();\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    try(DirectoryReader reader = writer.getReader()) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      TopDocs is_live = searcher.search(new DocValuesFieldExistsQuery(\"is_live\"), 5);\n      assertEquals(5, is_live.totalHits);\n      for (ScoreDoc doc : is_live.scoreDocs) {\n        int id = Integer.parseInt(reader.document(doc.doc).get(\"id\"));\n        int i = ReaderUtil.subIndex(doc.doc, reader.leaves());\n        assertTrue(i >= 0);\n        LeafReaderContext leafReaderContext = reader.leaves().get(i);\n        NumericDocValues seqID = leafReaderContext.reader().getNumericDocValues(\"seqID\");\n        assertNotNull(seqID);\n        assertTrue(seqID.advanceExact(doc.doc - leafReaderContext.docBase));\n        assertEquals(seqId[id], seqID.longValue());\n      }\n    }\n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testResetValueMultipleDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMixedDocValuesUpdates#testResetValueMultipleDocs().mjava","sourceNew":"  public void testResetValueMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int numDocs = 10 + random().nextInt(50);\n    int currentSeqId = 0;\n    int[] seqId = new int[] {-1, -1, -1, -1, -1};\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int id = random().nextInt(5);\n      seqId[id] = currentSeqId;\n      doc.add(new StringField(\"id\",  \"\" + id, Store.YES));\n      doc.add(new NumericDocValuesField(\"seqID\", currentSeqId++));\n      doc.add(new NumericDocValuesField(\"is_live\", 1));\n      if (i > 0) {\n        writer.updateDocValues(new Term(\"id\", \"\" + id), new NumericDocValuesField(\"is_live\", null));\n      }\n      writer.addDocument(doc);\n      if (random().nextBoolean()) {\n        writer.flush();\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    int numHits = 0; // check if every doc has been selected at least once\n    for (int i : seqId) {\n      if (i > -1) {\n        numHits++;\n      }\n    }\n    try(DirectoryReader reader = writer.getReader()) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      TopDocs is_live = searcher.search(new DocValuesFieldExistsQuery(\"is_live\"), 5);\n      assertEquals(numHits, is_live.totalHits.value);\n      for (ScoreDoc doc : is_live.scoreDocs) {\n        int id = Integer.parseInt(reader.document(doc.doc).get(\"id\"));\n        int i = ReaderUtil.subIndex(doc.doc, reader.leaves());\n        assertTrue(i >= 0);\n        LeafReaderContext leafReaderContext = reader.leaves().get(i);\n        NumericDocValues seqID = leafReaderContext.reader().getNumericDocValues(\"seqID\");\n        assertNotNull(seqID);\n        assertTrue(seqID.advanceExact(doc.doc - leafReaderContext.docBase));\n        assertEquals(seqId[id], seqID.longValue());\n      }\n    }\n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":"  public void testResetValueMultipleDocs() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    int numDocs = 10 + random().nextInt(50);\n    int currentSeqId = 0;\n    int[] seqId = new int[] {-1, -1, -1, -1, -1};\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int id = random().nextInt(5);\n      seqId[id] = currentSeqId;\n      doc.add(new StringField(\"id\",  \"\" + id, Store.YES));\n      doc.add(new NumericDocValuesField(\"seqID\", currentSeqId++));\n      doc.add(new NumericDocValuesField(\"is_live\", 1));\n      if (i > 0) {\n        writer.updateDocValues(new Term(\"id\", \"\" + id), new NumericDocValuesField(\"is_live\", null));\n      }\n      writer.addDocument(doc);\n      if (random().nextBoolean()) {\n        writer.flush();\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    int numHits = 0; // check if every doc has been selected at least once\n    for (int i : seqId) {\n      if (i > -1) {\n        numHits++;\n      }\n    }\n    try(DirectoryReader reader = writer.getReader()) {\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      TopDocs is_live = searcher.search(new DocValuesFieldExistsQuery(\"is_live\"), 5);\n      assertEquals(numHits, is_live.totalHits);\n      for (ScoreDoc doc : is_live.scoreDocs) {\n        int id = Integer.parseInt(reader.document(doc.doc).get(\"id\"));\n        int i = ReaderUtil.subIndex(doc.doc, reader.leaves());\n        assertTrue(i >= 0);\n        LeafReaderContext leafReaderContext = reader.leaves().get(i);\n        NumericDocValues seqID = leafReaderContext.reader().getNumericDocValues(\"seqID\");\n        assertNotNull(seqID);\n        assertTrue(seqID.advanceExact(doc.doc - leafReaderContext.docBase));\n        assertEquals(seqId[id], seqID.longValue());\n      }\n    }\n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff09a63f7e0b004377090bd813e7c9b67d15bfdf":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["ff09a63f7e0b004377090bd813e7c9b67d15bfdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"ff09a63f7e0b004377090bd813e7c9b67d15bfdf":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33adea025f43af3243278587a46b8d9fd2e8ccf9"],"33adea025f43af3243278587a46b8d9fd2e8ccf9":["ff09a63f7e0b004377090bd813e7c9b67d15bfdf"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}