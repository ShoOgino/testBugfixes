{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n      } finally {\n        IOUtils.close(bloomIn);\n      }\n      \n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n      } finally {\n        IOUtils.close(bloomIn);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e3293cd025658bb73466545720557f3adfc2933","date":1349278552,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.close(bloomIn, delegateFieldsProducer);\n        } else {\n          IOUtils.close(bloomIn);\n        }\n      }\n      \n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n      } finally {\n        IOUtils.close(bloomIn);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a7212317ba0173de5fb2fc1bb177b7d8196f6ab","date":1349279380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.close(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.close(bloomIn, delegateFieldsProducer);\n        } else {\n          IOUtils.close(bloomIn);\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c228b8aa05a5d7154608e6878af2ae20e06c8f19","date":1349279516,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.close(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1e8b3369cb0169630bfadbcf2d16a26260bc967","date":1349304984,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n      } finally {\n        IOUtils.close(bloomIn);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ede45a461a2dcb573505ed9b6a5182dfebd3688f","date":1353338494,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.dir.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":["d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        int version = CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        if (version >= VERSION_CHECKSUM) {\n          CodecUtil.checkFooter(bloomIn);\n        } else {\n          CodecUtil.checkEOF(bloomIn);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        int version = CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        if (version >= VERSION_CHECKSUM) {\n          CodecUtil.checkFooter(bloomIn);\n        } else {\n          CodecUtil.checkEOF(bloomIn);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      IndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openInput(bloomFileName, state.context);\n        CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, BLOOM_CODEC_VERSION,\n            BLOOM_CODEC_VERSION);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29a93e7fb303505e4a719e87f378d9a45db981d0","date":1412167802,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        CodecUtil.checkSegmentHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        CodecUtil.checkFooter(bloomIn);\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        int version = CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        if (version >= VERSION_CHECKSUM) {\n          CodecUtil.checkFooter(bloomIn);\n        } else {\n          CodecUtil.checkEOF(bloomIn);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        CodecUtil.checkSegmentHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        CodecUtil.checkFooter(bloomIn);\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        int version = CodecUtil.checkHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        if (version >= VERSION_CHECKSUM) {\n          CodecUtil.checkFooter(bloomIn);\n        } else {\n          CodecUtil.checkEOF(bloomIn);\n        }\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        CodecUtil.checkIndexHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        CodecUtil.checkFooter(bloomIn);\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        CodecUtil.checkSegmentHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        CodecUtil.checkFooter(bloomIn);\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer#BloomFilteredFieldsProducer(SegmentReadState).mjava","sourceNew":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        CodecUtil.checkIndexHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        CodecUtil.checkFooter(bloomIn);\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","sourceOld":"    public BloomFilteredFieldsProducer(SegmentReadState state)\n        throws IOException {\n      \n      String bloomFileName = IndexFileNames.segmentFileName(\n          state.segmentInfo.name, state.segmentSuffix, BLOOM_EXTENSION);\n      ChecksumIndexInput bloomIn = null;\n      boolean success = false;\n      try {\n        bloomIn = state.directory.openChecksumInput(bloomFileName, state.context);\n        CodecUtil.checkSegmentHeader(bloomIn, BLOOM_CODEC_NAME, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n        // // Load the hash function used in the BloomFilter\n        // hashFunction = HashFunction.forName(bloomIn.readString());\n        // Load the delegate postings format\n        PostingsFormat delegatePostingsFormat = PostingsFormat.forName(bloomIn\n            .readString());\n        \n        this.delegateFieldsProducer = delegatePostingsFormat\n            .fieldsProducer(state);\n        int numBlooms = bloomIn.readInt();\n        for (int i = 0; i < numBlooms; i++) {\n          int fieldNum = bloomIn.readInt();\n          FuzzySet bloom = FuzzySet.deserialize(bloomIn);\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNum);\n          bloomsByFieldName.put(fieldInfo.name, bloom);\n        }\n        CodecUtil.checkFooter(bloomIn);\n        IOUtils.close(bloomIn);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(bloomIn, delegateFieldsProducer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d4d69c535930b5cce125cff868d40f6373dc27d4","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"8a7212317ba0173de5fb2fc1bb177b7d8196f6ab":["2e3293cd025658bb73466545720557f3adfc2933"],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e3293cd025658bb73466545720557f3adfc2933":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["29a93e7fb303505e4a719e87f378d9a45db981d0"],"c228b8aa05a5d7154608e6878af2ae20e06c8f19":["8a7212317ba0173de5fb2fc1bb177b7d8196f6ab"],"e1e8b3369cb0169630bfadbcf2d16a26260bc967":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","c228b8aa05a5d7154608e6878af2ae20e06c8f19"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["e1e8b3369cb0169630bfadbcf2d16a26260bc967","ede45a461a2dcb573505ed9b6a5182dfebd3688f"],"9bb9a29a5e71a90295f175df8919802993142c9a":["1f3b037cd083286b2af89f96e768f85dcd8072d6","29a93e7fb303505e4a719e87f378d9a45db981d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29a93e7fb303505e4a719e87f378d9a45db981d0":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","9bb9a29a5e71a90295f175df8919802993142c9a","29a93e7fb303505e4a719e87f378d9a45db981d0"],"8a7212317ba0173de5fb2fc1bb177b7d8196f6ab":["c228b8aa05a5d7154608e6878af2ae20e06c8f19"],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"2e3293cd025658bb73466545720557f3adfc2933":["8a7212317ba0173de5fb2fc1bb177b7d8196f6ab"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["2e3293cd025658bb73466545720557f3adfc2933","e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"c228b8aa05a5d7154608e6878af2ae20e06c8f19":["e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"e1e8b3369cb0169630bfadbcf2d16a26260bc967":["ede45a461a2dcb573505ed9b6a5182dfebd3688f","d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"29a93e7fb303505e4a719e87f378d9a45db981d0":["3384e6013a93e4d11b7d75388693f8d0388602bf","9bb9a29a5e71a90295f175df8919802993142c9a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}