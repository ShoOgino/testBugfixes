{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed50c8be6f41a006d8f93268765de9ad91908419","date":1340353054,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return top.docFreq( qfield, ref );\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return top.docFreq( qfield, ref );\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          if (termsEnum.seekExact(ref, true)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return top.docFreq( qfield, ref );\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dd9934a49477c83301120ba51827d91eb3606d5","date":1353767072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref, true)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          if (termsEnum.seekExact(ref, true)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref, true)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          if (termsEnum.seekExact(ref, true)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref, true)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref, true)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, false, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":["2dd9934a49477c83301120ba51827d91eb3606d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, false, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, false, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = cache.getTerms(readerContext.reader(), field, false, PackedInts.FAST);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          final BytesRef term = terms.get(doc);\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n      final BytesRef ref = new BytesRef();\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          terms.get(doc, ref);\n          if (termsEnum.seekExact(ref)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          final BytesRef term = terms.get(doc);\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dd9934a49477c83301120ba51827d91eb3606d5":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"56572ec06f1407c066d6b7399413178b33176cd8":["87d6f9603307ae2ad642fb01deedf031320fd0c3","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ed50c8be6f41a006d8f93268765de9ad91908419":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b6a0e3c1c21aac8ecf75706605133012833585c7","2dd9934a49477c83301120ba51827d91eb3606d5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["87d6f9603307ae2ad642fb01deedf031320fd0c3","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","ed50c8be6f41a006d8f93268765de9ad91908419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["ed50c8be6f41a006d8f93268765de9ad91908419"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2dd9934a49477c83301120ba51827d91eb3606d5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["ed50c8be6f41a006d8f93268765de9ad91908419","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"ed50c8be6f41a006d8f93268765de9ad91908419":["fe33227f6805edab2036cbb80645cc4e2d1fa424","b6a0e3c1c21aac8ecf75706605133012833585c7"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["2dd9934a49477c83301120ba51827d91eb3606d5","d4d69c535930b5cce125cff868d40f6373dc27d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}