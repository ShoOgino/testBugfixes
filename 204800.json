{"path":"lucene/monitor/src/java/org/apache/lucene/monitor/Monitor.PresearcherQueryCollector#matchQuery(String,QueryCacheEntry,QueryIndex.DataValues).mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/Monitor.PresearcherQueryCollector#matchQuery(String,QueryCacheEntry,QueryIndex.DataValues).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void matchQuery(final String id, QueryCacheEntry query, QueryIndex.DataValues dataValues) throws IOException {\n      Weight w = ((Scorer)dataValues.scorer).getWeight();\n      Matches matches = w.matches(dataValues.ctx, dataValues.scorer.docID());\n      for (String field : matches) {\n        MatchesIterator mi = matches.getMatches(field);\n        while (mi.next()) {\n          matchingTerms.computeIfAbsent(id, i -> new StringBuilder())\n              .append(\" \").append(mi.getQuery());\n        }\n      }\n      super.matchQuery(id, query, dataValues);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c529b189e09de25455d82ebd7260748cf11ee14"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}