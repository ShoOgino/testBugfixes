{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","commits":[{"id":"2e9db5fcef0c59566ad373ff7844f8a985f0017c","date":1467374856,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","dded3df9e710f258905cff1def2f25eb51c62e0f"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dded3df9e710f258905cff1def2f25eb51c62e0f"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}