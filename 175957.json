{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":null,"sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n    writer.setMergeScheduler(cms);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}