{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits).mjava","commits":[{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())\n            && policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator disi = docIdSet.iterator();\n      if (disi == null) {\n        return null;\n      }\n\n      // we apply acceptDocs as an approximation\n      if (acceptDocs == null) {\n        return new ConstantScoreScorer(this, 0f, disi);\n      } else {\n        final TwoPhaseIterator twoPhaseView = new TwoPhaseIterator(disi) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        return new ConstantScoreScorer(this, 0f, twoPhaseView);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())\n            && policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())\n            && policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator disi = docIdSet.iterator();\n      if (disi == null) {\n        return null;\n      }\n\n      return new ConstantScoreScorer(this, 0f, disi);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())\n            && policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator disi = docIdSet.iterator();\n      if (disi == null) {\n        return null;\n      }\n\n      // we apply acceptDocs as an approximation\n      if (acceptDocs == null) {\n        return new ConstantScoreScorer(this, 0f, disi);\n      } else {\n        final TwoPhaseIterator twoPhaseView = new TwoPhaseIterator(disi) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        return new ConstantScoreScorer(this, 0f, twoPhaseView);\n      }\n    }\n\n","bugFix":null,"bugIntro":["0bf09e549fa47b894ce44baafdf8031eba2445c6","631e24c389c59f74b6d125a2a4cb909d6fbfa356","0e98a4d8e18e7296a274ca283df84a76544bd753"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}