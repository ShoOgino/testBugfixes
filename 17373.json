{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private SecondPassGroupingCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores,\n                                                                   boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<>());\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector<?> createSecondPassCollector(AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<>());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private SecondPassGroupingCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores,\n                                                                   boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<>());\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector<?> createSecondPassCollector(AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<>());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private TopGroupsCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores,\n                                                                   boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {\n      GroupSelector<BytesRef> selector = (GroupSelector<BytesRef>) firstPassGroupingCollector.getGroupSelector();\n      return new TopGroupsCollector<>(selector, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n      ValueSourceGroupSelector selector = new ValueSourceGroupSelector(vs, new HashMap<>());\n      return new TopGroupsCollector<>(selector, mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private SecondPassGroupingCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores,\n                                                                   boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<>());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private TopGroupsCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores,\n                                                                   boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {\n      GroupSelector<BytesRef> selector = (GroupSelector<BytesRef>) firstPassGroupingCollector.getGroupSelector();\n      return new TopGroupsCollector<>(selector, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n      ValueSourceGroupSelector selector = new ValueSourceGroupSelector(vs, new HashMap<>());\n      return new TopGroupsCollector<>(selector, mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private SecondPassGroupingCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores,\n                                                                   boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getClass().isAssignableFrom(TermFirstPassGroupingCollector.class)) {\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n\n      return new FunctionSecondPassGroupingCollector(mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap<>());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(FirstPassGroupingCollector[#],String,Collection[SearchGroup[BytesRef]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private TopGroupsCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores) throws IOException {\n    if (firstPassGroupingCollector.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {\n      GroupSelector<BytesRef> selector = (GroupSelector<BytesRef>) firstPassGroupingCollector.getGroupSelector();\n      return new TopGroupsCollector<>(selector, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n      ValueSourceGroupSelector selector = new ValueSourceGroupSelector(vs, new HashMap<>());\n      return new TopGroupsCollector<>(selector, mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores);\n    }\n  }\n\n","sourceOld":"  // Basically converts searchGroups from MutableValue to BytesRef if grouping by ValueSource\n  @SuppressWarnings(\"unchecked\")\n  private TopGroupsCollector<?> createSecondPassCollector(FirstPassGroupingCollector<?> firstPassGroupingCollector,\n                                                                   String groupField,\n                                                                   Collection<SearchGroup<BytesRef>> searchGroups,\n                                                                   Sort groupSort,\n                                                                   Sort sortWithinGroup,\n                                                                   int maxDocsPerGroup,\n                                                                   boolean getScores,\n                                                                   boolean getMaxScores,\n                                                                   boolean fillSortFields) throws IOException {\n    if (firstPassGroupingCollector.getGroupSelector().getClass().isAssignableFrom(TermGroupSelector.class)) {\n      GroupSelector<BytesRef> selector = (GroupSelector<BytesRef>) firstPassGroupingCollector.getGroupSelector();\n      return new TopGroupsCollector<>(selector, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      List<SearchGroup<MutableValue>> mvalSearchGroups = new ArrayList<>(searchGroups.size());\n      for (SearchGroup<BytesRef> mergedTopGroup : searchGroups) {\n        SearchGroup<MutableValue> sg = new SearchGroup<>();\n        MutableValueStr groupValue = new MutableValueStr();\n        if (mergedTopGroup.groupValue != null) {\n          groupValue.value.copyBytes(mergedTopGroup.groupValue);\n        } else {\n          groupValue.exists = false;\n        }\n        sg.groupValue = groupValue;\n        sg.sortValues = mergedTopGroup.sortValues;\n        mvalSearchGroups.add(sg);\n      }\n      ValueSourceGroupSelector selector = new ValueSourceGroupSelector(vs, new HashMap<>());\n      return new TopGroupsCollector<>(selector, mvalSearchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04c370507e5521b2eb998530736f1c19b851ed5a"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"04c370507e5521b2eb998530736f1c19b851ed5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7ae958a739da1866696f442384393ba2f13e33e5":["04c370507e5521b2eb998530736f1c19b851ed5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}