{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,UHComponents).mjava","commits":[{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,UHComponents).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!components.getPhraseHelper().hasPositionSensitivity() &&\n            !components.getHighlightFlags().contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED) &&\n            !components.getHighlightFlags().contains(HighlightFlag.WEIGHT_MATCHES)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(components, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(components, getIndexAnalyzer(), this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(components);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(components);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(components);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, getFieldMatcher(field), terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,UHComponents).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,UHComponents).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!components.getPhraseHelper().hasPositionSensitivity() &&\n            !components.getHighlightFlags().contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED) &&\n            !components.getHighlightFlags().contains(HighlightFlag.WEIGHT_MATCHES)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(components, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(components, getIndexAnalyzer());\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(components);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(components);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(components);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!components.getPhraseHelper().hasPositionSensitivity() &&\n            !components.getHighlightFlags().contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED) &&\n            !components.getHighlightFlags().contains(HighlightFlag.WEIGHT_MATCHES)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(components, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(components, getIndexAnalyzer(), this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(components);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(components);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(components);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}