{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#loadParams(Map).mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#loadParams(Map).mjava","pathOld":"/dev/null","sourceNew":"  private SolrParams loadParams(Map params) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(this.numWorkers > 0) {\n      String partitionFilter = getPartitionFilter();\n      solrParams.add(\"fq\", partitionFilter);\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#loadParams(Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(this.numWorkers > 0) {\n      String partitionFilter = getPartitionFilter();\n      solrParams.add(\"fq\", partitionFilter);\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#loadParams(Map).mjava","pathOld":"/dev/null","sourceNew":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#loadParams(Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#loadParams(Map).mjava","sourceNew":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","sourceOld":"  private SolrParams loadParams(Map params) throws IOException {\n    ModifiableSolrParams solrParams = new ModifiableSolrParams();\n    if(params.containsKey(\"partitionKeys\")) {\n      if(!params.get(\"partitionKeys\").equals(\"none\")) {\n        String partitionFilter = getPartitionFilter();\n        solrParams.add(\"fq\", partitionFilter);\n      }\n    } else {\n      if(numWorkers > 1) {\n        throw new IOException(\"When numWorkers > 1 partitionKeys must be set. Set partitionKeys=none to send the entire stream to each worker.\");\n      }\n    }\n\n    Iterator<Map.Entry> it = params.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = it.next();\n      solrParams.add((String)entry.getKey(), entry.getValue().toString());\n    }\n\n    return solrParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}