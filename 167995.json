{"path":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","commits":[{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"/dev/null","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"/dev/null","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"/dev/null","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f1 = newField(\"f1\", \"This field has no norms\", customType);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has no norms\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitNorms(true);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f1 = newField(\"f1\", \"This field has no norms\", customType);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f1 = newField(\"f1\", \"This field has no norms\", customType);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f1 = newField(\"f1\", \"This field has no norms\", customType);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f1 = newField(\"f1\", \"This field has no norms\", customType);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testNoNrmFile().mjava","sourceNew":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f1 = newField(\"f1\", \"This field has no norms\", customType);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.nrm exists when all fields omit norms:\n  public void testNoNrmFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    Field f1 = newField(\"f1\", \"This field has no norms\", customType);\n    d.add(f1);\n\n    for (int i = 0; i < 30; i++) {\n      writer.addDocument(d);\n    }\n\n    writer.commit();\n\n    assertNoNrm(ram);\n        \n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoNrm(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c19f985e36a65cc969e8e564fe337a0d41512075":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["c19f985e36a65cc969e8e564fe337a0d41512075","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"962d04139994fce5193143ef35615499a9a96d78":[],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}