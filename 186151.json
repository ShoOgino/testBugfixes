{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","sourceNew":"  /** \n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs, \n                               PrintStream stream) {\n    Iterator<Object> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","sourceOld":"  /** \n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs, \n                               PrintStream stream) {\n    Iterator<Object> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","sourceNew":"  /**\n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   *\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs,\n                               PrintStream stream) {\n    Iterator<?> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","sourceOld":"  /** \n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs, \n                               PrintStream stream) {\n    Iterator<Object> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","sourceNew":"  /**\n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   *\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs,\n                               PrintStream stream) {\n    Iterator<?> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","sourceOld":"  /** \n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs, \n                               PrintStream stream) {\n    Iterator<Object> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","sourceNew":"  /**\n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   *\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs,\n                               PrintStream stream) {\n    Iterator<?> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","sourceOld":"  /**\n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   *\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs,\n                               PrintStream stream) {\n    Iterator<?> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","sourceNew":"  /**\n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   *\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs,\n                               PrintStream stream) {\n    Iterator<?> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","sourceOld":"  /**\n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   *\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs,\n                               PrintStream stream) {\n    Iterator<?> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#dumpArray(String,Object[],PrintStream).mjava","sourceNew":"  /**\n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   *\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs,\n                               PrintStream stream) {\n    Iterator<?> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","sourceOld":"  /**\n   * Convinience method for logging an array.  Wraps the array in an iterator and delegates\n   *\n   * @see #dumpIterator(String,Iterator,PrintStream)\n   */\n  public static void dumpArray(String label, Object[] objs,\n                               PrintStream stream) {\n    Iterator<?> iter = (null == objs) ? null : Arrays.asList(objs).iterator();\n    dumpIterator(label, iter, stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["43b04c27924fe393e38e9f0986e32c634f261859","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["43b04c27924fe393e38e9f0986e32c634f261859"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43b04c27924fe393e38e9f0986e32c634f261859":["29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","43b04c27924fe393e38e9f0986e32c634f261859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}