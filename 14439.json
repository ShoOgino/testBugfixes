{"path":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#isLocked().mjava","commits":[{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#isLocked().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized boolean isLocked() {\n      // The test for is isLocked is not directly possible with native file locks:\n      \n      // First a shortcut, if a lock reference in this instance is available\n      if (lock != null) return true;\n      \n      // Look if lock file is definitely not present; if not, there can definitely be no lock!\n      if (Files.notExists(path)) return false;\n      \n      // Try to obtain and release (if was locked) the lock\n      try {\n        boolean obtained = obtain();\n        if (obtained) close();\n        return !obtained;\n      } catch (IOException ioe) {\n        return false;\n      }    \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd448926db19517b82cc7c775c62c57f7d2ee6a","date":1432845380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#isLocked().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#isLocked().mjava","sourceNew":"    @Override\n    public synchronized boolean isLocked() {\n      // The test for is isLocked is not directly possible with native file locks:\n      \n      // First a shortcut, if a lock reference in this instance is available\n      if (channel != null) {\n        return true;\n      }\n      \n      // Look if lock file is definitely not present; if not, there can definitely be no lock!\n      if (Files.notExists(path)) { \n        return false;\n      }\n      \n      // Try to obtain and release (if was locked) the lock\n      try {\n        boolean obtained = obtain();\n        if (obtained) close();\n        return !obtained;\n      } catch (IOException ioe) {\n        return false;\n      }    \n    }\n\n","sourceOld":"    @Override\n    public synchronized boolean isLocked() {\n      // The test for is isLocked is not directly possible with native file locks:\n      \n      // First a shortcut, if a lock reference in this instance is available\n      if (lock != null) return true;\n      \n      // Look if lock file is definitely not present; if not, there can definitely be no lock!\n      if (Files.notExists(path)) return false;\n      \n      // Try to obtain and release (if was locked) the lock\n      try {\n        boolean obtained = obtain();\n        if (obtained) close();\n        return !obtained;\n      } catch (IOException ioe) {\n        return false;\n      }    \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#isLocked().mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized boolean isLocked() {\n      // The test for is isLocked is not directly possible with native file locks:\n      \n      // First a shortcut, if a lock reference in this instance is available\n      if (channel != null) {\n        return true;\n      }\n      \n      // Look if lock file is definitely not present; if not, there can definitely be no lock!\n      if (Files.notExists(path)) { \n        return false;\n      }\n      \n      // Try to obtain and release (if was locked) the lock\n      try {\n        boolean obtained = obtain();\n        if (obtained) close();\n        return !obtained;\n      } catch (IOException ioe) {\n        return false;\n      }    \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285cdc737de75b7cc7c284a156b20214deb67bca":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285cdc737de75b7cc7c284a156b20214deb67bca"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}