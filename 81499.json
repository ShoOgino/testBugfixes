{"path":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n          return new BooleanWeight(searcher, needsScores, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n          return new BooleanWeight(this, searcher, needsScores, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n          return new BooleanWeight(searcher, needsScores, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n          return new BooleanWeight(this, searcher, postingsFlags, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n          return new BooleanWeight(this, searcher, needsScores, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n          return new BooleanWeight(this, searcher, needsScores, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n          return new BooleanWeight(this, searcher, postingsFlags, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n          return new BooleanWeight(this, searcher, needsScores, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ab54c3a7c1fcad3ed887d6f04e292116c375023","date":1441375525,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      Query matchRewritten = match.rewrite(reader);\n      Query contextRewritten = context.rewrite(reader);\n      if (match != matchRewritten || context != contextRewritten) {\n        BoostingQuery rewritten = new BoostingQuery(matchRewritten, contextRewritten, boost);\n        rewritten.setBoost(getBoost());\n        return rewritten;\n      }\n      return super.rewrite(reader);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      Query matchRewritten = match.rewrite(reader);\n      Query contextRewritten = context.rewrite(reader);\n      if (match != matchRewritten || context != contextRewritten) {\n        return new BoostingQuery(matchRewritten, contextRewritten, boost);\n      }\n      return super.rewrite(reader);\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      Query matchRewritten = match.rewrite(reader);\n      Query contextRewritten = context.rewrite(reader);\n      if (match != matchRewritten || context != contextRewritten) {\n        BoostingQuery rewritten = new BoostingQuery(matchRewritten, contextRewritten, boost);\n        rewritten.setBoost(getBoost());\n        return rewritten;\n      }\n      return super.rewrite(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      Query matchRewritten = match.rewrite(reader);\n      Query contextRewritten = context.rewrite(reader);\n      if (match != matchRewritten || context != contextRewritten) {\n        return new BoostingQuery(matchRewritten, contextRewritten, boost);\n      }\n      return super.rewrite(reader);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a82662cae660e76ded4de1e9b451633e523d83e1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2ab54c3a7c1fcad3ed887d6f04e292116c375023":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["2ab54c3a7c1fcad3ed887d6f04e292116c375023"],"954e59be3da8dc1b046646ad7af4b466852009d3":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["fb17639909a369c1e64866842e5c213440acc17e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2ab54c3a7c1fcad3ed887d6f04e292116c375023"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"fb17639909a369c1e64866842e5c213440acc17e":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fb17639909a369c1e64866842e5c213440acc17e"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ab54c3a7c1fcad3ed887d6f04e292116c375023":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a82662cae660e76ded4de1e9b451633e523d83e1"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["954e59be3da8dc1b046646ad7af4b466852009d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}