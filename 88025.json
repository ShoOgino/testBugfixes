{"path":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","commits":[{"id":"30f43b40223d2630f5d720fe68cadf04b354a1c5","date":1195499437,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"/dev/null","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          Token buffered;\n\n          public Token next() throws IOException {\n            return input.next();\n          }\n\n          public Token next(Token result) throws IOException {\n            if (buffered != null) {\n              Token t = buffered;\n              buffered=null;\n              return t;\n            }\n            Token t = input.next(result);\n            if (t==null) return null;\n            if (Character.isDigit(t.termBuffer()[0])) {\n              t.setPositionIncrement(t.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              t.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            buffered = (Token)t.clone();\n            buffered.setPayload(null);\n            buffered.setPositionIncrement(0);\n            buffered.setTermBuffer(new char[]{'b'}, 0, 1);\n\n            return t;\n          }\n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          Token buffered;\n\n          public Token next() throws IOException {\n            return input.next();\n          }\n\n          public Token next(Token result) throws IOException {\n            if (buffered != null) {\n              Token t = buffered;\n              buffered=null;\n              return t;\n            }\n            Token t = input.next(result);\n            if (t==null) return null;\n            if (Character.isDigit(t.termBuffer()[0])) {\n              t.setPositionIncrement(t.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              t.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            buffered = (Token)t.clone();\n            buffered.setPayload(null);\n            buffered.setPositionIncrement(0);\n            buffered.setTermBuffer(new char[]{'b'}, 0, 1);\n\n            return t;\n          }\n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          Token buffered;\n\n          public Token next() throws IOException {\n            return input.next();\n          }\n\n          public Token next(Token result) throws IOException {\n            if (buffered != null) {\n              Token t = buffered;\n              buffered=null;\n              return t;\n            }\n            Token t = input.next(result);\n            if (t==null) return null;\n            if (Character.isDigit(t.termBuffer()[0])) {\n              t.setPositionIncrement(t.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              t.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            buffered = (Token)t.clone();\n            buffered.setPayload(null);\n            buffered.setPositionIncrement(0);\n            buffered.setTermBuffer(new char[]{'b'}, 0, 1);\n\n            return t;\n          }\n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          Token buffered;\n\n          public Token next(final Token reusableToken) throws IOException {\n            if (buffered != null) {\n              Token nextToken = buffered;\n              buffered=null;\n              return nextToken;\n            }\n            Token nextToken = input.next(reusableToken);\n            if (nextToken==null) return null;\n            if (Character.isDigit(nextToken.termBuffer()[0])) {\n              nextToken.setPositionIncrement(nextToken.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              nextToken.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            buffered = (Token)nextToken.clone();\n            buffered.setPayload(null);\n            buffered.setPositionIncrement(0);\n            buffered.setTermBuffer(new char[]{'b'}, 0, 1);\n\n            return nextToken;\n          }\n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          Token buffered;\n\n          public Token next() throws IOException {\n            return input.next();\n          }\n\n          public Token next(Token result) throws IOException {\n            if (buffered != null) {\n              Token t = buffered;\n              buffered=null;\n              return t;\n            }\n            Token t = input.next(result);\n            if (t==null) return null;\n            if (Character.isDigit(t.termBuffer()[0])) {\n              t.setPositionIncrement(t.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              t.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            buffered = (Token)t.clone();\n            buffered.setPayload(null);\n            buffered.setPositionIncrement(0);\n            buffered.setTermBuffer(new char[]{'b'}, 0, 1);\n\n            return t;\n          }\n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          Token buffered;\n\n          public Token next(final Token reusableToken) throws IOException {\n            if (buffered != null) {\n              Token nextToken = buffered;\n              buffered=null;\n              return nextToken;\n            }\n            Token nextToken = input.next(reusableToken);\n            if (nextToken==null) return null;\n            if (Character.isDigit(nextToken.termBuffer()[0])) {\n              nextToken.setPositionIncrement(nextToken.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              nextToken.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            buffered = (Token)nextToken.clone();\n            buffered.setPayload(null);\n            buffered.setPositionIncrement(0);\n            buffered.setTermBuffer(new char[]{'b'}, 0, 1);\n\n            return nextToken;\n          }\n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          Token buffered;\n\n          public Token next(final Token reusableToken) throws IOException {\n            if (buffered != null) {\n              Token nextToken = buffered;\n              buffered=null;\n              return nextToken;\n            }\n            Token nextToken = input.next(reusableToken);\n            if (nextToken==null) return null;\n            if (Character.isDigit(nextToken.termBuffer()[0])) {\n              nextToken.setPositionIncrement(nextToken.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              nextToken.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            buffered = (Token)nextToken.clone();\n            buffered.setPayload(null);\n            buffered.setPositionIncrement(0);\n            buffered.setTermBuffer(new char[]{'b'}, 0, 1);\n\n            return nextToken;\n          }\n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource state;\n\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              state.restoreState(this);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = (PayloadAttribute) addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          Token buffered;\n\n          public Token next(final Token reusableToken) throws IOException {\n            if (buffered != null) {\n              Token nextToken = buffered;\n              buffered=null;\n              return nextToken;\n            }\n            Token nextToken = input.next(reusableToken);\n            if (nextToken==null) return null;\n            if (Character.isDigit(nextToken.termBuffer()[0])) {\n              nextToken.setPositionIncrement(nextToken.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              nextToken.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            buffered = (Token)nextToken.clone();\n            buffered.setPayload(null);\n            buffered.setPositionIncrement(0);\n            buffered.setTermBuffer(new char[]{'b'}, 0, 1);\n\n            return nextToken;\n          }\n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = (PayloadAttribute) addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource state;\n\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              state.restoreState(this);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = (PayloadAttribute) addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = (PayloadAttribute) addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testTokenReuse().mjava","sourceNew":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","sourceOld":"  public void testTokenReuse() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader)) {\n          boolean first=true;\n          AttributeSource.State state;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (state != null) {\n              restoreState(state);\n              payloadAtt.setPayload(null);\n              posIncrAtt.setPositionIncrement(0);\n              termAtt.setTermBuffer(new char[]{'b'}, 0, 1);\n              state = null;\n              return true;\n            }\n\n            boolean hasNext = input.incrementToken();\n            if (!hasNext) return false;\n            if (Character.isDigit(termAtt.termBuffer()[0])) {\n              posIncrAtt.setPositionIncrement(termAtt.termBuffer()[0] - '0');\n            }\n            if (first) {\n              // set payload on first position only\n              payloadAtt.setPayload(new Payload(new byte[]{100}));\n              first = false;\n            }\n\n            // index a \"synonym\" for every token\n            state = captureState();\n            return true;\n\n          }\n\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          PayloadAttribute payloadAtt = addAttribute(PayloadAttribute.class);\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);          \n        };\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"f1\", \"a 5 a a\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"f1\", \"a\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(3, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(true, termPositions.isPayloadAvailable());\n    assertEquals(6, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n    assertEquals(7, termPositions.nextPosition());\n    assertEquals(false, termPositions.isPayloadAvailable());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"30f43b40223d2630f5d720fe68cadf04b354a1c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["30f43b40223d2630f5d720fe68cadf04b354a1c5"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"30f43b40223d2630f5d720fe68cadf04b354a1c5":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30f43b40223d2630f5d720fe68cadf04b354a1c5"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}