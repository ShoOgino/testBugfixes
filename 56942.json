{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocExists(HttpSolrClient,String,String,Long).mjava","commits":[{"id":"773a737806859660d4756f710adc0ad53e05f9d5","date":1432140757,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocExists(HttpSolrClient,String,String,Long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected Long assertDocExists(HttpSolrClient solr, String coll, String docId, Long expVers) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\", \"fl\", \"id,_version_\"));\n    NamedList rsp = solr.request(qr);\n    SolrDocument doc = (SolrDocument)rsp.get(\"doc\");\n    String match = JSONTestUtil.matchObj(\"/id\", doc, new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL() +\n        \" due to: \" + match + \"; rsp=\" + rsp, match == null);\n\n    Long vers = (Long)doc.getFirstValue(\"_version_\");\n    assertNotNull(vers);\n    if (expVers != null)\n      assertEquals(\"expected version of doc \"+docId+\" to be \"+expVers, expVers, vers);\n\n    return vers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocExists(HttpSolrClient,String,String,Long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocExists(HttpSolrClient,String,String,Long).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected Long assertDocExists(HttpSolrClient solr, String coll, String docId, Long expVers) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\", \"fl\", \"id,_version_\"));\n    NamedList rsp = solr.request(qr);\n    SolrDocument doc = (SolrDocument)rsp.get(\"doc\");\n    String match = JSONTestUtil.matchObj(\"/id\", doc, docId);\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL() +\n        \" due to: \" + match + \"; rsp=\" + rsp, match == null);\n\n    Long vers = (Long)doc.getFirstValue(\"_version_\");\n    assertNotNull(vers);\n    if (expVers != null)\n      assertEquals(\"expected version of doc \"+docId+\" to be \"+expVers, expVers, vers);\n\n    return vers;\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected Long assertDocExists(HttpSolrClient solr, String coll, String docId, Long expVers) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\", \"fl\", \"id,_version_\"));\n    NamedList rsp = solr.request(qr);\n    SolrDocument doc = (SolrDocument)rsp.get(\"doc\");\n    String match = JSONTestUtil.matchObj(\"/id\", doc, new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL() +\n        \" due to: \" + match + \"; rsp=\" + rsp, match == null);\n\n    Long vers = (Long)doc.getFirstValue(\"_version_\");\n    assertNotNull(vers);\n    if (expVers != null)\n      assertEquals(\"expected version of doc \"+docId+\" to be \"+expVers, expVers, vers);\n\n    return vers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocExists(HttpSolrClient,String,String,Long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocExists(HttpSolrClient,String,String,Long).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected Long assertDocExists(HttpSolrClient solr, String coll, String docId, Long expVers) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\", \"fl\", \"id,_version_\"));\n    NamedList rsp = solr.request(qr);\n    SolrDocument doc = (SolrDocument)rsp.get(\"doc\");\n    String match = JSONTestUtil.matchObj(\"/id\", doc, docId);\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL() +\n        \" due to: \" + match + \"; rsp=\" + rsp, match == null);\n\n    Long vers = (Long)doc.getFirstValue(\"_version_\");\n    assertNotNull(vers);\n    if (expVers != null)\n      assertEquals(\"expected version of doc \"+docId+\" to be \"+expVers, expVers, vers);\n\n    return vers;\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected Long assertDocExists(HttpSolrClient solr, String coll, String docId, Long expVers) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\", \"fl\", \"id,_version_\"));\n    NamedList rsp = solr.request(qr);\n    SolrDocument doc = (SolrDocument)rsp.get(\"doc\");\n    String match = JSONTestUtil.matchObj(\"/id\", doc, new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL() +\n        \" due to: \" + match + \"; rsp=\" + rsp, match == null);\n\n    Long vers = (Long)doc.getFirstValue(\"_version_\");\n    assertNotNull(vers);\n    if (expVers != null)\n      assertEquals(\"expected version of doc \"+docId+\" to be \"+expVers, expVers, vers);\n\n    return vers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocExists(HttpSolrClient,String,String,Long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocExists(HttpSolrClient,String,String,Long).mjava","sourceNew":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected Long assertDocExists(HttpSolrClient solr, String coll, String docId, Long expVers) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\", \"fl\", \"id,_version_\"));\n    NamedList rsp = solr.request(qr);\n    SolrDocument doc = (SolrDocument)rsp.get(\"doc\");\n    String match = JSONTestUtil.matchObj(\"/id\", doc, docId);\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL() +\n        \" due to: \" + match + \"; rsp=\" + rsp, match == null);\n\n    Long vers = (Long)doc.getFirstValue(\"_version_\");\n    assertNotNull(vers);\n    if (expVers != null)\n      assertEquals(\"expected version of doc \"+docId+\" to be \"+expVers, expVers, vers);\n\n    return vers;\n  }\n\n","sourceOld":"  /**\n   * Query the real-time get handler for a specific doc by ID to verify it\n   * exists in the provided server, using distrib=false so it doesn't route to another replica.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  protected Long assertDocExists(HttpSolrClient solr, String coll, String docId, Long expVers) throws Exception {\n    QueryRequest qr = new QueryRequest(params(\"qt\", \"/get\", \"id\", docId, \"distrib\", \"false\", \"fl\", \"id,_version_\"));\n    NamedList rsp = solr.request(qr);\n    SolrDocument doc = (SolrDocument)rsp.get(\"doc\");\n    String match = JSONTestUtil.matchObj(\"/id\", doc, new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + solr.getBaseURL() +\n        \" due to: \" + match + \"; rsp=\" + rsp, match == null);\n\n    Long vers = (Long)doc.getFirstValue(\"_version_\");\n    assertNotNull(vers);\n    if (expVers != null)\n      assertEquals(\"expected version of doc \"+docId+\" to be \"+expVers, expVers, vers);\n\n    return vers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773a737806859660d4756f710adc0ad53e05f9d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["773a737806859660d4756f710adc0ad53e05f9d5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["773a737806859660d4756f710adc0ad53e05f9d5","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["773a737806859660d4756f710adc0ad53e05f9d5","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"773a737806859660d4756f710adc0ad53e05f9d5":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773a737806859660d4756f710adc0ad53e05f9d5"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}