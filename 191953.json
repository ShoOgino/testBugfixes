{"path":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testTerms() {\n    try {\n      TermEnum terms = reader.terms();\n      assertTrue(terms != null);\n      while (terms.next() == true)\n      {\n        Term term = terms.term();\n        assertTrue(term != null);\n        //System.out.println(\"Term: \" + term);\n        String fieldValue = (String)DocHelper.nameValues.get(term.field());\n        assertTrue(fieldValue.indexOf(term.text()) != -1);\n      }\n      \n      TermDocs termDocs = reader.termDocs();\n      assertTrue(termDocs != null);\n      termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n      assertTrue(termDocs.next() == true);\n      \n      TermPositions positions = reader.termPositions();\n      positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n      assertTrue(positions != null);\n      assertTrue(positions.doc() == 0);\n      assertTrue(positions.nextPosition() >= 0);\n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() {\n    try {\n      TermEnum terms = reader.terms();\n      assertTrue(terms != null);\n      while (terms.next() == true)\n      {\n        Term term = terms.term();\n        assertTrue(term != null);\n        //System.out.println(\"Term: \" + term);\n        String fieldValue = (String)DocHelper.nameValues.get(term.field());\n        assertTrue(fieldValue.indexOf(term.text()) != -1);\n      }\n      \n      TermDocs termDocs = reader.termDocs();\n      assertTrue(termDocs != null);\n      termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n      assertTrue(termDocs.next() == true);\n      \n      TermPositions positions = reader.termPositions();\n      positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n      assertTrue(positions != null);\n      assertTrue(positions.doc() == 0);\n      assertTrue(positions.nextPosition() >= 0);\n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d189bc0061161fcd0242e1056416ace0bd3a4da7","date":1130650929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions != null);\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testTerms().mjava","sourceNew":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","sourceOld":"  public void testTerms() throws IOException {\n    TermEnum terms = reader.terms();\n    assertTrue(terms != null);\n    while (terms.next() == true)\n    {\n      Term term = terms.term();\n      assertTrue(term != null);\n      //System.out.println(\"Term: \" + term);\n      String fieldValue = (String)DocHelper.nameValues.get(term.field());\n      assertTrue(fieldValue.indexOf(term.text()) != -1);\n    }\n    \n    TermDocs termDocs = reader.termDocs();\n    assertTrue(termDocs != null);\n    termDocs.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(termDocs.next() == true);\n\n    termDocs.seek(new Term(DocHelper.NO_NORMS_KEY,  DocHelper.NO_NORMS_TEXT));\n    assertTrue(termDocs.next() == true);\n\n    \n    TermPositions positions = reader.termPositions();\n    assertTrue(positions != null);\n    positions.seek(new Term(DocHelper.TEXT_FIELD_1_KEY, \"field\"));\n    assertTrue(positions.doc() == 0);\n    assertTrue(positions.nextPosition() >= 0);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}