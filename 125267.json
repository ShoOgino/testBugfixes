{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss(long).mjava","commits":[{"id":"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","date":1390584048,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss(long).mjava","pathOld":"/dev/null","sourceNew":"  private long testIndexingWithSuss(long docId) throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      suss.setConnectionTimeout(15000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(suss, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      suss.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss(long).mjava","sourceNew":"  private long testIndexingWithSuss(long docId) throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      suss.setConnectionTimeout(30000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(suss, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      suss.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingWithSuss(long docId) throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      suss.setConnectionTimeout(15000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(suss, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      suss.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7035d6fc5859f1acc6e24e5ce17e14803b7957b2","date":1391993423,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss(long).mjava","sourceNew":"  private long testIndexingWithSuss(long docId) throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      suss.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(suss, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      suss.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingWithSuss(long docId) throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      suss.setConnectionTimeout(30000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(suss, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      suss.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testConcurrentIndexing(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testIndexingWithSuss(long).mjava","sourceNew":"  private long testConcurrentIndexing(long docId) throws Exception {\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(\n        ((HttpSolrClient) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      concurrentClient.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(concurrentClient, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      concurrentClient.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      concurrentClient.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testIndexingWithSuss(long docId) throws Exception {\n    ConcurrentUpdateSolrServer suss = new ConcurrentUpdateSolrServer(\n        ((HttpSolrServer) clients.get(0)).getBaseURL(), 10, 2);\n    QueryResponse results = query(cloudClient);\n    long beforeCount = results.getResults().getNumFound();\n    int cnt = TEST_NIGHTLY ? 2933 : 313;\n    try {\n      suss.setConnectionTimeout(120000);\n      for (int i = 0; i < cnt; i++) {\n        index_specific(suss, id, docId++, \"text_t\", \"some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc\");\n      }\n      suss.blockUntilFinished();\n      \n      commit();\n\n      checkShardConsistency();\n      assertDocCounts(VERBOSE);\n    } finally {\n      suss.shutdown();\n    }\n    results = query(cloudClient);\n    assertEquals(beforeCount + cnt, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["7035d6fc5859f1acc6e24e5ce17e14803b7957b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"7035d6fc5859f1acc6e24e5ce17e14803b7957b2":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"]},"commit2Childs":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["7035d6fc5859f1acc6e24e5ce17e14803b7957b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7035d6fc5859f1acc6e24e5ce17e14803b7957b2":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}