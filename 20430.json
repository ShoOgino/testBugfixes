{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","commits":[{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#ScheduledTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTimeNs()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","sourceOld":"  public ScheduledTrigger(String name, Map<String, Object> properties,\n                          SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.SCHEDULED, name, properties, loader, cloudManager);\n\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTimeNs()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab26afaf9984e90bb1c57dc7b40bc97e3971133c","date":1561743334,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n    if (preferredOp != null &&\n        CollectionParams.CollectionAction.get(preferredOp) == null) {\n      throw new TriggerValidationException(getName(), PREFERRED_OP, \"unrecognized value of: '\" + preferredOp + \"'\");\n    }\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTimeNs()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTimeNs()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    String timeZoneStr = (String) properties.get(\"timeZone\");\n    this.timeZone = TimeZoneUtils.parseTimezone(timeZoneStr); // defaults to UTC\n\n    String startTimeStr = (String) properties.get(\"startTime\");\n    this.everyStr = (String) properties.get(\"every\");\n    this.graceDurationStr = (String) properties.getOrDefault(\"graceDuration\", DEFAULT_GRACE_DURATION);\n\n    preferredOp = (String) properties.get(PREFERRED_OP);\n    if (preferredOp != null &&\n        CollectionParams.CollectionAction.get(preferredOp) == null) {\n      throw new TriggerValidationException(getName(), PREFERRED_OP, \"unrecognized value of: '\" + preferredOp + \"'\");\n    }\n\n    // attempt parsing to validate date math strings\n    // explicitly set NOW because it may be different for simulated time\n    Date now = new Date(TimeUnit.NANOSECONDS.toMillis(cloudManager.getTimeSource().getEpochTimeNs()));\n    Instant startTime = parseStartTime(now, startTimeStr, timeZoneStr);\n    DateMathParser.parseMath(now, startTime + everyStr, timeZone);\n    DateMathParser.parseMath(now, startTime + graceDurationStr, timeZone);\n\n    // We set lastRunAt to be the startTime (which could be a date math expression such as 'NOW')\n    // Ordinarily, NOW will always be evaluated in this constructor so it may seem that\n    // the trigger will always fire the first time.\n    // However, the lastRunAt is overwritten with the value from ZK\n    // during restoreState() operation (which is performed before run()) so the trigger works correctly\n    this.lastRunAt = startTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["ab26afaf9984e90bb1c57dc7b40bc97e3971133c"],"ab26afaf9984e90bb1c57dc7b40bc97e3971133c":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab26afaf9984e90bb1c57dc7b40bc97e3971133c":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["ab26afaf9984e90bb1c57dc7b40bc97e3971133c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}