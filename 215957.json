{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#create(String,byte[],List[ACL],CreateMode,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#create(String,byte[],List[ACL],CreateMode,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path\n   * @param data\n   * @param acl\n   * @param createMode\n   * @param retryOnConnLoss \n   * @return path of created node\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String create(final String path, final byte data[], final List<ACL> acl,\n      final CreateMode createMode, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          return keeper.create(path, data, acl, createMode);\n        }\n      });\n    } else {\n      return keeper.create(path, data, acl, createMode);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#create(String,byte[],List[ACL],CreateMode,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path\n   * @param data\n   * @param acl\n   * @param createMode\n   * @param retryOnConnLoss \n   * @return path of created node\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String create(final String path, final byte data[], final List<ACL> acl,\n      final CreateMode createMode, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          return keeper.create(path, data, acl, createMode);\n        }\n      });\n    } else {\n      return keeper.create(path, data, acl, createMode);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#create(String,byte[],List[ACL],CreateMode,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path\n   * @param data\n   * @param acl\n   * @param createMode\n   * @param retryOnConnLoss \n   * @return path of created node\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String create(final String path, final byte data[], final List<ACL> acl,\n      final CreateMode createMode, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          return keeper.create(path, data, acl, createMode);\n        }\n      });\n    } else {\n      return keeper.create(path, data, acl, createMode);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#create(String,byte[],List[ACL],CreateMode,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#create(String,byte[],List[ACL],CreateMode,boolean).mjava","sourceNew":"  /**\n   * Returns path of created node\n   */\n  public String create(final String path, final byte data[], final List<ACL> acl,\n      final CreateMode createMode, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          return keeper.create(path, data, acl, createMode);\n        }\n      });\n    } else {\n      return keeper.create(path, data, acl, createMode);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param path\n   * @param data\n   * @param acl\n   * @param createMode\n   * @param retryOnConnLoss \n   * @return path of created node\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public String create(final String path, final byte data[], final List<ACL> acl,\n      final CreateMode createMode, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          return keeper.create(path, data, acl, createMode);\n        }\n      });\n    } else {\n      return keeper.create(path, data, acl, createMode);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#create(String,byte[],List[ACL],CreateMode,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns path of created node\n   */\n  public String create(final String path, final byte data[], final List<ACL> acl,\n      final CreateMode createMode, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          return keeper.create(path, data, acl, createMode);\n        }\n      });\n    } else {\n      return keeper.create(path, data, acl, createMode);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83f985d9828d30801541f1eed26aa3169646baf":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c83f985d9828d30801541f1eed26aa3169646baf"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c83f985d9828d30801541f1eed26aa3169646baf"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"c83f985d9828d30801541f1eed26aa3169646baf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}