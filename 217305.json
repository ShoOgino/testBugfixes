{"path":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","commits":[{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String).mjava","sourceNew":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc","date":1363618369,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) dir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b346c75aa26766db314a531e6e7dd87a3a19a2a","date":1395629273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // snappuller & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0a506fe165b26e024afa1aec8a4a7d758e837ff","date":1410971446,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,LockFactory,DirContext).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/MockDirectoryFactory#create(String,DirContext).mjava","sourceNew":"  @Override\n  protected Directory create(String path, LockFactory lockFactory, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory(); // we ignore the given lock factory\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // snappuller & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","sourceOld":"  @Override\n  protected Directory create(String path, DirContext dirContext) throws IOException {\n    Directory dir = LuceneTestCase.newDirectory();\n    \n    Directory cdir = reduce(dir);\n    cdir = reduce(cdir);\n    cdir = reduce(cdir);\n    \n    if (cdir instanceof MockDirectoryWrapper) {\n      MockDirectoryWrapper mockDirWrapper = (MockDirectoryWrapper) cdir;\n      \n      // we can't currently do this check because of how\n      // Solr has to reboot a new Directory sometimes when replicating\n      // or rolling back - the old directory is closed and the following\n      // test assumes it can open an IndexWriter when that happens - we\n      // have a new Directory for the same dir and still an open IW at \n      // this point\n      mockDirWrapper.setAssertNoUnrefencedFilesOnClose(false);\n      \n      // ram dirs in cores that are restarted end up empty\n      // and check index fails\n      mockDirWrapper.setCheckIndexOnClose(false);\n      \n      // if we enable this, TestReplicationHandler fails when it\n      // tries to write to index.properties after the file has\n      // already been created.\n      mockDirWrapper.setPreventDoubleWrite(false);\n      \n      // snappuller & co don't seem ready for this:\n      mockDirWrapper.setEnableVirusScanner(false);\n      \n      if (allowReadingFilesStillOpenForWrite) {\n        mockDirWrapper.setAllowReadingFilesStillOpenForWrite(true);\n      }\n    }\n    \n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"9b346c75aa26766db314a531e6e7dd87a3a19a2a":["8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["9b346c75aa26766db314a531e6e7dd87a3a19a2a"],"8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"]},"commit2Childs":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b346c75aa26766db314a531e6e7dd87a3a19a2a":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"8bfcf2e16dd6795bbb8e0d44d7b18476d8dc06bc":["9b346c75aa26766db314a531e6e7dd87a3a19a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}