{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testPrefixCopyConstructor().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testPrefixCopyConstructor().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testPrefixCopyConstructor().mjava","sourceNew":"  @Test \n  public void testPrefixCopyConstructor() {\n    CategoryPath p = new CategoryPath(0,0);\n    p.add(\"hi\");\n    p.add(\"there\");\n    p.add(\"man\");\n    assertEquals(p.length(), 3);\n    \n    CategoryPath p1 = new CategoryPath(p,2);\n    assertEquals(2, p1.length());\n    assertEquals(\"hi/there\", p1.toString('/'));\n    // the new prefix object should only take the space it needs: \n    assertEquals(2, p1.capacityComponents());\n    assertEquals(7, p1.capacityChars());\n\n    p1 = new CategoryPath(p,1);\n    assertEquals(1, p1.length());\n    assertEquals(\"hi\", p1.toString('/'));\n    assertEquals(1, p1.capacityComponents());\n    assertEquals(2, p1.capacityChars());\n\n    p1 = new CategoryPath(p,0);\n    assertEquals(0, p1.length());\n    assertEquals(\"\", p1.toString('/'));\n    assertEquals(0, p1.capacityComponents());\n    assertEquals(0, p1.capacityChars());\n\n    // with all the following lengths, the prefix should be the whole path: \n    int[] lengths = { 3, -1, 4 };\n    for (int i=0; i<lengths.length; i++) {\n      p1 = new CategoryPath(p, lengths[i]);\n      assertEquals(3, p1.length());\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n      assertEquals(3, p1.capacityComponents());\n      assertEquals(10, p1.capacityChars());\n    }\n  }\n\n","sourceOld":"  @Test \n  public void testPrefixCopyConstructor() {\n    CategoryPath p = new CategoryPath(0,0);\n    p.add(\"hi\");\n    p.add(\"there\");\n    p.add(\"man\");\n    assertEquals(p.length(), 3);\n    \n    CategoryPath p1 = new CategoryPath(p,2);\n    assertEquals(2, p1.length());\n    assertEquals(\"hi/there\", p1.toString('/'));\n    // the new prefix object should only take the space it needs: \n    assertEquals(2, p1.capacityComponents());\n    assertEquals(7, p1.capacityChars());\n\n    p1 = new CategoryPath(p,1);\n    assertEquals(1, p1.length());\n    assertEquals(\"hi\", p1.toString('/'));\n    assertEquals(1, p1.capacityComponents());\n    assertEquals(2, p1.capacityChars());\n\n    p1 = new CategoryPath(p,0);\n    assertEquals(0, p1.length());\n    assertEquals(\"\", p1.toString('/'));\n    assertEquals(0, p1.capacityComponents());\n    assertEquals(0, p1.capacityChars());\n\n    // with all the following lengths, the prefix should be the whole path: \n    int[] lengths = { 3, -1, 4 };\n    for (int i=0; i<lengths.length; i++) {\n      p1 = new CategoryPath(p, lengths[i]);\n      assertEquals(3, p1.length());\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n      assertEquals(3, p1.capacityComponents());\n      assertEquals(10, p1.capacityChars());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testPrefixCopyConstructor().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testPrefixCopyConstructor() {\n    CategoryPath p = new CategoryPath(0,0);\n    p.add(\"hi\");\n    p.add(\"there\");\n    p.add(\"man\");\n    assertEquals(p.length(), 3);\n    \n    CategoryPath p1 = new CategoryPath(p,2);\n    assertEquals(2, p1.length());\n    assertEquals(\"hi/there\", p1.toString('/'));\n    // the new prefix object should only take the space it needs: \n    assertEquals(2, p1.capacityComponents());\n    assertEquals(7, p1.capacityChars());\n\n    p1 = new CategoryPath(p,1);\n    assertEquals(1, p1.length());\n    assertEquals(\"hi\", p1.toString('/'));\n    assertEquals(1, p1.capacityComponents());\n    assertEquals(2, p1.capacityChars());\n\n    p1 = new CategoryPath(p,0);\n    assertEquals(0, p1.length());\n    assertEquals(\"\", p1.toString('/'));\n    assertEquals(0, p1.capacityComponents());\n    assertEquals(0, p1.capacityChars());\n\n    // with all the following lengths, the prefix should be the whole path: \n    int[] lengths = { 3, -1, 4 };\n    for (int i=0; i<lengths.length; i++) {\n      p1 = new CategoryPath(p, lengths[i]);\n      assertEquals(3, p1.length());\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n      assertEquals(3, p1.capacityComponents());\n      assertEquals(10, p1.capacityChars());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testPrefixCopyConstructor().mjava","sourceNew":null,"sourceOld":"  @Test \n  public void testPrefixCopyConstructor() {\n    CategoryPath p = new CategoryPath(0,0);\n    p.add(\"hi\");\n    p.add(\"there\");\n    p.add(\"man\");\n    assertEquals(p.length(), 3);\n    \n    CategoryPath p1 = new CategoryPath(p,2);\n    assertEquals(2, p1.length());\n    assertEquals(\"hi/there\", p1.toString('/'));\n    // the new prefix object should only take the space it needs: \n    assertEquals(2, p1.capacityComponents());\n    assertEquals(7, p1.capacityChars());\n\n    p1 = new CategoryPath(p,1);\n    assertEquals(1, p1.length());\n    assertEquals(\"hi\", p1.toString('/'));\n    assertEquals(1, p1.capacityComponents());\n    assertEquals(2, p1.capacityChars());\n\n    p1 = new CategoryPath(p,0);\n    assertEquals(0, p1.length());\n    assertEquals(\"\", p1.toString('/'));\n    assertEquals(0, p1.capacityComponents());\n    assertEquals(0, p1.capacityChars());\n\n    // with all the following lengths, the prefix should be the whole path: \n    int[] lengths = { 3, -1, 4 };\n    for (int i=0; i<lengths.length; i++) {\n      p1 = new CategoryPath(p, lengths[i]);\n      assertEquals(3, p1.length());\n      assertEquals(\"hi/there/man\", p1.toString('/'));\n      assertEquals(p, p1);\n      assertEquals(3, p1.capacityComponents());\n      assertEquals(10, p1.capacityChars());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}