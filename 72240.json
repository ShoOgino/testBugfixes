{"path":"contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = sim.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = sim.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir, false);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir, false); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = sim.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = sim.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir, false);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir, false); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir, false);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir, false); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = sim.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2aa9553aad4bb588f33e036ce51485a850a2917","date":1257895368,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir, false);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir, false); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2aa9553aad4bb588f33e036ce51485a850a2917":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4256bc1b3c94786287ccdfc751230374521843cf":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2aa9553aad4bb588f33e036ce51485a850a2917"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["4256bc1b3c94786287ccdfc751230374521843cf"]},"commit2Childs":{"f2aa9553aad4bb588f33e036ce51485a850a2917":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"4256bc1b3c94786287ccdfc751230374521843cf":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["f2aa9553aad4bb588f33e036ce51485a850a2917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}