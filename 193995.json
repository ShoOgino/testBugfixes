{"path":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","commits":[{"id":"33098c76721840ff65df95e81a98a5d4a49a777f","date":1266737266,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyQuery#FuzzyQuery(Term,float,int,int).mjava","sourceNew":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","sourceOld":"  /**\n   * Create a new FuzzyQuery that will match terms with a similarity \n   * of at least <code>minimumSimilarity</code> to <code>term</code>.\n   * If a <code>prefixLength</code> &gt; 0 is specified, a common prefix\n   * of that length is also required.\n   * \n   * @param term the term to search for\n   * @param minimumSimilarity a value between 0 and 1 to set the required similarity\n   *  between the query term and the matching terms. For example, for a\n   *  <code>minimumSimilarity</code> of <code>0.5</code> a term of the same length\n   *  as the query term is considered similar to the query term if the edit distance\n   *  between both terms is less than <code>length(term)*0.5</code>\n   * @param prefixLength length of common (non-fuzzy) prefix\n   * @param maxExpansions the maximum number of terms to match. If this number is\n   *  greater than {@link BooleanQuery#getMaxClauseCount} when the query is rewritten, \n   *  then the maxClauseCount will be used instead.\n   * @throws IllegalArgumentException if minimumSimilarity is &gt;= 1 or &lt; 0\n   * or if prefixLength &lt; 0\n   */\n  public FuzzyQuery(Term term, float minimumSimilarity, int prefixLength,\n      int maxExpansions) {\n    this.term = term;\n    \n    if (minimumSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity >= 1\");\n    else if (minimumSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity < 0\");\n    if (prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength < 0\");\n    if (maxExpansions < 0)\n      throw new IllegalArgumentException(\"maxExpansions < 0\");\n    \n    setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(maxExpansions));\n    \n    if (term.text().length() > 1.0f / (1.0f - minimumSimilarity)) {\n      this.termLongEnough = true;\n    }\n    \n    this.minimumSimilarity = minimumSimilarity;\n    this.prefixLength = prefixLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33098c76721840ff65df95e81a98a5d4a49a777f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["33098c76721840ff65df95e81a98a5d4a49a777f"]},"commit2Childs":{"33098c76721840ff65df95e81a98a5d4a49a777f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33098c76721840ff65df95e81a98a5d4a49a777f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}