{"path":"solr/core/src/test/org/apache/solr/handler/TestStressThreadBackup#testReplicationHandler().mjava","commits":[{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestStressThreadBackup#testReplicationHandler().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicationHandler() throws Exception {\n    // Create a custom BackupAPIImpl which uses ReplicatoinHandler for the backups\n    // but still defaults to CoreAdmin for making named snapshots (since that's what's documented)\n    testSnapshotsAndBackupsDuringConcurrentCommitsAndOptimizes(new BackupAPIImpl() {\n      /** no solrj API for ReplicationHandler */\n      private GenericSolrRequest makeReplicationReq(SolrParams p) {\n        return new GenericSolrRequest(GenericSolrRequest.METHOD.GET, \"/replication\", p);\n      }\n      \n      /** \n       * Override default backup impl to hit ReplicationHandler, \n       * and then poll that same handler until success\n       */\n      public void makeBackup(final String backupName, final String snapName) throws Exception {\n        final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        ModifiableSolrParams p = params(\"command\", \"backup\",\n                                        \"name\", backupName,\n                                        CoreAdminParams.BACKUP_LOCATION, backupDir.getAbsolutePath());\n        if (null != snapName) {\n          p.add(CoreAdminParams.COMMIT_NAME, snapName);\n        }\n        makeReplicationReq(p).process(coreClient);\n        \n        // \"/replication\" handler is all async, need to poll untill we see *this*\n        // backupName report success\n        while (!timeout.hasTimedOut()) {\n          if (checkBackupSuccess(backupName)) {\n            return;\n          }\n          timeout.sleep(50);\n        }\n        \n        // total TimeOut elapsed, so one last check or fail whole test.\n        assertTrue(backupName + \" never succeeded after waiting excessive amount of time\",\n                   checkBackupSuccess(backupName));\n      }\n\n      /**\n       * Returns true if the replication handler's 'details' command indicates that\n       * the most recently (succcessfully) completed backup has the specified name.\n       * \"fails\" the test if 'details' ever indicates there was a backup exception.\n       */\n      private boolean checkBackupSuccess(final String backupName) throws Exception {\n        final SimpleSolrResponse rsp = makeReplicationReq(params(\"command\", \"details\")).process(coreClient);\n        final NamedList data = rsp.getResponse();\n        log.info(\"Checking Status of {}: {}\", backupName, data);\n        final NamedList<String> backupData = (NamedList<String>) data.findRecursive(\"details\",\"backup\");\n        if (null == backupData) {\n          // no backup has finished yet\n          return false;\n        }\n        \n        final Object exception = backupData.get(\"exception\");\n        assertNull(\"Backup failure\", exception);\n\n        if (backupName.equals(backupData.get(\"snapshotName\"))\n            && \"success\".equals(backupData.get(\"status\"))) {\n          return true;\n        }\n        return false;\n      }\n    });\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestStressThreadBackup#testReplicationHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestStressThreadBackup#testReplicationHandler().mjava","sourceNew":"  public void testReplicationHandler() throws Exception {\n    // Create a custom BackupAPIImpl which uses ReplicatoinHandler for the backups\n    // but still defaults to CoreAdmin for making named snapshots (since that's what's documented)\n    testSnapshotsAndBackupsDuringConcurrentCommitsAndOptimizes(new BackupAPIImpl() {\n      final BackupStatusChecker backupStatus = new BackupStatusChecker(coreClient);\n      /** no solrj API for ReplicationHandler */\n      private GenericSolrRequest makeReplicationReq(SolrParams p) {\n        return new GenericSolrRequest(GenericSolrRequest.METHOD.GET, \"/replication\", p);\n      }\n      \n      /** \n       * Override default backup impl to hit ReplicationHandler, \n       * and then poll that same handler until success\n       */\n      public void makeBackup(final String backupName, final String snapName) throws Exception {\n        final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        ModifiableSolrParams p = params(\"command\", \"backup\",\n                                        \"name\", backupName,\n                                        CoreAdminParams.BACKUP_LOCATION, backupDir.getAbsolutePath());\n        if (null != snapName) {\n          p.add(CoreAdminParams.COMMIT_NAME, snapName);\n        }\n        makeReplicationReq(p).process(coreClient);\n        backupStatus.waitForBackupSuccess(backupName, timeout);\n      }\n    });\n    \n  }\n\n","sourceOld":"  public void testReplicationHandler() throws Exception {\n    // Create a custom BackupAPIImpl which uses ReplicatoinHandler for the backups\n    // but still defaults to CoreAdmin for making named snapshots (since that's what's documented)\n    testSnapshotsAndBackupsDuringConcurrentCommitsAndOptimizes(new BackupAPIImpl() {\n      /** no solrj API for ReplicationHandler */\n      private GenericSolrRequest makeReplicationReq(SolrParams p) {\n        return new GenericSolrRequest(GenericSolrRequest.METHOD.GET, \"/replication\", p);\n      }\n      \n      /** \n       * Override default backup impl to hit ReplicationHandler, \n       * and then poll that same handler until success\n       */\n      public void makeBackup(final String backupName, final String snapName) throws Exception {\n        final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        ModifiableSolrParams p = params(\"command\", \"backup\",\n                                        \"name\", backupName,\n                                        CoreAdminParams.BACKUP_LOCATION, backupDir.getAbsolutePath());\n        if (null != snapName) {\n          p.add(CoreAdminParams.COMMIT_NAME, snapName);\n        }\n        makeReplicationReq(p).process(coreClient);\n        \n        // \"/replication\" handler is all async, need to poll untill we see *this*\n        // backupName report success\n        while (!timeout.hasTimedOut()) {\n          if (checkBackupSuccess(backupName)) {\n            return;\n          }\n          timeout.sleep(50);\n        }\n        \n        // total TimeOut elapsed, so one last check or fail whole test.\n        assertTrue(backupName + \" never succeeded after waiting excessive amount of time\",\n                   checkBackupSuccess(backupName));\n      }\n\n      /**\n       * Returns true if the replication handler's 'details' command indicates that\n       * the most recently (succcessfully) completed backup has the specified name.\n       * \"fails\" the test if 'details' ever indicates there was a backup exception.\n       */\n      private boolean checkBackupSuccess(final String backupName) throws Exception {\n        final SimpleSolrResponse rsp = makeReplicationReq(params(\"command\", \"details\")).process(coreClient);\n        final NamedList data = rsp.getResponse();\n        log.info(\"Checking Status of {}: {}\", backupName, data);\n        final NamedList<String> backupData = (NamedList<String>) data.findRecursive(\"details\",\"backup\");\n        if (null == backupData) {\n          // no backup has finished yet\n          return false;\n        }\n        \n        final Object exception = backupData.get(\"exception\");\n        assertNull(\"Backup failure\", exception);\n\n        if (backupName.equals(backupData.get(\"snapshotName\"))\n            && \"success\".equals(backupData.get(\"status\"))) {\n          return true;\n        }\n        return false;\n      }\n    });\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["19f02bb04467ed179738a398a7da80bbbe161c16"],"19f02bb04467ed179738a398a7da80bbbe161c16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"]},"commit2Childs":{"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19f02bb04467ed179738a398a7da80bbbe161c16":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}