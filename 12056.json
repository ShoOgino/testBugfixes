{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","commits":[{"id":"76f7066a3ec6e68e257b01dd46edbbdd3530690a","date":1358805020,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf56f19cb16e01bf1fff28f2f9c2852990087fc4","date":1361056159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90f762b9c981401224de7f0a7c1ffc8fbc67574f","date":1366475889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord == -1) {\n            result.length = 0;\n            return;\n          }\n          if (ord < -1 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be -1 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord == -1) {\n            result.length = 0;\n            return;\n          }\n          if (ord < -1 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be -1 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return ordDecoder.parse(scratch.utf8ToString()).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, \"UTF-8\")).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3de2e9a536c4115b4f53f14b6ab496ba3af1840c","date":1400252137,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\", pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\", pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\", pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      final BytesRef term = new BytesRef();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\", pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          term.grow(len);\n          term.offset = 0;\n          term.length = len;\n          in.readBytes(term.bytes, 0, len);\n          return term;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\", pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          result.bytes = new byte[len];\n          result.offset = 0;\n          result.length = len;\n          in.readBytes(result.bytes, 0, len);\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\", pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      final BytesRef term = new BytesRef();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\", pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, LENGTH): \"got \" + scratch.utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          term.grow(len);\n          term.offset = 0;\n          term.length = len;\n          in.readBytes(term.bytes, 0, len);\n          return term;\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","9faa42f41b6adb98daf009cf99a4ee239189e469","7d89d7e4e5101347833eea558851bf4209218619","76f7066a3ec6e68e257b01dd46edbbdd3530690a"],"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord (resource=\" + in + \")\", pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length (resource=\" + in + \")\", pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new LegacySortedDocValuesWrapper(new LegacySortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    }, maxDoc);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new LegacySortedDocValuesWrapper(new LegacySortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    }, maxDoc);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n\n      int doc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n      int ord;\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n          if (ord >= 0) {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n      \n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new LegacySortedDocValuesWrapper(new LegacySortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    }, maxDoc);\n  }\n\n","bugFix":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","9a70ce9bddc6f985feb8e5e182aebe20872328d4","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","76f7066a3ec6e68e257b01dd46edbbdd3530690a","6652c74b2358a0b13223817a6a793bf1c9d0749d","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n\n      int doc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n      int ord;\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n          if (ord >= 0) {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n      \n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        if (docID < 0 || docID >= maxDoc) {\n          throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n        }\n        try {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + docID * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            return (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          if (ord < 0 || ord >= field.numValues) {\n            throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n          }\n          in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n\n      int doc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n      int ord;\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n          if (ord >= 0) {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + target * (1 + field.ordPattern.length()));\n        SimpleTextUtil.readLine(in, scratch);\n        try {\n          ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n        }\n        return ord >= 0;\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n      \n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n\n      int doc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n      int ord;\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n          if (ord >= 0) {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n      \n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n\n      int doc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n      int ord;\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n          if (ord >= 0) {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + target * (1 + field.ordPattern.length()));\n        SimpleTextUtil.readLine(in, scratch);\n        try {\n          ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n        }\n        return ord >= 0;\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n      \n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n\n      int doc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n      int ord;\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n          if (ord >= 0) {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n      \n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n\n      int doc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n      int ord;\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n          if (ord >= 0) {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + target * (1 + field.ordPattern.length()));\n        SimpleTextUtil.readLine(in, scratch);\n        try {\n          ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n        }\n        return ord >= 0;\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n      \n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n    final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new SortedDocValues() {\n\n      int doc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n\n      int ord;\n\n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + i * (1 + field.ordPattern.length()));\n          SimpleTextUtil.readLine(in, scratch);\n          try {\n            ord = (int) ordDecoder.parse(scratch.get().utf8ToString()).longValue()-1;\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse ord\", in, pe);\n          }\n          if (ord >= 0) {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n      \n      @Override\n      public int ordValue() {\n        return ord;\n      }\n      \n      final BytesRefBuilder term = new BytesRefBuilder();\n      \n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        if (ord < 0 || ord >= field.numValues) {\n          throw new IndexOutOfBoundsException(\"ord must be 0 .. \" + (field.numValues-1) + \"; got \" + ord);\n        }\n        in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch.get(), LENGTH): \"got \" + scratch.get().utf8ToString() + \" in=\" + in;\n        int len;\n        try {\n          len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n        } catch (ParseException pe) {\n          throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n        }\n        term.grow(len);\n        term.setLength(len);\n        in.readBytes(term.bytes(), 0, len);\n        return term.get();\n      }\n      \n      @Override\n      public int getValueCount() {\n        return (int)field.numValues;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","bf56f19cb16e01bf1fff28f2f9c2852990087fc4"],"56572ec06f1407c066d6b7399413178b33176cd8":["7d89d7e4e5101347833eea558851bf4209218619","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["7d89d7e4e5101347833eea558851bf4209218619","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["7d89d7e4e5101347833eea558851bf4209218619"],"5eb2511ababf862ea11e10761c70ee560cd84510":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","7d89d7e4e5101347833eea558851bf4209218619"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"bf56f19cb16e01bf1fff28f2f9c2852990087fc4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"7d89d7e4e5101347833eea558851bf4209218619":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","f7558b5077dd4abd457be151475f13b541f4f13e"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76f7066a3ec6e68e257b01dd46edbbdd3530690a"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["f7558b5077dd4abd457be151475f13b541f4f13e"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f7558b5077dd4abd457be151475f13b541f4f13e","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76f7066a3ec6e68e257b01dd46edbbdd3530690a","d4d69c535930b5cce125cff868d40f6373dc27d4"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"9faa42f41b6adb98daf009cf99a4ee239189e469":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"bf56f19cb16e01bf1fff28f2f9c2852990087fc4":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","3de2e9a536c4115b4f53f14b6ab496ba3af1840c","5eb2511ababf862ea11e10761c70ee560cd84510"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","bf56f19cb16e01bf1fff28f2f9c2852990087fc4"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}