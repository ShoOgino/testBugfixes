{"path":"solr/core/src/test/org/apache/solr/cloud/SystemCollectionCompatTest#setupSystemCollection().mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SystemCollectionCompatTest#setupSystemCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setupSystemCollection() throws Exception {\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n    ZkController zkController = cluster.getJettySolrRunner(0).getCoreContainer().getZkController();\n    cloudManager = zkController.getSolrCloudManager();\n    solrClient = new CloudSolrClientBuilder(Collections.singletonList(zkController.getZkServerAddress()),\n        Optional.empty()).build();\n    // send a dummy doc to the .system collection\n    SolrInputDocument doc = new SolrInputDocument(\n        \"id\", IdUtils.timeRandomId(),\n        CommonParams.TYPE, \"dummy\");\n    doc.addField(\"time_l\", cloudManager.getTimeSource().getEpochTimeNs());\n    doc.addField(\"timestamp\", new Date());\n    solrClient.add(CollectionAdminParams.SYSTEM_COLL, doc);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n\n    Replica leader\n        = solrClient.getZkStateReader().getLeaderRetry(CollectionAdminParams.SYSTEM_COLL, \"shard1\", DEFAULT_TIMEOUT);\n    final AtomicReference<Long> coreStartTime = new AtomicReference<>(getCoreStatus(leader).getCoreStartTime().getTime());\n    // trigger compat report by changing the schema\n    SchemaRequest req = new SchemaRequest();\n    SchemaResponse rsp = req.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    Map<String, Object> field = getSchemaField(\"timestamp\", rsp);\n    // make some obviously incompatible changes\n    field.put(\"type\", \"string\");\n    field.put(\"docValues\", false);\n    SchemaRequest.ReplaceField replaceFieldRequest = new SchemaRequest.ReplaceField(field);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    assertEquals(replaceFieldResponse.toString(), 0, replaceFieldResponse.getStatus());\n    CollectionAdminRequest.Reload reloadRequest = CollectionAdminRequest.reloadCollection(CollectionAdminParams.SYSTEM_COLL);\n    CollectionAdminResponse response = reloadRequest.process(solrClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // wait for the reload to complete\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime.get();\n    });\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc13f49e9c6cd455327f919d5d09440f7858f6a6","date":1579167746,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SystemCollectionCompatTest#setupSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SystemCollectionCompatTest#setupSystemCollection().mjava","sourceNew":"  @Before\n  public void setupSystemCollection() throws Exception {\n    ZkController zkController = cluster.getJettySolrRunner(0).getCoreContainer().getZkController();\n    cloudManager = zkController.getSolrCloudManager();\n    solrClient = new CloudSolrClientBuilder(Collections.singletonList(zkController.getZkServerAddress()),\n        Optional.empty()).build();\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    String overseerLeader = (String) adminResponse.getResponse().get(\"leader\");\n    Set<String> nodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    nodes.remove(overseerLeader);\n    // put .system replicas on other nodes that the overseer\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2)\n        .setCreateNodeSet(String.join(\",\", nodes))\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n    // send a dummy doc to the .system collection\n    SolrInputDocument doc = new SolrInputDocument(\n        \"id\", IdUtils.timeRandomId(),\n        CommonParams.TYPE, \"dummy\");\n    doc.addField(\"time_l\", cloudManager.getTimeSource().getEpochTimeNs());\n    doc.addField(\"timestamp\", new Date());\n    solrClient.add(CollectionAdminParams.SYSTEM_COLL, doc);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n\n    Map<String, Long> coreStartTimes = new HashMap<>();\n    DocCollection coll = cloudManager.getClusterStateProvider().getCollection(CollectionAdminParams.SYSTEM_COLL);\n    for (Replica r : coll.getReplicas()) {\n      coreStartTimes.put(r.getName(), getCoreStatus(r).getCoreStartTime().getTime());\n    }\n    // trigger compat report by changing the schema\n    SchemaRequest req = new SchemaRequest();\n    SchemaResponse rsp = req.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    Map<String, Object> field = getSchemaField(\"timestamp\", rsp);\n    // make some obviously incompatible changes\n    field.put(\"type\", \"string\");\n    field.put(\"docValues\", false);\n    SchemaRequest.ReplaceField replaceFieldRequest = new SchemaRequest.ReplaceField(field);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    assertEquals(replaceFieldResponse.toString(), 0, replaceFieldResponse.getStatus());\n    CollectionAdminRequest.Reload reloadRequest = CollectionAdminRequest.reloadCollection(CollectionAdminParams.SYSTEM_COLL);\n    CollectionAdminResponse response = reloadRequest.process(solrClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // wait for the reload of all replicas to complete\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      boolean allReloaded = true;\n      for (Replica r : coll.getReplicas()) {\n        long previousTime = coreStartTimes.get(r.getName());\n        try {\n          long currentTime = getCoreStatus(r).getCoreStartTime().getTime();\n          allReloaded = allReloaded && (previousTime < currentTime);\n        } catch (Exception e) {\n          log.warn(\"Error retrieving replica status of \" + Utils.toJSONString(r), e);\n          allReloaded = false;\n        }\n      }\n      return allReloaded;\n    });\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n\n  }\n\n","sourceOld":"  @Before\n  public void setupSystemCollection() throws Exception {\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n    ZkController zkController = cluster.getJettySolrRunner(0).getCoreContainer().getZkController();\n    cloudManager = zkController.getSolrCloudManager();\n    solrClient = new CloudSolrClientBuilder(Collections.singletonList(zkController.getZkServerAddress()),\n        Optional.empty()).build();\n    // send a dummy doc to the .system collection\n    SolrInputDocument doc = new SolrInputDocument(\n        \"id\", IdUtils.timeRandomId(),\n        CommonParams.TYPE, \"dummy\");\n    doc.addField(\"time_l\", cloudManager.getTimeSource().getEpochTimeNs());\n    doc.addField(\"timestamp\", new Date());\n    solrClient.add(CollectionAdminParams.SYSTEM_COLL, doc);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n\n    Replica leader\n        = solrClient.getZkStateReader().getLeaderRetry(CollectionAdminParams.SYSTEM_COLL, \"shard1\", DEFAULT_TIMEOUT);\n    final AtomicReference<Long> coreStartTime = new AtomicReference<>(getCoreStatus(leader).getCoreStartTime().getTime());\n    // trigger compat report by changing the schema\n    SchemaRequest req = new SchemaRequest();\n    SchemaResponse rsp = req.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    Map<String, Object> field = getSchemaField(\"timestamp\", rsp);\n    // make some obviously incompatible changes\n    field.put(\"type\", \"string\");\n    field.put(\"docValues\", false);\n    SchemaRequest.ReplaceField replaceFieldRequest = new SchemaRequest.ReplaceField(field);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    assertEquals(replaceFieldResponse.toString(), 0, replaceFieldResponse.getStatus());\n    CollectionAdminRequest.Reload reloadRequest = CollectionAdminRequest.reloadCollection(CollectionAdminParams.SYSTEM_COLL);\n    CollectionAdminResponse response = reloadRequest.process(solrClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // wait for the reload to complete\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime.get();\n    });\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SystemCollectionCompatTest#setupSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SystemCollectionCompatTest#setupSystemCollection().mjava","sourceNew":"  @Before\n  public void setupSystemCollection() throws Exception {\n    ZkController zkController = cluster.getJettySolrRunner(0).getCoreContainer().getZkController();\n    cloudManager = zkController.getSolrCloudManager();\n    solrClient = new CloudSolrClientBuilder(Collections.singletonList(zkController.getZkServerAddress()),\n        Optional.empty()).build();\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    String overseerLeader = (String) adminResponse.getResponse().get(\"leader\");\n    Set<String> nodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    nodes.remove(overseerLeader);\n    // put .system replicas on other nodes that the overseer\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2)\n        .setCreateNodeSet(String.join(\",\", nodes))\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n    // send a dummy doc to the .system collection\n    SolrInputDocument doc = new SolrInputDocument(\n        \"id\", IdUtils.timeRandomId(),\n        CommonParams.TYPE, \"dummy\");\n    doc.addField(\"time_l\", cloudManager.getTimeSource().getEpochTimeNs());\n    doc.addField(\"timestamp\", new Date());\n    solrClient.add(CollectionAdminParams.SYSTEM_COLL, doc);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n\n    Map<String, Long> coreStartTimes = new HashMap<>();\n    DocCollection coll = cloudManager.getClusterStateProvider().getCollection(CollectionAdminParams.SYSTEM_COLL);\n    for (Replica r : coll.getReplicas()) {\n      coreStartTimes.put(r.getName(), getCoreStatus(r).getCoreStartTime().getTime());\n    }\n    // trigger compat report by changing the schema\n    SchemaRequest req = new SchemaRequest();\n    SchemaResponse rsp = req.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    Map<String, Object> field = getSchemaField(\"timestamp\", rsp);\n    // make some obviously incompatible changes\n    field.put(\"type\", \"string\");\n    field.put(\"docValues\", false);\n    SchemaRequest.ReplaceField replaceFieldRequest = new SchemaRequest.ReplaceField(field);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    assertEquals(replaceFieldResponse.toString(), 0, replaceFieldResponse.getStatus());\n    CollectionAdminRequest.Reload reloadRequest = CollectionAdminRequest.reloadCollection(CollectionAdminParams.SYSTEM_COLL);\n    CollectionAdminResponse response = reloadRequest.process(solrClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // wait for the reload of all replicas to complete\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      boolean allReloaded = true;\n      for (Replica r : coll.getReplicas()) {\n        long previousTime = coreStartTimes.get(r.getName());\n        try {\n          long currentTime = getCoreStatus(r).getCoreStartTime().getTime();\n          allReloaded = allReloaded && (previousTime < currentTime);\n        } catch (Exception e) {\n          log.warn(\"Error retrieving replica status of {}\", Utils.toJSONString(r), e);\n          allReloaded = false;\n        }\n      }\n      return allReloaded;\n    });\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n\n  }\n\n","sourceOld":"  @Before\n  public void setupSystemCollection() throws Exception {\n    ZkController zkController = cluster.getJettySolrRunner(0).getCoreContainer().getZkController();\n    cloudManager = zkController.getSolrCloudManager();\n    solrClient = new CloudSolrClientBuilder(Collections.singletonList(zkController.getZkServerAddress()),\n        Optional.empty()).build();\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    String overseerLeader = (String) adminResponse.getResponse().get(\"leader\");\n    Set<String> nodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    nodes.remove(overseerLeader);\n    // put .system replicas on other nodes that the overseer\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2)\n        .setCreateNodeSet(String.join(\",\", nodes))\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n    // send a dummy doc to the .system collection\n    SolrInputDocument doc = new SolrInputDocument(\n        \"id\", IdUtils.timeRandomId(),\n        CommonParams.TYPE, \"dummy\");\n    doc.addField(\"time_l\", cloudManager.getTimeSource().getEpochTimeNs());\n    doc.addField(\"timestamp\", new Date());\n    solrClient.add(CollectionAdminParams.SYSTEM_COLL, doc);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n\n    Map<String, Long> coreStartTimes = new HashMap<>();\n    DocCollection coll = cloudManager.getClusterStateProvider().getCollection(CollectionAdminParams.SYSTEM_COLL);\n    for (Replica r : coll.getReplicas()) {\n      coreStartTimes.put(r.getName(), getCoreStatus(r).getCoreStartTime().getTime());\n    }\n    // trigger compat report by changing the schema\n    SchemaRequest req = new SchemaRequest();\n    SchemaResponse rsp = req.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    Map<String, Object> field = getSchemaField(\"timestamp\", rsp);\n    // make some obviously incompatible changes\n    field.put(\"type\", \"string\");\n    field.put(\"docValues\", false);\n    SchemaRequest.ReplaceField replaceFieldRequest = new SchemaRequest.ReplaceField(field);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    assertEquals(replaceFieldResponse.toString(), 0, replaceFieldResponse.getStatus());\n    CollectionAdminRequest.Reload reloadRequest = CollectionAdminRequest.reloadCollection(CollectionAdminParams.SYSTEM_COLL);\n    CollectionAdminResponse response = reloadRequest.process(solrClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // wait for the reload of all replicas to complete\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      boolean allReloaded = true;\n      for (Replica r : coll.getReplicas()) {\n        long previousTime = coreStartTimes.get(r.getName());\n        try {\n          long currentTime = getCoreStatus(r).getCoreStartTime().getTime();\n          allReloaded = allReloaded && (previousTime < currentTime);\n        } catch (Exception e) {\n          log.warn(\"Error retrieving replica status of \" + Utils.toJSONString(r), e);\n          allReloaded = false;\n        }\n      }\n      return allReloaded;\n    });\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SystemCollectionCompatTest#setupSystemCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SystemCollectionCompatTest#setupSystemCollection().mjava","sourceNew":"  @Before\n  public void setupSystemCollection() throws Exception {\n    ZkController zkController = cluster.getJettySolrRunner(0).getCoreContainer().getZkController();\n    cloudManager = zkController.getSolrCloudManager();\n    solrClient = new CloudSolrClientBuilder(Collections.singletonList(zkController.getZkServerAddress()),\n        Optional.empty()).build();\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    String overseerLeader = (String) adminResponse.getResponse().get(\"leader\");\n    Set<String> nodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    nodes.remove(overseerLeader);\n    // put .system replicas on other nodes that the overseer\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2)\n        .setCreateNodeSet(String.join(\",\", nodes))\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n    // send a dummy doc to the .system collection\n    SolrInputDocument doc = new SolrInputDocument(\n        \"id\", IdUtils.timeRandomId(),\n        CommonParams.TYPE, \"dummy\");\n    doc.addField(\"time_l\", cloudManager.getTimeSource().getEpochTimeNs());\n    doc.addField(\"timestamp\", new Date());\n    solrClient.add(CollectionAdminParams.SYSTEM_COLL, doc);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n\n    Map<String, Long> coreStartTimes = new HashMap<>();\n    DocCollection coll = cloudManager.getClusterStateProvider().getCollection(CollectionAdminParams.SYSTEM_COLL);\n    for (Replica r : coll.getReplicas()) {\n      coreStartTimes.put(r.getName(), getCoreStatus(r).getCoreStartTime().getTime());\n    }\n    // trigger compat report by changing the schema\n    SchemaRequest req = new SchemaRequest();\n    SchemaResponse rsp = req.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    Map<String, Object> field = getSchemaField(\"timestamp\", rsp);\n    // make some obviously incompatible changes\n    field.put(\"type\", \"string\");\n    field.put(\"docValues\", false);\n    SchemaRequest.ReplaceField replaceFieldRequest = new SchemaRequest.ReplaceField(field);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    assertEquals(replaceFieldResponse.toString(), 0, replaceFieldResponse.getStatus());\n    CollectionAdminRequest.Reload reloadRequest = CollectionAdminRequest.reloadCollection(CollectionAdminParams.SYSTEM_COLL);\n    CollectionAdminResponse response = reloadRequest.process(solrClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // wait for the reload of all replicas to complete\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      boolean allReloaded = true;\n      for (Replica r : coll.getReplicas()) {\n        long previousTime = coreStartTimes.get(r.getName());\n        try {\n          long currentTime = getCoreStatus(r).getCoreStartTime().getTime();\n          allReloaded = allReloaded && (previousTime < currentTime);\n        } catch (Exception e) {\n          log.warn(\"Error retrieving replica status of {}\", Utils.toJSONString(r), e);\n          allReloaded = false;\n        }\n      }\n      return allReloaded;\n    });\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n\n  }\n\n","sourceOld":"  @Before\n  public void setupSystemCollection() throws Exception {\n    ZkController zkController = cluster.getJettySolrRunner(0).getCoreContainer().getZkController();\n    cloudManager = zkController.getSolrCloudManager();\n    solrClient = new CloudSolrClientBuilder(Collections.singletonList(zkController.getZkServerAddress()),\n        Optional.empty()).build();\n    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();\n    CollectionAdminResponse adminResponse = status.process(solrClient);\n    String overseerLeader = (String) adminResponse.getResponse().get(\"leader\");\n    Set<String> nodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    nodes.remove(overseerLeader);\n    // put .system replicas on other nodes that the overseer\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2)\n        .setCreateNodeSet(String.join(\",\", nodes))\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n    // send a dummy doc to the .system collection\n    SolrInputDocument doc = new SolrInputDocument(\n        \"id\", IdUtils.timeRandomId(),\n        CommonParams.TYPE, \"dummy\");\n    doc.addField(\"time_l\", cloudManager.getTimeSource().getEpochTimeNs());\n    doc.addField(\"timestamp\", new Date());\n    solrClient.add(CollectionAdminParams.SYSTEM_COLL, doc);\n    solrClient.commit(CollectionAdminParams.SYSTEM_COLL);\n\n    Map<String, Long> coreStartTimes = new HashMap<>();\n    DocCollection coll = cloudManager.getClusterStateProvider().getCollection(CollectionAdminParams.SYSTEM_COLL);\n    for (Replica r : coll.getReplicas()) {\n      coreStartTimes.put(r.getName(), getCoreStatus(r).getCoreStartTime().getTime());\n    }\n    // trigger compat report by changing the schema\n    SchemaRequest req = new SchemaRequest();\n    SchemaResponse rsp = req.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    Map<String, Object> field = getSchemaField(\"timestamp\", rsp);\n    // make some obviously incompatible changes\n    field.put(\"type\", \"string\");\n    field.put(\"docValues\", false);\n    SchemaRequest.ReplaceField replaceFieldRequest = new SchemaRequest.ReplaceField(field);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(solrClient, CollectionAdminParams.SYSTEM_COLL);\n    assertEquals(replaceFieldResponse.toString(), 0, replaceFieldResponse.getStatus());\n    CollectionAdminRequest.Reload reloadRequest = CollectionAdminRequest.reloadCollection(CollectionAdminParams.SYSTEM_COLL);\n    CollectionAdminResponse response = reloadRequest.process(solrClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // wait for the reload of all replicas to complete\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      boolean allReloaded = true;\n      for (Replica r : coll.getReplicas()) {\n        long previousTime = coreStartTimes.get(r.getName());\n        try {\n          long currentTime = getCoreStatus(r).getCoreStartTime().getTime();\n          allReloaded = allReloaded && (previousTime < currentTime);\n        } catch (Exception e) {\n          log.warn(\"Error retrieving replica status of {}\", Utils.toJSONString(r), e);\n          allReloaded = false;\n        }\n      }\n      return allReloaded;\n    });\n    cluster.waitForActiveCollection(CollectionAdminParams.SYSTEM_COLL,  1, 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc13f49e9c6cd455327f919d5d09440f7858f6a6":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bc13f49e9c6cd455327f919d5d09440f7858f6a6"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["bc13f49e9c6cd455327f919d5d09440f7858f6a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"bc13f49e9c6cd455327f919d5d09440f7858f6a6":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}