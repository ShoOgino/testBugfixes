{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,Bits,int,int).mjava","commits":[{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,LeafCollector,Bits,int,int).mjava","sourceNew":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, collector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","sourceOld":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      LeafCollector singleClauseCollector, Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, collector, singleClauseCollector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreWindow(BulkScorerAndDoc,LeafCollector,Bits,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private BulkScorerAndDoc scoreWindow(BulkScorerAndDoc top, LeafCollector collector,\n      Bits acceptDocs, int min, int max) throws IOException {\n    final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n    final int windowMin = Math.max(min, windowBase);\n    final int windowMax = Math.min(max, windowBase + SIZE);\n\n    // Fill 'leads' with all scorers from 'head' that are in the right window\n    leads[0] = head.pop();\n    int maxFreq = 1;\n    while (head.size() > 0 && head.top().next < windowMax) {\n      leads[maxFreq++] = head.pop();\n    }\n\n    if (minShouldMatch == 1 && maxFreq == 1) {\n      // special case: only one scorer can match in the current window,\n      // we can collect directly\n      final BulkScorerAndDoc bulkScorer = leads[0];\n      scoreWindowSingleScorer(bulkScorer, collector, acceptDocs, windowMin, windowMax, max);\n      return head.add(bulkScorer);\n    } else {\n      // general case, collect through a bit set first and then replay\n      scoreWindowMultipleScorers(collector, acceptDocs, windowBase, windowMin, windowMax, maxFreq);\n      return head.top();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}