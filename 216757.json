{"path":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testHashCodeEquals().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testHashCodeEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testHashCodeEquals().mjava","sourceNew":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random.nextInt(2000) + 1;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","sourceOld":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random.nextInt(2000) + 1;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testHashCodeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testHashCodeEquals().mjava","sourceNew":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","sourceOld":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random.nextInt(2000) + 1;\n    FixedBitSet b1 = new FixedBitSet(numBits);\n    FixedBitSet b2 = new FixedBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random.nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}