{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String,String).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String).mjava","sourceNew":"  /**\n   * Close and unregister a named {@link SolrMetricReporter} for a registry.\n   * @param registry registry name\n   * @param name reporter name\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @return true if a named reporter existed and was closed.\n   */\n  public boolean closeReporter(String registry, String name, String tag) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return false;\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return false;\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return false;\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter reporter = perRegistry.remove(name);\n      if (reporter == null) {\n        return false;\n      }\n      try {\n        reporter.close();\n      } catch (Exception e) {\n        log.warn(\"Error closing metric reporter, registry=\" + registry + \", name=\" + name, e);\n      }\n      return true;\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close and unregister a named {@link SolrMetricReporter} for a registry.\n   * @param registry registry name\n   * @param name reporter name\n   * @return true if a named reporter existed and was closed.\n   */\n  public boolean closeReporter(String registry, String name) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return false;\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return false;\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return false;\n      }\n      SolrMetricReporter reporter = perRegistry.remove(name);\n      if (reporter == null) {\n        return false;\n      }\n      try {\n        reporter.close();\n      } catch (Exception e) {\n        log.warn(\"Error closing metric reporter, registry=\" + registry + \", name=\" + name, e);\n      }\n      return true;\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String,String).mjava","sourceNew":"  /**\n   * Close and unregister a named {@link SolrMetricReporter} for a registry.\n   * @param registry registry name\n   * @param name reporter name\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @return true if a named reporter existed and was closed.\n   */\n  public boolean closeReporter(String registry, String name, String tag) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return false;\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return false;\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return false;\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter reporter = perRegistry.remove(name);\n      if (reporter == null) {\n        return false;\n      }\n      try {\n        reporter.close();\n      } catch (Exception e) {\n        log.warn(\"Error closing metric reporter, registry=\" + registry + \", name=\" + name, e);\n      }\n      return true;\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close and unregister a named {@link SolrMetricReporter} for a registry.\n   * @param registry registry name\n   * @param name reporter name\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @return true if a named reporter existed and was closed.\n   */\n  public boolean closeReporter(String registry, String name, String tag) {\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return false;\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return false;\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return false;\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter reporter = perRegistry.remove(name);\n      if (reporter == null) {\n        return false;\n      }\n      try {\n        reporter.close();\n      } catch (Exception e) {\n        log.warn(\"Error closing metric reporter, registry=\" + registry + \", name=\" + name, e);\n      }\n      return true;\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String,String).mjava","sourceNew":"  /**\n   * Close and unregister a named {@link SolrMetricReporter} for a registry.\n   *\n   * @param registry registry name\n   * @param name     reporter name\n   * @param tag      optional tag for the reporter, to distinguish reporters logically created for different parent\n   *                 component instances.\n   * @return true if a named reporter existed and was closed.\n   */\n  public boolean closeReporter(String registry, String name, String tag) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return false;\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return false;\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return false;\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter reporter = perRegistry.remove(name);\n      if (reporter == null) {\n        return false;\n      }\n      try {\n        reporter.close();\n      } catch (Exception e) {\n        log.warn(\"Error closing metric reporter, registry=\" + registry + \", name=\" + name, e);\n      }\n      return true;\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close and unregister a named {@link SolrMetricReporter} for a registry.\n   * @param registry registry name\n   * @param name reporter name\n   * @param tag optional tag for the reporter, to distinguish reporters logically created for different parent\n   *            component instances.\n   * @return true if a named reporter existed and was closed.\n   */\n  public boolean closeReporter(String registry, String name, String tag) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return false;\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return false;\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return false;\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter reporter = perRegistry.remove(name);\n      if (reporter == null) {\n        return false;\n      }\n      try {\n        reporter.close();\n      } catch (Exception e) {\n        log.warn(\"Error closing metric reporter, registry=\" + registry + \", name=\" + name, e);\n      }\n      return true;\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#closeReporter(String,String,String).mjava","sourceNew":"  /**\n   * Close and unregister a named {@link SolrMetricReporter} for a registry.\n   *\n   * @param registry registry name\n   * @param name     reporter name\n   * @param tag      optional tag for the reporter, to distinguish reporters logically created for different parent\n   *                 component instances.\n   * @return true if a named reporter existed and was closed.\n   */\n  public boolean closeReporter(String registry, String name, String tag) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: {}\", registry);\n        return false;\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: {}\", registry);\n      return false;\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return false;\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter reporter = perRegistry.remove(name);\n      if (reporter == null) {\n        return false;\n      }\n      try {\n        reporter.close();\n      } catch (Exception e) {\n        log.warn(\"Error closing metric reporter, registry={}, name={}\", registry, name, e);\n      }\n      return true;\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close and unregister a named {@link SolrMetricReporter} for a registry.\n   *\n   * @param registry registry name\n   * @param name     reporter name\n   * @param tag      optional tag for the reporter, to distinguish reporters logically created for different parent\n   *                 component instances.\n   * @return true if a named reporter existed and was closed.\n   */\n  public boolean closeReporter(String registry, String name, String tag) {\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    try {\n      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {\n        log.warn(\"Could not obtain lock to modify reporters registry: \" + registry);\n        return false;\n      }\n    } catch (InterruptedException e) {\n      log.warn(\"Interrupted while trying to obtain lock to modify reporters registry: \" + registry);\n      return false;\n    }\n    try {\n      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);\n      if (perRegistry == null) {\n        return false;\n      }\n      if (tag != null && !tag.isEmpty()) {\n        name = name + \"@\" + tag;\n      }\n      SolrMetricReporter reporter = perRegistry.remove(name);\n      if (reporter == null) {\n        return false;\n      }\n      try {\n        reporter.close();\n      } catch (Exception e) {\n        log.warn(\"Error closing metric reporter, registry=\" + registry + \", name=\" + name, e);\n      }\n      return true;\n    } finally {\n      reportersLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["9df8125ba9193a2e2e285ed92157810b1952a244"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}