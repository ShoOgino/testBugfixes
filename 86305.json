{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getRemotCoreUrl(CoreContainer,String,String).mjava","sourceNew":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(CoreContainer cores, String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n    \n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n    \n    if (slices.isEmpty()) {\n      return null;\n    }\n    \n    String coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n    \n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(cores, collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n    \n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","sourceNew":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    if (collectionsList == null)\n      collectionsList = new ArrayList<>();\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","sourceNew":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Collection<Slice> slices = (docCollection != null) ? docCollection.getActiveSlices() : null;\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    if (collectionsList == null)\n      collectionsList = new ArrayList<>();\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    if (collectionsList == null)\n      collectionsList = new ArrayList<>();\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","bugFix":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","sourceNew":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Collection<Slice> slices = (docCollection != null) ? docCollection.getActiveSlices() : null;\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    if (collectionsList == null)\n      collectionsList = new ArrayList<>();\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collectionName);\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    if (collectionsList == null)\n      collectionsList = new ArrayList<>();\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","sourceNew":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Collection<Slice> slices = (docCollection != null) ? docCollection.getActiveSlices() : null;\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Collection<Slice> slices = (docCollection != null) ? docCollection.getActiveSlices() : null;\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    if (collectionsList == null)\n      collectionsList = new ArrayList<>();\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","sourceNew":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Slice[] slices = (docCollection != null) ? docCollection.getActiveSlicesArr() : null;\n    List<Slice> activeSlices = new ArrayList<>();\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      activeSlices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, activeSlices, true);\n      if (activeSlices.isEmpty()) {\n        getSlicesForCollections(clusterState, activeSlices, false);\n      }\n    } else {\n      for (Slice s : slices) {\n        activeSlices.add(s);\n      }\n    }\n\n    if (activeSlices.isEmpty()) {\n      return null;\n    }\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        activeSlices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          activeSlices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Collection<Slice> slices = (docCollection != null) ? docCollection.getActiveSlices() : null;\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      slices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, slices, true);\n      if (slices.isEmpty()) {\n        getSlicesForCollections(clusterState, slices, false);\n      }\n    }\n\n    if (slices.isEmpty()) {\n      return null;\n    }\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        slices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          slices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","79411f20952f22cd9b944ff6f25f051554ff8e53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06162402a4b5a56531e9bd52e5e05f51b86ccfea","date":1540518645,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","sourceNew":"  protected String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Slice[] slices = (docCollection != null) ? docCollection.getActiveSlicesArr() : null;\n    List<Slice> activeSlices = new ArrayList<>();\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      activeSlices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, activeSlices, true);\n      if (activeSlices.isEmpty()) {\n        getSlicesForCollections(clusterState, activeSlices, false);\n      }\n    } else {\n      for (Slice s : slices) {\n        activeSlices.add(s);\n      }\n    }\n\n    if (activeSlices.isEmpty()) {\n      return null;\n    }\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        activeSlices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          activeSlices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  private String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Slice[] slices = (docCollection != null) ? docCollection.getActiveSlicesArr() : null;\n    List<Slice> activeSlices = new ArrayList<>();\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      activeSlices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, activeSlices, true);\n      if (activeSlices.isEmpty()) {\n        getSlicesForCollections(clusterState, activeSlices, false);\n      }\n    } else {\n      for (Slice s : slices) {\n        activeSlices.add(s);\n      }\n    }\n\n    if (activeSlices.isEmpty()) {\n      return null;\n    }\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        activeSlices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          activeSlices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","sourceNew":"  protected String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Slice[] slices = (docCollection != null) ? docCollection.getActiveSlicesArr() : null;\n    List<Slice> activeSlices = new ArrayList<>();\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      byCoreName = true;\n      activeSlices = new ArrayList<>();\n      getSlicesForCollections(clusterState, activeSlices, true);\n      if (activeSlices.isEmpty()) {\n        getSlicesForCollections(clusterState, activeSlices, false);\n      }\n    } else {\n      for (Slice s : slices) {\n        activeSlices.add(s);\n      }\n    }\n\n    if (activeSlices.isEmpty()) {\n      return null;\n    }\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        activeSlices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          activeSlices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  protected String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Slice[] slices = (docCollection != null) ? docCollection.getActiveSlicesArr() : null;\n    List<Slice> activeSlices = new ArrayList<>();\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      activeSlices = new ArrayList<>();\n      // look by core name\n      byCoreName = true;\n      getSlicesForCollections(clusterState, activeSlices, true);\n      if (activeSlices.isEmpty()) {\n        getSlicesForCollections(clusterState, activeSlices, false);\n      }\n    } else {\n      for (Slice s : slices) {\n        activeSlices.add(s);\n      }\n    }\n\n    if (activeSlices.isEmpty()) {\n      return null;\n    }\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        activeSlices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          activeSlices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","bugFix":["c84df91ca6a2e8d6f26f185663112546a27f6b45","db889c531bc88c5c68d4254982851bd2d4e2a6a3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"813335f324f8bd40ae4d83d8391674b42b536cc0","date":1555591986,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemoteCoreUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getRemotCoreUrl(String,String).mjava","sourceNew":"  protected String getRemoteCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Slice[] slices = (docCollection != null) ? docCollection.getActiveSlicesArr() : null;\n    List<Slice> activeSlices = new ArrayList<>();\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      byCoreName = true;\n      activeSlices = new ArrayList<>();\n      getSlicesForCollections(clusterState, activeSlices, true);\n      if (activeSlices.isEmpty()) {\n        getSlicesForCollections(clusterState, activeSlices, false);\n      }\n    } else {\n      for (Slice s : slices) {\n        activeSlices.add(s);\n      }\n    }\n\n    if (activeSlices.isEmpty()) {\n      return null;\n    }\n\n    // XXX (ab) most likely this is not needed? it seems all code paths\n    // XXX already make sure the collectionName is on the list\n    if (!collectionsList.contains(collectionName)) {\n      collectionsList = new ArrayList<>(collectionsList);\n      collectionsList.add(collectionName);\n    }\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        activeSlices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          activeSlices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","sourceOld":"  protected String getRemotCoreUrl(String collectionName, String origCorename) {\n    ClusterState clusterState = cores.getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n    Slice[] slices = (docCollection != null) ? docCollection.getActiveSlicesArr() : null;\n    List<Slice> activeSlices = new ArrayList<>();\n    boolean byCoreName = false;\n\n    if (slices == null) {\n      byCoreName = true;\n      activeSlices = new ArrayList<>();\n      getSlicesForCollections(clusterState, activeSlices, true);\n      if (activeSlices.isEmpty()) {\n        getSlicesForCollections(clusterState, activeSlices, false);\n      }\n    } else {\n      for (Slice s : slices) {\n        activeSlices.add(s);\n      }\n    }\n\n    if (activeSlices.isEmpty()) {\n      return null;\n    }\n\n    collectionsList.add(collectionName);\n    String coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n        activeSlices, byCoreName, true);\n\n    if (coreUrl == null) {\n      coreUrl = getCoreUrl(collectionName, origCorename, clusterState,\n          activeSlices, byCoreName, false);\n    }\n\n    return coreUrl;\n  }\n\n","bugFix":null,"bugIntro":["3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"06162402a4b5a56531e9bd52e5e05f51b86ccfea":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["344b0840364d990b29b97467bfcc766ff8325d11"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049","344b0840364d990b29b97467bfcc766ff8325d11"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["06162402a4b5a56531e9bd52e5e05f51b86ccfea"],"344b0840364d990b29b97467bfcc766ff8325d11":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"06162402a4b5a56531e9bd52e5e05f51b86ccfea":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["06162402a4b5a56531e9bd52e5e05f51b86ccfea"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["813335f324f8bd40ae4d83d8391674b42b536cc0"],"344b0840364d990b29b97467bfcc766ff8325d11":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"813335f324f8bd40ae4d83d8391674b42b536cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}