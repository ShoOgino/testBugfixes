{"path":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","commits":[{"id":"8d0c1d69778439d99fc635727129e99480e64f06","date":1232050859,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["75ed70ebff903842ce0bf09b37df09f11f89ad4f","3a3b94b80956124d73f4ba1d13a45e982692f9e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n\n      public List readIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(namedListToSolrParams(params));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8d0c1d69778439d99fc635727129e99480e64f06":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["8d0c1d69778439d99fc635727129e99480e64f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8d0c1d69778439d99fc635727129e99480e64f06":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8d0c1d69778439d99fc635727129e99480e64f06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}