{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonBoundingBoxQueries#testBasics().mjava","commits":[{"id":"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a","date":1505850304,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonBoundingBoxQueries#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Basic test for 2d boxes */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // Shared meridian test (disjoint)\n    Document document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -20d, -180d, 20d, -100d));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, 0d, 14.096488952636719d, 10d, 20d));\n    writer.addDocument(document);\n\n    // intersects (contains, crosses)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -10.282592503353953d, -1d, 1d, 14.096488952636719d));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -1d, -11d, 1d, 1d));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -1d, 14.096488952636719d, 5d, 30d));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -5d, 0d, -1d, 14.096488952636719d));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(5, searcher.count(LatLonBoundingBox.newIntersectsQuery(FIELD_NAME,\n        -10.282592503353953d, 0.0d, 0.0d, 14.096488952636719d)));\n    assertEquals(1, searcher.count(LatLonBoundingBox.newWithinQuery(FIELD_NAME,\n        -10.282592503353953d, 0.0d, 0.0d, 14.096488952636719d)));\n    assertEquals(1, searcher.count(LatLonBoundingBox.newContainsQuery(FIELD_NAME,\n        -10.282592503353953d, 0.0d, 0.0d, 14.096488952636719d)));\n    assertEquals(4, searcher.count(LatLonBoundingBox.newCrossesQuery(FIELD_NAME,\n        -10.282592503353953d, 0.0d, 0.0d, 14.096488952636719d)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonBoundingBoxQueries#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Basic test for 2d boxes */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // Shared meridian test (disjoint)\n    Document document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -20d, -180d, 20d, -100d));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, 0d, 14.096488952636719d, 10d, 20d));\n    writer.addDocument(document);\n\n    // intersects (contains, crosses)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -10.282592503353953d, -1d, 1d, 14.096488952636719d));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -1d, -11d, 1d, 1d));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -1d, 14.096488952636719d, 5d, 30d));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new LatLonBoundingBox(FIELD_NAME, -5d, 0d, -1d, 14.096488952636719d));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(5, searcher.count(LatLonBoundingBox.newIntersectsQuery(FIELD_NAME,\n        -10.282592503353953d, 0.0d, 0.0d, 14.096488952636719d)));\n    assertEquals(1, searcher.count(LatLonBoundingBox.newWithinQuery(FIELD_NAME,\n        -10.282592503353953d, 0.0d, 0.0d, 14.096488952636719d)));\n    assertEquals(1, searcher.count(LatLonBoundingBox.newContainsQuery(FIELD_NAME,\n        -10.282592503353953d, 0.0d, 0.0d, 14.096488952636719d)));\n    assertEquals(4, searcher.count(LatLonBoundingBox.newCrossesQuery(FIELD_NAME,\n        -10.282592503353953d, 0.0d, 0.0d, 14.096488952636719d)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"]},"commit2Childs":{"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6240b74b884c5587f2a4062dd27d6c32bf228889","bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"],"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}