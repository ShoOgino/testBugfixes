{"path":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void assertUpdateResponse(UpdateResponse rsp) {\n    // use of TolerantUpdateProcessor can cause non-thrown \"errors\" that we need to check for\n    List errors = (List) rsp.getResponseHeader().get(\"errors\");\n    assertTrue(\"Expected no errors: \" + errors,errors == null || errors.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void assertUpdateResponse(UpdateResponse rsp) {\n    // use of TolerantUpdateProcessor can cause non-thrown \"errors\" that we need to check for\n    List errors = (List) rsp.getResponseHeader().get(\"errors\");\n    assertTrue(\"Expected no errors: \" + errors,errors == null || errors.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","sourceNew":"  void assertUpdateResponse(UpdateResponse rsp) {\n    // use of TolerantUpdateProcessor can cause non-thrown \"errors\" that we need to check for\n    List errors = (List) rsp.getResponseHeader().get(\"errors\");\n    assertTrue(\"Expected no errors: \" + errors,errors == null || errors.isEmpty());\n  }\n\n","sourceOld":"  private void assertUpdateResponse(UpdateResponse rsp) {\n    // use of TolerantUpdateProcessor can cause non-thrown \"errors\" that we need to check for\n    List errors = (List) rsp.getResponseHeader().get(\"errors\");\n    assertTrue(\"Expected no errors: \" + errors,errors == null || errors.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b627755385655c7cd3fb296f17593658805cf4d5"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}