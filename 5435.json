{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","commits":[{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap, NormsProducer norms) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}