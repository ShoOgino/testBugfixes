{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","commits":[{"id":"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a","date":1461845562,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Node#traverse(EdgeIterator,TraverseComparator,double,double).mjava","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      // Since there is one distinct value we are looking for, we can just do a straight descent through the nodes.\n      Node currentNode = rootNode;\n      while (currentNode != null) {\n        if (value < currentNode.minimumValue) {\n          currentNode = currentNode.lesser;\n        } else if (value > currentNode.maximumValue) {\n          currentNode = currentNode.greater;\n        } else {\n          // We're within the bounds of the node.  Call the iterator, and descend\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.within;\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean traverse(final EdgeIterator edgeIterator, final TraverseComparator edgeComparator, final double minValue, final double maxValue) {\n      Node currentNode = this;\n      while (currentNode != null) {\n        final int result = edgeComparator.compare(currentNode.edge, minValue, maxValue);\n        if (result < 0) {\n          currentNode = currentNode.lesser;\n        } else if (result > 0) {\n          currentNode = currentNode.greater;\n        } else {\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.overlaps;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43631d6552f924eb58c0b507e3e10215c53754f8","date":1461863675,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      //System.err.println(\"Traversing tree, value = \"+value);\n      // Since there is one distinct value we are looking for, we can just do a straight descent through the nodes.\n      Node currentNode = rootNode;\n      while (currentNode != null) {\n        if (value < currentNode.minimumValue) {\n          //System.err.println(\" value is less than \"+currentNode.minimumValue);\n          currentNode = currentNode.lesser;\n        } else if (value > currentNode.maximumValue) {\n          //System.err.println(\" value is greater than \"+currentNode.maximumValue);\n          currentNode = currentNode.greater;\n        } else {\n          //System.err.println(\" value within \"+currentNode.minimumValue+\" to \"+currentNode.maximumValue);\n          // We're within the bounds of the node.  Call the iterator, and descend\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.within;\n        }\n      }\n      //System.err.println(\"Done with tree\");\n      return true;\n    }\n\n","sourceOld":"    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      // Since there is one distinct value we are looking for, we can just do a straight descent through the nodes.\n      Node currentNode = rootNode;\n      while (currentNode != null) {\n        if (value < currentNode.minimumValue) {\n          currentNode = currentNode.lesser;\n        } else if (value > currentNode.maximumValue) {\n          currentNode = currentNode.greater;\n        } else {\n          // We're within the bounds of the node.  Call the iterator, and descend\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.within;\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","date":1461888019,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      //System.err.println(\"Traversing tree, value = \"+value);\n      // Since there is one distinct value we are looking for, we can just do a straight descent through the nodes.\n      Node currentNode = rootNode;\n      while (currentNode != null) {\n        if (value < currentNode.minimumValue) {\n          //System.err.println(\" value is less than \"+currentNode.minimumValue);\n          currentNode = currentNode.lesser;\n        } else if (value > currentNode.maximumValue) {\n          //System.err.println(\" value is greater than \"+currentNode.maximumValue);\n          currentNode = currentNode.greater;\n        } else {\n          //System.err.println(\" value within \"+currentNode.minimumValue+\" to \"+currentNode.maximumValue);\n          // We're within the bounds of the node.  Call the iterator, and descend\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.within;\n        }\n      }\n      //System.err.println(\"Done with tree\");\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"083674ea80108c4053d9526cdef6f77b2494e551","date":1462313169,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      return traverse(edgeIterator, value, value);\n    }\n\n","sourceOld":"    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      //System.err.println(\"Traversing tree, value = \"+value);\n      // Since there is one distinct value we are looking for, we can just do a straight descent through the nodes.\n      Node currentNode = rootNode;\n      while (currentNode != null) {\n        if (value < currentNode.minimumValue) {\n          //System.err.println(\" value is less than \"+currentNode.minimumValue);\n          currentNode = currentNode.lesser;\n        } else if (value > currentNode.maximumValue) {\n          //System.err.println(\" value is greater than \"+currentNode.maximumValue);\n          currentNode = currentNode.greater;\n        } else {\n          //System.err.println(\" value within \"+currentNode.minimumValue+\" to \"+currentNode.maximumValue);\n          // We're within the bounds of the node.  Call the iterator, and descend\n          if (!edgeIterator.matches(currentNode.edge)) {\n            return false;\n          }\n          currentNode = currentNode.within;\n        }\n      }\n      //System.err.println(\"Done with tree\");\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverse(EdgeIterator,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      return traverse(edgeIterator, value, value);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"083674ea80108c4053d9526cdef6f77b2494e551":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"43631d6552f924eb58c0b507e3e10215c53754f8":["5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43631d6552f924eb58c0b507e3e10215c53754f8"],"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["083674ea80108c4053d9526cdef6f77b2494e551"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","083674ea80108c4053d9526cdef6f77b2494e551"]},"commit2Childs":{"083674ea80108c4053d9526cdef6f77b2494e551":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"43631d6552f924eb58c0b507e3e10215c53754f8":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["083674ea80108c4053d9526cdef6f77b2494e551"],"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a":["43631d6552f924eb58c0b507e3e10215c53754f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}