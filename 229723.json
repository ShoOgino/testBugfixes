{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#blockUntilFinished().mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#blockUntilFinished().mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void blockUntilFinished() {\n    lock = new CountDownLatch(1);\n    try {\n\n      waitForEmptyQueue();\n      interruptRunnerThreadsPolling();\n\n      synchronized (runners) {\n\n        // NOTE: if the executor is shut down, runners may never become empty (a scheduled task may never be run,\n        // which means it would never remove itself from the runners list. This is why we don't wait forever\n        // and periodically check if the scheduler is shutting down.\n        int loopCount = 0;\n        while (!runners.isEmpty()) {\n\n          if (scheduler.isShutdown())\n            break;\n\n          loopCount++;\n\n          // Need to check if the queue is empty before really considering this is finished (SOLR-4260)\n          int queueSize = queue.size();\n          if (queueSize > 0 && runners.isEmpty()) {\n            // TODO: can this still happen?\n            log.warn(\"No more runners, but queue still has \" +\n                queueSize + \" adding more runners to process remaining requests on queue\");\n            addRunner();\n          }\n\n          interruptRunnerThreadsPolling();\n\n          // try to avoid the worst case wait timeout\n          // without bad spin\n          int timeout;\n          if (loopCount < 3) {\n            timeout = 10;\n          } else if (loopCount < 10) {\n            timeout = 25;\n          } else {\n            timeout = 250;\n          }\n\n          try {\n            runners.wait(timeout);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n          }\n        }\n      }\n    } finally {\n      lock.countDown();\n      lock = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd332226a93e244bd33f35c03128eb09cbf3c88","date":1570651010,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#blockUntilFinished().mjava","sourceNew":null,"sourceOld":"  public synchronized void blockUntilFinished() {\n    lock = new CountDownLatch(1);\n    try {\n\n      waitForEmptyQueue();\n      interruptRunnerThreadsPolling();\n\n      synchronized (runners) {\n\n        // NOTE: if the executor is shut down, runners may never become empty (a scheduled task may never be run,\n        // which means it would never remove itself from the runners list. This is why we don't wait forever\n        // and periodically check if the scheduler is shutting down.\n        int loopCount = 0;\n        while (!runners.isEmpty()) {\n\n          if (scheduler.isShutdown())\n            break;\n\n          loopCount++;\n\n          // Need to check if the queue is empty before really considering this is finished (SOLR-4260)\n          int queueSize = queue.size();\n          if (queueSize > 0 && runners.isEmpty()) {\n            // TODO: can this still happen?\n            log.warn(\"No more runners, but queue still has \" +\n                queueSize + \" adding more runners to process remaining requests on queue\");\n            addRunner();\n          }\n\n          interruptRunnerThreadsPolling();\n\n          // try to avoid the worst case wait timeout\n          // without bad spin\n          int timeout;\n          if (loopCount < 3) {\n            timeout = 10;\n          } else if (loopCount < 10) {\n            timeout = 25;\n          } else {\n            timeout = 250;\n          }\n\n          try {\n            runners.wait(timeout);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n          }\n        }\n      }\n    } finally {\n      lock.countDown();\n      lock = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClient#blockUntilFinished().mjava","sourceNew":null,"sourceOld":"  public synchronized void blockUntilFinished() {\n    lock = new CountDownLatch(1);\n    try {\n\n      waitForEmptyQueue();\n      interruptRunnerThreadsPolling();\n\n      synchronized (runners) {\n\n        // NOTE: if the executor is shut down, runners may never become empty (a scheduled task may never be run,\n        // which means it would never remove itself from the runners list. This is why we don't wait forever\n        // and periodically check if the scheduler is shutting down.\n        int loopCount = 0;\n        while (!runners.isEmpty()) {\n\n          if (scheduler.isShutdown())\n            break;\n\n          loopCount++;\n\n          // Need to check if the queue is empty before really considering this is finished (SOLR-4260)\n          int queueSize = queue.size();\n          if (queueSize > 0 && runners.isEmpty()) {\n            // TODO: can this still happen?\n            log.warn(\"No more runners, but queue still has \" +\n                queueSize + \" adding more runners to process remaining requests on queue\");\n            addRunner();\n          }\n\n          interruptRunnerThreadsPolling();\n\n          // try to avoid the worst case wait timeout\n          // without bad spin\n          int timeout;\n          if (loopCount < 3) {\n            timeout = 10;\n          } else if (loopCount < 10) {\n            timeout = 25;\n          } else {\n            timeout = 250;\n          }\n\n          try {\n            runners.wait(timeout);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n          }\n        }\n      }\n    } finally {\n      lock.countDown();\n      lock = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fd332226a93e244bd33f35c03128eb09cbf3c88":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fd332226a93e244bd33f35c03128eb09cbf3c88"],"b0b597c65628ca9e73913a07e81691f8229bae35":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","2fd332226a93e244bd33f35c03128eb09cbf3c88"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["2fd332226a93e244bd33f35c03128eb09cbf3c88","b0b597c65628ca9e73913a07e81691f8229bae35"],"2fd332226a93e244bd33f35c03128eb09cbf3c88":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}