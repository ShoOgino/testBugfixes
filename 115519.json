{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,int).mjava","commits":[{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    version = VERSION_CURRENT;\n    bytesArray = null;\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,int).mjava","sourceNew":null,"sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    version = VERSION_CURRENT;\n    bytesArray = null;\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,int).mjava","sourceNew":null,"sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    version = VERSION_CURRENT;\n    bytesArray = null;\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6244579a467d5f2673ac98265d74bddbea1a8114":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["1abb939fb41b2fe4f89fd518f3da288c0213341d","6244579a467d5f2673ac98265d74bddbea1a8114"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6244579a467d5f2673ac98265d74bddbea1a8114"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}