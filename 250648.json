{"path":"solr/core/src/java/org/apache/solr/query/SolrRangeQuery#createDocSet(SolrIndexSearcher,long).mjava","commits":[{"id":"16b25963ad38ed289ebf0f7af31269fa1ce80a11","date":1442083896,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/query/SolrRangeQuery#createDocSet(SolrIndexSearcher,long).mjava","pathOld":"/dev/null","sourceNew":"  private DocSet createDocSet(SolrIndexSearcher searcher, long cost) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    BitDocSet liveDocs = searcher.getLiveDocs();\n    FixedBitSet liveBits = liveDocs.size() == maxDoc ? null : liveDocs.getBits();\n\n    DocSetBuilder builder = new DocSetBuilder(maxDoc, cost);\n\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n\n    int maxTermsPerSegment = 0;\n    for (LeafReaderContext ctx : leaves) {\n      TermsEnum te = getTermsEnum(ctx);\n      int termsVisited = builder.add(te, ctx.docBase);\n      maxTermsPerSegment = Math.max(maxTermsPerSegment, termsVisited);\n    }\n\n    return maxTermsPerSegment <= 1 ? builder.buildUniqueInOrder(liveBits) : builder.build(liveBits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/query/SolrRangeQuery#createDocSet(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/query/SolrRangeQuery#createDocSet(SolrIndexSearcher,long).mjava","sourceNew":"  private DocSet createDocSet(SolrIndexSearcher searcher, long cost) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    BitDocSet liveDocs = searcher.getLiveDocs();\n    FixedBitSet liveBits = liveDocs.size() == maxDoc ? null : liveDocs.getBits();\n\n    DocSetBuilder builder = new DocSetBuilder(maxDoc, cost);\n\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n\n    int maxTermsPerSegment = 0;\n    for (LeafReaderContext ctx : leaves) {\n      TermsEnum te = getTermsEnum(ctx);\n      int termsVisited = builder.add(te, ctx.docBase);\n      maxTermsPerSegment = Math.max(maxTermsPerSegment, termsVisited);\n    }\n\n    DocSet set =  maxTermsPerSegment <= 1 ? builder.buildUniqueInOrder(liveBits) : builder.build(liveBits);\n    return DocSetUtil.getDocSet(set, searcher);\n  }\n\n","sourceOld":"  private DocSet createDocSet(SolrIndexSearcher searcher, long cost) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    BitDocSet liveDocs = searcher.getLiveDocs();\n    FixedBitSet liveBits = liveDocs.size() == maxDoc ? null : liveDocs.getBits();\n\n    DocSetBuilder builder = new DocSetBuilder(maxDoc, cost);\n\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n\n    int maxTermsPerSegment = 0;\n    for (LeafReaderContext ctx : leaves) {\n      TermsEnum te = getTermsEnum(ctx);\n      int termsVisited = builder.add(te, ctx.docBase);\n      maxTermsPerSegment = Math.max(maxTermsPerSegment, termsVisited);\n    }\n\n    return maxTermsPerSegment <= 1 ? builder.buildUniqueInOrder(liveBits) : builder.build(liveBits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/query/SolrRangeQuery#createDocSet(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/query/SolrRangeQuery#createDocSet(SolrIndexSearcher,long).mjava","sourceNew":"  private DocSet createDocSet(SolrIndexSearcher searcher, long cost) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    BitDocSet liveDocs = searcher.getLiveDocs();\n    FixedBitSet liveBits = liveDocs.size() == maxDoc ? null : liveDocs.getBits();\n\n    DocSetBuilder builder = new DocSetBuilder(maxDoc, cost);\n\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n\n    int maxTermsPerSegment = 0;\n    for (LeafReaderContext ctx : leaves) {\n      TermsEnum te = getTermsEnum(ctx);\n      int termsVisited = builder.add(te, ctx.docBase);\n      maxTermsPerSegment = Math.max(maxTermsPerSegment, termsVisited);\n    }\n\n    DocSet set =  maxTermsPerSegment <= 1 ? builder.buildUniqueInOrder(liveBits) : builder.build(liveBits);\n    return DocSetUtil.getDocSet(set, searcher);\n  }\n\n","sourceOld":"  private DocSet createDocSet(SolrIndexSearcher searcher, long cost) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    BitDocSet liveDocs = searcher.getLiveDocs();\n    FixedBitSet liveBits = liveDocs.size() == maxDoc ? null : liveDocs.getBits();\n\n    DocSetBuilder builder = new DocSetBuilder(maxDoc, cost);\n\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n\n    int maxTermsPerSegment = 0;\n    for (LeafReaderContext ctx : leaves) {\n      TermsEnum te = getTermsEnum(ctx);\n      int termsVisited = builder.add(te, ctx.docBase);\n      maxTermsPerSegment = Math.max(maxTermsPerSegment, termsVisited);\n    }\n\n    return maxTermsPerSegment <= 1 ? builder.buildUniqueInOrder(liveBits) : builder.build(liveBits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/query/SolrRangeQuery#createDocSet(SolrIndexSearcher,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/query/SolrRangeQuery#createDocSet(SolrIndexSearcher,long).mjava","sourceNew":"  private DocSet createDocSet(SolrIndexSearcher searcher, long cost) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    BitDocSet liveDocs = searcher.getLiveDocSet();\n    FixedBitSet liveBits = liveDocs.size() == maxDoc ? null : liveDocs.getBits();\n\n    DocSetBuilder builder = new DocSetBuilder(maxDoc, cost);\n\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n\n    int maxTermsPerSegment = 0;\n    for (LeafReaderContext ctx : leaves) {\n      TermsEnum te = getTermsEnum(ctx);\n      int termsVisited = builder.add(te, ctx.docBase);\n      maxTermsPerSegment = Math.max(maxTermsPerSegment, termsVisited);\n    }\n\n    DocSet set =  maxTermsPerSegment <= 1 ? builder.buildUniqueInOrder(liveBits) : builder.build(liveBits);\n    return DocSetUtil.getDocSet(set, searcher);\n  }\n\n","sourceOld":"  private DocSet createDocSet(SolrIndexSearcher searcher, long cost) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    BitDocSet liveDocs = searcher.getLiveDocs();\n    FixedBitSet liveBits = liveDocs.size() == maxDoc ? null : liveDocs.getBits();\n\n    DocSetBuilder builder = new DocSetBuilder(maxDoc, cost);\n\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n\n    int maxTermsPerSegment = 0;\n    for (LeafReaderContext ctx : leaves) {\n      TermsEnum te = getTermsEnum(ctx);\n      int termsVisited = builder.add(te, ctx.docBase);\n      maxTermsPerSegment = Math.max(maxTermsPerSegment, termsVisited);\n    }\n\n    DocSet set =  maxTermsPerSegment <= 1 ? builder.buildUniqueInOrder(liveBits) : builder.build(liveBits);\n    return DocSetUtil.getDocSet(set, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["16b25963ad38ed289ebf0f7af31269fa1ce80a11","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"]},"commit2Childs":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}