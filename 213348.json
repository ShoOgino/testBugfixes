{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","commits":[{"id":"edbc02bad7b5b2634d0cf080d93d96fc03b901f8","date":1246037214,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", SimpleAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/DocMakerTest#doTestIndexProperties(boolean,boolean,int).mjava","sourceNew":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", SimpleAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doTestIndexProperties(boolean setIndexProps,\n      boolean indexPropsVal, int numExpectedResults) throws Exception {\n    Properties props = new Properties();\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", SimpleAnalyzer.class.getName());\n    props.setProperty(\"content.source\", OneDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    if (setIndexProps) {\n      props.setProperty(\"doc.index.props\", Boolean.toString(indexPropsVal));\n    }\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, getName(), null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"key\", \"value\")), 10);\n    assertEquals(numExpectedResults, td.totalHits);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edbc02bad7b5b2634d0cf080d93d96fc03b901f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["edbc02bad7b5b2634d0cf080d93d96fc03b901f8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edbc02bad7b5b2634d0cf080d93d96fc03b901f8"],"edbc02bad7b5b2634d0cf080d93d96fc03b901f8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}