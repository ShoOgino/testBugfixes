{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#compareTo(SearcherTracker).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#compareTo(SearcherTracker).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#compareTo(SearcherTracker).mjava","sourceNew":"    // Newer searchers are sort before older ones:\n    @Override\n    public int compareTo(SearcherTracker other) {\n      // Be defensive: cannot subtract since it could\n      // technically overflow long, though, we'd never hit\n      // that in practice:\n      if (recordTimeSec < other.recordTimeSec) {\n        return 1;\n      } else if (other.recordTimeSec < recordTimeSec) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","sourceOld":"    // Newer searchers are sort before older ones:\n    @Override\n    public int compareTo(SearcherTracker other) {\n      // Be defensive: cannot subtract since it could\n      // technically overflow long, though, we'd never hit\n      // that in practice:\n      if (recordTimeSec < other.recordTimeSec) {\n        return 1;\n      } else if (other.recordTimeSec < recordTimeSec) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47da30f6e362ae055711fad41cdcba60b9dee8c6","date":1363626629,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#compareTo(SearcherTracker).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#compareTo(SearcherTracker).mjava","sourceNew":"    // Newer searchers are sort before older ones:\n    @Override\n    public int compareTo(SearcherTracker other) {\n      return Double.compare(other.recordTimeSec, recordTimeSec);\n    }\n\n","sourceOld":"    // Newer searchers are sort before older ones:\n    @Override\n    public int compareTo(SearcherTracker other) {\n      // Be defensive: cannot subtract since it could\n      // technically overflow long, though, we'd never hit\n      // that in practice:\n      if (recordTimeSec < other.recordTimeSec) {\n        return 1;\n      } else if (other.recordTimeSec < recordTimeSec) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47da30f6e362ae055711fad41cdcba60b9dee8c6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47da30f6e362ae055711fad41cdcba60b9dee8c6"]},"commit2Childs":{"47da30f6e362ae055711fad41cdcba60b9dee8c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}