{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float).mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,LeafSimScorer,boolean,float).mjava","sourceNew":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, LeafSimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersectIterators(Arrays.asList(iterators));\n    assert TwoPhaseIterator.unwrap(conjunction) == null;\n    this.matchCost = matchCost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float).mjava","sourceNew":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost, boolean captureLeadMatch) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    this.captureLeadMatch = captureLeadMatch;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","sourceOld":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float,boolean).mjava","sourceNew":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","sourceOld":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost, boolean captureLeadMatch) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    this.captureLeadMatch = captureLeadMatch;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float).mjava","sourceNew":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost, boolean captureLeadMatch) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    this.captureLeadMatch = captureLeadMatch;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","sourceOld":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["3b11b9d5eaf9707760ca5151530830a825197023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}