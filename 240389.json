{"path":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","commits":[{"id":"42579622cc27f9908e64f29fa1130bfc28306009","date":1177874771,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  This is useful for pre-analyzed fields.\n   * The TokenStream is read only when the Document is added to the index,\n   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param tokenStream The TokenStream with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or tokenStream is <code>null</code>\n   */ \n  public Field(String name, TokenStream tokenStream, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (tokenStream == null)\n      throw new NullPointerException(\"tokenStream cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = tokenStream;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb38e9df66981cbc64d27be81176659de4823526","date":1245712006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  This is useful for pre-analyzed fields.\n   * The TokenStream is read only when the Document is added to the index,\n   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param tokenStream The TokenStream with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or tokenStream is <code>null</code>\n   */ \n  public Field(String name, TokenStream tokenStream, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (tokenStream == null)\n      throw new NullPointerException(\"tokenStream cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = null;\n    this.tokenStream = tokenStream;\n\n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  This is useful for pre-analyzed fields.\n   * The TokenStream is read only when the Document is added to the index,\n   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param tokenStream The TokenStream with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or tokenStream is <code>null</code>\n   */ \n  public Field(String name, TokenStream tokenStream, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (tokenStream == null)\n      throw new NullPointerException(\"tokenStream cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = tokenStream;\n    \n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf93f7a278746d4746fa3ebb3d53267b22fd040f","date":1249495506,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  This is useful for pre-analyzed fields.\n   * The TokenStream is read only when the Document is added to the index,\n   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param tokenStream The TokenStream with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or tokenStream is <code>null</code>\n   */ \n  public Field(String name, TokenStream tokenStream, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (tokenStream == null)\n      throw new NullPointerException(\"tokenStream cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = null;\n    this.tokenStream = tokenStream;\n\n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  This is useful for pre-analyzed fields.\n   * The TokenStream is read only when the Document is added to the index,\n   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param tokenStream The TokenStream with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or tokenStream is <code>null</code>\n   */ \n  public Field(String name, TokenStream tokenStream, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (tokenStream == null)\n      throw new NullPointerException(\"tokenStream cannot be null\");\n    \n    this.name = name.intern();        // field names are interned\n    this.fieldsData = null;\n    this.tokenStream = tokenStream;\n\n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","sourceNew":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  This is useful for pre-analyzed fields.\n   * The TokenStream is read only when the Document is added to the index,\n   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param tokenStream The TokenStream with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or tokenStream is <code>null</code>\n   */ \n  public Field(String name, TokenStream tokenStream, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (tokenStream == null)\n      throw new NullPointerException(\"tokenStream cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = null;\n    this.tokenStream = tokenStream;\n\n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  This is useful for pre-analyzed fields.\n   * The TokenStream is read only when the Document is added to the index,\n   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param tokenStream The TokenStream with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or tokenStream is <code>null</code>\n   */ \n  public Field(String name, TokenStream tokenStream, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (tokenStream == null)\n      throw new NullPointerException(\"tokenStream cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = null;\n    this.tokenStream = tokenStream;\n\n    this.isStored = false;\n    this.isCompressed = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,TokenStream,TermVector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a tokenized and indexed field that is not stored, optionally with \n   * storing term vectors.  This is useful for pre-analyzed fields.\n   * The TokenStream is read only when the Document is added to the index,\n   * i.e. you may not close the TokenStream until {@link IndexWriter#addDocument(Document)}\n   * has been called.\n   * \n   * @param name The name of the field\n   * @param tokenStream The TokenStream with the content\n   * @param termVector Whether term vector should be stored\n   * @throws NullPointerException if name or tokenStream is <code>null</code>\n   */ \n  public Field(String name, TokenStream tokenStream, TermVector termVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (tokenStream == null)\n      throw new NullPointerException(\"tokenStream cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    this.fieldsData = null;\n    this.tokenStream = tokenStream;\n\n    this.isStored = false;\n    \n    this.isIndexed = true;\n    this.isTokenized = true;\n    \n    this.isBinary = false;\n    \n    setStoreTermVector(termVector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["cb38e9df66981cbc64d27be81176659de4823526"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb38e9df66981cbc64d27be81176659de4823526":["42579622cc27f9908e64f29fa1130bfc28306009"],"42579622cc27f9908e64f29fa1130bfc28306009":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0c804f7aa477229414a7e12882af490c241f64d":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e0c804f7aa477229414a7e12882af490c241f64d"]},"commit2Childs":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["e0c804f7aa477229414a7e12882af490c241f64d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42579622cc27f9908e64f29fa1130bfc28306009"],"cb38e9df66981cbc64d27be81176659de4823526":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"42579622cc27f9908e64f29fa1130bfc28306009":["cb38e9df66981cbc64d27be81176659de4823526"],"e0c804f7aa477229414a7e12882af490c241f64d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}