{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","commits":[{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      assertEquals(info, leftReader.hasNorms(field), rightReader.hasNorms(field));\n      if (leftReader.hasNorms(field)) {\n        byte leftNorms[] = MultiNorms.norms(leftReader, field);\n        byte rightNorms[] = MultiNorms.norms(rightReader, field);\n        assertArrayEquals(info, leftNorms, rightNorms);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","date":1325789720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      assertEquals(info, leftReader.hasNorms(field), rightReader.hasNorms(field));\n      if (leftReader.hasNorms(field)) {\n        DocValues leftNorms = MultiDocValues.getNormDocValues(leftReader, field);\n        DocValues rightNorms = MultiDocValues.getNormDocValues(rightReader, field);\n        assertDocValues(leftNorms, rightNorms);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      assertEquals(info, leftReader.hasNorms(field), rightReader.hasNorms(field));\n      if (leftReader.hasNorms(field)) {\n        byte leftNorms[] = MultiNorms.norms(leftReader, field);\n        byte rightNorms[] = MultiNorms.norms(rightReader, field);\n        assertArrayEquals(info, leftNorms, rightNorms);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      DocValues leftNorms = MultiDocValues.getNormDocValues(leftReader, field);\n      DocValues rightNorms = MultiDocValues.getNormDocValues(rightReader, field);\n      if (leftNorms != null && rightNorms != null) {\n        assertDocValues(leftNorms, rightNorms);\n      } else {\n        assertNull(leftNorms);\n        assertNull(rightNorms);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      assertEquals(info, leftReader.hasNorms(field), rightReader.hasNorms(field));\n      if (leftReader.hasNorms(field)) {\n        DocValues leftNorms = MultiDocValues.getNormDocValues(leftReader, field);\n        DocValues rightNorms = MultiDocValues.getNormDocValues(rightReader, field);\n        assertDocValues(leftNorms, rightNorms);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      DocValues leftNorms = MultiDocValues.getNormDocValues(leftReader, field);\n      DocValues rightNorms = MultiDocValues.getNormDocValues(rightReader, field);\n      if (leftNorms != null && rightNorms != null) {\n        assertDocValues(leftNorms, rightNorms);\n      } else {\n        assertNull(leftNorms);\n        assertNull(rightNorms);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      assertEquals(info, leftReader.hasNorms(field), rightReader.hasNorms(field));\n      if (leftReader.hasNorms(field)) {\n        DocValues leftNorms = MultiDocValues.getNormDocValues(leftReader, field);\n        DocValues rightNorms = MultiDocValues.getNormDocValues(rightReader, field);\n        assertDocValues(leftNorms, rightNorms);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertNorms(IndexReader,IndexReader).mjava","sourceNew":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      DocValues leftNorms = MultiDocValues.getNormDocValues(leftReader, field);\n      DocValues rightNorms = MultiDocValues.getNormDocValues(rightReader, field);\n      if (leftNorms != null && rightNorms != null) {\n        assertDocValues(leftNorms, rightNorms);\n      } else {\n        assertNull(leftNorms);\n        assertNull(rightNorms);\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * checks that norms are the same across all fields \n   */\n  public void assertNorms(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    Fields leftFields = MultiFields.getFields(leftReader);\n    Fields rightFields = MultiFields.getFields(rightReader);\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    \n    FieldsEnum fieldsEnum = leftFields.iterator();\n    String field;\n    while ((field = fieldsEnum.next()) != null) {\n      DocValues leftNorms = MultiDocValues.getNormDocValues(leftReader, field);\n      DocValues rightNorms = MultiDocValues.getNormDocValues(rightReader, field);\n      if (leftNorms != null && rightNorms != null) {\n        assertDocValues(leftNorms, rightNorms);\n      } else {\n        assertNull(leftNorms);\n        assertNull(rightNorms);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","868186558eb3a854ce7e720a52bb445795d54910"],"868186558eb3a854ce7e720a52bb445795d54910":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}