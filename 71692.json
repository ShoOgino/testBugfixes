{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#testPivotFacetRangeAndQuery().mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#testPivotFacetRangeAndQuery().mjava","pathOld":"/dev/null","sourceNew":"  private void testPivotFacetRangeAndQuery() throws Exception {\n    SolrParams params = params(\"q\", \"*:*\",\n        \"rows\", \"0\",\n        \"facet\", \"true\",\n        \"stats\", \"true\",\n        \"facet.pivot\", \"{!range=s1 query=s2 stats=s3}place_t,company_t\",\n        \"facet.range\", \"{!tag=s1 key=price}price_ti\",\n        \"facet.query\", \"{!tag=s2 key=highPrice}price_ti:[25 TO 100]\",\n        \"facet.query\", \"{!tag=s2 key=lowPrice}price_ti:[0 TO 20]\",\n        \"stats.field\", (\"{!tag=s3 key=avg_price}price_ti\"),\n        \"facet.range.start\", \"0\",\n        \"facet.range.end\", \"100\",\n        \"facet.range.gap\", \"20\",\n        FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT,\n        FacetParams.FACET_LIMIT, \"2\");\n\n    UnorderedEqualityArrayList<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<>();\n    UnorderedEqualityArrayList<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null, createExpectedQCount(new String[]{\"highPrice\",\n        \"lowPrice\"}, new int[]{1, 2}), createExpectedRange(\"price\", 0, 100, 20, 2, 1, 0,\n        0, 0)));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null, createExpectedQCount(new String[]{\"highPrice\",\n        \"lowPrice\"}, new int[]{1, 2}), createExpectedRange(\"price\", 0, 100, 20, 2, 1, 0,\n        0, 0)));\n    UnorderedEqualityArrayList<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null, createExpectedQCount(\n        new String[]{\"highPrice\", \"lowPrice\"}, new int[]{2, 0}), createExpectedRange(\"price\", 0, 100, 20, 0, 2, 0, 0,\n        0)));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        3, null, createExpectedQCount(new String[]{\"highPrice\",\n        \"lowPrice\"}, new int[]{2, 0}), createExpectedRange(\"price\", 0, 100, 20, 0, 2, 0,\n        0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots, createExpectedQCount(new String[]{\n        \"highPrice\", \"lowPrice\"}, new int[]{1, 2}), createExpectedRange(\"price\", 0, 100,\n        20, 2, 1, 0, 0, 0)));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots, createExpectedQCount(new String[]{\n        \"highPrice\", \"lowPrice\"}, new int[]{3, 0}), createExpectedRange(\"price\", 0, 100,\n        20, 0, 3, 0, 0, 0)));\n\n    QueryResponse rsp = query(params);\n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    assertEquals(expectedPlacePivots, placePivots);\n\n    PivotField dublinPivotField = placePivots.get(0);\n    assertEquals(\"dublin\", dublinPivotField.getValue());\n    assertEquals(4, dublinPivotField.getCount());\n\n    PivotField microsoftPivotField = dublinPivotField.getPivot().get(0);\n    assertEquals(\"microsoft\", microsoftPivotField.getValue());\n    assertEquals(4, microsoftPivotField.getCount());\n\n    FieldStatsInfo dublinMicrosoftStatsInfo = microsoftPivotField.getFieldStatsInfo().get(\"avg_price\");\n    assertEquals(21.0, (double) dublinMicrosoftStatsInfo.getMean(), 0.1E-7);\n    assertEquals(15.0, dublinMicrosoftStatsInfo.getMin());\n    assertEquals(29.0, dublinMicrosoftStatsInfo.getMax());\n    assertEquals(3, (long) dublinMicrosoftStatsInfo.getCount());\n    assertEquals(1, (long) dublinMicrosoftStatsInfo.getMissing());\n    assertEquals(63.0, dublinMicrosoftStatsInfo.getSum());\n    assertEquals(1427.0, dublinMicrosoftStatsInfo.getSumOfSquares(), 0.1E-7);\n    assertEquals(7.211102550927978, dublinMicrosoftStatsInfo.getStddev(), 0.1E-7);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}