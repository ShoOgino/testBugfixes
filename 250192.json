{"path":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#testPrefixQueries().mjava","commits":[{"id":"ee9efffeff762194ca606ff91a43e2f6f56a430f","date":1390409407,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#testPrefixQueries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrefixQueries() throws Exception {\n    createIndex(100);\n    assertQ(req(\"fl\", \"id\", \"q\", \"*:*\"), \"//*[@numFound='100']\");\n\n    // Test that prefix query actually transforms foo <-> bar.\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:foo*\"), \"//*[@numFound='\" + counts[1] + \"']\");\n\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:bar*\"), \"//*[@numFound='\" + counts[0] + \"']\");\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:spam*\"), \"//*[@numFound='\" + otherCounts + \"']\");\n\n    assertQ(req(\"q\", \"intfield:2*\"), \"//*[@numFound='11']\"); //2 and the 10 in twenties\n\n    //Custom field should query for the range [2,MAX_INT)\n    assertQ(req(\"q\", \"int_prefix_as_range:2*\"),\"//*[@numFound='98']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#testPrefixQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#testPrefixQueries().mjava","sourceNew":"  @Test\n  public void testPrefixQueries() throws Exception {\n    createIndex(100);\n    assertQ(req(\"fl\", \"id\", \"q\", \"*:*\"), \"//*[@numFound='100']\");\n\n    // Test that prefix query actually transforms foo <-> bar.\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:foo*\"), \"//*[@numFound='\" + counts[1] + \"']\");\n\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:bar*\"), \"//*[@numFound='\" + counts[0] + \"']\");\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:spam*\"), \"//*[@numFound='\" + otherCounts + \"']\");\n\n    //Custom field should query for the range [2,MAX_INT)\n    assertQ(req(\"q\", \"int_prefix_as_range:2*\"),\"//*[@numFound='98']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testPrefixQueries() throws Exception {\n    createIndex(100);\n    assertQ(req(\"fl\", \"id\", \"q\", \"*:*\"), \"//*[@numFound='100']\");\n\n    // Test that prefix query actually transforms foo <-> bar.\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:foo*\"), \"//*[@numFound='\" + counts[1] + \"']\");\n\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:bar*\"), \"//*[@numFound='\" + counts[0] + \"']\");\n    assertQ(req(\"q\", \"swap_foo_bar_in_prefix_query:spam*\"), \"//*[@numFound='\" + otherCounts + \"']\");\n\n    assertQ(req(\"q\", \"intfield:2*\"), \"//*[@numFound='11']\"); //2 and the 10 in twenties\n\n    //Custom field should query for the range [2,MAX_INT)\n    assertQ(req(\"q\", \"int_prefix_as_range:2*\"),\"//*[@numFound='98']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee9efffeff762194ca606ff91a43e2f6f56a430f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"ee9efffeff762194ca606ff91a43e2f6f56a430f":["2106271e380c198349e0f6eac0395bb462913fab"],"2106271e380c198349e0f6eac0395bb462913fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}