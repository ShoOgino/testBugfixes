{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","commits":[{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    int doc;\n    while ((doc = iter.nextDoc()) < numBits) {\n      flip(doc, doc + 1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00eb219951851904624cf9d5499bfe33a08afaeb","date":1413982250,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof FixedBitSetIterator && iter.docID() == -1) {\n      final FixedBitSetIterator fbs = (FixedBitSetIterator) iter;\n      xor(fbs.bits, fbs.numWords);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      fbs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    int doc;\n    while ((doc = iter.nextDoc()) < numBits) {\n      flip(doc, doc + 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null && iter.docID() == -1) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      xor(bits);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      iter.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof FixedBitSetIterator && iter.docID() == -1) {\n      final FixedBitSetIterator fbs = (FixedBitSetIterator) iter;\n      xor(fbs.bits, fbs.numWords);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      fbs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    assertUnpositioned(iter);\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      xor(bits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null && iter.docID() == -1) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      xor(bits);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      iter.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a377baed0108974b7a40d37dbf9de4cb8d15e8e","date":1503384043,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    checkUnpositioned(iter);\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      xor(bits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    assertUnpositioned(iter);\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      xor(bits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#xor(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    checkUnpositioned(iter);\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      xor(bits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place XOR of the bits provided by the iterator. */\n  public void xor(DocIdSetIterator iter) throws IOException {\n    assertUnpositioned(iter);\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      xor(bits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        flip(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","2a377baed0108974b7a40d37dbf9de4cb8d15e8e"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a377baed0108974b7a40d37dbf9de4cb8d15e8e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"00eb219951851904624cf9d5499bfe33a08afaeb":["3995f83351082af8ae83bb017e63c56818fc1568"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["00eb219951851904624cf9d5499bfe33a08afaeb"],"3995f83351082af8ae83bb017e63c56818fc1568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a377baed0108974b7a40d37dbf9de4cb8d15e8e"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","2a377baed0108974b7a40d37dbf9de4cb8d15e8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3995f83351082af8ae83bb017e63c56818fc1568"],"2a377baed0108974b7a40d37dbf9de4cb8d15e8e":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00eb219951851904624cf9d5499bfe33a08afaeb":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"3995f83351082af8ae83bb017e63c56818fc1568":["00eb219951851904624cf9d5499bfe33a08afaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}