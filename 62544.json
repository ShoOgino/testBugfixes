{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#flushFlags(int,int[]).mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#flushFlags(int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void flushFlags(int totalFields, int[] fieldNums) throws IOException {\n    // check if fields always have the same flags\n    boolean nonChangingFlags = true;\n    int[] fieldFlags = new int[fieldNums.length];\n    Arrays.fill(fieldFlags, -1);\n    outer:\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        final int fieldNumOff = Arrays.binarySearch(fieldNums, fd.fieldNum);\n        assert fieldNumOff >= 0;\n        if (fieldFlags[fieldNumOff] == -1) {\n          fieldFlags[fieldNumOff] = fd.flags;\n        } else if (fieldFlags[fieldNumOff] != fd.flags) {\n          nonChangingFlags = false;\n          break outer;\n        }\n      }\n    }\n\n    if (nonChangingFlags) {\n      // write one flag per field num\n      vectorsStream.writeVInt(0);\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldFlags.length, FLAGS_BITS, 1);\n      for (int flags : fieldFlags) {\n        assert flags >= 0;\n        writer.add(flags);\n      }\n      assert writer.ord() == fieldFlags.length - 1;\n      writer.finish();\n    } else {\n      // write one flag for every field instance\n      vectorsStream.writeVInt(1);\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, totalFields, FLAGS_BITS, 1);\n      for (DocData dd : pendingDocs) {\n        for (FieldData fd : dd.fields) {\n          writer.add(fd.flags);\n        }\n      }\n      assert writer.ord() == totalFields - 1;\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#flushFlags(int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void flushFlags(int totalFields, int[] fieldNums) throws IOException {\n    // check if fields always have the same flags\n    boolean nonChangingFlags = true;\n    int[] fieldFlags = new int[fieldNums.length];\n    Arrays.fill(fieldFlags, -1);\n    outer:\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        final int fieldNumOff = Arrays.binarySearch(fieldNums, fd.fieldNum);\n        assert fieldNumOff >= 0;\n        if (fieldFlags[fieldNumOff] == -1) {\n          fieldFlags[fieldNumOff] = fd.flags;\n        } else if (fieldFlags[fieldNumOff] != fd.flags) {\n          nonChangingFlags = false;\n          break outer;\n        }\n      }\n    }\n\n    if (nonChangingFlags) {\n      // write one flag per field num\n      vectorsStream.writeVInt(0);\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldFlags.length, FLAGS_BITS, 1);\n      for (int flags : fieldFlags) {\n        assert flags >= 0;\n        writer.add(flags);\n      }\n      assert writer.ord() == fieldFlags.length - 1;\n      writer.finish();\n    } else {\n      // write one flag for every field instance\n      vectorsStream.writeVInt(1);\n      final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, totalFields, FLAGS_BITS, 1);\n      for (DocData dd : pendingDocs) {\n        for (FieldData fd : dd.fields) {\n          writer.add(fd.flags);\n        }\n      }\n      assert writer.ord() == totalFields - 1;\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eda61b1e90b490cc5837200e04c02639a0d272c7"]},"commit2Childs":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}