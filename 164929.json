{"path":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return throttledOutput == null ? io : throttledOutput.newFromDelegate(io);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return throttledOutput == null ? io : throttledOutput.newFromDelegate(io);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return throttledOutput == null ? io : throttledOutput.newFromDelegate(io);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf46d950a2020ee31dbae60879a0b0a519224524","date":1305045957,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return throttledOutput == null ? io : throttledOutput.newFromDelegate(io);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return throttledOutput == null ? io : throttledOutput.newFromDelegate(io);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    return io;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    openFileHandles.put(io, new RuntimeException(\"unclosed IndexOutput\"));\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    // nocommit - randomize the IOContext here?\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, context), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, LuceneTestCase.newIOContext(randomState)), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name, LuceneTestCase.newIOContext(randomState)), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    maybeYield();\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    synchronized(this) {\n      if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n        throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    }\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    \n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    \n    if (delegate instanceof RAMDirectory) {\n      RAMDirectory ramdir = (RAMDirectory) delegate;\n      RAMFile file = new RAMFile(ramdir);\n      RAMFile existing = ramdir.fileMap.get(name);\n    \n      // Enforce write once:\n      if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n        throw new IOException(\"file \" + name + \" already exists\");\n      else {\n        if (existing!=null) {\n          ramdir.sizeInBytes.getAndAdd(-existing.sizeInBytes);\n          existing.directory = null;\n        }\n        ramdir.fileMap.put(name, file);\n      }\n    }\n    \n    //System.out.println(Thread.currentThread().getName() + \": MDW: create \" + name);\n    IndexOutput io = new MockIndexOutputWrapper(this, delegate.createOutput(name), name);\n    addFileHandle(io, name, false);\n    openFilesForWrite.add(name);\n    \n    // throttling REALLY slows down tests, so don't do it very often for SOMETIMES.\n    if (throttling == Throttling.ALWAYS || \n        (throttling == Throttling.SOMETIMES && randomState.nextInt(50) == 0)) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: throttling indexOutput\");\n      }\n      return throttledOutput.newFromDelegate(io);\n    } else {\n      return io;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"efb7a19703a037c29e30440260d393500febc1f4":["cf46d950a2020ee31dbae60879a0b0a519224524"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["efb7a19703a037c29e30440260d393500febc1f4"],"cf46d950a2020ee31dbae60879a0b0a519224524":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","cf46d950a2020ee31dbae60879a0b0a519224524"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cf46d950a2020ee31dbae60879a0b0a519224524"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["efb7a19703a037c29e30440260d393500febc1f4","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"efb7a19703a037c29e30440260d393500febc1f4":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cf46d950a2020ee31dbae60879a0b0a519224524"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cf46d950a2020ee31dbae60879a0b0a519224524":["efb7a19703a037c29e30440260d393500febc1f4","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}