{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/Async#[T]_waitForAllSuccessfulResponses(List[CompletableFuture[T]]).mjava","commits":[{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/Async#[T]_waitForAllSuccessfulResponses(List[CompletableFuture[T]]).mjava","pathOld":"/dev/null","sourceNew":"  public static <T> CompletableFuture<List<T>> waitForAllSuccessfulResponses(List<CompletableFuture<T>> futures) {\n    CompletableFuture<Void> completed = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\n\n    return completed.thenApply(values -> {\n        return futures.stream()\n          .map(CompletableFuture::join)\n          .collect(Collectors.toList());\n      }\n    ).exceptionally(error -> {\n      futures.stream()\n          .filter(CompletableFuture::isCompletedExceptionally)\n          .forEach(future -> {\n            try {\n              future.get();\n            } catch (Exception exception) {\n              log.warn(\"Error occurred during metrics collection\", exception);\n            }\n          });\n\n      return futures.stream()\n          .filter(future -> !(future.isCompletedExceptionally() || future.isCancelled()))\n          .map(CompletableFuture::join)\n          .collect(Collectors.toList());\n      }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/Async#[T]_waitForAllSuccessfulResponses(List[CompletableFuture[T]]).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/Async#[T]_waitForAllSuccessfulResponses(List[CompletableFuture[T]]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public static <T> CompletableFuture<List<T>> waitForAllSuccessfulResponses(List<CompletableFuture<T>> futures) {\n    CompletableFuture<Void> completed = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\n\n    return completed.thenApply(values -> {\n        return futures.stream()\n          .map(CompletableFuture::join)\n          .collect(Collectors.toList());\n      }\n    ).exceptionally(error -> {\n      futures.stream()\n          .filter(CompletableFuture::isCompletedExceptionally)\n          .forEach(future -> {\n            try {\n              future.get();\n            } catch (Exception exception) {\n              log.warn(\"Error occurred during metrics collection\", exception);\n            }\n          });\n\n      return futures.stream()\n          .filter(future -> !(future.isCompletedExceptionally() || future.isCancelled()))\n          .map(CompletableFuture::join)\n          .collect(Collectors.toList());\n      }\n    );\n  }\n\n","sourceOld":"  public static <T> CompletableFuture<List<T>> waitForAllSuccessfulResponses(List<CompletableFuture<T>> futures) {\n    CompletableFuture<Void> completed = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\n\n    return completed.thenApply(values -> {\n        return futures.stream()\n          .map(CompletableFuture::join)\n          .collect(Collectors.toList());\n      }\n    ).exceptionally(error -> {\n      futures.stream()\n          .filter(CompletableFuture::isCompletedExceptionally)\n          .forEach(future -> {\n            try {\n              future.get();\n            } catch (Exception exception) {\n              log.warn(\"Error occurred during metrics collection\", exception);\n            }\n          });\n\n      return futures.stream()\n          .filter(future -> !(future.isCompletedExceptionally() || future.isCancelled()))\n          .map(CompletableFuture::join)\n          .collect(Collectors.toList());\n      }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577","date":1597435180,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/Async#[T]_waitForAllSuccessfulResponses(List[CompletableFuture[T]]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  public static <T> CompletableFuture<List<T>> waitForAllSuccessfulResponses(List<CompletableFuture<T>> futures) {\n    CompletableFuture<Void> completed = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\n\n    return completed.thenApply(values -> {\n        return futures.stream()\n          .map(CompletableFuture::join)\n          .collect(Collectors.toList());\n      }\n    ).exceptionally(error -> {\n      futures.stream()\n          .filter(CompletableFuture::isCompletedExceptionally)\n          .forEach(future -> {\n            try {\n              future.get();\n            } catch (Exception exception) {\n              log.warn(\"Error occurred during metrics collection\", exception);\n            }\n          });\n\n      return futures.stream()\n          .filter(future -> !(future.isCompletedExceptionally() || future.isCancelled()))\n          .map(CompletableFuture::join)\n          .collect(Collectors.toList());\n      }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["99a6c5a5ce676b6bbd3d7eeb99b01ca49a47a577"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}