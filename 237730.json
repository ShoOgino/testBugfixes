{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#cleanup(CloudConfig,String,String,String,String,String,boolean).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#cleanup(CloudConfig,String,String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#cleanup(String,String,String,String,String,boolean).mjava","sourceNew":"  private void cleanup(CloudConfig cloudConfig, String collection, String targetCollection, String chkCollection,\n                       String daemonUrl, String daemonName, boolean createdTarget) throws Exception {\n    log.info(\"## Cleaning up after abort or error\");\n    // 1. kill the daemon\n    // 2. cleanup target / chk collections IFF the source collection still exists and is not empty\n    // 3. cleanup collection state\n\n    if (daemonUrl != null) {\n      killDaemon(daemonName, daemonUrl);\n    }\n    ClusterState clusterState = ocmh.cloudManager.getClusterStateProvider().getClusterState();\n    NamedList<Object> cmdResults = new NamedList<>();\n    if (createdTarget && !collection.equals(targetCollection) && clusterState.hasCollection(targetCollection)) {\n      log.debug(\" -- removing {}\", targetCollection);\n      ZkNodeProps cmd = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),\n          CommonParams.NAME, targetCollection,\n          FOLLOW_ALIASES, \"false\",\n          CoreAdminParams.DELETE_METRICS_HISTORY, \"true\"\n      );\n      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cloudConfig, cmd, cmdResults);\n      ocmh.checkResults(\"CLEANUP: deleting target collection \" + targetCollection, cmdResults, false);\n\n    }\n    // remove chk collection\n    if (clusterState.hasCollection(chkCollection)) {\n      log.debug(\" -- removing {}\", chkCollection);\n      ZkNodeProps cmd = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),\n          CommonParams.NAME, chkCollection,\n          FOLLOW_ALIASES, \"false\",\n          CoreAdminParams.DELETE_METRICS_HISTORY, \"true\"\n      );\n      cmdResults = new NamedList<>();\n      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cloudConfig, cmd, cmdResults);\n      ocmh.checkResults(\"CLEANUP: deleting checkpoint collection \" + chkCollection, cmdResults, false);\n    }\n    log.debug(\" -- turning readOnly mode off for {}\", collection);\n    ZkNodeProps props = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.MODIFYCOLLECTION.toLower(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.READ_ONLY, null);\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n    removeReindexingState(collection);\n  }\n\n","sourceOld":"  private void cleanup(String collection, String targetCollection, String chkCollection,\n                       String daemonUrl, String daemonName, boolean createdTarget) throws Exception {\n    log.info(\"## Cleaning up after abort or error\");\n    // 1. kill the daemon\n    // 2. cleanup target / chk collections IFF the source collection still exists and is not empty\n    // 3. cleanup collection state\n\n    if (daemonUrl != null) {\n      killDaemon(daemonName, daemonUrl);\n    }\n    ClusterState clusterState = ocmh.cloudManager.getClusterStateProvider().getClusterState();\n    NamedList<Object> cmdResults = new NamedList<>();\n    if (createdTarget && !collection.equals(targetCollection) && clusterState.hasCollection(targetCollection)) {\n      log.debug(\" -- removing {}\", targetCollection);\n      ZkNodeProps cmd = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),\n          CommonParams.NAME, targetCollection,\n          FOLLOW_ALIASES, \"false\",\n          CoreAdminParams.DELETE_METRICS_HISTORY, \"true\"\n      );\n      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cmd, cmdResults);\n      ocmh.checkResults(\"CLEANUP: deleting target collection \" + targetCollection, cmdResults, false);\n\n    }\n    // remove chk collection\n    if (clusterState.hasCollection(chkCollection)) {\n      log.debug(\" -- removing {}\", chkCollection);\n      ZkNodeProps cmd = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),\n          CommonParams.NAME, chkCollection,\n          FOLLOW_ALIASES, \"false\",\n          CoreAdminParams.DELETE_METRICS_HISTORY, \"true\"\n      );\n      cmdResults = new NamedList<>();\n      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cmd, cmdResults);\n      ocmh.checkResults(\"CLEANUP: deleting checkpoint collection \" + chkCollection, cmdResults, false);\n    }\n    log.debug(\" -- turning readOnly mode off for {}\", collection);\n    ZkNodeProps props = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.MODIFYCOLLECTION.toLower(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.READ_ONLY, null);\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n    removeReindexingState(collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#cleanup(String,String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReindexCollectionCmd#cleanup(CloudConfig,String,String,String,String,String,boolean).mjava","sourceNew":"  private void cleanup(String collection, String targetCollection, String chkCollection,\n                       String daemonUrl, String daemonName, boolean createdTarget) throws Exception {\n    log.info(\"## Cleaning up after abort or error\");\n    // 1. kill the daemon\n    // 2. cleanup target / chk collections IFF the source collection still exists and is not empty\n    // 3. cleanup collection state\n\n    if (daemonUrl != null) {\n      killDaemon(daemonName, daemonUrl);\n    }\n    ClusterState clusterState = ocmh.cloudManager.getClusterStateProvider().getClusterState();\n    NamedList<Object> cmdResults = new NamedList<>();\n    if (createdTarget && !collection.equals(targetCollection) && clusterState.hasCollection(targetCollection)) {\n      log.debug(\" -- removing {}\", targetCollection);\n      ZkNodeProps cmd = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),\n          CommonParams.NAME, targetCollection,\n          FOLLOW_ALIASES, \"false\",\n          CoreAdminParams.DELETE_METRICS_HISTORY, \"true\"\n      );\n      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cmd, cmdResults);\n      ocmh.checkResults(\"CLEANUP: deleting target collection \" + targetCollection, cmdResults, false);\n\n    }\n    // remove chk collection\n    if (clusterState.hasCollection(chkCollection)) {\n      log.debug(\" -- removing {}\", chkCollection);\n      ZkNodeProps cmd = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),\n          CommonParams.NAME, chkCollection,\n          FOLLOW_ALIASES, \"false\",\n          CoreAdminParams.DELETE_METRICS_HISTORY, \"true\"\n      );\n      cmdResults = new NamedList<>();\n      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cmd, cmdResults);\n      ocmh.checkResults(\"CLEANUP: deleting checkpoint collection \" + chkCollection, cmdResults, false);\n    }\n    log.debug(\" -- turning readOnly mode off for {}\", collection);\n    ZkNodeProps props = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.MODIFYCOLLECTION.toLower(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.READ_ONLY, null);\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n    removeReindexingState(collection);\n  }\n\n","sourceOld":"  private void cleanup(CloudConfig cloudConfig, String collection, String targetCollection, String chkCollection,\n                       String daemonUrl, String daemonName, boolean createdTarget) throws Exception {\n    log.info(\"## Cleaning up after abort or error\");\n    // 1. kill the daemon\n    // 2. cleanup target / chk collections IFF the source collection still exists and is not empty\n    // 3. cleanup collection state\n\n    if (daemonUrl != null) {\n      killDaemon(daemonName, daemonUrl);\n    }\n    ClusterState clusterState = ocmh.cloudManager.getClusterStateProvider().getClusterState();\n    NamedList<Object> cmdResults = new NamedList<>();\n    if (createdTarget && !collection.equals(targetCollection) && clusterState.hasCollection(targetCollection)) {\n      log.debug(\" -- removing {}\", targetCollection);\n      ZkNodeProps cmd = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),\n          CommonParams.NAME, targetCollection,\n          FOLLOW_ALIASES, \"false\",\n          CoreAdminParams.DELETE_METRICS_HISTORY, \"true\"\n      );\n      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cloudConfig, cmd, cmdResults);\n      ocmh.checkResults(\"CLEANUP: deleting target collection \" + targetCollection, cmdResults, false);\n\n    }\n    // remove chk collection\n    if (clusterState.hasCollection(chkCollection)) {\n      log.debug(\" -- removing {}\", chkCollection);\n      ZkNodeProps cmd = new ZkNodeProps(\n          Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.DELETE.toLower(),\n          CommonParams.NAME, chkCollection,\n          FOLLOW_ALIASES, \"false\",\n          CoreAdminParams.DELETE_METRICS_HISTORY, \"true\"\n      );\n      cmdResults = new NamedList<>();\n      ocmh.commandMap.get(CollectionParams.CollectionAction.DELETE).call(clusterState, cloudConfig, cmd, cmdResults);\n      ocmh.checkResults(\"CLEANUP: deleting checkpoint collection \" + chkCollection, cmdResults, false);\n    }\n    log.debug(\" -- turning readOnly mode off for {}\", collection);\n    ZkNodeProps props = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.MODIFYCOLLECTION.toLower(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.READ_ONLY, null);\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(props));\n    removeReindexingState(collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}