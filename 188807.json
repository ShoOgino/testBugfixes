{"path":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","commits":[{"id":"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","date":1411674127,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = queryServer(p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","date":1411744836,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = queryServer(p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","sourceNew":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = cluster.getSolrClient().query(COLLECTION, p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = queryServer(p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","sourceNew":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = cluster.getSolrClient().query(COLLECTION, p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = queryServer(p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","sourceNew":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = cluster.getSolrClient().query(COLLECTION, p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = queryServer(p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","sourceNew":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, p);\n    assertEquals(rsp.getStatus(), 0);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, rsp.getResults().getNumFound());\n    assertNotEquals(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" weren't expected \"+rsp,\n        true, rsp.getHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    assertNo500s(\"\"+rsp);\n  }\n\n","sourceOld":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse response = cluster.getSolrClient().query(COLLECTION, p);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, response.getResults().getNumFound());\n  }\n\n","bugFix":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e10849ad44771e6db197a65e8a652e934896a404","date":1568244568,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#assertSuccess(ModifiableSolrParams).mjava","sourceNew":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse rsp = client.query(COLLECTION, p);\n    assertEquals(rsp.getStatus(), 0);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, rsp.getResults().getNumFound());\n    assertNotEquals(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" weren't expected \"+rsp,\n        true, rsp.getHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    assertNo500s(\"\"+rsp);\n  }\n\n","sourceOld":"  public void assertSuccess(ModifiableSolrParams p) throws Exception {\n    QueryResponse rsp = cluster.getSolrClient().query(COLLECTION, p);\n    assertEquals(rsp.getStatus(), 0);\n    assertEquals(\"Wrong #docs in response\", NUM_DOCS_PER_TYPE - 1, rsp.getResults().getNumFound());\n    assertNotEquals(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY+\" weren't expected \"+rsp,\n        true, rsp.getHeader().getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    assertNo500s(\"\"+rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e10849ad44771e6db197a65e8a652e934896a404":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3584d3db8b472772e3329d9d95d584b68ae997e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e10849ad44771e6db197a65e8a652e934896a404"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"e10849ad44771e6db197a65e8a652e934896a404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","da951a24a6a87d5ba7e1820f8c28a1e2beea76c1"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["e10849ad44771e6db197a65e8a652e934896a404"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a3584d3db8b472772e3329d9d95d584b68ae997e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}