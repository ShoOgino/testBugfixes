{"path":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","commits":[{"id":"432127b09840b2b70209e404d242e7029421ef0a","date":1280433941,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetDateInclude#parseParam(String[]).mjava","sourceNew":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics.\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER, UPPER, EDGE);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","sourceOld":"    /**\n     * Convinience method for parsing the param value according to the correct semantics.\n     */\n    public static EnumSet<FacetDateInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER, UPPER, EDGE);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetDateInclude> include = EnumSet.noneOf(FacetDateInclude.class);\n      for (final String o : param) {\n        include.add(FacetDateInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetDateInclude.ALL)) \n        return EnumSet.allOf(FacetDateInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics.\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER, UPPER, EDGE);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d400df5c2bb943cbffcd0939e71213e78867f607","date":1298941797,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","sourceNew":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","sourceOld":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics.\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER, UPPER, EDGE);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","sourceNew":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","sourceOld":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics.\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER, UPPER, EDGE);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","sourceNew":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","sourceOld":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics.\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER, UPPER, EDGE);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","sourceNew":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","sourceOld":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","sourceNew":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","sourceOld":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/params/FacetParams.FacetRangeInclude#parseParam(String[]).mjava","sourceNew":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","sourceOld":"    /**\n     * Convinience method for parsing the param value according to the \n     * correct semantics and applying the default of \"LOWER\"\n     */\n    public static EnumSet<FacetRangeInclude> parseParam(final String[] param) {\n      // short circut for default behavior\n      if (null == param || 0 == param.length ) \n        return EnumSet.of(LOWER);\n\n      // build up set containing whatever is specified\n      final EnumSet<FacetRangeInclude> include \n        = EnumSet.noneOf(FacetRangeInclude.class);\n      for (final String o : param) {\n        include.add(FacetRangeInclude.get(o));\n      }\n\n      // if set contains all, then we're back to short circuting\n      if (include.contains(FacetRangeInclude.ALL)) \n        return EnumSet.allOf(FacetRangeInclude.class);\n\n      // use whatever we've got.\n      return include;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d400df5c2bb943cbffcd0939e71213e78867f607"],"d400df5c2bb943cbffcd0939e71213e78867f607":["432127b09840b2b70209e404d242e7029421ef0a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d400df5c2bb943cbffcd0939e71213e78867f607"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["432127b09840b2b70209e404d242e7029421ef0a","d400df5c2bb943cbffcd0939e71213e78867f607"],"c26f00b574427b55127e869b935845554afde1fa":["d400df5c2bb943cbffcd0939e71213e78867f607","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d400df5c2bb943cbffcd0939e71213e78867f607"],"432127b09840b2b70209e404d242e7029421ef0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","432127b09840b2b70209e404d242e7029421ef0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d400df5c2bb943cbffcd0939e71213e78867f607":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["432127b09840b2b70209e404d242e7029421ef0a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"432127b09840b2b70209e404d242e7029421ef0a":["d400df5c2bb943cbffcd0939e71213e78867f607","d619839baa8ce5503e496b94a9e42ad6f079293f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}