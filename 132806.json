{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#add(String,String).mjava","commits":[{"id":"c6744d321d7fd4ced5c99aeff28c036ac61e2314","date":1272929763,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#add(String,String).mjava","pathOld":"lucene/backwards/src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","sourceNew":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#add(String,String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/NormalizeCharMap#add(String,String).mjava","sourceNew":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["c6744d321d7fd4ced5c99aeff28c036ac61e2314"],"c6744d321d7fd4ced5c99aeff28c036ac61e2314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6744d321d7fd4ced5c99aeff28c036ac61e2314"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6744d321d7fd4ced5c99aeff28c036ac61e2314":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}