{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardId(String).mjava","sourceNew":"\t/**\n\t * Get shardId for core.\n\t * @param coreNodeName in the form of nodeName_coreName\n\t */\n\tpublic String getShardId(String coreNodeName) {\n\t  for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n\t    for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n\t      for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n\t        if(coreNodeName.equals(shards.getKey())) {\n\t          return slices.getKey();\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","sourceOld":"\t/**\n\t * Get shardId for core.\n\t * @param coreNodeName in the form of nodeName_coreName\n\t */\n\tpublic String getShardId(String coreNodeName) {\n\t  for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n\t    for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n\t      for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n\t        if(coreNodeName.equals(shards.getKey())) {\n\t          return slices.getKey();\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":"  /**\n   * Get shardId for core.\n   * @param coreNodeName in the form of nodeName_coreName\n   */\n  public String getShardId(String coreNodeName) {\n    for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n      for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n        for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n          if(coreNodeName.equals(shards.getKey())) {\n            return slices.getKey();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"\t/**\n\t * Get shardId for core.\n\t * @param coreNodeName in the form of nodeName_coreName\n\t */\n\tpublic String getShardId(String coreNodeName) {\n\t  for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n\t    for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n\t      for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n\t        if(coreNodeName.equals(shards.getKey())) {\n\t          return slices.getKey();\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardId(String).mjava","sourceNew":"\t/**\n\t * Get shardId for core.\n\t * @param coreNodeName in the form of nodeName_coreName\n\t */\n\tpublic String getShardId(String coreNodeName) {\n\t  for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n\t    for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n\t      for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n\t        if(coreNodeName.equals(shards.getKey())) {\n\t          return slices.getKey();\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","sourceOld":"\t/**\n\t * Get shardId for core.\n\t * @param coreNodeName in the form of nodeName_coreName\n\t */\n\tpublic String getShardId(String coreNodeName) {\n\t  for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n\t    for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n\t      for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n\t        if(coreNodeName.equals(shards.getKey())) {\n\t          return slices.getKey();\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get shardId for core.\n   * @param coreNodeName in the form of nodeName_coreName\n   */\n  public String getShardId(String coreNodeName) {\n    for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n      for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n        for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n          if(coreNodeName.equals(shards.getKey())) {\n            return slices.getKey();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":"  /**\n   * Get shardId for core.\n   * @param coreNodeName in the form of nodeName_coreName\n   */\n  public String getShardId(String coreNodeName) {\n    for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n      for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n        for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n          if(coreNodeName.equals(shards.getKey())) {\n            return slices.getKey();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"\t/**\n\t * Get shardId for core.\n\t * @param coreNodeName in the form of nodeName_coreName\n\t */\n\tpublic String getShardId(String coreNodeName) {\n\t  for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n\t    for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n\t      for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n\t        if(coreNodeName.equals(shards.getKey())) {\n\t          return slices.getKey();\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":"  /**\n   * Get shardId for core.\n   * @param coreNodeName in the form of nodeName_coreName\n   */\n  public String getShardId(String coreNodeName) {\n    for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n      for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n        for(Entry<String, Replica> shards: slices.getValue().getReplicasMap().entrySet()){\n          if(coreNodeName.equals(shards.getKey())) {\n            return slices.getKey();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Get shardId for core.\n   * @param coreNodeName in the form of nodeName_coreName\n   */\n  public String getShardId(String coreNodeName) {\n    for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n      for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n        for(Entry<String, ZkNodeProps> shards: slices.getValue().getShards().entrySet()){\n          if(coreNodeName.equals(shards.getKey())) {\n            return slices.getKey();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":"  /**\n   * Get the slice/shardId for a core.\n   * @param coreNodeName in the form of nodeName_coreName (the name of the replica)\n   */\n  public String getShardId(String coreNodeName) {\n     // System.out.println(\"###### getShardId(\"+coreNodeName+\") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        if (slice.getReplicasMap().containsKey(coreNodeName)) return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Get shardId for core.\n   * @param coreNodeName in the form of nodeName_coreName\n   */\n  public String getShardId(String coreNodeName) {\n    for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n      for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n        for(Entry<String, Replica> shards: slices.getValue().getReplicasMap().entrySet()){\n          if(coreNodeName.equals(shards.getKey())) {\n            return slices.getKey();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":"  /**\n   * Get the slice/shardId for a core.\n   * @param coreNodeName in the form of nodeName_coreName (the name of the replica)\n   */\n  public String getShardId(String coreNodeName) {\n     // System.out.println(\"###### getShardId(\"+coreNodeName+\") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        if (slice.getReplicasMap().containsKey(coreNodeName)) return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Get shardId for core.\n   * @param coreNodeName in the form of nodeName_coreName\n   */\n  public String getShardId(String coreNodeName) {\n    for (Entry<String, Map<String, Slice>> states: collectionStates.entrySet()){\n      for(Entry<String, Slice> slices: states.getValue().entrySet()) {\n        for(Entry<String, Replica> shards: slices.getValue().getReplicasMap().entrySet()){\n          if(coreNodeName.equals(shards.getKey())) {\n            return slices.getKey();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":"  /**\n   * Get the slice/shardId for a core.\n   * @param coreNodeName in the form of nodeName_coreName (the name of the replica)\n   */\n  public String getShardId(String coreNodeName) {\n      System.out.println(\"###### getShardId(\"+coreNodeName+\") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        if (slice.getReplicasMap().containsKey(coreNodeName)) return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Get the slice/shardId for a core.\n   * @param coreNodeName in the form of nodeName_coreName (the name of the replica)\n   */\n  public String getShardId(String coreNodeName) {\n     // System.out.println(\"###### getShardId(\"+coreNodeName+\") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        if (slice.getReplicasMap().containsKey(coreNodeName)) return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf328548e58ed500c8210afa7e12367f2bc67979","date":1361977356,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":"  /**\n   * Get the slice/shardId for a core.\n   * @param coreNodeName in the form of nodeName_coreName (the name of the replica)\n   */\n  public String getShardId(String coreNodeName) {\n    //  System.out.println(\"###### getShardId(\"+coreNodeName+\") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        if (slice.getReplicasMap().containsKey(coreNodeName)) return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Get the slice/shardId for a core.\n   * @param coreNodeName in the form of nodeName_coreName (the name of the replica)\n   */\n  public String getShardId(String coreNodeName) {\n      System.out.println(\"###### getShardId(\"+coreNodeName+\") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        if (slice.getReplicasMap().containsKey(coreNodeName)) return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the slice/shardId for a core.\n   * @param coreNodeName in the form of nodeName_coreName (the name of the replica)\n   */\n  public String getShardId(String coreNodeName) {\n    //  System.out.println(\"###### getShardId(\"+coreNodeName+\") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        if (slice.getReplicasMap().containsKey(coreNodeName)) return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the slice/shardId for a core.\n   * @param coreNodeName in the form of nodeName_coreName (the name of the replica)\n   */\n  public String getShardId(String coreNodeName) {\n    //  System.out.println(\"###### getShardId(\"+coreNodeName+\") in \" + collectionStates);\n    for (DocCollection coll : collectionStates.values()) {\n      for (Slice slice : coll.getSlices()) {\n        if (slice.getReplicasMap().containsKey(coreNodeName)) return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["bf328548e58ed500c8210afa7e12367f2bc67979","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"fa64435b5902ce266c23755a4a00691a3285dab8":["da94fd5fcff99442877e118f00fb42094b59f497"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["bf328548e58ed500c8210afa7e12367f2bc67979"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"bf328548e58ed500c8210afa7e12367f2bc67979":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["c5a558d54519c651068ddb202f03befefb1514a7"],"da94fd5fcff99442877e118f00fb42094b59f497":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"bf328548e58ed500c8210afa7e12367f2bc67979":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"da94fd5fcff99442877e118f00fb42094b59f497":["fa64435b5902ce266c23755a4a00691a3285dab8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["bf328548e58ed500c8210afa7e12367f2bc67979"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}