{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      TermDocs termDocs = r.termDocs(null);\n      while (termDocs.next() && numDeleted < numToDelete) {\n        if (random.nextDouble() <= delRate) {\n          r.deleteDocument(termDocs.doc());\n          numDeleted++;\n        }\n      }\n      termDocs.close();\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      TermDocs termDocs = r.termDocs(null);\n      while (termDocs.next() && numDeleted < numToDelete) {\n        if (random.nextDouble() <= delRate) {\n          r.deleteDocument(termDocs.doc());\n          numDeleted++;\n        }\n      }\n      termDocs.close();\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if (!delDocs.get(doc) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n        }\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      TermDocs termDocs = r.termDocs(null);\n      while (termDocs.next() && numDeleted < numToDelete) {\n        if (random.nextDouble() <= delRate) {\n          r.deleteDocument(termDocs.doc());\n          numDeleted++;\n        }\n      }\n      termDocs.close();\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":["74199d146ab283b4fff47e592c30a52ecd7ae734"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74199d146ab283b4fff47e592c30a52ecd7ae734","date":1277374425,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if (!delDocs.get(doc) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n        }\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      TermDocs termDocs = r.termDocs(null);\n      while (termDocs.next() && numDeleted < numToDelete) {\n        if (random.nextDouble() <= delRate) {\n          r.deleteDocument(termDocs.doc());\n          numDeleted++;\n        }\n      }\n      termDocs.close();\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/DeleteByPercentTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    IndexReader r = getRunData().getIndexReader();\n    int maxDoc = r.maxDoc();\n    int numDeleted = 0;\n    // percent is an absolute target:\n    int numToDelete = ((int) (maxDoc * percent)) - r.numDeletedDocs();\n    if (numToDelete < 0) {\n      r.undeleteAll();\n      numToDelete = (int) (maxDoc * percent);\n    }\n    while (numDeleted < numToDelete) {\n      double delRate = ((double) (numToDelete-numDeleted))/r.numDocs();\n      Bits delDocs = MultiFields.getDeletedDocs(r);\n      int doc = 0;\n      while (doc < maxDoc && numDeleted < numToDelete) {\n        if ((delDocs == null || !delDocs.get(doc)) && random.nextDouble() <= delRate) {\n          r.deleteDocument(doc);\n          numDeleted++;\n          if (delDocs == null) {\n            delDocs = MultiFields.getDeletedDocs(r);\n            assert delDocs != null;\n          }\n        }\n        doc++;\n      }\n    }\n    System.out.println(\"--> processed (delete) \" + numDeleted + \" docs\");\n    r.decRef();\n    return numDeleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["74199d146ab283b4fff47e592c30a52ecd7ae734","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["74199d146ab283b4fff47e592c30a52ecd7ae734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"74199d146ab283b4fff47e592c30a52ecd7ae734":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","74199d146ab283b4fff47e592c30a52ecd7ae734"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["74199d146ab283b4fff47e592c30a52ecd7ae734"],"74199d146ab283b4fff47e592c30a52ecd7ae734":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}