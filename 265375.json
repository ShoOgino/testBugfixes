{"path":"src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","commits":[{"id":"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf","date":1268662366,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory).mjava","sourceNew":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates));\n      LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","sourceOld":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs));\n      LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","sourceNew":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates));\n      LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","sourceOld":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates));\n      LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}