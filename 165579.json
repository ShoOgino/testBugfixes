{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(LightAutomaton,Set[Integer]).mjava","sourceNew":"  public static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    for(int s : a.getAcceptStates()) {\n      assert s < numStates;\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  public static LightAutomaton reverse(LightAutomaton a, Set<Integer> initialStates) {\n\n    if (BasicOperations.isEmpty(a)) {\n      return new LightAutomaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    LightAutomaton result = builder.finish();\n\n    for(int s : a.getAcceptStates()) {\n      assert s < numStates;\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","sourceNew":"  /** Reverses the automaton, returning the new initial states. */\n  static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    for(int s : a.getAcceptStates()) {\n      assert s < numStates;\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  public static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    for(int s : a.getAcceptStates()) {\n      assert s < numStates;\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0","date":1403106109,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","sourceNew":"  /** Reverses the automaton, returning the new initial states. */\n  static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    int s = 0;\n    FixedBitSet acceptStates = a.getAcceptStates();\n    while (s < numStates && (s = acceptStates.nextSetBit(s)) != -1) {\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n      s++;\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  /** Reverses the automaton, returning the new initial states. */\n  static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    for(int s : a.getAcceptStates()) {\n      assert s < numStates;\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6950511e8508a30eaacc2f8469121cf32be2ef6d","date":1403109868,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","sourceNew":"  /** Reverses the automaton, returning the new initial states. */\n  static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    int s = 0;\n    BitSet acceptStates = a.getAcceptStates();\n    while (s < numStates && (s = acceptStates.nextSetBit(s)) != -1) {\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n      s++;\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  /** Reverses the automaton, returning the new initial states. */\n  static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    int s = 0;\n    FixedBitSet acceptStates = a.getAcceptStates();\n    while (s < numStates && (s = acceptStates.nextSetBit(s)) != -1) {\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n      s++;\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#reverse(Automaton,Set[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** Reverses the automaton, returning the new initial states. */\n  static Automaton reverse(Automaton a, Set<Integer> initialStates) {\n\n    if (Operations.isEmpty(a)) {\n      return new Automaton();\n    }\n\n    int numStates = a.getNumStates();\n\n    // Build a new automaton with all edges reversed\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // Initial node; we'll add epsilon transitions in the end:\n    builder.createState();\n\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n\n    // Old initial state becomes new accept state:\n    builder.setAccept(1, true);\n\n    Transition t = new Transition();\n    for (int s=0;s<numStates;s++) {\n      int numTransitions = a.getNumTransitions(s);\n      a.initTransition(s, t);\n      for(int i=0;i<numTransitions;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest+1, s+1, t.min, t.max);\n      }\n    }\n\n    Automaton result = builder.finish();\n\n    int s = 0;\n    BitSet acceptStates = a.getAcceptStates();\n    while (s < numStates && (s = acceptStates.nextSetBit(s)) != -1) {\n      result.addEpsilon(0, s+1);\n      if (initialStates != null) {\n        initialStates.add(s+1);\n      }\n      s++;\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6950511e8508a30eaacc2f8469121cf32be2ef6d":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6950511e8508a30eaacc2f8469121cf32be2ef6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["6950511e8508a30eaacc2f8469121cf32be2ef6d"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"6950511e8508a30eaacc2f8469121cf32be2ef6d":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}