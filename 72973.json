{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight, postings, docScorer);\n    this.slop = slop;\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight, postings, docScorer);\n    this.slop = slop;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight, postings, docScorer);\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight, postings, docScorer);\n    this.slop = slop;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight, postings, docScorer);\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight, postings, docScorer);\n    this.slop = slop;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90a98516f7d5652f9ba2dbd999fdd97be2a3843","date":1351606421,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight, postings, docScorer);\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"757496f10c991c553a874f78fb06c3f0dc110dff","date":1351616733,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight, postings, docScorer);\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // min(cost)\n    cost = postings[0].postings.cost();\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SloppySimScorer).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // min(cost)\n    cost = postings[0].postings.cost();\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SloppySimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // min(cost)\n    cost = postings[0].postings.cost();\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b799defcfda6d303cbb180917bf1e749089adf42":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"757496f10c991c553a874f78fb06c3f0dc110dff":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6","d90a98516f7d5652f9ba2dbd999fdd97be2a3843"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["757496f10c991c553a874f78fb06c3f0dc110dff"],"d90a98516f7d5652f9ba2dbd999fdd97be2a3843":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b799defcfda6d303cbb180917bf1e749089adf42"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","757496f10c991c553a874f78fb06c3f0dc110dff","d90a98516f7d5652f9ba2dbd999fdd97be2a3843"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b799defcfda6d303cbb180917bf1e749089adf42":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"757496f10c991c553a874f78fb06c3f0dc110dff":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["b799defcfda6d303cbb180917bf1e749089adf42"],"d90a98516f7d5652f9ba2dbd999fdd97be2a3843":["757496f10c991c553a874f78fb06c3f0dc110dff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}