{"path":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testLongerSpan().mjava","commits":[{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testLongerSpan().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#testLongerSpan().mjava","sourceNew":"\tpublic void testLongerSpan() throws IOException {\n\t\tPayloadNearQuery query;\n\t\tTopDocs hits;\n\t\tquery = newPhraseQuery(\"field\", \"nine hundred ninety nine\", true);\n\t\thits = searcher.search(query, null, 100);\n\t\tScoreDoc doc = hits.scoreDocs[0];\n//\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"there should only be one hit\", hits.totalHits == 1);\n\t\t// should have score = 3 because adjacent terms have payloads of 2,4\n\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3); \n\t}\n\n","sourceOld":"\tpublic void testLongerSpan() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\t\tquery = newPhraseQuery(\"field\", \"nine hundred ninety nine\", true);\n\t\thits = searcher.search(query, null, 100);\n\t\tScoreDoc doc = hits.scoreDocs[0];\n//\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"there should only be one hit\", hits.totalHits == 1);\n\t\t// should have score = 3 because adjacent terms have payloads of 2,4\n\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3); \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a421afb32184cc61e8326108325225d58dfde0","date":1255858611,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testLongerSpan().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testLongerSpan().mjava","sourceNew":"  public void testLongerSpan() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n    query = newPhraseQuery(\"field\", \"nine hundred ninety nine\", true);\n    hits = searcher.search(query, null, 100);\n    ScoreDoc doc = hits.scoreDocs[0];\n    //\t\tSystem.out.println(\"Doc: \" + doc.toString());\n    //\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"there should only be one hit\", hits.totalHits == 1);\n    // should have score = 3 because adjacent terms have payloads of 2,4\n    assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3); \n  }\n\n","sourceOld":"\tpublic void testLongerSpan() throws IOException {\n\t\tPayloadNearQuery query;\n\t\tTopDocs hits;\n\t\tquery = newPhraseQuery(\"field\", \"nine hundred ninety nine\", true);\n\t\thits = searcher.search(query, null, 100);\n\t\tScoreDoc doc = hits.scoreDocs[0];\n//\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"there should only be one hit\", hits.totalHits == 1);\n\t\t// should have score = 3 because adjacent terms have payloads of 2,4\n\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3); \n\t}\n\n","bugFix":["94a3c9097762cec00567aff9ceae83842107c895","fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"bugIntro":["63962b8b453f75ca481172689753cdb3ca868d4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testLongerSpan().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testLongerSpan().mjava","sourceNew":"  public void testLongerSpan() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n    query = newPhraseQuery(\"field\", \"nine hundred ninety nine\", true);\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    ScoreDoc doc = hits.scoreDocs[0];\n    //\t\tSystem.out.println(\"Doc: \" + doc.toString());\n    //\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n    assertTrue(\"there should only be one hit\", hits.totalHits == 1);\n    // should have score = 3 because adjacent terms have payloads of 2,4\n    assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3); \n  }\n\n","sourceOld":"  public void testLongerSpan() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n    query = newPhraseQuery(\"field\", \"nine hundred ninety nine\", true);\n    hits = searcher.search(query, null, 100);\n    ScoreDoc doc = hits.scoreDocs[0];\n    //\t\tSystem.out.println(\"Doc: \" + doc.toString());\n    //\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"there should only be one hit\", hits.totalHits == 1);\n    // should have score = 3 because adjacent terms have payloads of 2,4\n    assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testLongerSpan().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testLongerSpan().mjava","sourceNew":"  public void testLongerSpan() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n    query = newPhraseQuery(\"field\", \"nine hundred ninety nine\", true);\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    ScoreDoc doc = hits.scoreDocs[0];\n    //\t\tSystem.out.println(\"Doc: \" + doc.toString());\n    //\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n    assertTrue(\"there should only be one hit\", hits.totalHits == 1);\n    // should have score = 3 because adjacent terms have payloads of 2,4\n    assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3); \n  }\n\n","sourceOld":"  public void testLongerSpan() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n    query = newPhraseQuery(\"field\", \"nine hundred ninety nine\", true);\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    ScoreDoc doc = hits.scoreDocs[0];\n    //\t\tSystem.out.println(\"Doc: \" + doc.toString());\n    //\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n    assertTrue(\"there should only be one hit\", hits.totalHits == 1);\n    // should have score = 3 because adjacent terms have payloads of 2,4\n    assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e9a421afb32184cc61e8326108325225d58dfde0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e9a421afb32184cc61e8326108325225d58dfde0":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["e9a421afb32184cc61e8326108325225d58dfde0"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e9a421afb32184cc61e8326108325225d58dfde0":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}