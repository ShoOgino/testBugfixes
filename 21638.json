{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,boolean).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput, float)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param fasterButMoreRam Whether the space used for packed ints should be rounded up for higher lookup performance.\n   *                         Currently this parameter only applies for types {@link Type#BYTES_VAR_SORTED}\n   *                         and {@link Type#BYTES_FIXED_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, boolean fasterButMoreRam) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, fasterButMoreRam);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, fasterButMoreRam);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, fasterButMoreRam);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, fasterButMoreRam);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, fasterButMoreRam);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, fasterButMoreRam);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput, float)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput, float)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput, float)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","sourceNew":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @throws IOException\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput, float)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) throws IOException {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Writer#create(Type,String,Directory,Comparator[BytesRef],Counter,IOContext,float).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory method to create a {@link Writer} instance for a given type. This\n   * method returns default implementations for each of the different types\n   * defined in the {@link Type} enumeration.\n   * \n   * @param type\n   *          the {@link Type} to create the {@link Writer} for\n   * @param id\n   *          the file name id used to create files within the writer.\n   * @param directory\n   *          the {@link Directory} to create the files from.\n   * @param bytesUsed\n   *          a byte-usage tracking reference\n   * @param acceptableOverheadRatio\n   *          how to trade space for speed. This option is only applicable for\n   *          docvalues of type {@link Type#BYTES_FIXED_SORTED} and\n   *          {@link Type#BYTES_VAR_SORTED}.\n   * @return a new {@link Writer} instance for the given {@link Type}\n   * @see PackedInts#getReader(org.apache.lucene.store.DataInput)\n   */\n  public static DocValuesConsumer create(Type type, String id, Directory directory,\n      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, float acceptableOverheadRatio) {\n    if (comp == null) {\n      comp = BytesRef.getUTF8SortedAsUnicodeComparator();\n    }\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getWriter(directory, id, bytesUsed, type, context);\n    case FLOAT_32:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case FLOAT_64:\n      return Floats.getWriter(directory, id, bytesUsed, context, type);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_DEREF:\n      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    case BYTES_VAR_SORTED:\n      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,\n          bytesUsed, context, acceptableOverheadRatio);\n    default:\n      throw new IllegalArgumentException(\"Unknown Values: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","0837ab0472feecb3a54260729d845f839e1cbd72"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}