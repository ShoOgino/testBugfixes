{"path":"lucene/backwards/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","pathOld":"backwards/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/MockRAMDirectory#createOutput(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized IndexOutput createOutput(String name) throws IOException {\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    init();\n    if (preventDoubleWrite && createdFiles.contains(name) && !name.equals(\"segments.gen\"))\n      throw new IOException(\"file \\\"\" + name + \"\\\" was already written to\");\n    if (noDeleteOpenFile && openFiles.containsKey(name))\n      throw new IOException(\"MockRAMDirectory: file \\\"\" + name + \"\\\" is still open: cannot overwrite\");\n    RAMFile file = new RAMFile(this);\n    if (crashed)\n      throw new IOException(\"cannot createOutput after crash\");\n    unSyncedFiles.add(name);\n    createdFiles.add(name);\n    RAMFile existing = fileMap.get(name);\n    // Enforce write once:\n    if (existing!=null && !name.equals(\"segments.gen\") && preventDoubleWrite)\n      throw new IOException(\"file \" + name + \" already exists\");\n    else {\n      if (existing!=null) {\n        sizeInBytes.getAndAdd(-existing.sizeInBytes);\n        existing.directory = null;\n      }\n\n      fileMap.put(name, file);\n    }\n\n    return new MockRAMOutputStream(this, file, name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}