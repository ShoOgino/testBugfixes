{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return vals.exists(doc);\n      }\n      @Override\n      public float floatVal(int doc) throws IOException {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) throws IOException {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["c9fb5f46e264daf5ba3860defe623a89d202dd87","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a701a7aab388afa1412a3dc23b4115c321f478c4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a701a7aab388afa1412a3dc23b4115c321f478c4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}