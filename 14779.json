{"path":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","commits":[{"id":"d6c939a28130e1107d4e349d6c10d1a92c489662","date":1330299480,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    this.fieldInfos = new FieldInfos();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        fieldInfos.add(fi);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    this.fieldInfos = new FieldInfos();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        fieldInfos.add(fi);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","sourceNew":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    this.fieldInfos = new MutableFieldInfos();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        fieldInfos.add(fi);\n      }\n    }\n  }\n\n","sourceOld":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    this.fieldInfos = new FieldInfos();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        fieldInfos.add(fi);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","sourceNew":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<FieldInfo>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        filteredInfos.add(fi);\n      }\n    }\n    fieldInfos = new ReadOnlyFieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    this.fieldInfos = new MutableFieldInfos();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        fieldInfos.add(fi);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","sourceNew":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<FieldInfo>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        filteredInfos.add(fi);\n      }\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<FieldInfo>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        filteredInfos.add(fi);\n      }\n    }\n    fieldInfos = new ReadOnlyFieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","sourceNew":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<FieldInfo>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        filteredInfos.add(fi);\n      }\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    this.fieldInfos = new FieldInfos();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        fieldInfos.add(fi);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","sourceNew":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        filteredInfos.add(fi);\n      }\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","sourceOld":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<FieldInfo>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        filteredInfos.add(fi);\n      }\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#FieldFilterAtomicReader(AtomicReader,Set[String],boolean).mjava","sourceNew":null,"sourceOld":"  public FieldFilterAtomicReader(AtomicReader in, Set<String> fields, boolean negate) {\n    super(in);\n    this.fields = fields;\n    this.negate = negate;\n    ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n    for (FieldInfo fi : in.getFieldInfos()) {\n      if (hasField(fi.name)) {\n        filteredInfos.add(fi);\n      }\n    }\n    fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d6c939a28130e1107d4e349d6c10d1a92c489662","a851824c09818632c94eba41e60ef5e72e323c8e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6c939a28130e1107d4e349d6c10d1a92c489662"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a851824c09818632c94eba41e60ef5e72e323c8e":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["a851824c09818632c94eba41e60ef5e72e323c8e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6c939a28130e1107d4e349d6c10d1a92c489662"],"a851824c09818632c94eba41e60ef5e72e323c8e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}