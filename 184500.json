{"path":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","commits":[{"id":"539040a2eeaeb2ec1252c35b94773ddf32175f5a","date":1269681454,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/com/apache/lucene/xmlparser/builders/NumericRangeQueryBuilderTestCase#testGetFilterInt().mjava","sourceNew":"\tpublic void testGetFilterInt() throws Exception {\n\t\tNumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n\t\tString xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n\t\tDocument doc = getDocumentFromString(xml);\n\t\tQuery filter = filterBuilder.getQuery(doc.getDocumentElement());\n\t\tassertTrue(filter instanceof NumericRangeQuery<?>);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tNumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n\t\tassertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n\t\tassertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n\t\tassertEquals(\"AGE\", numRangeFilter.getField());\n\t\tassertTrue(numRangeFilter.includesMin());\n\t\tassertTrue(numRangeFilter.includesMax());\n\n\t\tString xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n\t\tDocument doc2 = getDocumentFromString(xml2);\n\t\tQuery filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n\t\tassertTrue(filter2 instanceof NumericRangeQuery<?>);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tNumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n\t\tassertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n\t\tassertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n\t\tassertEquals(\"AGE\", numRangeFilter2.getField());\n\t\tassertTrue(numRangeFilter2.includesMin());\n\t\tassertFalse(numRangeFilter2.includesMax());\n\t}\n\n","sourceOld":"\tpublic void testGetFilterInt() throws Exception {\n\t\tNumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n\t\tString xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n\t\tDocument doc = getDocumentFromString(xml);\n\t\tQuery filter = filterBuilder.getQuery(doc.getDocumentElement());\n\t\tassertTrue(filter instanceof NumericRangeQuery<?>);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tNumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n\t\tassertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n\t\tassertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n\t\tassertEquals(\"AGE\", numRangeFilter.getField());\n\t\tassertTrue(numRangeFilter.includesMin());\n\t\tassertTrue(numRangeFilter.includesMax());\n\n\t\tString xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n\t\tDocument doc2 = getDocumentFromString(xml2);\n\t\tQuery filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n\t\tassertTrue(filter2 instanceof NumericRangeQuery<?>);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tNumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n\t\tassertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n\t\tassertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n\t\tassertEquals(\"AGE\", numRangeFilter2.getField());\n\t\tassertTrue(numRangeFilter2.includesMin());\n\t\tassertFalse(numRangeFilter2.includesMax());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetFilterInt() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"\tpublic void testGetFilterInt() throws Exception {\n\t\tNumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n\t\tString xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n\t\tDocument doc = getDocumentFromString(xml);\n\t\tQuery filter = filterBuilder.getQuery(doc.getDocumentElement());\n\t\tassertTrue(filter instanceof NumericRangeQuery<?>);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tNumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n\t\tassertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n\t\tassertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n\t\tassertEquals(\"AGE\", numRangeFilter.getField());\n\t\tassertTrue(numRangeFilter.includesMin());\n\t\tassertTrue(numRangeFilter.includesMax());\n\n\t\tString xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n\t\tDocument doc2 = getDocumentFromString(xml2);\n\t\tQuery filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n\t\tassertTrue(filter2 instanceof NumericRangeQuery<?>);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tNumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n\t\tassertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n\t\tassertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n\t\tassertEquals(\"AGE\", numRangeFilter2.getField());\n\t\tassertTrue(numRangeFilter2.includesMin());\n\t\tassertFalse(numRangeFilter2.includesMax());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/builders/TestNumericRangeQueryBuilder#testGetFilterInt().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testGetFilterInt() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testGetFilterInt() throws Exception {\n    NumericRangeQueryBuilder filterBuilder = new NumericRangeQueryBuilder();\n\n    String xml = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10'/>\";\n    Document doc = getDocumentFromString(xml);\n    Query filter = filterBuilder.getQuery(doc.getDocumentElement());\n    assertTrue(filter instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter = (NumericRangeQuery<Integer>) filter;\n    assertEquals(Integer.valueOf(-1), numRangeFilter.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter.getMax());\n    assertEquals(\"AGE\", numRangeFilter.getField());\n    assertTrue(numRangeFilter.includesMin());\n    assertTrue(numRangeFilter.includesMax());\n\n    String xml2 = \"<NumericRangeQuery fieldName='AGE' type='int' lowerTerm='-1' upperTerm='10' includeUpper='false'/>\";\n    Document doc2 = getDocumentFromString(xml2);\n    Query filter2 = filterBuilder.getQuery(doc2.getDocumentElement());\n    assertTrue(filter2 instanceof NumericRangeQuery<?>);\n\n    NumericRangeQuery<Integer> numRangeFilter2 = (NumericRangeQuery) filter2;\n    assertEquals(Integer.valueOf(-1), numRangeFilter2.getMin());\n    assertEquals(Integer.valueOf(10), numRangeFilter2.getMax());\n    assertEquals(\"AGE\", numRangeFilter2.getField());\n    assertTrue(numRangeFilter2.includesMin());\n    assertFalse(numRangeFilter2.includesMax());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["539040a2eeaeb2ec1252c35b94773ddf32175f5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"539040a2eeaeb2ec1252c35b94773ddf32175f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["539040a2eeaeb2ec1252c35b94773ddf32175f5a"],"539040a2eeaeb2ec1252c35b94773ddf32175f5a":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}