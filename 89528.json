{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random.nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random.nextInt(maxLev);\n        final long seed = random.nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random, q1,s);\n          QueryUtils.check(random, q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af549b45614d869371e17e0b5b4ca47535d552c0","date":1344595563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":["f83af14a2a8131b14d7aee6274c740334e0363d3","b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","290c401c31db375e771805c3ba7ac5f64c7370dc","144475829aa689d13ad3bf9cf0bc5c6f2b1afb31","a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","d003d57a476a4e85db6c82f68f156017e5e91e2d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      String field=\"data\";\n      String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        // The constrained query\n        // should be a superset to the unconstrained query.\n        if (top2.totalHits > top1.totalHits) {\n          fail(\"Constrained results not a subset:\\n\"\n                        + CheckHits.topdocsString(top1,0,0)\n                        + CheckHits.topdocsString(top2,0,0)\n                        + \"for query:\" + q2.toString());\n        }\n\n        for (int hit=0; hit<top2.totalHits; hit++) {\n          int id = top2.scoreDocs[hit].doc;\n          float score = top2.scoreDocs[hit].score;\n          boolean found=false;\n          // find this doc in other hits\n          for (int other=0; other<top1.totalHits; other++) {\n            if (top1.scoreDocs[other].doc == id) {\n              found=true;\n              float otherScore = top1.scoreDocs[other].score;\n              // check if scores match\n              assertEquals(\"Doc \" + id + \" scores don't match\\n\"\n                  + CheckHits.topdocsString(top1,0,0)\n                  + CheckHits.topdocsString(top2,0,0)\n                  + \"for query:\" + q2.toString(),\n                  score, otherScore, CheckHits.explainToleranceDelta(score, otherScore));\n            }\n          }\n\n          // check if subset\n          if (!found) fail(\"Doc \" + id + \" not found\\n\"\n                + CheckHits.topdocsString(top1,0,0)\n                + CheckHits.topdocsString(top2,0,0)\n                + \"for query:\" + q2.toString());\n        }\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        @Override\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        @Override\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        @Override\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,100);\n        TopDocs top2 = s.search(q2,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        @Override\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,null,100);\n        TopDocs top2 = s.search(q2,null,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#testRandomQueries().mjava","sourceNew":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        @Override\n        public void postCreate(BooleanQuery.Builder q) {\n          int opt=0;\n          for (BooleanClause clause : q.build().clauses()) {\n            if (clause.getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery.Builder q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery.Builder q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1.build(),100);\n        TopDocs top2 = s.search(q2.build(),100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1.build(),s);\n          QueryUtils.check(random(), q2.build(),s);\n        }\n        assertSubsetOfSameScores(q2.build(), top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","sourceOld":"    public void testRandomQueries() throws Exception {\n      final String field=\"data\";\n      final String[] vals = {\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"A\",\"Z\",\"B\",\"Y\",\"Z\",\"X\",\"foo\"};\n      int maxLev=4;\n\n      // callback object to set a random setMinimumNumberShouldMatch\n      TestBoolean2.Callback minNrCB = new TestBoolean2.Callback() {\n        @Override\n        public void postCreate(BooleanQuery q) {\n          BooleanClause[] c =q.getClauses();\n          int opt=0;\n          for (int i=0; i<c.length;i++) {\n            if (c[i].getOccur() == BooleanClause.Occur.SHOULD) opt++;\n          }\n          q.setMinimumNumberShouldMatch(random().nextInt(opt+2));\n          if (random().nextBoolean()) {\n            // also add a random negation\n            Term randomTerm = new Term(field, vals[random().nextInt(vals.length)]);\n            q.add(new TermQuery(randomTerm), BooleanClause.Occur.MUST_NOT);\n          }\n        }\n      };\n\n\n\n      // increase number of iterations for more complete testing      \n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int lev = random().nextInt(maxLev);\n        final long seed = random().nextLong();\n        BooleanQuery q1 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), lev, field, vals, minNrCB);\n        BooleanQuery q2 = TestBoolean2.randBoolQuery(new Random(seed), true, lev, field, vals, null);\n        // only set minimumNumberShouldMatch on the top level query since setting\n        // at a lower level can change the score.\n        minNrCB.postCreate(q2);\n\n        // Can't use Hits because normalized scores will mess things\n        // up.  The non-sorting version of search() that returns TopDocs\n        // will not normalize scores.\n        TopDocs top1 = s.search(q1,100);\n        TopDocs top2 = s.search(q2,100);\n        if (i < 100) {\n          QueryUtils.check(random(), q1,s);\n          QueryUtils.check(random(), q2,s);\n        }\n        assertSubsetOfSameScores(q2, top1, top2);\n      }\n      // System.out.println(\"Total hits:\"+tot);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["af549b45614d869371e17e0b5b4ca47535d552c0","7530de27b87b961b51f01bd1299b7004d46e8823"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","af549b45614d869371e17e0b5b4ca47535d552c0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["af549b45614d869371e17e0b5b4ca47535d552c0"],"af549b45614d869371e17e0b5b4ca47535d552c0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","af549b45614d869371e17e0b5b4ca47535d552c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c7869f64c874ebf7f317d22c00baf2b6857797a6","af549b45614d869371e17e0b5b4ca47535d552c0","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"af549b45614d869371e17e0b5b4ca47535d552c0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","7530de27b87b961b51f01bd1299b7004d46e8823","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}