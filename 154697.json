{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testHalfFloatConversion().mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testHalfFloatConversion().mjava","pathOld":"/dev/null","sourceNew":"  public void testHalfFloatConversion() {\n    assertEquals(0, HalfFloatPoint.halfFloatToShortBits(0f));\n    assertEquals((short)(1 << 15), HalfFloatPoint.halfFloatToShortBits(-0f));\n    assertEquals(0, HalfFloatPoint.halfFloatToShortBits(Float.MIN_VALUE)); // rounded to zero\n\n    testHalfFloat(\"0011110000000000\", 1);\n    testHalfFloat(\"0011110000000001\", 1.0009765625f);\n    testHalfFloat(\"1100000000000000\", -2);\n    testHalfFloat(\"0111101111111111\", 65504); // max value\n    testHalfFloat(\"0000010000000000\", (float) Math.pow(2, -14)); // minimum positive normal\n    testHalfFloat(\"0000001111111111\", (float) (Math.pow(2, -14) - Math.pow(2, -24))); // maximum subnormal\n    testHalfFloat(\"0000000000000001\", (float) Math.pow(2, -24)); // minimum positive subnormal\n    testHalfFloat(\"0000000000000000\", 0f);\n    testHalfFloat(\"1000000000000000\", -0f);\n    testHalfFloat(\"0111110000000000\", Float.POSITIVE_INFINITY);\n    testHalfFloat(\"1111110000000000\", Float.NEGATIVE_INFINITY);\n    testHalfFloat(\"0111111000000000\", Float.NaN);\n    testHalfFloat(\"0011010101010101\", 0.333251953125f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testHalfFloatConversion().mjava","pathOld":"/dev/null","sourceNew":"  public void testHalfFloatConversion() {\n    assertEquals(0, HalfFloatPoint.halfFloatToShortBits(0f));\n    assertEquals((short)(1 << 15), HalfFloatPoint.halfFloatToShortBits(-0f));\n    assertEquals(0, HalfFloatPoint.halfFloatToShortBits(Float.MIN_VALUE)); // rounded to zero\n\n    testHalfFloat(\"0011110000000000\", 1);\n    testHalfFloat(\"0011110000000001\", 1.0009765625f);\n    testHalfFloat(\"1100000000000000\", -2);\n    testHalfFloat(\"0111101111111111\", 65504); // max value\n    testHalfFloat(\"0000010000000000\", (float) Math.pow(2, -14)); // minimum positive normal\n    testHalfFloat(\"0000001111111111\", (float) (Math.pow(2, -14) - Math.pow(2, -24))); // maximum subnormal\n    testHalfFloat(\"0000000000000001\", (float) Math.pow(2, -24)); // minimum positive subnormal\n    testHalfFloat(\"0000000000000000\", 0f);\n    testHalfFloat(\"1000000000000000\", -0f);\n    testHalfFloat(\"0111110000000000\", Float.POSITIVE_INFINITY);\n    testHalfFloat(\"1111110000000000\", Float.NEGATIVE_INFINITY);\n    testHalfFloat(\"0111111000000000\", Float.NaN);\n    testHalfFloat(\"0011010101010101\", 0.333251953125f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testHalfFloatConversion().mjava","pathOld":"/dev/null","sourceNew":"  public void testHalfFloatConversion() {\n    assertEquals(0, HalfFloatPoint.halfFloatToShortBits(0f));\n    assertEquals((short)(1 << 15), HalfFloatPoint.halfFloatToShortBits(-0f));\n    assertEquals(0, HalfFloatPoint.halfFloatToShortBits(Float.MIN_VALUE)); // rounded to zero\n\n    testHalfFloat(\"0011110000000000\", 1);\n    testHalfFloat(\"0011110000000001\", 1.0009765625f);\n    testHalfFloat(\"1100000000000000\", -2);\n    testHalfFloat(\"0111101111111111\", 65504); // max value\n    testHalfFloat(\"0000010000000000\", (float) Math.pow(2, -14)); // minimum positive normal\n    testHalfFloat(\"0000001111111111\", (float) (Math.pow(2, -14) - Math.pow(2, -24))); // maximum subnormal\n    testHalfFloat(\"0000000000000001\", (float) Math.pow(2, -24)); // minimum positive subnormal\n    testHalfFloat(\"0000000000000000\", 0f);\n    testHalfFloat(\"1000000000000000\", -0f);\n    testHalfFloat(\"0111110000000000\", Float.POSITIVE_INFINITY);\n    testHalfFloat(\"1111110000000000\", Float.NEGATIVE_INFINITY);\n    testHalfFloat(\"0111111000000000\", Float.NaN);\n    testHalfFloat(\"0011010101010101\", 0.333251953125f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"]},"commit2Childs":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}