{"path":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","commits":[{"id":"1445434793334e26d7938862ae6f101e137de632","date":1376673242,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/float[@name='id'][.='7.0']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/float[@name='id'][.='77.0']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/float[@name='id'][.='22.0']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/float[@name='id'][.='2.0']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/float[@name='id'][.='66.0']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/float[@name='id'][.='6.0']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":3,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n\n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n\n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n\n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n\n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testGroupedQuery().mjava","sourceNew":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n\n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n\n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\",\n              req(CommonParams.Q, \"AAAA\",\n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\",\n                  GroupParams.GROUP_FIELD, \"str_s\",\n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGroupedQuery() throws Exception {\n    try {\n      init(\"schema11.xml\");\n      clearIndex();\n      assertU(commit());\n      assertU(adoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"text\", \"XXXX AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"text\", \"ZZZZ\", \"str_s\", \"c\"));\n      assertU(adoc(\"id\", \"4\", \"text\", \"XXXX ZZZZ\", \"str_s\", \"d\"));\n      assertU(adoc(\"id\", \"5\", \"text\", \"ZZZZ ZZZZ\", \"str_s\", \"e\"));\n      assertU(adoc(\"id\", \"6\", \"text\", \"AAAA AAAA AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"7\", \"text\", \"AAAA AAAA ZZZZ\", \"str_s\", \"g\"));\n      assertU(adoc(\"id\", \"8\", \"text\", \"XXXX\", \"str_s\", \"h\"));\n      assertU(adoc(\"id\", \"9\", \"text\", \"YYYY ZZZZ\", \"str_s\", \"i\"));\n      \n      assertU(adoc(\"id\", \"22\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"b\"));\n      assertU(adoc(\"id\", \"66\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"f\"));\n      assertU(adoc(\"id\", \"77\", \"text\", \"XXXX ZZZZ AAAA\", \"str_s\", \"g\"));\n     \n      assertU(commit());\n\n      final String groups = \"//arr[@name='groups']\";\n\n      assertQ(\"non-elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  QueryElevationParams.ENABLE, \"false\",\n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"elevated group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\",\n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"non-elevated because sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n      assertQ(\"force-elevated sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n\n      assertQ(\"non-elevated because of sort within group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='77']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='7']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='true']\"\n              );\n\n\n      assertQ(\"force elevated sort within sorted group query\", \n              req(CommonParams.Q, \"AAAA\", \n                  CommonParams.QT, \"/elevate\",\n                  CommonParams.SORT, \"id asc\",\n                  GroupParams.GROUP_SORT, \"id desc\", \n                  QueryElevationParams.FORCE_ELEVATION, \"true\", \n                  GroupParams.GROUP_FIELD, \"str_s\", \n                  GroupParams.GROUP, \"true\",\n                  GroupParams.GROUP_TOTAL_COUNT, \"true\", \n                  GroupParams.GROUP_LIMIT, \"100\", \n                  CommonParams.FL, \"id, score, [elevated]\")\n              , \"//*[@name='ngroups'][.='3']\"\n              , \"//*[@name='matches'][.='6']\"\n\n              , groups +\"/lst[1]//doc[1]/str[@name='id'][.='7']\"\n              , groups +\"/lst[1]//doc[1]/bool[@name='[elevated]'][.='true']\"\n              , groups +\"/lst[1]//doc[2]/str[@name='id'][.='77']\"\n              , groups +\"/lst[1]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[2]//doc[1]/str[@name='id'][.='22']\"\n              , groups +\"/lst[2]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[2]//doc[2]/str[@name='id'][.='2']\"\n              , groups +\"/lst[2]//doc[2]/bool[@name='[elevated]'][.='false']\"\n\n              , groups +\"/lst[3]//doc[1]/str[@name='id'][.='66']\"\n              , groups +\"/lst[3]//doc[1]/bool[@name='[elevated]'][.='false']\"\n              , groups +\"/lst[3]//doc[2]/str[@name='id'][.='6']\"\n              , groups +\"/lst[3]//doc[2]/bool[@name='[elevated]'][.='false']\"\n              );\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","2ad458affd82a1d762eb506003907d9363a333cb"],"1445434793334e26d7938862ae6f101e137de632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1445434793334e26d7938862ae6f101e137de632"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1445434793334e26d7938862ae6f101e137de632"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["1445434793334e26d7938862ae6f101e137de632"],"2ad458affd82a1d762eb506003907d9363a333cb":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1445434793334e26d7938862ae6f101e137de632","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["1445434793334e26d7938862ae6f101e137de632","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ad458affd82a1d762eb506003907d9363a333cb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1445434793334e26d7938862ae6f101e137de632":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1445434793334e26d7938862ae6f101e137de632","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}