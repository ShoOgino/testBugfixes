{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","commits":[{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getReader(Directory,String,Mode,boolean,int).mjava","sourceNew":"  // nocommit -- I can peek @ header to determing fixed/mode?\n  public static DocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        try {\n          return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.DEREF) {\n        try {\n          return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"\");\n  }\n\n","sourceOld":"  // nocommit -- I can peek @ header to determing fixed/mode?\n  public static Reader getReader(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        try {\n          return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.DEREF) {\n        try {\n          return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","sourceNew":"  // TODO -- I can peek @ header to determing fixed/mode?\n  public static DocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        try {\n          return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.DEREF) {\n        try {\n          return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"\");\n  }\n\n","sourceOld":"  // nocommit -- I can peek @ header to determing fixed/mode?\n  public static DocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        try {\n          return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.DEREF) {\n        try {\n          return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16dc5aef9648bb8fedce2ef55874f52e62c2766d","date":1293994163,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","sourceNew":"  /**\n   * Creates a new {@link DocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link DocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link DocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static DocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":"  // TODO -- I can peek @ header to determing fixed/mode?\n  public static DocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        try {\n          return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.DEREF) {\n        try {\n          return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link DocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link DocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link DocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link DocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static DocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    //nocommit this and all the readers below need an IOContext too\n\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc, IOContext context) throws IOException {\n\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc, context);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc, context);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc, context);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    //nocommit this and all the readers below need an IOContext too\n\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @param sortComparator byte comparator used by sorted variants\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc, Comparator<BytesRef> sortComparator) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc, sortComparator);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","sourceNew":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @param sortComparator byte comparator used by sorted variants\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc, Comparator<BytesRef> sortComparator) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc, sortComparator);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link IndexDocValues} instance that provides either memory\n   * resident or iterative access to a per-document stored <tt>byte[]</tt>\n   * value. The returned {@link IndexDocValues} instance will be initialized without\n   * consuming a significant amount of memory.\n   * \n   * @param dir\n   *          the directory to load the {@link IndexDocValues} from.\n   * @param id\n   *          the file ID in the {@link Directory} to load the values from.\n   * @param mode\n   *          the mode used to store the values\n   * @param fixedSize\n   *          <code>true</code> iff the values are stored with fixed-size,\n   *          otherwise <code>false</code>\n   * @param maxDoc\n   *          the number of document values stored for the given ID\n   * @return an initialized {@link IndexDocValues} instance.\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  public static IndexDocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    // TODO -- I can peek @ header to determing fixed/mode?\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"Illegal Mode: \" + mode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","bc0b8069918917b33f361011899a1af0cdd2d462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"bc0b8069918917b33f361011899a1af0cdd2d462":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc0b8069918917b33f361011899a1af0cdd2d462"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","bc0b8069918917b33f361011899a1af0cdd2d462","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"b6f9be74ca7baaef11857ad002cad40419979516":[],"bc0b8069918917b33f361011899a1af0cdd2d462":["f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f0b9507caf22f292ac0e5e59f62db4275adf4511","b6f9be74ca7baaef11857ad002cad40419979516","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}