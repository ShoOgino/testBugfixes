{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldTypeResource#checkFieldTypeProps(Map[String,Object],int,List[String]).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldTypeResource#checkFieldTypeProps(Map[String,Object],int,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkFieldTypeProps(Map<String,Object> expected, int expectedChildCount, List<String> addlTests) {\n    String fieldTypeName = (String)expected.get(\"name\");\n    \n    List<String> tests = new ArrayList<>();\n    tests.add(\"count(/response/lst[@name='fieldType']) = 1\");\n    tests.add(\"count(/response/lst[@name='fieldType']/*) = \"+expectedChildCount);\n    tests.add(\"count(/response/lst[@name='fieldType']/arr[@name='fields']/*) = 0\");\n    tests.add(\"count(/response/lst[@name='fieldType']/arr[@name='dynamicFields']/*) = 0\");\n    for (Map.Entry<String,Object> next : expected.entrySet()) {\n      Object val = next.getValue();\n      String pathType = null;\n      if (val instanceof Boolean)\n        pathType = \"bool\";\n      else if (val instanceof String)\n        pathType = \"str\";\n      else\n        fail(\"Unexpected value type \"+val.getClass().getName());\n      // NOTE: it seems like the fieldtypes endpoint only returns strings or booleans\n      \n      String xpath = \n          \"/response/lst[@name='fieldType']/\"+pathType+\"[@name='\"+next.getKey()+\"']\";\n      tests.add(xpath+\" = '\"+val+\"'\");\n    }\n    \n    if (addlTests != null)\n      tests.addAll(addlTests);\n    \n    assertQ(\"/schema/fieldtypes/\"+fieldTypeName+\"?indent=on&wt=xml&showDefaults=true\",\n        tests.toArray(new String[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestManagedSchemaFieldTypeResource#checkFieldTypeProps(Map[String,Object],int,List[String]).mjava","sourceNew":null,"sourceOld":"  protected void checkFieldTypeProps(Map<String,Object> expected, int expectedChildCount, List<String> addlTests) {\n    String fieldTypeName = (String)expected.get(\"name\");\n    \n    List<String> tests = new ArrayList<>();\n    tests.add(\"count(/response/lst[@name='fieldType']) = 1\");\n    tests.add(\"count(/response/lst[@name='fieldType']/*) = \"+expectedChildCount);\n    tests.add(\"count(/response/lst[@name='fieldType']/arr[@name='fields']/*) = 0\");\n    tests.add(\"count(/response/lst[@name='fieldType']/arr[@name='dynamicFields']/*) = 0\");\n    for (Map.Entry<String,Object> next : expected.entrySet()) {\n      Object val = next.getValue();\n      String pathType = null;\n      if (val instanceof Boolean)\n        pathType = \"bool\";\n      else if (val instanceof String)\n        pathType = \"str\";\n      else\n        fail(\"Unexpected value type \"+val.getClass().getName());\n      // NOTE: it seems like the fieldtypes endpoint only returns strings or booleans\n      \n      String xpath = \n          \"/response/lst[@name='fieldType']/\"+pathType+\"[@name='\"+next.getKey()+\"']\";\n      tests.add(xpath+\" = '\"+val+\"'\");\n    }\n    \n    if (addlTests != null)\n      tests.addAll(addlTests);\n    \n    assertQ(\"/schema/fieldtypes/\"+fieldTypeName+\"?indent=on&wt=xml&showDefaults=true\",\n        tests.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}