{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#openRealtimeSearcher().mjava","commits":[{"id":"2b0085a9ec29ebc27be992a3712f4bd5d65d2106","date":1450912573,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#openRealtimeSearcher().mjava","pathOld":"/dev/null","sourceNew":"  /** Opens a new realtime searcher and clears the id caches */\n  public void openRealtimeSearcher() {\n    synchronized (this) {\n      // We must cause a new IndexReader to be opened before anything looks at these caches again\n      // so that a cache miss will read fresh data.\n      try {\n        RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n        holder.decref();\n      } catch (Exception e) {\n        SolrException.log(log, \"Error opening realtime searcher\", e);\n        return;\n      }\n\n      if (map != null) map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"979e22aa7c63c9dc651adf861610c7e444d45832","date":1454615713,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#openRealtimeSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#openRealtimeSearcher().mjava","sourceNew":"  /** Opens a new realtime searcher and clears the id caches.\n   * This may also be called when we updates are being buffered (from PeerSync/IndexFingerprint)\n   */\n  public void openRealtimeSearcher() {\n    synchronized (this) {\n      // We must cause a new IndexReader to be opened before anything looks at these caches again\n      // so that a cache miss will read fresh data.\n      try {\n        RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n        holder.decref();\n      } catch (Exception e) {\n        SolrException.log(log, \"Error opening realtime searcher\", e);\n        return;\n      }\n\n      if (map != null) map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n    }\n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and clears the id caches */\n  public void openRealtimeSearcher() {\n    synchronized (this) {\n      // We must cause a new IndexReader to be opened before anything looks at these caches again\n      // so that a cache miss will read fresh data.\n      try {\n        RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n        holder.decref();\n      } catch (Exception e) {\n        SolrException.log(log, \"Error opening realtime searcher\", e);\n        return;\n      }\n\n      if (map != null) map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#openRealtimeSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#openRealtimeSearcher().mjava","sourceNew":"  /** Opens a new realtime searcher and clears the id caches.\n   * This may also be called when we updates are being buffered (from PeerSync/IndexFingerprint)\n   */\n  public void openRealtimeSearcher() {\n    synchronized (this) {\n      // We must cause a new IndexReader to be opened before anything looks at these caches again\n      // so that a cache miss will read fresh data.\n      try {\n        RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n        holder.decref();\n      } catch (Exception e) {\n        SolrException.log(log, \"Error opening realtime searcher\", e);\n        return;\n      }\n\n      if (map != null) map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n    }\n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and clears the id caches */\n  public void openRealtimeSearcher() {\n    synchronized (this) {\n      // We must cause a new IndexReader to be opened before anything looks at these caches again\n      // so that a cache miss will read fresh data.\n      try {\n        RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n        holder.decref();\n      } catch (Exception e) {\n        SolrException.log(log, \"Error opening realtime searcher\", e);\n        return;\n      }\n\n      if (map != null) map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#openRealtimeSearcher().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#openRealtimeSearcher().mjava","sourceNew":"  /** Opens a new realtime searcher and clears the id caches.\n   * This may also be called when we updates are being buffered (from PeerSync/IndexFingerprint)\n   */\n  public void openRealtimeSearcher() {\n    synchronized (this) {\n      // We must cause a new IndexReader to be opened before anything looks at these caches again\n      // so that a cache miss will read fresh data.\n      try {\n        RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n        holder.decref();\n      } catch (Exception e) {\n        SolrException.log(log, \"Error opening realtime searcher\", e);\n        return;\n      }\n\n      if (map != null) map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n    }\n  }\n\n","sourceOld":"  /** Opens a new realtime searcher and clears the id caches */\n  public void openRealtimeSearcher() {\n    synchronized (this) {\n      // We must cause a new IndexReader to be opened before anything looks at these caches again\n      // so that a cache miss will read fresh data.\n      try {\n        RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n        holder.decref();\n      } catch (Exception e) {\n        SolrException.log(log, \"Error opening realtime searcher\", e);\n        return;\n      }\n\n      if (map != null) map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106","979e22aa7c63c9dc651adf861610c7e444d45832"],"979e22aa7c63c9dc651adf861610c7e444d45832":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106"],"2b0085a9ec29ebc27be992a3712f4bd5d65d2106":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1704c078ec59838c9d95d5bf5738b393b537494":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106","979e22aa7c63c9dc651adf861610c7e444d45832"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["979e22aa7c63c9dc651adf861610c7e444d45832"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"979e22aa7c63c9dc651adf861610c7e444d45832":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b0085a9ec29ebc27be992a3712f4bd5d65d2106":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","979e22aa7c63c9dc651adf861610c7e444d45832","b1704c078ec59838c9d95d5bf5738b393b537494"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}