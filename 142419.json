{"path":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#AbstractPluginLoader(String,boolean,boolean).mjava","commits":[{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#AbstractPluginLoader(String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#AbstractPluginLoader(String,boolean).mjava","sourceNew":"  /**\n   * @param type is the 'type' name included in error messages.\n   * @param preRegister, if true, this will first register all Plugins, then it will initialize them.\n   */\n  public AbstractPluginLoader( String type, boolean preRegister, boolean requireName )\n  {\n    this.type = type;\n    this.preRegister = preRegister;\n    this.requireName = requireName;\n  }\n\n","sourceOld":"  /**\n   * @param type is the 'type' name included in error messages.\n   * @param preRegister, if true, this will first register all Plugins, then it will initialize them.\n   */\n  public AbstractPluginLoader( String type, boolean preRegister )\n  {\n    this.type = type;\n    this.preRegister = preRegister;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e","date":1190668853,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#AbstractPluginLoader(String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#AbstractPluginLoader(String,boolean,boolean).mjava","sourceNew":"  /**\n   * @param type is the 'type' name included in error messages.\n   * @param preRegister if true, this will first register all Plugins, then it will initialize them.\n   */\n  public AbstractPluginLoader( String type, boolean preRegister, boolean requireName )\n  {\n    this.type = type;\n    this.preRegister = preRegister;\n    this.requireName = requireName;\n  }\n\n","sourceOld":"  /**\n   * @param type is the 'type' name included in error messages.\n   * @param preRegister, if true, this will first register all Plugins, then it will initialize them.\n   */\n  public AbstractPluginLoader( String type, boolean preRegister, boolean requireName )\n  {\n    this.type = type;\n    this.preRegister = preRegister;\n    this.requireName = requireName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#AbstractPluginLoader(String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/util/plugin/AbstractPluginLoader#AbstractPluginLoader(String,boolean,boolean).mjava","sourceNew":"  /**\n   * @param type is the 'type' name included in error messages.\n   * @param preRegister if true, this will first register all Plugins, then it will initialize them.\n   */\n  public AbstractPluginLoader( String type, boolean preRegister, boolean requireName )\n  {\n    this.type = type;\n    this.preRegister = preRegister;\n    this.requireName = requireName;\n  }\n\n","sourceOld":"  /**\n   * @param type is the 'type' name included in error messages.\n   * @param preRegister if true, this will first register all Plugins, then it will initialize them.\n   */\n  public AbstractPluginLoader( String type, boolean preRegister, boolean requireName )\n  {\n    this.type = type;\n    this.preRegister = preRegister;\n    this.requireName = requireName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e":["6589002090bd74db749eef5befe2f447c0e3dd49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6589002090bd74db749eef5befe2f447c0e3dd49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["c0af8df23c8bf16151f1911c8ad7e2bd21386b1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6589002090bd74db749eef5befe2f447c0e3dd49"],"6589002090bd74db749eef5befe2f447c0e3dd49":["c0af8df23c8bf16151f1911c8ad7e2bd21386b1e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}