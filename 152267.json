{"path":"src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","commits":[{"id":"5391288921372c32bf6096df320497ad2d05757f","date":1200634221,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"/dev/null","sourceNew":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<String, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( id, max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb8cfe7bf587294d6207ef881511e98bde8666f1","date":1244338898,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<String, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( id, max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","sourceOld":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<String, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( id, max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<String, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( id, max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","sourceOld":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<String, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( id, max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb8cfe7bf587294d6207ef881511e98bde8666f1":["5391288921372c32bf6096df320497ad2d05757f"],"5391288921372c32bf6096df320497ad2d05757f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["cb8cfe7bf587294d6207ef881511e98bde8666f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cb8cfe7bf587294d6207ef881511e98bde8666f1":["ad94625fb8d088209f46650c8097196fec67f00c"],"5391288921372c32bf6096df320497ad2d05757f":["cb8cfe7bf587294d6207ef881511e98bde8666f1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5391288921372c32bf6096df320497ad2d05757f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}