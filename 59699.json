{"path":"modules/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1f9f2355d68aab1348539f7a1603279405e566a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}