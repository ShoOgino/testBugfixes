{"path":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = new File(TEMP_DIR,\"index\");\n      indexDir = FSDirectory.open(indexFile);\n      taxoDir = FSDirectory.open(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = new RAMDirectory();\n      taxoDir = new RAMDirectory();\n    }\n    \n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(TEST_VERSION_CURRENT, getAnalyzer()));\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new LuceneTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = new IndexSearcher(indexReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = _TestUtil.getTempDir(\"index\");\n      indexDir = newFSDirectory(indexFile);\n      taxoDir = newFSDirectory(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = newDirectory();\n      taxoDir = newDirectory();\n    }\n    \n    RandomIndexWriter iw = new RandomIndexWriter(random, indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, getAnalyzer()));\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new LuceneTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = new File(TEMP_DIR,\"index\");\n      indexDir = FSDirectory.open(indexFile);\n      taxoDir = FSDirectory.open(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = new RAMDirectory();\n      taxoDir = new RAMDirectory();\n    }\n    \n    IndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(TEST_VERSION_CURRENT, getAnalyzer()));\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new LuceneTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = new IndexSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95535508327351a4c38a0dc7711075dfabe5941f","date":1309882395,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = _TestUtil.getTempDir(\"index\");\n      indexDir = newFSDirectory(indexFile);\n      taxoDir = newFSDirectory(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = newDirectory();\n      taxoDir = newDirectory();\n    }\n    \n    RandomIndexWriter iw = new RandomIndexWriter(random, indexDir, getIndexWriterConfig(getAnalyzer()));\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new LuceneTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = _TestUtil.getTempDir(\"index\");\n      indexDir = newFSDirectory(indexFile);\n      taxoDir = newFSDirectory(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = newDirectory();\n      taxoDir = newDirectory();\n    }\n    \n    RandomIndexWriter iw = new RandomIndexWriter(random, indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, getAnalyzer()));\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new LuceneTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = _TestUtil.getTempDir(\"index\");\n      indexDir = newFSDirectory(indexFile);\n      taxoDir = newFSDirectory(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = newDirectory();\n      taxoDir = newDirectory();\n    }\n    \n    RandomIndexWriter iw = new RandomIndexWriter(random, indexDir, getIndexWriterConfig(getAnalyzer()));\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new LuceneTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = _TestUtil.getTempDir(\"index\");\n      indexDir = newFSDirectory(indexFile);\n      taxoDir = newFSDirectory(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = newDirectory();\n      taxoDir = newDirectory();\n    }\n    \n    RandomIndexWriter iw = new RandomIndexWriter(random, indexDir, getIndexWriterConfig(getAnalyzer()));\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new LuceneTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = _TestUtil.getTempDir(\"index\");\n      indexDir = newFSDirectory(indexFile);\n      taxoDir = newFSDirectory(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = newDirectory();\n      taxoDir = newDirectory();\n    }\n    \n    RandomIndexWriter iw = new RandomIndexWriter(random, indexDir, getIndexWriterConfig(getAnalyzer()));\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = _TestUtil.getTempDir(\"index\");\n      indexDir = newFSDirectory(indexFile);\n      taxoDir = newFSDirectory(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = newDirectory();\n      taxoDir = newDirectory();\n    }\n    \n    RandomIndexWriter iw = new RandomIndexWriter(random, indexDir, getIndexWriterConfig(getAnalyzer()));\n    TaxonomyWriter taxo = new LuceneTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new LuceneTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"687dcc2aaeb07b082a1998257f0f0b65dced3e66","date":1321272991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean forceDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random, pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = IndexReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean onDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  onDisk: \"+onDisk);\n    }\n\n    if (onDisk) {\n      File indexFile = _TestUtil.getTempDir(\"index\");\n      indexDir = newFSDirectory(indexFile);\n      taxoDir = newFSDirectory(new File(indexFile,\"facets\"));\n    } else { \n      indexDir = newDirectory();\n      taxoDir = newDirectory();\n    }\n    \n    RandomIndexWriter iw = new RandomIndexWriter(random, indexDir, getIndexWriterConfig(getAnalyzer()));\n    TaxonomyWriter taxo = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n    \n    populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n    \n    // commit changes (taxonomy prior to search index for consistency)\n    taxo.commit();\n    iw.commit();\n    taxo.close();\n    iw.close();\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    indexReader = IndexReader.open(indexDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean forceDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = IndexReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean forceDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random, pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = IndexReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/FacetTestBase#initIndex(int,boolean).mjava","sourceNew":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean forceDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = IndexReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","sourceOld":"  /** Prepare index (in RAM/Disk) with some documents and some facets */\n  protected final void initIndex(int partitionSize, boolean forceDisk) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"Partition Size: \" + partitionSize+\"  forceDisk: \"+forceDisk);\n    }\n\n    SearchTaxoDirPair pair = dirsPerPartitionSize.get(Integer.valueOf(partitionSize));\n    if (pair == null) {\n      pair = new SearchTaxoDirPair();\n      if (forceDisk) {\n        pair.searchDir = newFSDirectory(new File(TEST_DIR, \"index\"));\n        pair.taxoDir = newFSDirectory(new File(TEST_DIR, \"taxo\"));\n      } else {\n        pair.searchDir = newDirectory();\n        pair.taxoDir = newDirectory();\n      }\n      \n      RandomIndexWriter iw = new RandomIndexWriter(random(), pair.searchDir, getIndexWriterConfig(getAnalyzer()));\n      TaxonomyWriter taxo = new DirectoryTaxonomyWriter(pair.taxoDir, OpenMode.CREATE);\n      \n      populateIndex(iw, taxo, getFacetIndexingParams(partitionSize));\n      \n      // commit changes (taxonomy prior to search index for consistency)\n      taxo.commit();\n      iw.commit();\n      taxo.close();\n      iw.close();\n      \n      dirsPerPartitionSize.put(Integer.valueOf(partitionSize), pair);\n    }\n    \n    // prepare for searching\n    taxoReader = new DirectoryTaxonomyReader(pair.taxoDir);\n    indexReader = IndexReader.open(pair.searchDir);\n    searcher = newSearcher(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["95535508327351a4c38a0dc7711075dfabe5941f"],"95535508327351a4c38a0dc7711075dfabe5941f":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["687dcc2aaeb07b082a1998257f0f0b65dced3e66"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95535508327351a4c38a0dc7711075dfabe5941f"],"687dcc2aaeb07b082a1998257f0f0b65dced3e66":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95535508327351a4c38a0dc7711075dfabe5941f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["687dcc2aaeb07b082a1998257f0f0b65dced3e66"],"95535508327351a4c38a0dc7711075dfabe5941f":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["95535508327351a4c38a0dc7711075dfabe5941f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"687dcc2aaeb07b082a1998257f0f0b65dced3e66":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}