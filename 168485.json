{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","commits":[{"id":"b3578a86b516801d628a79d6765ae597e7f935ae","date":1394160409,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripLookup) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripLookup) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fb4238d56f62faff1f0c866bee53facad482ec","date":1394631888,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripLookup) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, IOUtils.CHARSET_UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageEstimator.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageEstimator.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageEstimator.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageEstimator.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageEstimator.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageEstimator.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageEstimator.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageEstimator.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      try (ZipFile zip = new ZipFile(f.toFile(), StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      File f = new File(DICTIONARY_HOME, tests[i]);\n      assert f.exists();\n      \n      try (ZipFile zip = new ZipFile(f, StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3125c103a40467dd318d6beff055c5f34b7bcf3a","date":1410661891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      try (ZipFile zip = new ZipFile(f.toFile(), StandardCharsets.UTF_8)) {\n        ZipEntry dicEntry = zip.getEntry(tests[i+1]);\n        assert dicEntry != null;\n        ZipEntry affEntry = zip.getEntry(tests[i+2]);\n        assert affEntry != null;\n      \n        try (InputStream dictionary = zip.getInputStream(dicEntry);\n             InputStream affix = zip.getInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          if (tempDir instanceof MockDirectoryWrapper) {\n            ((MockDirectoryWrapper) tempDir).setEnableVirusScanner(false);\n          }\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry)) {\n          Dictionary dic = new Dictionary(affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          if (tempDir instanceof MockDirectoryWrapper) {\n            ((MockDirectoryWrapper) tempDir).setEnableVirusScanner(false);\n          }\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          if (tempDir instanceof MockDirectoryWrapper) {\n            ((MockDirectoryWrapper) tempDir).setEnableVirusScanner(false);\n          }\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          if (tempDir instanceof MockDirectoryWrapper) {\n            ((MockDirectoryWrapper) tempDir).setEnableVirusScanner(false);\n          }\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestAllDictionaries2#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path tmp = LuceneTestCase.createTempDir();\n    \n    for (int i = 0; i < tests.length; i += 3) {\n      Path f = DICTIONARY_HOME.resolve(tests[i]);\n      assert Files.exists(f);\n      \n      IOUtils.rm(tmp);\n      Files.createDirectory(tmp);\n      \n      try (InputStream in = Files.newInputStream(f)) {\n        TestUtil.unzip(in, tmp);\n        Path dicEntry = tmp.resolve(tests[i+1]);\n        Path affEntry = tmp.resolve(tests[i+2]);\n      \n        try (InputStream dictionary = Files.newInputStream(dicEntry);\n             InputStream affix = Files.newInputStream(affEntry);\n             Directory tempDir = newDirectory()) {\n          if (tempDir instanceof MockDirectoryWrapper) {\n            ((MockDirectoryWrapper) tempDir).setEnableVirusScanner(false);\n          }\n          Dictionary dic = new Dictionary(tempDir, \"dictionary\", affix, dictionary);\n          System.out.println(tests[i] + \"\\t\" + RamUsageTester.humanSizeOf(dic) + \"\\t(\" +\n                             \"words=\" + RamUsageTester.humanSizeOf(dic.words) + \", \" +\n                             \"flags=\" + RamUsageTester.humanSizeOf(dic.flagLookup) + \", \" +\n                             \"strips=\" + RamUsageTester.humanSizeOf(dic.stripData) + \", \" +\n                             \"conditions=\" + RamUsageTester.humanSizeOf(dic.patterns) + \", \" +\n                             \"affixData=\" + RamUsageTester.humanSizeOf(dic.affixData) + \", \" +\n                             \"prefixes=\" + RamUsageTester.humanSizeOf(dic.prefixes) + \", \" +\n                             \"suffixes=\" + RamUsageTester.humanSizeOf(dic.suffixes) + \")\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["09fb4238d56f62faff1f0c866bee53facad482ec","7d89d7e4e5101347833eea558851bf4209218619"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3578a86b516801d628a79d6765ae597e7f935ae"],"5a207d19eac354d649c3f0e2cce070017c78125e":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"b3578a86b516801d628a79d6765ae597e7f935ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"7d89d7e4e5101347833eea558851bf4209218619":["09fb4238d56f62faff1f0c866bee53facad482ec"],"09fb4238d56f62faff1f0c866bee53facad482ec":["b3578a86b516801d628a79d6765ae597e7f935ae"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["7d89d7e4e5101347833eea558851bf4209218619","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"b470f36a9372c97283360b1304eacbde22df6c0d":["867e3d9153fb761456b54a9dcce566e1545c5ef6","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["7d89d7e4e5101347833eea558851bf4209218619"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["3125c103a40467dd318d6beff055c5f34b7bcf3a"],"3125c103a40467dd318d6beff055c5f34b7bcf3a":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"b3578a86b516801d628a79d6765ae597e7f935ae":["96ea64d994d340044e0d57aeb6a5871539d10ca5","09fb4238d56f62faff1f0c866bee53facad482ec"],"09fb4238d56f62faff1f0c866bee53facad482ec":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"f4abec28b874149a7223e32cc7a01704c27790de":["3125c103a40467dd318d6beff055c5f34b7bcf3a"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b3578a86b516801d628a79d6765ae597e7f935ae"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["f4abec28b874149a7223e32cc7a01704c27790de","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"3125c103a40467dd318d6beff055c5f34b7bcf3a":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","96ea64d994d340044e0d57aeb6a5871539d10ca5","1e6acbaae7af722f17204ceccf0f7db5753eccf3","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}