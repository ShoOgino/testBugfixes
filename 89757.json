{"path":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","commits":[{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random, reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsFirstFilter().mjava","sourceNew":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsFirstFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_FIRST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = _TestUtil.docs(random(), reader,\n                                   KEY_FIELD,\n                                   new BytesRef(url),\n                                   MultiFields.getLiveDocs(reader),\n                                   null,\n                                   false);\n\n      int lastDoc = 0;\n      td.nextDoc();\n      lastDoc = td.docID();\n      assertEquals(\"Duplicate urls should return first doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}