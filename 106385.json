{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createColl(String,CloudSolrServer).mjava","commits":[{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createColl(String,CloudSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  protected void createColl(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n    Set<Map.Entry<String,List<Integer>>> collectionInfosEntrySet = collectionInfos.entrySet();\n    for (Map.Entry<String,List<Integer>> entry : collectionInfosEntrySet) {\n      String collection = entry.getKey();\n      List<Integer> list = entry.getValue();\n      checkForCollection(collection, list, null);\n      String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collection);\n      HttpSolrServer collectionClient = new HttpSolrServer(url);\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd548b14f1051e707393e77329f80c5e89f69919","date":1385226862,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createCollection(String,CloudSolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createColl(String,CloudSolrServer).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","sourceOld":"  protected void createColl(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n    Set<Map.Entry<String,List<Integer>>> collectionInfosEntrySet = collectionInfos.entrySet();\n    for (Map.Entry<String,List<Integer>> entry : collectionInfosEntrySet) {\n      String collection = entry.getKey();\n      List<Integer> list = entry.getValue();\n      checkForCollection(collection, list, null);\n      String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collection);\n      HttpSolrServer collectionClient = new HttpSolrServer(url);\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#createColl(String,CloudSolrServer).mjava","sourceNew":null,"sourceOld":"  protected void createColl(String COLL_NAME, CloudSolrServer client) throws Exception {\n    int replicationFactor = 2;\n    int numShards = 2;\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n    Set<Map.Entry<String,List<Integer>>> collectionInfosEntrySet = collectionInfos.entrySet();\n    for (Map.Entry<String,List<Integer>> entry : collectionInfosEntrySet) {\n      String collection = entry.getKey();\n      List<Integer> list = entry.getValue();\n      checkForCollection(collection, list, null);\n      String url = getUrlFromZk(getCommonCloudSolrServer().getZkStateReader().getClusterState(), collection);\n      HttpSolrServer collectionClient = new HttpSolrServer(url);\n      // poll for a second - it can take a moment before we are ready to serve\n      waitForNon403or404or503(collectionClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73","cd548b14f1051e707393e77329f80c5e89f69919"],"cd548b14f1051e707393e77329f80c5e89f69919":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd548b14f1051e707393e77329f80c5e89f69919"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd548b14f1051e707393e77329f80c5e89f69919"],"cd548b14f1051e707393e77329f80c5e89f69919":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}