{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","commits":[{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      return AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    TopScorer inScorer = in.topScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n    if (AssertingTopScorer.shouldWrap(inScorer)) {\n      return AssertingTopScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      // The incoming scorer already has a specialized\n      // implementation for BulkScorer, so we should use it:\n      return AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else if (scoreDocsInOrder == false && random.nextBoolean()) {\n      // The caller claims it can handle out-of-order\n      // docs; let's confirm that by pulling docs and\n      // randomly shuffling them before collection:\n      //Scorer scorer = in.scorer(context, acceptDocs);\n      Scorer scorer = scorer(context, acceptDocs);\n\n      // Scorer should not be null if bulkScorer wasn't:\n      assert scorer != null;\n      return new AssertingBulkOutOfOrderScorer(new Random(random.nextLong()), scorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      return AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      // The incoming scorer already has a specialized\n      // implementation for BulkScorer, so we should use it:\n      return AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else if (scoreDocsInOrder == false && random.nextBoolean()) {\n      // The caller claims it can handle out-of-order\n      // docs; let's confirm that by pulling docs and\n      // randomly shuffling them before collection:\n      //Scorer scorer = in.scorer(context, acceptDocs);\n      Scorer scorer = scorer(context, acceptDocs);\n\n      // Scorer should not be null if bulkScorer wasn't:\n      assert scorer != null;\n      return new AssertingBulkOutOfOrderScorer(new Random(random.nextLong()), scorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"658a1d7b74c99b3d845fb1f852331a1c4623368e","date":1396631281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      // The incoming scorer already has a specialized\n      // implementation for BulkScorer, so we should use it:\n      inScorer = AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else if (random.nextBoolean()) {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      inScorer = super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n\n    if (scoreDocsInOrder == false && random.nextBoolean()) {\n      // The caller claims it can handle out-of-order\n      // docs; let's confirm that by pulling docs and\n      // randomly shuffling them before collection:\n      inScorer = new AssertingBulkOutOfOrderScorer(new Random(random.nextLong()), inScorer);\n    }\n    return inScorer;\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      // The incoming scorer already has a specialized\n      // implementation for BulkScorer, so we should use it:\n      return AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else if (scoreDocsInOrder == false && random.nextBoolean()) {\n      // The caller claims it can handle out-of-order\n      // docs; let's confirm that by pulling docs and\n      // randomly shuffling them before collection:\n      //Scorer scorer = in.scorer(context, acceptDocs);\n      Scorer scorer = scorer(context, acceptDocs);\n\n      // Scorer should not be null if bulkScorer wasn't:\n      assert scorer != null;\n      return new AssertingBulkOutOfOrderScorer(new Random(random.nextLong()), scorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      // The incoming scorer already has a specialized\n      // implementation for BulkScorer, so we should use it:\n      inScorer = AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else if (random.nextBoolean()) {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      inScorer = super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n\n    if (scoreDocsInOrder == false && random.nextBoolean()) {\n      // The caller claims it can handle out-of-order\n      // docs; let's confirm that by pulling docs and\n      // randomly shuffling them before collection:\n      inScorer = new AssertingBulkOutOfOrderScorer(new Random(random.nextLong()), inScorer);\n    }\n    return inScorer;\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      // The incoming scorer already has a specialized\n      // implementation for BulkScorer, so we should use it:\n      return AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else if (scoreDocsInOrder == false && random.nextBoolean()) {\n      // The caller claims it can handle out-of-order\n      // docs; let's confirm that by pulling docs and\n      // randomly shuffling them before collection:\n      //Scorer scorer = in.scorer(context, acceptDocs);\n      Scorer scorer = scorer(context, acceptDocs);\n\n      // Scorer should not be null if bulkScorer wasn't:\n      assert scorer != null;\n      return new AssertingBulkOutOfOrderScorer(new Random(random.nextLong()), scorer);\n    } else {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n    // if the caller asks for in-order scoring or if the weight does not support\n    // out-of order scoring then collection will have to happen in-order.\n    BulkScorer inScorer = in.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    if (inScorer == null) {\n      return null;\n    }\n\n    if (AssertingBulkScorer.shouldWrap(inScorer)) {\n      // The incoming scorer already has a specialized\n      // implementation for BulkScorer, so we should use it:\n      inScorer = AssertingBulkScorer.wrap(new Random(random.nextLong()), inScorer);\n    } else if (random.nextBoolean()) {\n      // Let super wrap this.scorer instead, so we use\n      // AssertingScorer:\n      inScorer = super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n    }\n\n    if (scoreDocsInOrder == false && random.nextBoolean()) {\n      // The caller claims it can handle out-of-order\n      // docs; let's confirm that by pulling docs and\n      // randomly shuffling them before collection:\n      inScorer = new AssertingBulkOutOfOrderScorer(new Random(random.nextLong()), inScorer);\n    }\n    return inScorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a5794e5c995c57444b154b01a9f3c837cd530a77","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["acf00221f44c5f08ccea014f2492b53af15ecd66","658a1d7b74c99b3d845fb1f852331a1c4623368e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"658a1d7b74c99b3d845fb1f852331a1c4623368e":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["658a1d7b74c99b3d845fb1f852331a1c4623368e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","a5794e5c995c57444b154b01a9f3c837cd530a77","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","658a1d7b74c99b3d845fb1f852331a1c4623368e"],"658a1d7b74c99b3d845fb1f852331a1c4623368e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}