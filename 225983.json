{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","sourceNew":"  /** Add a collection of disjuncts to this disjunction\n   * via Iterable<Query>\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","sourceOld":"  /** Add a collection of disjuncts to this disjunction\n   * via Iterable<Query>\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9a925cfa7a240a81c26ef70871aa91f828eeffb","date":1335130095,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","sourceNew":"  /** Add a collection of disjuncts to this disjunction\n   * via Iterable<Query>\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","sourceOld":"  /** Add a collection of disjuncts to this disjunction\n   * via Iterable<Query>\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c73727a366b38b14bf1b49189864fae45802471d","date":1346162539,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","sourceNew":"  /** Add a collection of disjuncts to this disjunction\n   * via Iterable&lt;Query&gt;\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","sourceOld":"  /** Add a collection of disjuncts to this disjunction\n   * via Iterable<Query>\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f3cb51ae28f21816e0275d2239d45bc0b272d8e2","date":1346170598,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","sourceNew":"  /** Add a collection of disjuncts to this disjunction\n   * via {@code Iterable<Query>}\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","sourceOld":"  /** Add a collection of disjuncts to this disjunction\n   * via Iterable&lt;Query&gt;\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","sourceNew":"  /** Add a collection of disjuncts to this disjunction\n   * via {@code Iterable<Query>}\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","sourceOld":"  /** Add a collection of disjuncts to this disjunction\n   * via Iterable<Query>\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685c242a4f1bc78f1fa61c131bd557355edad6c7","date":1429208182,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","sourceNew":"  /** Add a collection of disjuncts to this disjunction\n   * via {@code Iterable<Query>}\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(Objects.requireNonNull(disjuncts, \"Query connection must not be null\"));\n  }\n\n","sourceOld":"  /** Add a collection of disjuncts to this disjunction\n   * via {@code Iterable<Query>}\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n","bugFix":["2123bddbd65dea198cac380540636ce43a880403"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#add(Collection[Query]).mjava","sourceNew":null,"sourceOld":"  /** Add a collection of disjuncts to this disjunction\n   * via {@code Iterable<Query>}\n   * @param disjuncts a collection of queries to add as disjuncts.\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(Objects.requireNonNull(disjuncts, \"Query connection must not be null\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c73727a366b38b14bf1b49189864fae45802471d":["e9a925cfa7a240a81c26ef70871aa91f828eeffb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["f3cb51ae28f21816e0275d2239d45bc0b272d8e2"],"f3cb51ae28f21816e0275d2239d45bc0b272d8e2":["c73727a366b38b14bf1b49189864fae45802471d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["e9a925cfa7a240a81c26ef70871aa91f828eeffb","f3cb51ae28f21816e0275d2239d45bc0b272d8e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"e9a925cfa7a240a81c26ef70871aa91f828eeffb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c73727a366b38b14bf1b49189864fae45802471d":["f3cb51ae28f21816e0275d2239d45bc0b272d8e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e9a925cfa7a240a81c26ef70871aa91f828eeffb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"f3cb51ae28f21816e0275d2239d45bc0b272d8e2":["685c242a4f1bc78f1fa61c131bd557355edad6c7","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"e9a925cfa7a240a81c26ef70871aa91f828eeffb":["c73727a366b38b14bf1b49189864fae45802471d","05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}