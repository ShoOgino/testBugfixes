{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","commits":[{"id":"4b8414cdacb05e1277df96a30710f570f4251d9a","date":1323040348,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,boolean,int).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, readOnly, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  public static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int).mjava","sourceNew":"  public static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46a5d1e8f9b7ae49f68d7821e3f199e3df5921fa","date":1323422392,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  public static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, deletionPolicy, readOnly, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final Collection<ReaderFinishedListener> readerFinishedListeners =\n          new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = SegmentReader.get(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            readers[i].readerFinishedListeners = readerFinishedListeners;\n            success = true;\n          } finally {\n            if (!success) {\n              // Close all readers we had opened:\n              for(i++;i<sis.size();i++) {\n                try {\n                  readers[i].close();\n                } catch (Throwable ignore) {\n                  // keep going - we want to clean up as much as possible\n                }\n              }\n            }\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor,\n          false, readerFinishedListeners);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57dea241098eaf5af8a4789a62634f655d226641","date":1323618214,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final Collection<ReaderFinishedListener> readerFinishedListeners =\n          new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = SegmentReader.get(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            readers[i].readerFinishedListeners = readerFinishedListeners;\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor,\n          false, readerFinishedListeners);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final Collection<ReaderFinishedListener> readerFinishedListeners =\n          new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          boolean success = false;\n          try {\n            readers[i] = SegmentReader.get(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            readers[i].readerFinishedListeners = readerFinishedListeners;\n            success = true;\n          } finally {\n            if (!success) {\n              // Close all readers we had opened:\n              for(i++;i<sis.size();i++) {\n                try {\n                  readers[i].close();\n                } catch (Throwable ignore) {\n                  // keep going - we want to clean up as much as possible\n                }\n              }\n            }\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor,\n          false, readerFinishedListeners);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final Collection<ReaderFinishedListener> readerFinishedListeners =\n          new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = SegmentReader.get(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            readers[i].readerFinishedListeners = readerFinishedListeners;\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor,\n          false, readerFinishedListeners);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return new DirectoryReader(directory, infos, termInfosIndexDivisor);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = SegmentReader.get(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final Collection<ReaderFinishedListener> readerFinishedListeners =\n          new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = SegmentReader.get(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            readers[i].readerFinishedListeners = readerFinishedListeners;\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor,\n          false, readerFinishedListeners);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = SegmentReader.get(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  private static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  private static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  static IndexReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"46a5d1e8f9b7ae49f68d7821e3f199e3df5921fa":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46a5d1e8f9b7ae49f68d7821e3f199e3df5921fa"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","57dea241098eaf5af8a4789a62634f655d226641"],"57dea241098eaf5af8a4789a62634f655d226641":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ce667c6d3400b22523701c549c0d35e26da8b46","893d07555f01912f57b453a320e4d46363a31b50"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["46a5d1e8f9b7ae49f68d7821e3f199e3df5921fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["57dea241098eaf5af8a4789a62634f655d226641"],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["4b8414cdacb05e1277df96a30710f570f4251d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"46a5d1e8f9b7ae49f68d7821e3f199e3df5921fa":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"57dea241098eaf5af8a4789a62634f655d226641":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["57dea241098eaf5af8a4789a62634f655d226641"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","4b8414cdacb05e1277df96a30710f570f4251d9a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["46a5d1e8f9b7ae49f68d7821e3f199e3df5921fa"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}