{"path":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#getPayloads(Spans[]).mjava","commits":[{"id":"94a3c9097762cec00567aff9ceae83842107c895","date":1249571658,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#getPayloads(Spans[]).mjava","pathOld":"/dev/null","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n    \tfor (int i = 0; i < subSpans.length; i++) {\n    \t\tif (subSpans[i] instanceof NearSpansOrdered) {\n    \t\t\tif (((NearSpansOrdered)subSpans[i]).isPayloadAvailable()) {\n    \t\t\t\tprocessPayloads(((NearSpansOrdered)subSpans[i]).getPayload());\n    \t\t\t}\n    \t\t\tgetPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n    \t\t} else if (subSpans[i] instanceof NearSpansUnordered) {\n    \t\t\tif (((NearSpansUnordered)subSpans[i]).isPayloadAvailable()) {\n    \t\t\t\tprocessPayloads(((NearSpansUnordered)subSpans[i]).getPayload());\n    \t\t\t}\n    \t\t\tgetPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n    \t\t}\n    \t}\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c94837f36779069fd9b6b70e462b57515473d88","date":1249677298,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#getPayloads(Spans[]).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#getPayloads(Spans[]).mjava","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n    \tfor (int i = 0; i < subSpans.length; i++) {\n    \t\tif (subSpans[i] instanceof NearSpansOrdered) {\n    \t\t\tif (((NearSpansOrdered)subSpans[i]).isPayloadAvailable()) {\n    \t\t\t\tprocessPayloads(((NearSpansOrdered)subSpans[i]).getPayload());\n    \t\t\t}\n    \t\t\tgetPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n    \t\t} else if (subSpans[i] instanceof NearSpansUnordered) {\n    \t\t\tif (((NearSpansUnordered)subSpans[i]).isPayloadAvailable()) {\n    \t\t\t\tprocessPayloads(((NearSpansUnordered)subSpans[i]).getPayload());\n    \t\t\t}\n    \t\t\tgetPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n    \t\t}\n    \t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25dd1cb2e42d3840232ff4a1c39639386facc7ef","date":1250252059,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#getPayloads(Spans[]).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#getPayloads(Spans[]).mjava","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(), subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(), subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#getPayloads(Spans[]).mjava","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(), subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(), subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94a3c9097762cec00567aff9ceae83842107c895":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25dd1cb2e42d3840232ff4a1c39639386facc7ef":["4c94837f36779069fd9b6b70e462b57515473d88"],"4c94837f36779069fd9b6b70e462b57515473d88":["94a3c9097762cec00567aff9ceae83842107c895"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["25dd1cb2e42d3840232ff4a1c39639386facc7ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"]},"commit2Childs":{"94a3c9097762cec00567aff9ceae83842107c895":["4c94837f36779069fd9b6b70e462b57515473d88"],"25dd1cb2e42d3840232ff4a1c39639386facc7ef":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94a3c9097762cec00567aff9ceae83842107c895"],"4c94837f36779069fd9b6b70e462b57515473d88":["25dd1cb2e42d3840232ff4a1c39639386facc7ef"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}