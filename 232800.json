{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.ZKPrinter#printTree(JSONWriter,String).mjava","commits":[{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.ZKPrinter#printTree(JSONWriter,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#printTree(JSONWriter,String).mjava","sourceNew":"    boolean printTree(JSONWriter json, String path) throws IOException {\n      String label = path;\n      if (!fullpath) {\n        int idx = path.lastIndexOf('/');\n        label = idx > 0 ? path.substring(idx + 1) : path;\n      }\n      json.startObject();\n      //writeKeyValue(json, \"data\", label, true );\n      json.writeString(\"data\");\n      json.writeNameSeparator();\n\n      json.startObject();\n      writeKeyValue(json, \"title\", label, true);\n      json.writeValueSeparator();\n      json.writeString(\"attr\");\n      json.writeNameSeparator();\n      json.startObject();\n      writeKeyValue(json, \"href\", \"admin/zookeeper?detail=true&path=\" + URLEncoder.encode(path, \"UTF-8\"), true);\n      json.endObject();\n      json.endObject();\n\n      Stat stat = new Stat();\n      try {\n        // Trickily, the call to zkClient.getData fills in the stat variable\n        byte[] data = zkClient.getData(path, null, stat, true);\n\n        if (stat.getEphemeralOwner() != 0) {\n          writeKeyValue(json, \"ephemeral\", true, false);\n          writeKeyValue(json, \"version\", stat.getVersion(), false);\n        }\n\n        if (dump) {\n          json.writeValueSeparator();\n          printZnode(json, path);\n        }\n\n      } catch (IllegalArgumentException e) {\n        // path doesn't exist (must have been removed)\n        writeKeyValue(json, \"warning\", \"(path gone)\", false);\n      } catch (KeeperException e) {\n        writeKeyValue(json, \"warning\", e.toString(), false);\n        log.warn(\"Keeper Exception\", e);\n      } catch (InterruptedException e) {\n        writeKeyValue(json, \"warning\", e.toString(), false);\n        log.warn(\"InterruptedException\", e);\n      }\n\n      if (stat.getNumChildren() > 0) {\n        json.writeValueSeparator();\n        if (indent) {\n          json.indent();\n        }\n        json.writeString(\"children\");\n        json.writeNameSeparator();\n        json.startArray();\n\n        try {\n          List<String> children = zkClient.getChildren(path, null, true);\n          java.util.Collections.sort(children);\n\n          boolean first = true;\n          for (String child : children) {\n            if (!first) {\n              json.writeValueSeparator();\n            }\n\n            String childPath = path + (path.endsWith(\"/\") ? \"\" : \"/\") + child;\n            if (!printTree(json, childPath)) {\n              return false;\n            }\n            first = false;\n          }\n        } catch (KeeperException e) {\n          writeError(500, e.toString());\n          return false;\n        } catch (InterruptedException e) {\n          writeError(500, e.toString());\n          return false;\n        } catch (IllegalArgumentException e) {\n          // path doesn't exist (must have been removed)\n          json.writeString(\"(children gone)\");\n        }\n\n        json.endArray();\n      }\n\n      json.endObject();\n      return true;\n    }\n\n","sourceOld":"    boolean printTree(JSONWriter json, String path) throws IOException {\n      String label = path;\n      if (!fullpath) {\n        int idx = path.lastIndexOf('/');\n        label = idx > 0 ? path.substring(idx + 1) : path;\n      }\n      json.startObject();\n      //writeKeyValue(json, \"data\", label, true );\n      json.writeString(\"data\");\n      json.writeNameSeparator();\n\n      json.startObject();\n      writeKeyValue(json, \"title\", label, true);\n      json.writeValueSeparator();\n      json.writeString(\"attr\");\n      json.writeNameSeparator();\n      json.startObject();\n      writeKeyValue(json, \"href\", \"zookeeper?detail=true&path=\" + URLEncoder.encode(path, \"UTF-8\"), true);\n      json.endObject();\n      json.endObject();\n\n      Stat stat = new Stat();\n      try {\n        // Trickily, the call to zkClient.getData fills in the stat variable\n        byte[] data = zkClient.getData(path, null, stat, true);\n\n        if (stat.getEphemeralOwner() != 0) {\n          writeKeyValue(json, \"ephemeral\", true, false);\n          writeKeyValue(json, \"version\", stat.getVersion(), false);\n        }\n\n        if (dump) {\n          json.writeValueSeparator();\n          printZnode(json, path);\n        }\n\n      } catch (IllegalArgumentException e) {\n        // path doesn't exist (must have been removed)\n        writeKeyValue(json, \"warning\", \"(path gone)\", false);\n      } catch (KeeperException e) {\n        writeKeyValue(json, \"warning\", e.toString(), false);\n        log.warn(\"Keeper Exception\", e);\n      } catch (InterruptedException e) {\n        writeKeyValue(json, \"warning\", e.toString(), false);\n        log.warn(\"InterruptedException\", e);\n      }\n\n      if (stat.getNumChildren() > 0) {\n        json.writeValueSeparator();\n        if (indent) {\n          json.indent();\n        }\n        json.writeString(\"children\");\n        json.writeNameSeparator();\n        json.startArray();\n\n        try {\n          List<String> children = zkClient.getChildren(path, null, true);\n          java.util.Collections.sort(children);\n\n          boolean first = true;\n          for (String child : children) {\n            if (!first) {\n              json.writeValueSeparator();\n            }\n\n            String childPath = path + (path.endsWith(\"/\") ? \"\" : \"/\") + child;\n            if (!printTree(json, childPath)) {\n              return false;\n            }\n            first = false;\n          }\n        } catch (KeeperException e) {\n          writeError(500, e.toString());\n          return false;\n        } catch (InterruptedException e) {\n          writeError(500, e.toString());\n          return false;\n        } catch (IllegalArgumentException e) {\n          // path doesn't exist (must have been removed)\n          json.writeString(\"(children gone)\");\n        }\n\n        json.endArray();\n      }\n\n      json.endObject();\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351880c854a41628e436e41288f577af654cb565","date":1581184676,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.ZKPrinter#printTree(JSONWriter,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.ZKPrinter#printTree(JSONWriter,String).mjava","sourceNew":"    boolean printTree(JSONWriter json, String path) throws IOException {\n      String label = path;\n      if (!fullpath) {\n        int idx = path.lastIndexOf('/');\n        label = idx > 0 ? path.substring(idx + 1) : path;\n      }\n      json.startObject();\n      writeKeyValue(json, \"text\", label, true);\n      json.writeValueSeparator();\n      json.writeString(\"a_attr\");\n      json.writeNameSeparator();\n      json.startObject();\n      String href = \"admin/zookeeper?detail=true&path=\" + URLEncoder.encode(path, StandardCharsets.UTF_8);\n      writeKeyValue(json, \"href\", href, true);\n      json.endObject();\n\n      Stat stat = new Stat();\n      try {\n        // Trickily, the call to zkClient.getData fills in the stat variable\n        byte[] data = zkClient.getData(path, null, stat, true);\n\n        if (stat.getEphemeralOwner() != 0) {\n          writeKeyValue(json, \"ephemeral\", true, false);\n          writeKeyValue(json, \"version\", stat.getVersion(), false);\n        }\n\n        if (dump) {\n          json.writeValueSeparator();\n          printZnode(json, path);\n        }\n\n      } catch (IllegalArgumentException e) {\n        // path doesn't exist (must have been removed)\n        writeKeyValue(json, \"warning\", \"(path gone)\", false);\n      } catch (KeeperException e) {\n        writeKeyValue(json, \"warning\", e.toString(), false);\n        log.warn(\"Keeper Exception\", e);\n      } catch (InterruptedException e) {\n        writeKeyValue(json, \"warning\", e.toString(), false);\n        log.warn(\"InterruptedException\", e);\n      }\n\n      if (stat.getNumChildren() > 0) {\n        json.writeValueSeparator();\n        if (indent) {\n          json.indent();\n        }\n        json.writeString(\"children\");\n        json.writeNameSeparator();\n        json.startArray();\n\n        try {\n          List<String> children = zkClient.getChildren(path, null, true);\n          java.util.Collections.sort(children);\n\n          boolean first = true;\n          for (String child : children) {\n            if (!first) {\n              json.writeValueSeparator();\n            }\n\n            String childPath = path + (path.endsWith(\"/\") ? \"\" : \"/\") + child;\n            if (!printTree(json, childPath)) {\n              return false;\n            }\n            first = false;\n          }\n        } catch (KeeperException e) {\n          writeError(500, e.toString());\n          return false;\n        } catch (InterruptedException e) {\n          writeError(500, e.toString());\n          return false;\n        } catch (IllegalArgumentException e) {\n          // path doesn't exist (must have been removed)\n          json.writeString(\"(children gone)\");\n        }\n\n        json.endArray();\n      }\n\n      json.endObject();\n      return true;\n    }\n\n","sourceOld":"    boolean printTree(JSONWriter json, String path) throws IOException {\n      String label = path;\n      if (!fullpath) {\n        int idx = path.lastIndexOf('/');\n        label = idx > 0 ? path.substring(idx + 1) : path;\n      }\n      json.startObject();\n      //writeKeyValue(json, \"data\", label, true );\n      json.writeString(\"data\");\n      json.writeNameSeparator();\n\n      json.startObject();\n      writeKeyValue(json, \"title\", label, true);\n      json.writeValueSeparator();\n      json.writeString(\"attr\");\n      json.writeNameSeparator();\n      json.startObject();\n      writeKeyValue(json, \"href\", \"admin/zookeeper?detail=true&path=\" + URLEncoder.encode(path, \"UTF-8\"), true);\n      json.endObject();\n      json.endObject();\n\n      Stat stat = new Stat();\n      try {\n        // Trickily, the call to zkClient.getData fills in the stat variable\n        byte[] data = zkClient.getData(path, null, stat, true);\n\n        if (stat.getEphemeralOwner() != 0) {\n          writeKeyValue(json, \"ephemeral\", true, false);\n          writeKeyValue(json, \"version\", stat.getVersion(), false);\n        }\n\n        if (dump) {\n          json.writeValueSeparator();\n          printZnode(json, path);\n        }\n\n      } catch (IllegalArgumentException e) {\n        // path doesn't exist (must have been removed)\n        writeKeyValue(json, \"warning\", \"(path gone)\", false);\n      } catch (KeeperException e) {\n        writeKeyValue(json, \"warning\", e.toString(), false);\n        log.warn(\"Keeper Exception\", e);\n      } catch (InterruptedException e) {\n        writeKeyValue(json, \"warning\", e.toString(), false);\n        log.warn(\"InterruptedException\", e);\n      }\n\n      if (stat.getNumChildren() > 0) {\n        json.writeValueSeparator();\n        if (indent) {\n          json.indent();\n        }\n        json.writeString(\"children\");\n        json.writeNameSeparator();\n        json.startArray();\n\n        try {\n          List<String> children = zkClient.getChildren(path, null, true);\n          java.util.Collections.sort(children);\n\n          boolean first = true;\n          for (String child : children) {\n            if (!first) {\n              json.writeValueSeparator();\n            }\n\n            String childPath = path + (path.endsWith(\"/\") ? \"\" : \"/\") + child;\n            if (!printTree(json, childPath)) {\n              return false;\n            }\n            first = false;\n          }\n        } catch (KeeperException e) {\n          writeError(500, e.toString());\n          return false;\n        } catch (InterruptedException e) {\n          writeError(500, e.toString());\n          return false;\n        } catch (IllegalArgumentException e) {\n          // path doesn't exist (must have been removed)\n          json.writeString(\"(children gone)\");\n        }\n\n        json.endArray();\n      }\n\n      json.endObject();\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351880c854a41628e436e41288f577af654cb565":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["351880c854a41628e436e41288f577af654cb565"]},"commit2Childs":{"351880c854a41628e436e41288f577af654cb565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["351880c854a41628e436e41288f577af654cb565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}