{"path":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","commits":[{"id":"1fb70d5d797131bf722eac86615eae787b5af9ea","date":1112363464,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"    public int hashCode() {\n      return term.hashCode();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44bba5a5c8e289174c279a398fe25f34fa6c4945","date":1136406169,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","sourceNew":"    public int hashCode() {\n      return term.hashCode() + Float.floatToRawIntBits(getBoost());\n    }\n\n","sourceOld":"    public int hashCode() {\n      return term.hashCode();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","sourceNew":"  public int hashCode() {\n    if (term == null) {\n      throw new UnsupportedOperationException(\n          \"MultiTermQuerys that do not use a pattern term need to override equals/hashcode\");\n    }\n    return term.hashCode() + Float.floatToRawIntBits(getBoost());\n  }\n\n","sourceOld":"    public int hashCode() {\n      return term.hashCode() + Float.floatToRawIntBits(getBoost());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0a32bc578c175fa42d65d95f21290d3473d84","date":1241610125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","sourceNew":"  //@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + Float.floatToIntBits(getBoost());\n    result = prime * result + (constantScoreRewrite ? 1231 : 1237);\n    return result;\n  }\n\n","sourceOld":"  public int hashCode() {\n    if (term == null) {\n      throw new UnsupportedOperationException(\n          \"MultiTermQuerys that do not use a pattern term need to override equals/hashcode\");\n    }\n    return term.hashCode() + Float.floatToRawIntBits(getBoost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","sourceNew":"  //@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + Float.floatToIntBits(getBoost());\n    result = prime * result;\n    result += rewriteMethod.hashCode();\n    return result;\n  }\n\n","sourceOld":"  //@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + Float.floatToIntBits(getBoost());\n    result = prime * result + (constantScoreRewrite ? 1231 : 1237);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + Float.floatToIntBits(getBoost());\n    result = prime * result;\n    result += rewriteMethod.hashCode();\n    return result;\n  }\n\n","sourceOld":"  //@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + Float.floatToIntBits(getBoost());\n    result = prime * result;\n    result += rewriteMethod.hashCode();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + Float.floatToIntBits(getBoost());\n    result = prime * result;\n    result += rewriteMethod.hashCode();\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + Float.floatToIntBits(getBoost());\n    result = prime * result;\n    result += rewriteMethod.hashCode();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58d0a32bc578c175fa42d65d95f21290d3473d84":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["44bba5a5c8e289174c279a398fe25f34fa6c4945"],"44bba5a5c8e289174c279a398fe25f34fa6c4945":["1fb70d5d797131bf722eac86615eae787b5af9ea"]},"commit2Childs":{"1fb70d5d797131bf722eac86615eae787b5af9ea":["44bba5a5c8e289174c279a398fe25f34fa6c4945"],"58d0a32bc578c175fa42d65d95f21290d3473d84":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fb70d5d797131bf722eac86615eae787b5af9ea"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"44bba5a5c8e289174c279a398fe25f34fa6c4945":["6f7a11eba51d213f09b96054111cf56a1e5796a3"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}