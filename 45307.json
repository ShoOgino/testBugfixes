{"path":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","commits":[{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + leaderUrl);\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl, () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges());\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + leaderUrl);\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl, () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges());\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + leaderUrl);\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl, () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges());\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","sourceNew":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {}\", msg(), otherVersions.size(), leaderUrl);\n    }\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl, () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges());\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","sourceOld":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    log.info(msg() + \" Received \" + otherVersions.size() + \" versions from \" + leaderUrl);\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl, () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges());\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","sourceNew":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    @SuppressWarnings({\"unchecked\"})\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {}\", msg(), otherVersions.size(), leaderUrl);\n    }\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl, () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges());\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","sourceOld":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {}\", msg(), otherVersions.size(), leaderUrl);\n    }\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl, () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges());\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38d3299f414132db022cec9d60b2dafc244a7c3","date":1597046674,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#buildMissedUpdatesRequest(NamedList[Object]).mjava","sourceNew":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    @SuppressWarnings({\"unchecked\"})\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {}\", msg(), otherVersions.size(), leaderUrl);\n    }\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl);\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","sourceOld":"  private MissedUpdatesRequest buildMissedUpdatesRequest(NamedList<Object> rsp) {\n    // we retrieved the last N updates from the replica\n    @SuppressWarnings({\"unchecked\"})\n    List<Long> otherVersions = (List<Long>)rsp.get(\"versions\");\n    if (log.isInfoEnabled()) {\n      log.info(\"{} Received {} versions from {}\", msg(), otherVersions.size(), leaderUrl);\n    }\n\n    if (otherVersions.isEmpty()) {\n      return MissedUpdatesRequest.UNABLE_TO_SYNC;\n    }\n\n    MissedUpdatesRequest updatesRequest = missedUpdatesFinder.find(otherVersions, leaderUrl, () -> core.getSolrConfig().useRangeVersionsForPeerSync && canHandleVersionRanges());\n    if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n      if (doFingerprint) return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      return MissedUpdatesRequest.ALREADY_IN_SYNC;\n    }\n\n    return updatesRequest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c38d3299f414132db022cec9d60b2dafc244a7c3":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["740d649f013f07efbeb73ca854f106c60166e7c0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"c38d3299f414132db022cec9d60b2dafc244a7c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"740d649f013f07efbeb73ca854f106c60166e7c0":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","740d649f013f07efbeb73ca854f106c60166e7c0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}