{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","commits":[{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","sourceOld":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","sourceOld":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e92a321a2612261e1010a4038c8586e30b081552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92a321a2612261e1010a4038c8586e30b081552":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e92a321a2612261e1010a4038c8586e30b081552"],"e92a321a2612261e1010a4038c8586e30b081552":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}