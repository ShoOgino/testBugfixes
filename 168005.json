{"path":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","sourceNew":"    public void testInsertWithOverflow() {\n      int size = 4;\n      PriorityQueue<Integer> pq = new IntegerQueue(size);\n      Integer i1 = 2;\n      Integer i2 = 3;\n      Integer i3 = 1;\n      Integer i4 = 5;\n      Integer i5 = 7;\n      Integer i6 = 1;\n      \n      assertNull(pq.insertWithOverflow(i1));\n      assertNull(pq.insertWithOverflow(i2));\n      assertNull(pq.insertWithOverflow(i3));\n      assertNull(pq.insertWithOverflow(i4));\n      assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n      assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n      assertEquals(size, pq.size());\n      assertEquals((Integer) 2, pq.top());\n    }\n\n","sourceOld":"    public void testInsertWithOverflow() {\n      int size = 4;\n      PriorityQueue<Integer> pq = new IntegerQueue(size);\n      Integer i1 = 2;\n      Integer i2 = 3;\n      Integer i3 = 1;\n      Integer i4 = 5;\n      Integer i5 = 7;\n      Integer i6 = 1;\n      \n      assertNull(pq.insertWithOverflow(i1));\n      assertNull(pq.insertWithOverflow(i2));\n      assertNull(pq.insertWithOverflow(i3));\n      assertNull(pq.insertWithOverflow(i4));\n      assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n      assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n      assertEquals(size, pq.size());\n      assertEquals((Integer) 2, pq.top());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af7005974a7d7f71beef18cb9aa918b9d968d163","date":1532074399,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testInsertWithOverflow().mjava","sourceNew":"  public void testInsertWithOverflow() {\n    int size = 4;\n    PriorityQueue<Integer> pq = new IntegerQueue(size);\n    Integer i1 = 2;\n    Integer i2 = 3;\n    Integer i3 = 1;\n    Integer i4 = 5;\n    Integer i5 = 7;\n    Integer i6 = 1;\n\n    assertNull(pq.insertWithOverflow(i1));\n    assertNull(pq.insertWithOverflow(i2));\n    assertNull(pq.insertWithOverflow(i3));\n    assertNull(pq.insertWithOverflow(i4));\n    assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n    assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n    assertEquals(size, pq.size());\n    assertEquals((Integer) 2, pq.top());\n  }\n\n","sourceOld":"    public void testInsertWithOverflow() {\n      int size = 4;\n      PriorityQueue<Integer> pq = new IntegerQueue(size);\n      Integer i1 = 2;\n      Integer i2 = 3;\n      Integer i3 = 1;\n      Integer i4 = 5;\n      Integer i5 = 7;\n      Integer i6 = 1;\n      \n      assertNull(pq.insertWithOverflow(i1));\n      assertNull(pq.insertWithOverflow(i2));\n      assertNull(pq.insertWithOverflow(i3));\n      assertNull(pq.insertWithOverflow(i4));\n      assertTrue(pq.insertWithOverflow(i5) == i3); // i3 should have been dropped\n      assertTrue(pq.insertWithOverflow(i6) == i6); // i6 should not have been inserted\n      assertEquals(size, pq.size());\n      assertEquals((Integer) 2, pq.top());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af7005974a7d7f71beef18cb9aa918b9d968d163"],"af7005974a7d7f71beef18cb9aa918b9d968d163":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["af7005974a7d7f71beef18cb9aa918b9d968d163"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"af7005974a7d7f71beef18cb9aa918b9d968d163":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}