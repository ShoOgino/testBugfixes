{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() throws IOException {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      @Override\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (LeafFieldComparator fc : leafComparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"f7558b5077dd4abd457be151475f13b541f4f13e":["901e951cec2e6af4e503209a6721c8834db23279"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["f7558b5077dd4abd457be151475f13b541f4f13e"],"97d4692d0c601ff773f0a2231967312428a904e4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["97d4692d0c601ff773f0a2231967312428a904e4"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","20e94e61fe5291647346b70437617e6b6c370408"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["901e951cec2e6af4e503209a6721c8834db23279","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"f7558b5077dd4abd457be151475f13b541f4f13e":["20e94e61fe5291647346b70437617e6b6c370408","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["901e951cec2e6af4e503209a6721c8834db23279"],"901e951cec2e6af4e503209a6721c8834db23279":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","97d4692d0c601ff773f0a2231967312428a904e4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}