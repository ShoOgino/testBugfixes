{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (NullPointerException npe) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (NullPointerException npe) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (NullPointerException npe) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}