{"path":"backwards/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"/dev/null","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}