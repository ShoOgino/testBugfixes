{"path":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    long lastPayloadFP = 0;\n    long lastSkipFP = 0;\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    final PendingTerm firstTerm = slice.get(0);\n    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;\n    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;\n    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      final boolean isFirstTerm = idx == 0;\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\"  write idx=\" + idx + \" docIndex=\" + t.docIndex);\n      docIndexFlush.copyFrom(t.docIndex, false);\n      docIndexFlush.write(indexBytesWriter, isFirstTerm);\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        freqIndexFlush.copyFrom(t.freqIndex, false);\n        freqIndexFlush.write(indexBytesWriter, isFirstTerm);\n        //System.out.println(\"    freqIndex=\" + t.freqIndex);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          posIndexFlush.copyFrom(t.posIndex, false);\n          posIndexFlush.write(indexBytesWriter, isFirstTerm);\n          //System.out.println(\"    posIndex=\" + t.posIndex);\n          if (storePayloads) {\n            //System.out.println(\"    payloadFP=\" + t.payloadFP);\n            if (isFirstTerm) {\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n        //System.out.println(\"    skipFP=\" + t.skipFP);\n      }\n    }\n\n    //System.out.println(\"  numBytes=\" + indexBytesWriter.getFilePointer());\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    long lastPayloadFP = 0;\n    long lastSkipFP = 0;\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    final PendingTerm firstTerm = slice.get(0);\n    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;\n    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;\n    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      final boolean isFirstTerm = idx == 0;\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\"  write idx=\" + idx + \" docIndex=\" + t.docIndex);\n      docIndexFlush.copyFrom(t.docIndex, false);\n      docIndexFlush.write(indexBytesWriter, isFirstTerm);\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        freqIndexFlush.copyFrom(t.freqIndex, false);\n        freqIndexFlush.write(indexBytesWriter, isFirstTerm);\n        //System.out.println(\"    freqIndex=\" + t.freqIndex);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          posIndexFlush.copyFrom(t.posIndex, false);\n          posIndexFlush.write(indexBytesWriter, isFirstTerm);\n          //System.out.println(\"    posIndex=\" + t.posIndex);\n          if (storePayloads) {\n            //System.out.println(\"    payloadFP=\" + t.payloadFP);\n            if (isFirstTerm) {\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n        //System.out.println(\"    skipFP=\" + t.skipFP);\n      }\n    }\n\n    //System.out.println(\"  numBytes=\" + indexBytesWriter.getFilePointer());\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    long lastPayloadFP = 0;\n    long lastSkipFP = 0;\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    final PendingTerm firstTerm = slice.get(0);\n    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;\n    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;\n    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      final boolean isFirstTerm = idx == 0;\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\"  write idx=\" + idx + \" docIndex=\" + t.docIndex);\n      docIndexFlush.copyFrom(t.docIndex, false);\n      docIndexFlush.write(indexBytesWriter, isFirstTerm);\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        freqIndexFlush.copyFrom(t.freqIndex, false);\n        freqIndexFlush.write(indexBytesWriter, isFirstTerm);\n        //System.out.println(\"    freqIndex=\" + t.freqIndex);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          posIndexFlush.copyFrom(t.posIndex, false);\n          posIndexFlush.write(indexBytesWriter, isFirstTerm);\n          //System.out.println(\"    posIndex=\" + t.posIndex);\n          if (storePayloads) {\n            //System.out.println(\"    payloadFP=\" + t.payloadFP);\n            if (isFirstTerm) {\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n        //System.out.println(\"    skipFP=\" + t.skipFP);\n      }\n    }\n\n    //System.out.println(\"  numBytes=\" + indexBytesWriter.getFilePointer());\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    //System.out.println(\"SEPW: flushTermsBlock: start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size() + \" termsOut.fp=\" + termsOut.getFilePointer());\n    assert indexBytesWriter.getFilePointer() == 0;\n    final int absStart = pendingTerms.size() - start;\n    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);\n\n    long lastPayloadFP = 0;\n    long lastSkipFP = 0;\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    final PendingTerm firstTerm = slice.get(0);\n    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;\n    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;\n    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;\n\n    for(int idx=0;idx<slice.size();idx++) {\n      final boolean isFirstTerm = idx == 0;\n      final PendingTerm t = slice.get(idx);\n      //System.out.println(\"  write idx=\" + idx + \" docIndex=\" + t.docIndex);\n      docIndexFlush.copyFrom(t.docIndex, false);\n      docIndexFlush.write(indexBytesWriter, isFirstTerm);\n      if (indexOptions != IndexOptions.DOCS_ONLY) {\n        freqIndexFlush.copyFrom(t.freqIndex, false);\n        freqIndexFlush.write(indexBytesWriter, isFirstTerm);\n        //System.out.println(\"    freqIndex=\" + t.freqIndex);\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          posIndexFlush.copyFrom(t.posIndex, false);\n          posIndexFlush.write(indexBytesWriter, isFirstTerm);\n          //System.out.println(\"    posIndex=\" + t.posIndex);\n          if (storePayloads) {\n            //System.out.println(\"    payloadFP=\" + t.payloadFP);\n            if (isFirstTerm) {\n              indexBytesWriter.writeVLong(t.payloadFP);\n            } else {\n              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);\n            }\n            lastPayloadFP = t.payloadFP;\n          }\n        }\n      }\n\n      if (t.skipFP != -1) {\n        if (isFirstTerm) {\n          indexBytesWriter.writeVLong(t.skipFP);\n        } else {\n          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);\n        }\n        lastSkipFP = t.skipFP;\n        //System.out.println(\"    skipFP=\" + t.skipFP);\n      }\n    }\n\n    //System.out.println(\"  numBytes=\" + indexBytesWriter.getFilePointer());\n    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());\n    indexBytesWriter.writeTo(termsOut);\n    indexBytesWriter.reset();\n    slice.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}