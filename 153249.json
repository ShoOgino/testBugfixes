{"path":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,FunctionValues,FunctionValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/distance/GeohashHaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  protected double distance(int doc, FunctionValues gh1DV, FunctionValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","sourceOld":"  protected double distance(int doc, DocValues gh1DV, DocValues gh2DV) {\n    double result = 0;\n    String h1 = gh1DV.strVal(doc);\n    String h2 = gh2DV.strVal(doc);\n    if (h1 != null && h2 != null && h1.equals(h2) == false){\n      //TODO: If one of the hashes is a literal value source, seems like we could cache it\n      //and avoid decoding every time\n      double[] h1Pair = GeoHashUtils.decode(h1);\n      double[] h2Pair = GeoHashUtils.decode(h2);\n      result = DistanceUtils.haversine(Math.toRadians(h1Pair[0]), Math.toRadians(h1Pair[1]),\n              Math.toRadians(h2Pair[0]), Math.toRadians(h2Pair[1]), radius);\n    } else if (h1 == null || h2 == null){\n      result = Double.MAX_VALUE;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["c26f00b574427b55127e869b935845554afde1fa","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}