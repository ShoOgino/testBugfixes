{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestLongValueFacetCounts#assertSame(String,List[Map.Entry[Long,Integer]],int,int,FacetResult,int).mjava","commits":[{"id":"4513731041236fcf659e5bfc43d8862e1721a310","date":1504022253,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestLongValueFacetCounts#assertSame(String,List[Map.Entry[Long,Integer]],int,int,FacetResult,int).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertSame(String desc, List<Map.Entry<Long, Integer>> expectedCounts,\n                                 int expectedChildCount, int expectedTotalCount, FacetResult actual, int topN) {\n    int expectedTopN = Math.min(topN, expectedCounts.size());\n    if (VERBOSE) {\n      System.out.println(\"  expected topN=\" + expectedTopN);\n      for (int i = 0; i < expectedTopN; i++) {\n        System.out.println(\"    \" + i + \": value=\" + expectedCounts.get(i).getKey() + \" count=\" + expectedCounts.get(i).getValue());\n      }\n      System.out.println(\"  actual topN=\" + actual.labelValues.length);\n      for (int i = 0; i < actual.labelValues.length; i++) {\n        System.out.println(\"    \" + i + \": value=\" + actual.labelValues[i].label + \" count=\" + actual.labelValues[i].value);\n      }\n    }\n    assertEquals(desc + \": topN\", expectedTopN, actual.labelValues.length);\n    assertEquals(desc + \": childCount\", expectedChildCount, actual.childCount);\n    assertEquals(desc + \": totCount\", expectedTotalCount, actual.value.intValue());\n    assertTrue(actual.labelValues.length <= topN);\n\n    for (int i = 0; i < expectedTopN; i++) {\n      assertEquals(desc + \": label[\" + i + \"]\", Long.toString(expectedCounts.get(i).getKey()), actual.labelValues[i].label);\n      assertEquals(desc + \": counts[\" + i + \"]\", expectedCounts.get(i).getValue().intValue(), actual.labelValues[i].value.intValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6028626aa0f7c266ef725110257eed11e5b3d1d7","date":1504104056,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestLongValueFacetCounts#assertSame(String,List[Map.Entry[Long,Integer]],int,int,FacetResult,int).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertSame(String desc, List<Map.Entry<Long, Integer>> expectedCounts,\n                                 int expectedChildCount, int expectedTotalCount, FacetResult actual, int topN) {\n    int expectedTopN = Math.min(topN, expectedCounts.size());\n    if (VERBOSE) {\n      System.out.println(\"  expected topN=\" + expectedTopN);\n      for (int i = 0; i < expectedTopN; i++) {\n        System.out.println(\"    \" + i + \": value=\" + expectedCounts.get(i).getKey() + \" count=\" + expectedCounts.get(i).getValue());\n      }\n      System.out.println(\"  actual topN=\" + actual.labelValues.length);\n      for (int i = 0; i < actual.labelValues.length; i++) {\n        System.out.println(\"    \" + i + \": value=\" + actual.labelValues[i].label + \" count=\" + actual.labelValues[i].value);\n      }\n    }\n    assertEquals(desc + \": topN\", expectedTopN, actual.labelValues.length);\n    assertEquals(desc + \": childCount\", expectedChildCount, actual.childCount);\n    assertEquals(desc + \": totCount\", expectedTotalCount, actual.value.intValue());\n    assertTrue(actual.labelValues.length <= topN);\n\n    for (int i = 0; i < expectedTopN; i++) {\n      assertEquals(desc + \": label[\" + i + \"]\", Long.toString(expectedCounts.get(i).getKey()), actual.labelValues[i].label);\n      assertEquals(desc + \": counts[\" + i + \"]\", expectedCounts.get(i).getValue().intValue(), actual.labelValues[i].value.intValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestLongValueFacetCounts#assertSame(String,List[Map.Entry[Long,Integer]],int,int,FacetResult,int).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertSame(String desc, List<Map.Entry<Long, Integer>> expectedCounts,\n                                 int expectedChildCount, int expectedTotalCount, FacetResult actual, int topN) {\n    int expectedTopN = Math.min(topN, expectedCounts.size());\n    if (VERBOSE) {\n      System.out.println(\"  expected topN=\" + expectedTopN);\n      for (int i = 0; i < expectedTopN; i++) {\n        System.out.println(\"    \" + i + \": value=\" + expectedCounts.get(i).getKey() + \" count=\" + expectedCounts.get(i).getValue());\n      }\n      System.out.println(\"  actual topN=\" + actual.labelValues.length);\n      for (int i = 0; i < actual.labelValues.length; i++) {\n        System.out.println(\"    \" + i + \": value=\" + actual.labelValues[i].label + \" count=\" + actual.labelValues[i].value);\n      }\n    }\n    assertEquals(desc + \": topN\", expectedTopN, actual.labelValues.length);\n    assertEquals(desc + \": childCount\", expectedChildCount, actual.childCount);\n    assertEquals(desc + \": totCount\", expectedTotalCount, actual.value.intValue());\n    assertTrue(actual.labelValues.length <= topN);\n\n    for (int i = 0; i < expectedTopN; i++) {\n      assertEquals(desc + \": label[\" + i + \"]\", Long.toString(expectedCounts.get(i).getKey()), actual.labelValues[i].label);\n      assertEquals(desc + \": counts[\" + i + \"]\", expectedCounts.get(i).getValue().intValue(), actual.labelValues[i].value.intValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6028626aa0f7c266ef725110257eed11e5b3d1d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4513731041236fcf659e5bfc43d8862e1721a310"],"4513731041236fcf659e5bfc43d8862e1721a310":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6028626aa0f7c266ef725110257eed11e5b3d1d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6028626aa0f7c266ef725110257eed11e5b3d1d7"]},"commit2Childs":{"6028626aa0f7c266ef725110257eed11e5b3d1d7":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4513731041236fcf659e5bfc43d8862e1721a310":["6028626aa0f7c266ef725110257eed11e5b3d1d7"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6028626aa0f7c266ef725110257eed11e5b3d1d7","4513731041236fcf659e5bfc43d8862e1721a310","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}