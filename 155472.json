{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","commits":[{"id":"c9a209db8d858a699744d4141d223e81bfd50901","date":1495175317,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","pathOld":"/dev/null","sourceNew":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected float score(BasicStats stats, float freq, float docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","pathOld":"/dev/null","sourceNew":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected float score(BasicStats stats, float freq, float docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","sourceNew":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected float score(BasicStats stats, float freq, float docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","sourceNew":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n\n      @Override\n      protected double maxScore(BasicStats stats, double maxFreq) {\n        return maxFreq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","sourceNew":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n\n      @Override\n      protected double maxScore(BasicStats stats, double maxFreq) {\n        return maxFreq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","sourceNew":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n\n      @Override\n      protected double maxScore(BasicStats stats, double maxFreq) {\n        return maxFreq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","sourceNew":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n\n      @Override\n      protected double maxScore(BasicStats stats, double maxFreq) {\n        return maxFreq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testScoreMode().mjava","sourceNew":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits.value);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScoreMode() throws IOException {\n    Similarity sim = new SimilarityBase() {\n\n      @Override\n      public String toString() {\n        return \"TestSim\";\n      }\n\n      @Override\n      protected double score(BasicStats stats, double freq, double docLen) {\n        return freq;\n      }\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setSimilarity(sim));\n    w.addDocuments(Arrays.asList(\n        Collections.singleton(newTextField(\"foo\", \"bar bar\", Store.NO)),\n        Collections.singleton(newTextField(\"foo\", \"bar\", Store.NO)),\n        Collections.emptyList(),\n        Collections.singleton(newStringField(\"type\", new BytesRef(\"parent\"), Store.NO))));\n    DirectoryReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(sim);\n    BitSetProducer parents = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    for (ScoreMode scoreMode : ScoreMode.values()) {\n      Query query = new ToParentBlockJoinQuery(new TermQuery(new Term(\"foo\", \"bar\")), parents, scoreMode);\n      TopDocs topDocs = searcher.search(query, 10);\n      assertEquals(1, topDocs.totalHits);\n      assertEquals(3, topDocs.scoreDocs[0].doc);\n      float expectedScore;\n      switch (scoreMode) {\n        case Avg:\n          expectedScore = 1.5f;\n          break;\n        case Max:\n          expectedScore = 2f;\n          break;\n        case Min:\n          expectedScore = 1f;\n          break;\n        case None:\n          expectedScore = 0f;\n          break;\n        case Total:\n          expectedScore = 3f;\n          break;\n        default:\n          throw new AssertionError();\n      }\n      assertEquals(expectedScore, topDocs.scoreDocs[0].score, 0f);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c68bfb3354451a11c895b36484af94f27530b79":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","0c68bfb3354451a11c895b36484af94f27530b79"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9a209db8d858a699744d4141d223e81bfd50901"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["c9a209db8d858a699744d4141d223e81bfd50901"],"c9a209db8d858a699744d4141d223e81bfd50901":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["b94236357aaa22b76c10629851fe4e376e0cea82"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"417142ff08fda9cf0b72d5133e63097a166c6458":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"0c68bfb3354451a11c895b36484af94f27530b79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"c9a209db8d858a699744d4141d223e81bfd50901":["e9017cf144952056066919f1ebc7897ff9bd71b1","ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c9a209db8d858a699744d4141d223e81bfd50901"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["0c68bfb3354451a11c895b36484af94f27530b79","b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}