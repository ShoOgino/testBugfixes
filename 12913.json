{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","commits":[{"id":"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","date":1330500722,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":"  private ShardResponse take(boolean bailOnError) {\r\n    \r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\r\n        // add response to the response list... we do this after the take() and\r\n        // not after the completion of \"call\" so we know when the last response\r\n        // for a request was received.  Otherwise we might return the same\r\n        // request more than once.\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private ShardResponse take(boolean bailOnError) {\r\n    \r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\r\n        // add response to the response list... we do this after the take() and\r\n        // not after the completion of \"call\" so we know when the last response\r\n        // for a request was received.  Otherwise we might return the same\r\n        // request more than once.\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76dfc2581b6998f72c0e749c6200e9c2432c36f","date":1332788228,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","sourceNew":"  private ShardResponse take(boolean bailOnError) {\n    \n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ShardResponse take(boolean bailOnError) {\r\n    \r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\r\n        // add response to the response list... we do this after the take() and\r\n        // not after the completion of \"call\" so we know when the last response\r\n        // for a request was received.  Otherwise we might return the same\r\n        // request more than once.\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc28b46d62a8b91c8e90f9345612c4050eab98d4","date":1581344825,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","sourceNew":"  private ShardResponse take(boolean bailOnError) {\n\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\", e);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ShardResponse take(boolean bailOnError) {\n    \n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","sourceNew":"  private ShardResponse take(boolean bailOnError) {\n    try {\n      while (pending.get() > 0) {\n        ShardResponse rsp = responses.take();\n        responseCancellableMap.remove(rsp);\n\n        pending.decrementAndGet();\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      }\n    } catch (InterruptedException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    return null;\n  }\n\n","sourceOld":"  private ShardResponse take(boolean bailOnError) {\n\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\", e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"],"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}