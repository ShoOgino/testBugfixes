{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(SolrIndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","commits":[{"id":"5c4d4ec3bca82c8eac712592ab518cd082026f34","date":1585956055,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(SolrIndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"/dev/null","sourceNew":"    public SolrFeatureWeight(SolrIndexSearcher searcher,\n                             SolrQueryRequest request, Query originalQuery, Map<String, String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        final SolrQueryRequest req = makeRequest(request.getCore(), q, fq, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the scoring query\n        Query scoreQuery;\n        String qStr = q;\n        if (qStr == null || qStr.isEmpty()) {\n          scoreQuery = null; // ultimately behaves like MatchAllDocsQuery\n        } else {\n          qStr = macroExpander.expand(qStr);\n          if (qStr == null) {\n            throw new FeatureException(this.getClass().getSimpleName() + \" requires efi parameter that was not passed in request.\");\n          }\n          scoreQuery = QParser.getParser(qStr, req).getQuery();\n          // note: QParser can return a null Query sometimes, such as if the query is a stopword or just symbols\n          if (scoreQuery == null) {\n            scoreQuery = new MatchNoDocsQuery(); // debatable; all or none?\n          }\n        }\n\n        // Build the filter queries\n        Query filterDocSetQuery = null;\n        if (fq != null) {\n          List<Query> filterQueries = new ArrayList<>(); // If there are no fqs we just want an empty list\n          for (String fqStr : fq) {\n            if (fqStr != null) {\n              fqStr = macroExpander.expand(fqStr);\n              if (fqStr == null) {\n                throw new FeatureException(this.getClass().getSimpleName() + \" requires efi parameter that was not passed in request.\");\n              }\n              final Query filterQuery = QParser.getParser(fqStr, req).getQuery();\n              if (filterQuery != null) {\n                filterQueries.add(filterQuery);\n              }\n            }\n          }\n\n          if (filterQueries.isEmpty() == false) { // TODO optimize getDocSet to make this check unnecessary SOLR-14376\n            DocSet filtersDocSet = searcher.getDocSet(filterQueries); // execute\n            if (filtersDocSet != searcher.getLiveDocSet()) {\n              filterDocSetQuery = filtersDocSet.getTopFilter();\n            }\n          }\n        }\n\n        Query query = QueryUtils.combineQueryAndFilter(scoreQuery, filterDocSetQuery);\n\n        solrQueryWeight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5361ab773601ff1a8b1a3f38d928e1376a0dbb","date":1593191553,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(SolrIndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/feature/SolrFeature.SolrFeatureWeight#SolrFeatureWeight(SolrIndexSearcher,SolrQueryRequest,Query,Map[String,String[]]).mjava","sourceNew":"    public SolrFeatureWeight(SolrIndexSearcher searcher,\n                             SolrQueryRequest request, Query originalQuery, Map<String, String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        final SolrQueryRequest req = makeRequest(request.getCore(), q, fq, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the scoring query\n        Query scoreQuery;\n        String qStr = q;\n        if (qStr == null || qStr.isEmpty()) {\n          scoreQuery = null; // ultimately behaves like MatchAllDocsQuery\n        } else {\n          qStr = macroExpander.expand(qStr);\n          if (qStr == null) {\n            throw new FeatureException(this.getClass().getSimpleName() + \" requires efi parameter that was not passed in request.\");\n          }\n          scoreQuery = QParser.getParser(qStr, req).getQuery();\n          // note: QParser can return a null Query sometimes, such as if the query is a stopword or just symbols\n          if (scoreQuery == null) {\n            scoreQuery = new MatchNoDocsQuery(); // debatable; all or none?\n          }\n        }\n\n        // Build the filter queries\n        Query filterDocSetQuery = null;\n        if (fq != null) {\n          List<Query> filterQueries = new ArrayList<>(); // If there are no fqs we just want an empty list\n          for (String fqStr : fq) {\n            if (fqStr != null) {\n              fqStr = macroExpander.expand(fqStr);\n              if (fqStr == null) {\n                throw new FeatureException(this.getClass().getSimpleName() + \" requires efi parameter that was not passed in request.\");\n              }\n              final Query filterQuery = QParser.getParser(fqStr, req).getQuery();\n              if (filterQuery != null) {\n                filterQueries.add(filterQuery);\n              }\n            }\n          }\n\n          DocSet filtersDocSet = searcher.getDocSet(filterQueries); // execute\n          if (filtersDocSet != searcher.getLiveDocSet()) {\n            filterDocSetQuery = filtersDocSet.getTopFilter();\n          }\n        }\n\n        Query query = QueryUtils.combineQueryAndFilter(scoreQuery, filterDocSetQuery);\n\n        solrQueryWeight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","sourceOld":"    public SolrFeatureWeight(SolrIndexSearcher searcher,\n                             SolrQueryRequest request, Query originalQuery, Map<String, String[]> efi) throws IOException {\n      super(SolrFeature.this, searcher, request, originalQuery, efi);\n      try {\n        final SolrQueryRequest req = makeRequest(request.getCore(), q, fq, df);\n        if (req == null) {\n          throw new IOException(\"ERROR: No parameters provided\");\n        }\n\n        // Build the scoring query\n        Query scoreQuery;\n        String qStr = q;\n        if (qStr == null || qStr.isEmpty()) {\n          scoreQuery = null; // ultimately behaves like MatchAllDocsQuery\n        } else {\n          qStr = macroExpander.expand(qStr);\n          if (qStr == null) {\n            throw new FeatureException(this.getClass().getSimpleName() + \" requires efi parameter that was not passed in request.\");\n          }\n          scoreQuery = QParser.getParser(qStr, req).getQuery();\n          // note: QParser can return a null Query sometimes, such as if the query is a stopword or just symbols\n          if (scoreQuery == null) {\n            scoreQuery = new MatchNoDocsQuery(); // debatable; all or none?\n          }\n        }\n\n        // Build the filter queries\n        Query filterDocSetQuery = null;\n        if (fq != null) {\n          List<Query> filterQueries = new ArrayList<>(); // If there are no fqs we just want an empty list\n          for (String fqStr : fq) {\n            if (fqStr != null) {\n              fqStr = macroExpander.expand(fqStr);\n              if (fqStr == null) {\n                throw new FeatureException(this.getClass().getSimpleName() + \" requires efi parameter that was not passed in request.\");\n              }\n              final Query filterQuery = QParser.getParser(fqStr, req).getQuery();\n              if (filterQuery != null) {\n                filterQueries.add(filterQuery);\n              }\n            }\n          }\n\n          if (filterQueries.isEmpty() == false) { // TODO optimize getDocSet to make this check unnecessary SOLR-14376\n            DocSet filtersDocSet = searcher.getDocSet(filterQueries); // execute\n            if (filtersDocSet != searcher.getLiveDocSet()) {\n              filterDocSetQuery = filtersDocSet.getTopFilter();\n            }\n          }\n        }\n\n        Query query = QueryUtils.combineQueryAndFilter(scoreQuery, filterDocSetQuery);\n\n        solrQueryWeight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n\n      } catch (final SyntaxError e) {\n        throw new FeatureException(\"Failed to parse feature query.\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b5361ab773601ff1a8b1a3f38d928e1376a0dbb":["5c4d4ec3bca82c8eac712592ab518cd082026f34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5361ab773601ff1a8b1a3f38d928e1376a0dbb"]},"commit2Childs":{"3b5361ab773601ff1a8b1a3f38d928e1376a0dbb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c4d4ec3bca82c8eac712592ab518cd082026f34"],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["3b5361ab773601ff1a8b1a3f38d928e1376a0dbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}