{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonSuffixBytesRef(Automaton,int).mjava","commits":[{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonSuffixBytesRef(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonSuffixBytesRef(Automaton).mjava","sourceNew":"  /**\n   * Returns the longest BytesRef that is a suffix of all accepted strings.\n   * Worst case complexity: exponential in number of states (this calls\n   * determinize).\n   * @param maxDeterminizedStates maximum number of states determinizing the\n   *  automaton can result in.  Set higher to allow more complex queries and\n   *  lower to prevent memory exhaustion.\n   * @return common suffix\n   */\n  public static BytesRef getCommonSuffixBytesRef(Automaton a, int maxDeterminizedStates) {\n    // reverse the language of the automaton, then reverse its common prefix.\n    Automaton r = Operations.determinize(reverse(a), maxDeterminizedStates);\n    BytesRef ref = getCommonPrefixBytesRef(r);\n    reverseBytes(ref);\n    return ref;\n  }\n\n","sourceOld":"  /**\n   * Returns the longest BytesRef that is a suffix of all accepted strings.\n   * Worst case complexity: exponential in number of states (this calls\n   * determinize).\n   *\n   * @return common suffix\n   */\n  public static BytesRef getCommonSuffixBytesRef(Automaton a) {\n    // reverse the language of the automaton, then reverse its common prefix.\n    Automaton r = Operations.determinize(reverse(a));\n    BytesRef ref = getCommonPrefixBytesRef(r);\n    reverseBytes(ref);\n    return ref;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b839a1609f1d92a26ff6a2449601bfe6ec8ccc72","date":1427479616,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonSuffixBytesRef(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonSuffixBytesRef(Automaton,int).mjava","sourceNew":"  /**\n   * Returns the longest BytesRef that is a suffix of all accepted strings.\n   * Worst case complexity: exponential in number of states (this calls\n   * determinize).\n   * @param maxDeterminizedStates maximum number of states determinizing the\n   *  automaton can result in.  Set higher to allow more complex queries and\n   *  lower to prevent memory exhaustion.\n   * @return common suffix, which can be an empty (length 0) BytesRef (never null)\n   */\n  public static BytesRef getCommonSuffixBytesRef(Automaton a, int maxDeterminizedStates) {\n    // reverse the language of the automaton, then reverse its common prefix.\n    Automaton r = Operations.determinize(reverse(a), maxDeterminizedStates);\n    BytesRef ref = getCommonPrefixBytesRef(r);\n    reverseBytes(ref);\n    return ref;\n  }\n\n","sourceOld":"  /**\n   * Returns the longest BytesRef that is a suffix of all accepted strings.\n   * Worst case complexity: exponential in number of states (this calls\n   * determinize).\n   * @param maxDeterminizedStates maximum number of states determinizing the\n   *  automaton can result in.  Set higher to allow more complex queries and\n   *  lower to prevent memory exhaustion.\n   * @return common suffix\n   */\n  public static BytesRef getCommonSuffixBytesRef(Automaton a, int maxDeterminizedStates) {\n    // reverse the language of the automaton, then reverse its common prefix.\n    Automaton r = Operations.determinize(reverse(a), maxDeterminizedStates);\n    BytesRef ref = getCommonPrefixBytesRef(r);\n    reverseBytes(ref);\n    return ref;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonSuffixBytesRef(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getCommonSuffixBytesRef(Automaton,int).mjava","sourceNew":"  /**\n   * Returns the longest BytesRef that is a suffix of all accepted strings.\n   * Worst case complexity: exponential in number of states (this calls\n   * determinize).\n   * @param maxDeterminizedStates maximum number of states determinizing the\n   *  automaton can result in.  Set higher to allow more complex queries and\n   *  lower to prevent memory exhaustion.\n   * @return common suffix, which can be an empty (length 0) BytesRef (never null)\n   */\n  public static BytesRef getCommonSuffixBytesRef(Automaton a, int maxDeterminizedStates) {\n    // reverse the language of the automaton, then reverse its common prefix.\n    Automaton r = Operations.determinize(reverse(a), maxDeterminizedStates);\n    BytesRef ref = getCommonPrefixBytesRef(r);\n    reverseBytes(ref);\n    return ref;\n  }\n\n","sourceOld":"  /**\n   * Returns the longest BytesRef that is a suffix of all accepted strings.\n   * Worst case complexity: exponential in number of states (this calls\n   * determinize).\n   * @param maxDeterminizedStates maximum number of states determinizing the\n   *  automaton can result in.  Set higher to allow more complex queries and\n   *  lower to prevent memory exhaustion.\n   * @return common suffix\n   */\n  public static BytesRef getCommonSuffixBytesRef(Automaton a, int maxDeterminizedStates) {\n    // reverse the language of the automaton, then reverse its common prefix.\n    Automaton r = Operations.determinize(reverse(a), maxDeterminizedStates);\n    BytesRef ref = getCommonPrefixBytesRef(r);\n    reverseBytes(ref);\n    return ref;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8b316f82baae88f5e279893a9cb7eee51fd8902f","b839a1609f1d92a26ff6a2449601bfe6ec8ccc72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b839a1609f1d92a26ff6a2449601bfe6ec8ccc72":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b839a1609f1d92a26ff6a2449601bfe6ec8ccc72"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b839a1609f1d92a26ff6a2449601bfe6ec8ccc72"],"b839a1609f1d92a26ff6a2449601bfe6ec8ccc72":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}