{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeRangePart(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeRangePart(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeRangePart(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeRangePart(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeRangePart(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeRangePart(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}