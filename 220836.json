{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","commits":[{"id":"be4c30aa8665022511179534b83b929f65ec86f5","date":1305219285,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamOverlap(),\n          TermVector.WITH_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                (TermPositionVector) indexReader.getTermFreqVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamOverlap(),\n          TermVector.WITH_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                (TermPositionVector) indexReader.getTermFreqVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamOverlap(),\n          TermVector.WITH_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                (TermPositionVector) indexReader.getTermFreqVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, customType, new TokenStreamOverlap()));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                (TermPositionVector) indexReader.getTermFreqVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamOverlap(),\n          TermVector.WITH_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                (TermPositionVector) indexReader.getTermFreqVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                (TermPositionVector) indexReader.getTermFreqVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, customType, new TokenStreamOverlap()));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                (TermPositionVector) indexReader.getTermFreqVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                (TermPositionVector) indexReader.getTermFreqVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n      // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n      // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n          new SpanTermQuery(new Term(FIELD, \"the\")),\n          new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n      TopDocs hits = indexSearcher.search(phraseQuery, 1);\n      assertEquals(1, hits.totalHits);\n      final Highlighter highlighter = new Highlighter(\n          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n          new QueryScorer(phraseQuery));\n      final TokenStream tokenStream = TokenSources\n          .getTokenStream(\n              indexReader.getTermVector(0, FIELD),\n              false);\n      assertEquals(\"<B>the fox</B> did not jump\",\n          highlighter.getBestFragment(tokenStream, TEXT));\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n      // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n      // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n          new SpanTermQuery(new Term(FIELD, \"the\")),\n          new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n      TopDocs hits = indexSearcher.search(phraseQuery, 1);\n      assertEquals(1, hits.totalHits);\n      final Highlighter highlighter = new Highlighter(\n          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n          new QueryScorer(phraseQuery));\n      final TokenStream tokenStream = TokenSources\n          .getTokenStream(\n              indexReader.getTermVector(0, FIELD),\n              false);\n      assertEquals(\"<B>the fox</B> did not jump\",\n          highlighter.getBestFragment(tokenStream, TEXT));\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      try {\n        // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n        // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n        // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n        final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD, \"the\")),\n            new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(1, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream(\n                indexReader.getTermVector(0, FIELD),\n                false);\n        assertEquals(\"<B>the fox</B> did not jump\",\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","date":1328901155,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new OverlappingTokenStream(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n      // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n      // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n          new SpanTermQuery(new Term(FIELD, \"the\")),\n          new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n      TopDocs hits = indexSearcher.search(phraseQuery, 1);\n      assertEquals(1, hits.totalHits);\n      final Highlighter highlighter = new Highlighter(\n          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n          new QueryScorer(phraseQuery));\n      final TokenStream tokenStream = TokenSources\n          .getTokenStream(\n              indexReader.getTermVector(0, FIELD),\n              false);\n      assertEquals(\"<B>the fox</B> did not jump\",\n          highlighter.getBestFragment(tokenStream, TEXT));\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new OverlapAnalyzer()));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new TokenStreamOverlap(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n      // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n      // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n          new SpanTermQuery(new Term(FIELD, \"the\")),\n          new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n      TopDocs hits = indexSearcher.search(phraseQuery, 1);\n      assertEquals(1, hits.totalHits);\n      final Highlighter highlighter = new Highlighter(\n          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n          new QueryScorer(phraseQuery));\n      final TokenStream tokenStream = TokenSources\n          .getTokenStream(\n              indexReader.getTermVector(0, FIELD),\n              false);\n      assertEquals(\"<B>the fox</B> did not jump\",\n          highlighter.getBestFragment(tokenStream, TEXT));\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testOverlapWithOffsetExactPhrase().mjava","sourceNew":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new OverlappingTokenStream(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n      // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n      // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n          new SpanTermQuery(new Term(FIELD, \"the\")),\n          new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n      TopDocs hits = indexSearcher.search(phraseQuery, 1);\n      assertEquals(1, hits.totalHits);\n      final Highlighter highlighter = new Highlighter(\n          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n          new QueryScorer(phraseQuery));\n      final TokenStream tokenStream = TokenSources\n          .getTokenStream(\n              indexReader.getTermVector(0, FIELD),\n              false);\n      assertEquals(\"<B>the fox</B> did not jump\",\n          highlighter.getBestFragment(tokenStream, TEXT));\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testOverlapWithOffsetExactPhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(true);\n      document.add(new Field(FIELD, new OverlappingTokenStream(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = newSearcher(indexReader);\n      // final DisjunctionMaxQuery query = new DisjunctionMaxQuery(1);\n      // query.add(new SpanTermQuery(new Term(FIELD, \"{fox}\")));\n      // query.add(new SpanTermQuery(new Term(FIELD, \"fox\")));\n      final Query phraseQuery = new SpanNearQuery(new SpanQuery[] {\n          new SpanTermQuery(new Term(FIELD, \"the\")),\n          new SpanTermQuery(new Term(FIELD, \"fox\"))}, 0, true);\n\n      TopDocs hits = indexSearcher.search(phraseQuery, 1);\n      assertEquals(1, hits.totalHits);\n      final Highlighter highlighter = new Highlighter(\n          new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n          new QueryScorer(phraseQuery));\n      final TokenStream tokenStream = TokenSources\n          .getTokenStream(\n              indexReader.getTermVector(0, FIELD),\n              false);\n      assertEquals(\"<B>the fox</B> did not jump\",\n          highlighter.getBestFragment(tokenStream, TEXT));\n    } finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","be4c30aa8665022511179534b83b929f65ec86f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","be4c30aa8665022511179534b83b929f65ec86f5"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["be4c30aa8665022511179534b83b929f65ec86f5"],"be4c30aa8665022511179534b83b929f65ec86f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","be4c30aa8665022511179534b83b929f65ec86f5"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"be4c30aa8665022511179534b83b929f65ec86f5":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}