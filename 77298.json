{"path":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testHangDuringRollback().mjava","commits":[{"id":"a1346c5dacb766a49ec3b6160a23d2e80073501c","date":1417857339,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testHangDuringRollback().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-6094\n  public void testHangDuringRollback() throws Throwable {\n    Directory dir = newMockDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    iwc.setMergePolicy(mp);\n    mp.setMergeFactor(2);\n    final CountDownLatch mergeStart = new CountDownLatch(1);\n    final CountDownLatch mergeFinish = new CountDownLatch(1);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n        @Override\n        protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStart.countDown();\n          try {\n            mergeFinish.await();\n          } catch (InterruptedException ie) {\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n      };\n    cms.setMaxMergesAndThreads(1, 1);\n    iwc.setMergeScheduler(cms);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    \n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush\n\n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush + merge\n\n    // Wait for merge to kick off\n    mergeStart.await();\n\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          w.addDocument(new Document());\n          w.addDocument(new Document());\n          // flush\n\n          w.addDocument(new Document());\n          // W/o the fix for LUCENE-6094 we would hang forever here:\n          w.addDocument(new Document());\n          // flush + merge\n          \n          // Now allow first merge to finish:\n          mergeFinish.countDown();\n\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }.start();\n\n    while (w.numDocs() != 8) {\n      Thread.sleep(10);\n    }\n\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testHangDuringRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testHangDuringRollback().mjava","sourceNew":"  // LUCENE-6094\n  public void testHangDuringRollback() throws Throwable {\n    Directory dir = newMockDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    iwc.setMergePolicy(mp);\n    mp.setMergeFactor(2);\n    final CountDownLatch mergeStart = new CountDownLatch(1);\n    final CountDownLatch mergeFinish = new CountDownLatch(1);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n        @Override\n        protected void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          mergeStart.countDown();\n          try {\n            mergeFinish.await();\n          } catch (InterruptedException ie) {\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(writer, merge);\n        }\n      };\n    cms.setMaxMergesAndThreads(1, 1);\n    iwc.setMergeScheduler(cms);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    \n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush\n\n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush + merge\n\n    // Wait for merge to kick off\n    mergeStart.await();\n\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          w.addDocument(new Document());\n          w.addDocument(new Document());\n          // flush\n\n          w.addDocument(new Document());\n          // W/o the fix for LUCENE-6094 we would hang forever here:\n          w.addDocument(new Document());\n          // flush + merge\n          \n          // Now allow first merge to finish:\n          mergeFinish.countDown();\n\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }.start();\n\n    while (w.numDocs() != 8) {\n      Thread.sleep(10);\n    }\n\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6094\n  public void testHangDuringRollback() throws Throwable {\n    Directory dir = newMockDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    iwc.setMergePolicy(mp);\n    mp.setMergeFactor(2);\n    final CountDownLatch mergeStart = new CountDownLatch(1);\n    final CountDownLatch mergeFinish = new CountDownLatch(1);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n        @Override\n        protected void doMerge(MergePolicy.OneMerge merge) throws IOException {\n          mergeStart.countDown();\n          try {\n            mergeFinish.await();\n          } catch (InterruptedException ie) {\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(merge);\n        }\n      };\n    cms.setMaxMergesAndThreads(1, 1);\n    iwc.setMergeScheduler(cms);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    \n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush\n\n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush + merge\n\n    // Wait for merge to kick off\n    mergeStart.await();\n\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          w.addDocument(new Document());\n          w.addDocument(new Document());\n          // flush\n\n          w.addDocument(new Document());\n          // W/o the fix for LUCENE-6094 we would hang forever here:\n          w.addDocument(new Document());\n          // flush + merge\n          \n          // Now allow first merge to finish:\n          mergeFinish.countDown();\n\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }.start();\n\n    while (w.numDocs() != 8) {\n      Thread.sleep(10);\n    }\n\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testHangDuringRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testHangDuringRollback().mjava","sourceNew":"  // LUCENE-6094\n  public void testHangDuringRollback() throws Throwable {\n    Directory dir = newMockDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    iwc.setMergePolicy(mp);\n    mp.setMergeFactor(2);\n    final CountDownLatch mergeStart = new CountDownLatch(1);\n    final CountDownLatch mergeFinish = new CountDownLatch(1);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n        @Override\n        protected void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          mergeStart.countDown();\n          try {\n            mergeFinish.await();\n          } catch (InterruptedException ie) {\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(writer, merge);\n        }\n      };\n    cms.setMaxMergesAndThreads(1, 1);\n    iwc.setMergeScheduler(cms);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    \n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush\n\n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush + merge\n\n    // Wait for merge to kick off\n    mergeStart.await();\n\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          w.addDocument(new Document());\n          w.addDocument(new Document());\n          // flush\n\n          w.addDocument(new Document());\n          // W/o the fix for LUCENE-6094 we would hang forever here:\n          w.addDocument(new Document());\n          // flush + merge\n          \n          // Now allow first merge to finish:\n          mergeFinish.countDown();\n\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }.start();\n\n    while (w.getDocStats().numDocs != 8) {\n      Thread.sleep(10);\n    }\n\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6094\n  public void testHangDuringRollback() throws Throwable {\n    Directory dir = newMockDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    iwc.setMergePolicy(mp);\n    mp.setMergeFactor(2);\n    final CountDownLatch mergeStart = new CountDownLatch(1);\n    final CountDownLatch mergeFinish = new CountDownLatch(1);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n        @Override\n        protected void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          mergeStart.countDown();\n          try {\n            mergeFinish.await();\n          } catch (InterruptedException ie) {\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(writer, merge);\n        }\n      };\n    cms.setMaxMergesAndThreads(1, 1);\n    iwc.setMergeScheduler(cms);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    \n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush\n\n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush + merge\n\n    // Wait for merge to kick off\n    mergeStart.await();\n\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          w.addDocument(new Document());\n          w.addDocument(new Document());\n          // flush\n\n          w.addDocument(new Document());\n          // W/o the fix for LUCENE-6094 we would hang forever here:\n          w.addDocument(new Document());\n          // flush + merge\n          \n          // Now allow first merge to finish:\n          mergeFinish.countDown();\n\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }.start();\n\n    while (w.numDocs() != 8) {\n      Thread.sleep(10);\n    }\n\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testHangDuringRollback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testHangDuringRollback().mjava","sourceNew":"  // LUCENE-6094\n  public void testHangDuringRollback() throws Throwable {\n    Directory dir = newMockDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    iwc.setMergePolicy(mp);\n    mp.setMergeFactor(2);\n    final CountDownLatch mergeStart = new CountDownLatch(1);\n    final CountDownLatch mergeFinish = new CountDownLatch(1);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n        @Override\n        protected void doMerge(MergeSource mergeSource, MergePolicy.OneMerge merge) throws IOException {\n          mergeStart.countDown();\n          try {\n            mergeFinish.await();\n          } catch (InterruptedException ie) {\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(mergeSource, merge);\n        }\n      };\n    cms.setMaxMergesAndThreads(1, 1);\n    iwc.setMergeScheduler(cms);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    \n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush\n\n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush + merge\n\n    // Wait for merge to kick off\n    mergeStart.await();\n\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          w.addDocument(new Document());\n          w.addDocument(new Document());\n          // flush\n\n          w.addDocument(new Document());\n          // W/o the fix for LUCENE-6094 we would hang forever here:\n          w.addDocument(new Document());\n          // flush + merge\n          \n          // Now allow first merge to finish:\n          mergeFinish.countDown();\n\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }.start();\n\n    while (w.getDocStats().numDocs != 8) {\n      Thread.sleep(10);\n    }\n\n    w.rollback();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6094\n  public void testHangDuringRollback() throws Throwable {\n    Directory dir = newMockDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMaxBufferedDocs(2);\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    iwc.setMergePolicy(mp);\n    mp.setMergeFactor(2);\n    final CountDownLatch mergeStart = new CountDownLatch(1);\n    final CountDownLatch mergeFinish = new CountDownLatch(1);\n    ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler() {\n        @Override\n        protected void doMerge(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n          mergeStart.countDown();\n          try {\n            mergeFinish.await();\n          } catch (InterruptedException ie) {\n            throw new RuntimeException(ie);\n          }\n          super.doMerge(writer, merge);\n        }\n      };\n    cms.setMaxMergesAndThreads(1, 1);\n    iwc.setMergeScheduler(cms);\n\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    \n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush\n\n    w.addDocument(new Document());\n    w.addDocument(new Document());\n    // flush + merge\n\n    // Wait for merge to kick off\n    mergeStart.await();\n\n    new Thread() {\n      @Override\n      public void run() {\n        try {\n          w.addDocument(new Document());\n          w.addDocument(new Document());\n          // flush\n\n          w.addDocument(new Document());\n          // W/o the fix for LUCENE-6094 we would hang forever here:\n          w.addDocument(new Document());\n          // flush + merge\n          \n          // Now allow first merge to finish:\n          mergeFinish.countDown();\n\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }.start();\n\n    while (w.getDocStats().numDocs != 8) {\n      Thread.sleep(10);\n    }\n\n    w.rollback();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a1346c5dacb766a49ec3b6160a23d2e80073501c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a1346c5dacb766a49ec3b6160a23d2e80073501c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["89697e7abc9807639c384eecf5a2a6eef1080426"],"a1346c5dacb766a49ec3b6160a23d2e80073501c":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1346c5dacb766a49ec3b6160a23d2e80073501c"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}