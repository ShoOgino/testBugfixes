{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","commits":[{"id":"330e80d31a51e837b9cc906035e114377c0501dc","date":1429994103,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#[T-extends-Comparable[T]]_getRangeCountsIndexed(RangeEndpointCalculator[T]).mjava","sourceNew":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable start = calc.getValue(freq.start.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = start;\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      boolean incUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      Range range = new Range(low, low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.BEFORE.toString(), null, start, false, incUpper) );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.AFTER.toString(), end, null, incLower, false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n\n        otherList.add( new Range(FacetParams.FacetRangeOther.BETWEEN.toString(), start, end, incLower, incUpper) );\n      }\n    }\n\n  }\n\n","sourceOld":"  private <T extends Comparable<T>> SimpleOrderedMap getRangeCountsIndexed(RangeEndpointCalculator<T> calc) throws IOException {\n\n    final SimpleOrderedMap<Object> res = new SimpleOrderedMap<>();\n\n    List<SimpleOrderedMap<Object>> buckets = null;\n\n    buckets = new ArrayList<>();\n    res.add(\"buckets\", buckets);\n\n    T start = calc.getValue(freq.start.toString());\n    T end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    final int minCount = 0;\n\n    T low = start;\n\n    while (low.compareTo(end) < 0) {\n      T high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      final boolean includeLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      final boolean includeUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      final String lowS = calc.formatValue(low);\n      final String highS = calc.formatValue(high);\n\n      Object label = low;\n      buckets.add( rangeStats(low, minCount,lowS, highS, includeLower, includeUpper) );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n      final String startS = calc.formatValue(start);\n      final String endS = calc.formatValue(end);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        res.add(FacetParams.FacetRangeOther.BEFORE.toString(),\n            rangeStats(null, 0, null, startS,\n                false,\n                (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                    (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                        include.contains(FacetParams.FacetRangeInclude.EDGE))))));\n\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        res.add(FacetParams.FacetRangeOther.AFTER.toString(),\n            rangeStats(null, 0, endS, null,\n                (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                    (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                        include.contains(FacetParams.FacetRangeInclude.EDGE)))),\n                false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        res.add(FacetParams.FacetRangeOther.BETWEEN.toString(),\n            rangeStats(null, 0, startS, endS,\n                (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                    include.contains(FacetParams.FacetRangeInclude.EDGE)),\n                (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                    include.contains(FacetParams.FacetRangeInclude.EDGE))));\n\n      }\n    }\n\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","sourceNew":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable start = calc.getValue(freq.start.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = start;\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      boolean incUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.BEFORE.toString(), null, start, false, incUpper) );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.AFTER.toString(), end, null, incLower, false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n\n        otherList.add( new Range(FacetParams.FacetRangeOther.BETWEEN.toString(), start, end, incLower, incUpper) );\n      }\n    }\n\n  }\n\n","sourceOld":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable start = calc.getValue(freq.start.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = start;\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      boolean incUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      Range range = new Range(low, low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.BEFORE.toString(), null, start, false, incUpper) );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.AFTER.toString(), end, null, incLower, false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n\n        otherList.add( new Range(FacetParams.FacetRangeOther.BETWEEN.toString(), start, end, incLower, incUpper) );\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","sourceNew":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable start = calc.getValue(freq.start.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = start;\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      boolean incUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.BEFORE.toString(), null, start, false, incUpper) );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.AFTER.toString(), end, null, incLower, false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n\n        otherList.add( new Range(FacetParams.FacetRangeOther.BETWEEN.toString(), start, end, incLower, incUpper) );\n      }\n    }\n\n  }\n\n","sourceOld":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable start = calc.getValue(freq.start.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = start;\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      boolean incUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      Range range = new Range(low, low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.BEFORE.toString(), null, start, false, incUpper) );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.AFTER.toString(), end, null, incLower, false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n\n        otherList.add( new Range(FacetParams.FacetRangeOther.BETWEEN.toString(), start, end, incLower, incUpper) );\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","sourceNew":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n    \n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =(include.contains(FacetRangeInclude.LOWER) ||\n                         (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                          (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n      \n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","sourceOld":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable start = calc.getValue(freq.start.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = start;\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      boolean incUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.BEFORE.toString(), null, start, false, incUpper) );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.AFTER.toString(), end, null, incLower, false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n\n        otherList.add( new Range(FacetParams.FacetRangeOther.BETWEEN.toString(), start, end, incLower, incUpper) );\n      }\n    }\n\n  }\n\n","bugFix":["330e80d31a51e837b9cc906035e114377c0501dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","sourceNew":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n    \n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =(include.contains(FacetRangeInclude.LOWER) ||\n                         (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                          (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n      \n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","sourceOld":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable start = calc.getValue(freq.start.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = start;\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      boolean incUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.BEFORE.toString(), null, start, false, incUpper) );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.AFTER.toString(), end, null, incLower, false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n\n        otherList.add( new Range(FacetParams.FacetRangeOther.BETWEEN.toString(), start, end, incLower, incUpper) );\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","sourceNew":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n    \n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =(include.contains(FacetRangeInclude.LOWER) ||\n                         (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                          (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n      \n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","sourceOld":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable start = calc.getValue(freq.start.toString());\n    Comparable end = calc.getValue(freq.end.toString());\n    EnumSet<FacetParams.FacetRangeInclude> include = freq.include;\n\n    String gap = freq.gap.toString();\n\n    Comparable low = start;\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = end;\n        } else {\n          end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =\n          (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == low.compareTo(start)));\n      boolean incUpper =\n          (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n              (include.contains(FacetParams.FacetRangeInclude.EDGE) &&\n                  0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n\n      boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        // include upper bound if \"outer\" or if first gap doesn't already include it\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.BEFORE.toString(), null, start, false, incUpper) );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        // include lower bound if \"outer\" or if last gap doesn't already include it\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n            (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        otherList.add( new Range(FacetParams.FacetRangeOther.AFTER.toString(), end, null, incLower, false));\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n        boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n            include.contains(FacetParams.FacetRangeInclude.EDGE));\n\n        otherList.add( new Range(FacetParams.FacetRangeOther.BETWEEN.toString(), start, end, incLower, incUpper) );\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","sourceNew":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n\n    if (ranges != null) {\n      rangeList.addAll(parseRanges(ranges));\n      return;\n    }\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high);\n      }\n\n      boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n          (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n          (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","sourceOld":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n    \n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high );\n      }\n\n      boolean incLower =(include.contains(FacetRangeInclude.LOWER) ||\n                         (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n                          (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n      \n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#createRangeList().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#createRangeList().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n\n    if (ranges != null) {\n      rangeList.addAll(parseRanges(ranges));\n      return;\n    }\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high);\n      }\n\n      boolean incLower = (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n          (include.contains(FacetParams.FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n          (include.contains(FacetParams.FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetParams.FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetParams.FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","sourceOld":"  private void createRangeList() throws IOException {\n\n    rangeList = new ArrayList<>();\n    otherList = new ArrayList<>(3);\n\n    Comparable low = start;\n    Comparable loop_end = this.end;\n\n    if (ranges != null) {\n      rangeList.addAll(parseRanges(ranges));\n      return;\n    }\n\n    while (low.compareTo(end) < 0) {\n      Comparable high = calc.addGap(low, gap);\n      if (end.compareTo(high) < 0) {\n        if (freq.hardend) {\n          high = loop_end;\n        } else {\n          loop_end = high;\n        }\n      }\n      if (high.compareTo(low) < 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop (is gap negative? did the math overflow?)\");\n      }\n      if (high.compareTo(low) == 0) {\n        throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n                \"range facet infinite loop: gap is either zero, or too small relative start/end and caused underflow: \" + low + \" + \" + gap + \" = \" + high);\n      }\n\n      boolean incLower = (include.contains(FacetRangeInclude.LOWER) ||\n          (include.contains(FacetRangeInclude.EDGE) && 0 == low.compareTo(start)));\n      boolean incUpper = (include.contains(FacetRangeInclude.UPPER) ||\n          (include.contains(FacetRangeInclude.EDGE) && 0 == high.compareTo(end)));\n\n      Range range = new Range(calc.buildRangeLabel(low), low, high, incLower, incUpper);\n      rangeList.add( range );\n\n      low = high;\n    }\n\n    // no matter what other values are listed, we don't do\n    // anything if \"none\" is specified.\n    if (! freq.others.contains(FacetRangeOther.NONE) ) {\n      final boolean all = freq.others.contains(FacetRangeOther.ALL);\n\n      if (all || freq.others.contains(FacetRangeOther.BEFORE)) {\n        otherList.add( buildBeforeRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.AFTER)) {\n        actual_end = loop_end;\n        otherList.add( buildAfterRange() );\n      }\n      if (all || freq.others.contains(FacetRangeOther.BETWEEN)) {\n        actual_end = loop_end;\n        otherList.add( buildBetweenRange() );\n      }\n    }\n    // if we're not a shard request, or this is a hardend:true situation, then actual_end isn't needed\n    if (freq.hardend || (! fcontext.isShard())) {\n      actual_end = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"330e80d31a51e837b9cc906035e114377c0501dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["330e80d31a51e837b9cc906035e114377c0501dc","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["c05b634713ca09b2267477408773904d4c69dd9d"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["330e80d31a51e837b9cc906035e114377c0501dc"],"c05b634713ca09b2267477408773904d4c69dd9d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"330e80d31a51e837b9cc906035e114377c0501dc":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["330e80d31a51e837b9cc906035e114377c0501dc"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}