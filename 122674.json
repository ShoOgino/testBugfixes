{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","sourceNew":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n  }\n\n","sourceOld":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a23c50842ff5508c8cf403efde22f0255055700","date":1372818356,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","sourceNew":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"mood\");\n    assertEquals(1, stems.size());\n    assertEquals(\"moo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n\n    // The \"Foo\" rule gets overridden by the \"foo\" rule, and we don't merge\n    stems = stemmer.stem(\"Food\");\n    assertEquals(0, stems.size());\n\n    stems = stemmer.stem(\"Mood\");\n    assertEquals(1, stems.size());\n    assertEquals(\"moo\", stems.get(0).getStemString());\n  }\n\n","sourceOld":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n  }\n\n","bugFix":["77d6144bb77983c683128c11b708057809173cff"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","sourceNew":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"mood\");\n    assertEquals(1, stems.size());\n    assertEquals(\"moo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n\n    // The \"Foo\" rule gets overridden by the \"foo\" rule, and we don't merge\n    stems = stemmer.stem(\"Food\");\n    assertEquals(0, stems.size());\n\n    stems = stemmer.stem(\"Mood\");\n    assertEquals(1, stems.size());\n    assertEquals(\"moo\", stems.get(0).getStemString());\n  }\n\n","sourceOld":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"mood\");\n    assertEquals(1, stems.size());\n    assertEquals(\"moo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n\n    // The \"Foo\" rule gets overridden by the \"foo\" rule, and we don't merge\n    stems = stemmer.stem(\"Food\");\n    assertEquals(0, stems.size());\n\n    stems = stemmer.stem(\"Mood\");\n    assertEquals(1, stems.size());\n    assertEquals(\"moo\", stems.get(0).getStemString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"mood\");\n    assertEquals(1, stems.size());\n    assertEquals(\"moo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n\n    // The \"Foo\" rule gets overridden by the \"foo\" rule, and we don't merge\n    stems = stemmer.stem(\"Food\");\n    assertEquals(0, stems.size());\n\n    stems = stemmer.stem(\"Mood\");\n    assertEquals(1, stems.size());\n    assertEquals(\"moo\", stems.get(0).getStemString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a23c50842ff5508c8cf403efde22f0255055700":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["3a23c50842ff5508c8cf403efde22f0255055700","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3a23c50842ff5508c8cf403efde22f0255055700"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["3a23c50842ff5508c8cf403efde22f0255055700"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"3a23c50842ff5508c8cf403efde22f0255055700":["ba791bce8103c79e38f957e9c5a53a75871bd918","37a0f60745e53927c4c876cfe5b5a58170f0646c","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3a23c50842ff5508c8cf403efde22f0255055700","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}