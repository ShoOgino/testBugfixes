{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRollupStream().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRollupStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelRollupStream() throws Exception {\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"100\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Bucket[] buckets = {new Bucket(\"a_s\")};\n    Metric[] metrics = {new SumMetric(\"a_i\", false),\n        new MeanMetric(\"a_i\", false),\n        new CountMetric(),\n        new MinMetric(\"a_i\", false),\n        new MaxMetric(\"a_i\", false)};\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_s asc\",\"partitionKeys\",\"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RollupStream rostream = new RollupStream(stream, buckets, metrics);\n    ParallelStream rstream = new ParallelStream(zkHost,\"collection1\", rostream, 2, new AscFieldComp(\"buckets\"));\n\n    rstream.open();\n    Tuple tuple = rstream.read();\n    String b = (String)tuple.get(\"buckets\");\n    List<Double> values = (List<Double>)tuple.get(\"metricValues\");\n    assert(b.equals(\"hello0\"));\n    assert(values.get(0) == 102.0d);\n    assert(values.get(1) == 51.0d);\n    assert(values.get(2) == 2.0d);\n    assert(values.get(3) == 2.0d);\n    assert(values.get(4) == 100.0d);\n\n    tuple = rstream.read();\n    b = (String)tuple.get(\"buckets\");\n    values = (List<Double>)tuple.get(\"metricValues\");\n    assert(b.equals(\"hello1\"));\n    assert(values.get(0) == 3.0d);\n    assert(values.get(1) == 1.0d);\n    assert(values.get(2) == 3.0d);\n    assert(values.get(3) == 1.0d);\n    assert(values.get(4) == 1.0d);\n\n\n    tuple = rstream.read();\n    b = (String)tuple.get(\"buckets\");\n    values = (List<Double>)tuple.get(\"metricValues\");\n    assert(b.equals(\"hello3\"));\n    assert(values.get(0) == 7.0d);\n    assert(values.get(1) == 3.5d);\n    assert(values.get(2) == 2.0d);\n    assert(values.get(3) == 3.0d);\n    assert(values.get(4) == 4.0d);\n\n    tuple = rstream.read();\n    assert(tuple.EOF);\n\n    rstream.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testParallelRollupStream().mjava","sourceNew":null,"sourceOld":"  private void testParallelRollupStream() throws Exception {\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"100\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello3\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Bucket[] buckets = {new Bucket(\"a_s\")};\n    Metric[] metrics = {new SumMetric(\"a_i\", false),\n        new MeanMetric(\"a_i\", false),\n        new CountMetric(),\n        new MinMetric(\"a_i\", false),\n        new MaxMetric(\"a_i\", false)};\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_s asc\",\"partitionKeys\",\"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    RollupStream rostream = new RollupStream(stream, buckets, metrics);\n    ParallelStream rstream = new ParallelStream(zkHost,\"collection1\", rostream, 2, new AscFieldComp(\"buckets\"));\n\n    rstream.open();\n    Tuple tuple = rstream.read();\n    String b = (String)tuple.get(\"buckets\");\n    List<Double> values = (List<Double>)tuple.get(\"metricValues\");\n    assert(b.equals(\"hello0\"));\n    assert(values.get(0) == 102.0d);\n    assert(values.get(1) == 51.0d);\n    assert(values.get(2) == 2.0d);\n    assert(values.get(3) == 2.0d);\n    assert(values.get(4) == 100.0d);\n\n    tuple = rstream.read();\n    b = (String)tuple.get(\"buckets\");\n    values = (List<Double>)tuple.get(\"metricValues\");\n    assert(b.equals(\"hello1\"));\n    assert(values.get(0) == 3.0d);\n    assert(values.get(1) == 1.0d);\n    assert(values.get(2) == 3.0d);\n    assert(values.get(3) == 1.0d);\n    assert(values.get(4) == 1.0d);\n\n\n    tuple = rstream.read();\n    b = (String)tuple.get(\"buckets\");\n    values = (List<Double>)tuple.get(\"metricValues\");\n    assert(b.equals(\"hello3\"));\n    assert(values.get(0) == 7.0d);\n    assert(values.get(1) == 3.5d);\n    assert(values.get(2) == 2.0d);\n    assert(values.get(3) == 3.0d);\n    assert(values.get(4) == 4.0d);\n\n    tuple = rstream.read();\n    assert(tuple.EOF);\n\n    rstream.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"]},"commit2Childs":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}