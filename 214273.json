{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final IndexWriter.ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.close();\n          segmentInfos.remove(infosUpto);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success)\n          IOUtils.closeWhileHandlingException(prior, readers);\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final IndexWriter.ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.close();\n          segmentInfos.remove(infosUpto);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success)\n          IOUtils.closeWhileHandlingException(prior, readers);\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final IndexWriter.ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.close();\n          segmentInfos.remove(infosUpto);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success)\n          IOUtils.closeWhileHandlingException(prior, readers);\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":["9ce667c6d3400b22523701c549c0d35e26da8b46","57dea241098eaf5af8a4789a62634f655d226641","7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":["baa23b5db56be939827f4340a4c7cfd3bcb8088c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final IndexWriter.ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.close();\n          segmentInfos.remove(infosUpto);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success)\n          IOUtils.closeWhileHandlingException(prior, readers);\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3af8c90c5e965a1a8011e827ab59de734c7dfb79","date":1368108782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":["baa23b5db56be939827f4340a4c7cfd3bcb8088c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baa23b5db56be939827f4340a4c7cfd3bcb8088c","date":1381177715,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(prior, readers);\n        }\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, applyAllDeletes);\n  }\n\n","bugFix":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","57dea241098eaf5af8a4789a62634f655d226641","7b91922b55d15444d554721b352861d028eb8278","ae695f21c50b03702b5d0fa2543d5af844bb7cd3","a45bec74b98f6fc05f52770cfb425739e6563960"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.close();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentInfoPerCommit info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a4e9a587014c4251898aed4d040c93922cc06bf","date":1446808581,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n                                                                   readers.toArray(new SegmentReader[readers.size()]), writer,\n                                                                   segmentInfos, applyAllDeletes, writeAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n                                                                   readers.toArray(new SegmentReader[readers.size()]), writer,\n                                                                   segmentInfos, applyAllDeletes, writeAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    boolean success = false;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.readerPool.get(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.readerPool.release(rld);\n        }\n      }\n      \n      writer.incRefDeleter(segmentInfos);\n      \n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes);\n      success = true;\n      return result;\n    } finally {\n      if (!success) {\n        for (SegmentReader r : readers) {\n          try {\n            r.decRef();\n          } catch (Throwable th) {\n            // ignore any exception that is thrown here to not mask any original\n            // exception. \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a4e9a587014c4251898aed4d040c93922cc06bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"527cc14542789f47d75da436cb4287d1ab887e34":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["baa23b5db56be939827f4340a4c7cfd3bcb8088c"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["527cc14542789f47d75da436cb4287d1ab887e34"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"a45bec74b98f6fc05f52770cfb425739e6563960":["3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["399d5903979ca52514d2bc7e3a362e1c45885c94","9d153abcf92dc5329d98571a8c3035df9bd80648"],"baa23b5db56be939827f4340a4c7cfd3bcb8088c":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3af8c90c5e965a1a8011e827ab59de734c7dfb79":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"68496c2200e559fb7802f7575427b7a482659afb":["6a4e9a587014c4251898aed4d040c93922cc06bf","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["6a4e9a587014c4251898aed4d040c93922cc06bf"]},"commit2Childs":{"6a4e9a587014c4251898aed4d040c93922cc06bf":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"527cc14542789f47d75da436cb4287d1ab887e34":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6a4e9a587014c4251898aed4d040c93922cc06bf"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["527cc14542789f47d75da436cb4287d1ab887e34"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"a45bec74b98f6fc05f52770cfb425739e6563960":["baa23b5db56be939827f4340a4c7cfd3bcb8088c"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","399d5903979ca52514d2bc7e3a362e1c45885c94"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["9d153abcf92dc5329d98571a8c3035df9bd80648","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"baa23b5db56be939827f4340a4c7cfd3bcb8088c":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3af8c90c5e965a1a8011e827ab59de734c7dfb79":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}