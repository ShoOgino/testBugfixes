{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDocsAndPositionsEnumStart().mjava","commits":[{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true, false, random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(reader);\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      PostingsEnum disi = reader.postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator();\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.postings(disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    int numIters = atLeast(3);\n    MemoryIndex memory = new MemoryIndex(true, false, random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numIters; i++) { // check reuse\n      memory.addField(\"foo\", \"bar\", analyzer);\n      LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(reader);\n      assertEquals(1, reader.terms(\"foo\").getSumTotalTermFreq());\n      PostingsEnum disi = reader.postings(new Term(\"foo\", \"bar\"), PostingsEnum.ALL);\n      int docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      assertEquals(0, disi.nextPosition());\n      assertEquals(0, disi.startOffset());\n      assertEquals(3, disi.endOffset());\n      \n      // now reuse and check again\n      TermsEnum te = reader.terms(\"foo\").iterator();\n      assertTrue(te.seekExact(new BytesRef(\"bar\")));\n      disi = te.postings(disi);\n      docid = disi.docID();\n      assertEquals(-1, docid);\n      assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n      reader.close();\n      memory.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}