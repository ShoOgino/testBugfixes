{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  public StandardTermsDictWriter(StandardTermsIndexWriter indexWriter, SegmentWriteState state, StandardPostingsWriter postingsWriter, Comparator<BytesRef> termComp) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, StandardCodec.TERMS_EXTENSION);\n    this.indexWriter = indexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    indexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n\n    // Count indexed fields up front\n    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); \n\n    out.writeLong(0);                             // leave space for end index pointer\n\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","sourceNew":"  public StandardTermsDictWriter(StandardTermsIndexWriter indexWriter, SegmentWriteState state, StandardPostingsWriter postingsWriter, Comparator<BytesRef> termComp) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.indexWriter = indexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    indexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n\n    // Count indexed fields up front\n    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); \n\n    out.writeLong(0);                             // leave space for end index pointer\n\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public StandardTermsDictWriter(StandardTermsIndexWriter indexWriter, SegmentWriteState state, StandardPostingsWriter postingsWriter, Comparator<BytesRef> termComp) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, StandardCodec.TERMS_EXTENSION);\n    this.indexWriter = indexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    indexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n\n    // Count indexed fields up front\n    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); \n\n    out.writeLong(0);                             // leave space for end index pointer\n\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3aaa3a04692b61e4c5b0f329d461e3e7e041188","date":1277217310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","sourceNew":"  public StandardTermsDictWriter(\n      StandardTermsIndexWriter termsIndexWriter,\n      SegmentWriteState state,\n      StandardPostingsWriter postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    termsIndexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n\n    // Count indexed fields up front\n    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); \n\n    out.writeLong(0);                             // leave space for end index pointer\n\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public StandardTermsDictWriter(StandardTermsIndexWriter indexWriter, SegmentWriteState state, StandardPostingsWriter postingsWriter, Comparator<BytesRef> termComp) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.indexWriter = indexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    indexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n\n    // Count indexed fields up front\n    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); \n\n    out.writeLong(0);                             // leave space for end index pointer\n\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6066dbe072ec5334ff5824f474e9d3abd1620fb7","date":1278709584,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","sourceNew":"  public StandardTermsDictWriter(\n      StandardTermsIndexWriter termsIndexWriter,\n      SegmentWriteState state,\n      StandardPostingsWriter postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    termsIndexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public StandardTermsDictWriter(\n      StandardTermsIndexWriter termsIndexWriter,\n      SegmentWriteState state,\n      StandardPostingsWriter postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    termsIndexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n\n    // Count indexed fields up front\n    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); \n\n    out.writeLong(0);                             // leave space for end index pointer\n\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","sourceNew":"  public StandardTermsDictWriter(\n      StandardTermsIndexWriter termsIndexWriter,\n      SegmentWriteState state,\n      StandardPostingsWriter postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    termsIndexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public StandardTermsDictWriter(StandardTermsIndexWriter indexWriter, SegmentWriteState state, StandardPostingsWriter postingsWriter, Comparator<BytesRef> termComp) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.indexWriter = indexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    indexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n\n    // Count indexed fields up front\n    CodecUtil.writeHeader(out, CODEC_NAME, VERSION_CURRENT); \n\n    out.writeLong(0);                             // leave space for end index pointer\n\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#PrefixCodedTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","sourceNew":"  public PrefixCodedTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    termsIndexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public StandardTermsDictWriter(\n      StandardTermsIndexWriter termsIndexWriter,\n      SegmentWriteState state,\n      StandardPostingsWriter postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    termsIndexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictWriter#StandardTermsDictWriter(StandardTermsIndexWriter,SegmentWriteState,StandardPostingsWriter,Comparator[BytesRef]).mjava","sourceNew":null,"sourceOld":"  public StandardTermsDictWriter(\n      StandardTermsIndexWriter termsIndexWriter,\n      SegmentWriteState state,\n      StandardPostingsWriter postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    termsIndexWriter.setTermsOutput(out);\n    state.flushedFiles.add(termsFileName);\n\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    termWriter = new DeltaBytesWriter(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["f3aaa3a04692b61e4c5b0f329d461e3e7e041188"],"f3aaa3a04692b61e4c5b0f329d461e3e7e041188":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"f3aaa3a04692b61e4c5b0f329d461e3e7e041188":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["f3aaa3a04692b61e4c5b0f329d461e3e7e041188","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}