{"path":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","commits":[{"id":"8aa3ac5678898d1ec767463baf78092a23dcb061","date":1487253427,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","sourceNew":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","sourceNew":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","sourceNew":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","sourceNew":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestUsageTrackingFilterCachingPolicy#testBooleanQueries().mjava","sourceNew":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f), Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBooleanQueries() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    IndexSearcher searcher = new IndexSearcher(reader);\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    LRUQueryCache cache = new LRUQueryCache(10, Long.MAX_VALUE, new LRUQueryCache.MinSegmentSizePredicate(1, 0f));\n    searcher.setQueryCache(cache);\n    searcher.setQueryCachingPolicy(policy);\n\n    DummyQuery q1 = new DummyQuery(1);\n    DummyQuery q2 = new DummyQuery(2);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(q1, Occur.SHOULD)\n        .add(q2, Occur.SHOULD)\n        .build();\n\n    for (int i = 0; i < 3; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(0, cache.getCacheSize()); // nothing cached yet, too early\n\n    searcher.count(bq);\n    assertEquals(1, cache.getCacheSize()); // the bq got cached, but not q1 and q2\n\n    for (int i = 0; i < 10; ++i) {\n      searcher.count(bq);\n    }\n    assertEquals(1, cache.getCacheSize()); // q1 and q2 still not cached since we do not pull scorers on them\n\n    searcher.count(q1);\n    assertEquals(2, cache.getCacheSize()); // q1 used on its own -> cached\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["8aa3ac5678898d1ec767463baf78092a23dcb061"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["8aa3ac5678898d1ec767463baf78092a23dcb061","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"8aa3ac5678898d1ec767463baf78092a23dcb061":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8aa3ac5678898d1ec767463baf78092a23dcb061"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8aa3ac5678898d1ec767463baf78092a23dcb061":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}