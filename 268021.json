{"path":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter writer=new IndexWriter (rd,analyzer,IndexWriter.MaxFieldLength.LIMITED);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","sourceOld":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter writer=new IndexWriter (rd,analyzer,IndexWriter.MaxFieldLength.LIMITED);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"596bb722a7d5165dcaf2d4243d01eeb5635049f5","date":1292168947,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n                IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\t\tIndexWriter writer=new IndexWriter (rd, iwConfig);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","sourceOld":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter writer=new IndexWriter (rd,analyzer,IndexWriter.MaxFieldLength.LIMITED);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n                IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\t\tIndexWriter writer=new IndexWriter (rd, iwConfig);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","sourceOld":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter writer=new IndexWriter (rd,analyzer,IndexWriter.MaxFieldLength.LIMITED);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n                IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\t\tIndexWriter writer=new IndexWriter (rd, iwConfig);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","sourceOld":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter writer=new IndexWriter (rd,analyzer,IndexWriter.MaxFieldLength.LIMITED);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"salary\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"type\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"description\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","sourceOld":"\tprivate void openExampleIndex() throws CorruptIndexException, IOException {\n\n\t\t//Create a RAM-based index from our test data file\n\t\tRAMDirectory rd=new RAMDirectory();\n                IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\t\tIndexWriter writer=new IndexWriter (rd, iwConfig);\n\t\tInputStream dataIn=getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n\t\tString line = br.readLine();\n\t\twhile(line!=null)\n\t\t{\n\t\t\tline=line.trim();\n\t\t\tif(line.length()>0)\n\t\t\t{\n\t\t\t\t//parse row and create a document\n\t\t\t\tStringTokenizer st=new StringTokenizer(line,\"\\t\");\n\t\t\t\tDocument doc=new Document();\n\t\t\t\tdoc.add(new Field(\"location\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"salary\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"type\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED_NO_NORMS));\n\t\t\t\tdoc.add(new Field(\"description\",st.nextToken(),Field.Store.YES,\n\t\t\t\t\t\tField.Index.ANALYZED));\n\t\t\t\twriter.addDocument(doc);\n\t\t\t}\n\t\t\tline=br.readLine();\n\t\t}\n\t\twriter.close();\n\n\t\t//open searcher\n\t\tsearcher=new IndexSearcher(rd, true);\n\t}\n\n","bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90b5983cf0959ba2f206e3f7864b45d4e73384dd","date":1313636220,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#openExampleIndex().mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#openExampleIndex().mjava","sourceNew":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"salary\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"type\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"description\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","sourceOld":"  private void openExampleIndex() throws CorruptIndexException, IOException {\n    //Create a RAM-based index from our test data file\n    RAMDirectory rd = new RAMDirectory();\n    IndexWriterConfig iwConfig = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n    IndexWriter writer = new IndexWriter(rd, iwConfig);\n    InputStream dataIn = getServletContext().getResourceAsStream(\"/WEB-INF/data.tsv\");\n    BufferedReader br = new BufferedReader(new InputStreamReader(dataIn));\n    String line = br.readLine();\n    while (line != null) {\n      line = line.trim();\n      if (line.length() > 0) {\n        //parse row and create a document\n        StringTokenizer st = new StringTokenizer(line, \"\\t\");\n        Document doc = new Document();\n        doc.add(new Field(\"location\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"salary\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"type\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED_NO_NORMS));\n        doc.add(new Field(\"description\", st.nextToken(), Field.Store.YES,\n            Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      line = br.readLine();\n    }\n    writer.close();\n\n    //open searcher\n    searcher = new IndexSearcher(rd, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"90b5983cf0959ba2f206e3f7864b45d4e73384dd":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["596bb722a7d5165dcaf2d4243d01eeb5635049f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"596bb722a7d5165dcaf2d4243d01eeb5635049f5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","596bb722a7d5165dcaf2d4243d01eeb5635049f5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","596bb722a7d5165dcaf2d4243d01eeb5635049f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90b5983cf0959ba2f206e3f7864b45d4e73384dd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90b5983cf0959ba2f206e3f7864b45d4e73384dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["90b5983cf0959ba2f206e3f7864b45d4e73384dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"596bb722a7d5165dcaf2d4243d01eeb5635049f5":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["596bb722a7d5165dcaf2d4243d01eeb5635049f5","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}