{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testReverseRandom2().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testReverseRandom2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testReverseRandom2().mjava","sourceNew":"  public void testReverseRandom2() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      //System.out.println(\"TEST: iter=\" + iter);\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      if (random().nextBoolean()) {\n        a = Operations.removeDeadStates(a);\n      }\n      Automaton ra = Operations.reverse(a);\n      Automaton rda = Operations.determinize(ra);\n\n      if (Operations.isEmpty(a)) {\n        assertTrue(Operations.isEmpty(rda));\n        continue;\n      }\n\n      RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n\n      for(int iter2=0;iter2<20;iter2++) {\n        // Find string accepted by original automaton\n        int[] s = ras.getRandomAcceptedString(random());\n\n        // Reverse it\n        for(int j=0;j<s.length/2;j++) {\n          int x = s[j];\n          s[j] = s[s.length-j-1];\n          s[s.length-j-1] = x;\n        }\n        //System.out.println(\"TEST:   iter2=\" + iter2 + \" s=\" + Arrays.toString(s));\n\n        // Make sure reversed automaton accepts it\n        assertTrue(Operations.run(rda, new IntsRef(s, 0, s.length)));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReverseRandom2() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      //System.out.println(\"TEST: iter=\" + iter);\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n      if (random().nextBoolean()) {\n        a = BasicOperations.removeDeadStates(a);\n      }\n      LightAutomaton ra = SpecialOperations.reverse(a);\n      LightAutomaton rda = BasicOperations.determinize(ra);\n\n      if (BasicOperations.isEmpty(a)) {\n        assertTrue(BasicOperations.isEmpty(rda));\n        continue;\n      }\n\n      RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n\n      for(int iter2=0;iter2<20;iter2++) {\n        // Find string accepted by original automaton\n        int[] s = ras.getRandomAcceptedString(random());\n\n        // Reverse it\n        for(int j=0;j<s.length/2;j++) {\n          int x = s[j];\n          s[j] = s[s.length-j-1];\n          s[s.length-j-1] = x;\n        }\n        //System.out.println(\"TEST:   iter2=\" + iter2 + \" s=\" + Arrays.toString(s));\n\n        // Make sure reversed automaton accepts it\n        assertTrue(BasicOperations.run(rda, new IntsRef(s, 0, s.length)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testReverseRandom2().mjava","pathOld":"/dev/null","sourceNew":"  public void testReverseRandom2() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      //System.out.println(\"TEST: iter=\" + iter);\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      if (random().nextBoolean()) {\n        a = Operations.removeDeadStates(a);\n      }\n      Automaton ra = Operations.reverse(a);\n      Automaton rda = Operations.determinize(ra);\n\n      if (Operations.isEmpty(a)) {\n        assertTrue(Operations.isEmpty(rda));\n        continue;\n      }\n\n      RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n\n      for(int iter2=0;iter2<20;iter2++) {\n        // Find string accepted by original automaton\n        int[] s = ras.getRandomAcceptedString(random());\n\n        // Reverse it\n        for(int j=0;j<s.length/2;j++) {\n          int x = s[j];\n          s[j] = s[s.length-j-1];\n          s[s.length-j-1] = x;\n        }\n        //System.out.println(\"TEST:   iter2=\" + iter2 + \" s=\" + Arrays.toString(s));\n\n        // Make sure reversed automaton accepts it\n        assertTrue(Operations.run(rda, new IntsRef(s, 0, s.length)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testReverseRandom2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testReverseRandom2().mjava","sourceNew":"  public void testReverseRandom2() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      //System.out.println(\"TEST: iter=\" + iter);\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      if (random().nextBoolean()) {\n        a = Operations.removeDeadStates(a);\n      }\n      Automaton ra = Operations.reverse(a);\n      Automaton rda = Operations.determinize(ra, DEFAULT_MAX_DETERMINIZED_STATES);\n\n      if (Operations.isEmpty(a)) {\n        assertTrue(Operations.isEmpty(rda));\n        continue;\n      }\n\n      RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n\n      for(int iter2=0;iter2<20;iter2++) {\n        // Find string accepted by original automaton\n        int[] s = ras.getRandomAcceptedString(random());\n\n        // Reverse it\n        for(int j=0;j<s.length/2;j++) {\n          int x = s[j];\n          s[j] = s[s.length-j-1];\n          s[s.length-j-1] = x;\n        }\n        //System.out.println(\"TEST:   iter2=\" + iter2 + \" s=\" + Arrays.toString(s));\n\n        // Make sure reversed automaton accepts it\n        assertTrue(Operations.run(rda, new IntsRef(s, 0, s.length)));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReverseRandom2() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      //System.out.println(\"TEST: iter=\" + iter);\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      if (random().nextBoolean()) {\n        a = Operations.removeDeadStates(a);\n      }\n      Automaton ra = Operations.reverse(a);\n      Automaton rda = Operations.determinize(ra);\n\n      if (Operations.isEmpty(a)) {\n        assertTrue(Operations.isEmpty(rda));\n        continue;\n      }\n\n      RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n\n      for(int iter2=0;iter2<20;iter2++) {\n        // Find string accepted by original automaton\n        int[] s = ras.getRandomAcceptedString(random());\n\n        // Reverse it\n        for(int j=0;j<s.length/2;j++) {\n          int x = s[j];\n          s[j] = s[s.length-j-1];\n          s[s.length-j-1] = x;\n        }\n        //System.out.println(\"TEST:   iter2=\" + iter2 + \" s=\" + Arrays.toString(s));\n\n        // Make sure reversed automaton accepts it\n        assertTrue(Operations.run(rda, new IntsRef(s, 0, s.length)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c69b0e51e02e191025c0417fcecfd32205f5d45","date":1415272618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testReverseRandom2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testReverseRandom2().mjava","sourceNew":"  public void testReverseRandom2() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      //System.out.println(\"TEST: iter=\" + iter);\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      if (random().nextBoolean()) {\n        a = Operations.removeDeadStates(a);\n      }\n      Automaton ra = Operations.reverse(a);\n      Automaton rda = Operations.determinize(ra, Integer.MAX_VALUE);\n\n      if (Operations.isEmpty(a)) {\n        assertTrue(Operations.isEmpty(rda));\n        continue;\n      }\n\n      RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n\n      for(int iter2=0;iter2<20;iter2++) {\n        // Find string accepted by original automaton\n        int[] s = ras.getRandomAcceptedString(random());\n\n        // Reverse it\n        for(int j=0;j<s.length/2;j++) {\n          int x = s[j];\n          s[j] = s[s.length-j-1];\n          s[s.length-j-1] = x;\n        }\n        //System.out.println(\"TEST:   iter2=\" + iter2 + \" s=\" + Arrays.toString(s));\n\n        // Make sure reversed automaton accepts it\n        assertTrue(Operations.run(rda, new IntsRef(s, 0, s.length)));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReverseRandom2() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      //System.out.println(\"TEST: iter=\" + iter);\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n      if (random().nextBoolean()) {\n        a = Operations.removeDeadStates(a);\n      }\n      Automaton ra = Operations.reverse(a);\n      Automaton rda = Operations.determinize(ra, DEFAULT_MAX_DETERMINIZED_STATES);\n\n      if (Operations.isEmpty(a)) {\n        assertTrue(Operations.isEmpty(rda));\n        continue;\n      }\n\n      RandomAcceptedStrings ras = new RandomAcceptedStrings(a);\n\n      for(int iter2=0;iter2<20;iter2++) {\n        // Find string accepted by original automaton\n        int[] s = ras.getRandomAcceptedString(random());\n\n        // Reverse it\n        for(int j=0;j<s.length/2;j++) {\n          int x = s[j];\n          s[j] = s[s.length-j-1];\n          s[s.length-j-1] = x;\n        }\n        //System.out.println(\"TEST:   iter2=\" + iter2 + \" s=\" + Arrays.toString(s));\n\n        // Make sure reversed automaton accepts it\n        assertTrue(Operations.run(rda, new IntsRef(s, 0, s.length)));\n      }\n    }\n  }\n\n","bugFix":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c69b0e51e02e191025c0417fcecfd32205f5d45":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c69b0e51e02e191025c0417fcecfd32205f5d45"]},"commit2Childs":{"7c69b0e51e02e191025c0417fcecfd32205f5d45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}