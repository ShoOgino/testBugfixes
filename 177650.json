{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#[T-extends-DocValuesUpdate]_addDocValuesUpdate(Map[String,LinkedHashMap[Term,T]],T,int,IntFunction[T],long,long).mjava","commits":[{"id":"7e129bd6cb34a236558a49edf108a49d5c15e0e1","date":1525081316,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#[T-extends-DocValuesUpdate]_addDocValuesUpdate(Map[String,LinkedHashMap[Term,T]],T,int,IntFunction[T],long,long).mjava","pathOld":"/dev/null","sourceNew":"  private <T extends DocValuesUpdate> boolean addDocValuesUpdate(Map<String,LinkedHashMap<Term,T>> updates, T update,\n                                                                 int docIDUpto, IntFunction<T> prepareForApply,\n                                                                 long bytesPerUpdateEntry, long bytesPerFieldEntry) {\n    LinkedHashMap<Term,T> fieldUpdates = updates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new LinkedHashMap<>();\n      updates.put(update.field, fieldUpdates);\n      bytesUsed.addAndGet(bytesPerFieldEntry);\n    }\n    final T current = fieldUpdates.get(update.term);\n    if (current != null && docIDUpto < current.docIDUpto) {\n      // Only record the new number if it's greater than or equal to the current\n      // one. This is important because if multiple threads are replacing the\n      // same doc at nearly the same time, it's possible that one thread that\n      // got a higher docID is scheduled before the other threads.\n      return false;\n    }\n\n    // since it's a LinkedHashMap, we must first remove the Term entry so that\n    // it's added last (we're interested in insertion-order).\n    if (current != null) {\n      fieldUpdates.remove(update.term);\n    }\n\n    fieldUpdates.put(update.term, prepareForApply.apply(docIDUpto)); // only make a copy if necessary\n    if (current == null) {\n      bytesUsed.addAndGet(bytesPerUpdateEntry + update.sizeInBytes());\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42883db49d143abc1a0f176ba47e3388dafb608","date":1525083166,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#[T-extends-DocValuesUpdate]_addDocValuesUpdate(Map[String,LinkedHashMap[Term,T]],T,int,IntFunction[T],long,long).mjava","pathOld":"/dev/null","sourceNew":"  private <T extends DocValuesUpdate> boolean addDocValuesUpdate(Map<String,LinkedHashMap<Term,T>> updates, T update,\n                                                                 int docIDUpto, IntFunction<T> prepareForApply,\n                                                                 long bytesPerUpdateEntry, long bytesPerFieldEntry) {\n    LinkedHashMap<Term,T> fieldUpdates = updates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new LinkedHashMap<>();\n      updates.put(update.field, fieldUpdates);\n      bytesUsed.addAndGet(bytesPerFieldEntry);\n    }\n    final T current = fieldUpdates.get(update.term);\n    if (current != null && docIDUpto < current.docIDUpto) {\n      // Only record the new number if it's greater than or equal to the current\n      // one. This is important because if multiple threads are replacing the\n      // same doc at nearly the same time, it's possible that one thread that\n      // got a higher docID is scheduled before the other threads.\n      return false;\n    }\n\n    // since it's a LinkedHashMap, we must first remove the Term entry so that\n    // it's added last (we're interested in insertion-order).\n    if (current != null) {\n      fieldUpdates.remove(update.term);\n    }\n\n    fieldUpdates.put(update.term, prepareForApply.apply(docIDUpto)); // only make a copy if necessary\n    if (current == null) {\n      bytesUsed.addAndGet(bytesPerUpdateEntry + update.sizeInBytes());\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28211671436f185419b3f7e53ccfc3911441ab65","date":1544026960,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdates#[T-extends-DocValuesUpdate]_addDocValuesUpdate(Map[String,LinkedHashMap[Term,T]],T,int,IntFunction[T],long,long).mjava","sourceNew":null,"sourceOld":"  private <T extends DocValuesUpdate> boolean addDocValuesUpdate(Map<String,LinkedHashMap<Term,T>> updates, T update,\n                                                                 int docIDUpto, IntFunction<T> prepareForApply,\n                                                                 long bytesPerUpdateEntry, long bytesPerFieldEntry) {\n    LinkedHashMap<Term,T> fieldUpdates = updates.get(update.field);\n    if (fieldUpdates == null) {\n      fieldUpdates = new LinkedHashMap<>();\n      updates.put(update.field, fieldUpdates);\n      bytesUsed.addAndGet(bytesPerFieldEntry);\n    }\n    final T current = fieldUpdates.get(update.term);\n    if (current != null && docIDUpto < current.docIDUpto) {\n      // Only record the new number if it's greater than or equal to the current\n      // one. This is important because if multiple threads are replacing the\n      // same doc at nearly the same time, it's possible that one thread that\n      // got a higher docID is scheduled before the other threads.\n      return false;\n    }\n\n    // since it's a LinkedHashMap, we must first remove the Term entry so that\n    // it's added last (we're interested in insertion-order).\n    if (current != null) {\n      fieldUpdates.remove(update.term);\n    }\n\n    fieldUpdates.put(update.term, prepareForApply.apply(docIDUpto)); // only make a copy if necessary\n    if (current == null) {\n      bytesUsed.addAndGet(bytesPerUpdateEntry + update.sizeInBytes());\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28211671436f185419b3f7e53ccfc3911441ab65":["f42883db49d143abc1a0f176ba47e3388dafb608"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f42883db49d143abc1a0f176ba47e3388dafb608":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e129bd6cb34a236558a49edf108a49d5c15e0e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28211671436f185419b3f7e53ccfc3911441ab65"]},"commit2Childs":{"28211671436f185419b3f7e53ccfc3911441ab65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["f42883db49d143abc1a0f176ba47e3388dafb608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e129bd6cb34a236558a49edf108a49d5c15e0e1","f42883db49d143abc1a0f176ba47e3388dafb608"],"f42883db49d143abc1a0f176ba47e3388dafb608":["28211671436f185419b3f7e53ccfc3911441ab65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}