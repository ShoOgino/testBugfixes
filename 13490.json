{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testTermVectorWithoutOffsetsDoesntWork().mjava","commits":[{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testTermVectorWithoutOffsetsDoesntWork().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/TokenSourcesTest#testTermVectorWithoutOffsetsThrowsException().mjava","sourceNew":"  public void testTermVectorWithoutOffsetsDoesntWork()\n      throws IOException, InvalidTokenOffsetsException {\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(null));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(false);\n      customType.setStoreTermVectorPositions(true);\n      document.add(new Field(FIELD, new OverlappingTokenStream(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = DirectoryReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final TokenStream tokenStream =\n          TokenSources.getTermVectorTokenStreamOrNull(FIELD, indexReader.getTermVectors(0), -1);\n      assertNull(tokenStream);\n    }\n    finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","sourceOld":"  public void testTermVectorWithoutOffsetsThrowsException()\n      throws IOException, InvalidTokenOffsetsException {\n    final Directory directory = newDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        newIndexWriterConfig(null));\n    try {\n      final Document document = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorOffsets(false);\n      customType.setStoreTermVectorPositions(true);\n      document.add(new Field(FIELD, new OverlappingTokenStream(), customType));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = DirectoryReader.open(directory);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      TokenSources.getTokenStream(\n              indexReader.getTermVector(0, FIELD));\n      fail(\"TokenSources.getTokenStream should throw IllegalArgumentException if term vector has no offsets\");\n    }\n    catch (IllegalArgumentException e) {\n      // expected\n    }\n    finally {\n      indexReader.close();\n      directory.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d62e4938659e263e96ae8188e11aea8a940aea5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d62e4938659e263e96ae8188e11aea8a940aea5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}