{"path":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","pathOld":"/dev/null","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","sourceNew":null,"sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","pathOld":"src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","pathOld":"/dev/null","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"828f199c76d70a5ea0ddc4d9605063f1d323a28d","date":1308738340,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedOrError().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\r\n   * or immediately returns a ShardResponse if there was an error detected\r\n   */\r\n  public ShardResponse takeCompletedOrError() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\r\n        // add response to the response list... we do this after the take() and\r\n        // not after the completion of \"call\" so we know when the last response\r\n        // for a request was received.  Otherwise we might return the same\r\n        // request more than once.\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedOrError().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\r\n   * or immediately returns a ShardResponse if there was an error detected\r\n   */\r\n  public ShardResponse takeCompletedOrError() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\r\n        // add response to the response list... we do this after the take() and\r\n        // not after the completion of \"call\" so we know when the last response\r\n        // for a request was received.  Otherwise we might return the same\r\n        // request more than once.\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#takeCompletedOrError().mjava","sourceNew":null,"sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest,\n   * or immediately returns a ShardResponse if there was an error detected\n   */\n  ShardResponse takeCompletedOrError() {\n    while (pending.size() > 0) {\n      try {\n        Future<ShardResponse> future = completionService.take();\n        pending.remove(future);\n        ShardResponse rsp = future.get();\n        if (rsp.getException() != null) return rsp; // if exception, return immediately\n        // add response to the response list... we do this after the take() and\n        // not after the completion of \"call\" so we know when the last response\n        // for a request was received.  Otherwise we might return the same\n        // request more than once.\n        rsp.getShardRequest().responses.add(rsp);\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\n          return rsp;\n        }\n      } catch (InterruptedException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } catch (ExecutionException e) {\n        // should be impossible... the problem with catching the exception\n        // at this level is we don't know what ShardRequest it applied to\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2553b00f699380c64959ccb27991289aae87be2e":["1da8d55113b689b06716246649de6f62430f15c0","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["1da8d55113b689b06716246649de6f62430f15c0"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da8d55113b689b06716246649de6f62430f15c0","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["828f199c76d70a5ea0ddc4d9605063f1d323a28d"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["2553b00f699380c64959ccb27991289aae87be2e","828f199c76d70a5ea0ddc4d9605063f1d323a28d","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"2553b00f699380c64959ccb27991289aae87be2e":[],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}