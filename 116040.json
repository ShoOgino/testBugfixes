{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"d289450fa5030c34b5e378c04bcb03a026aad9f4","date":1400178141,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    // TODO: in some cases we can filter by length?  eg\n    // regexp foo*bar must be at least length 6 bytes\n    public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n      // }\n      runAutomaton = compiled.runAutomaton;\n      compiledAutomaton = compiled;\n      in = parent.in.clone();\n      stack = new Frame[5];\n      for(int idx=0;idx<stack.length;idx++) {\n        stack[idx] = new Frame(idx);\n      }\n      for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n        arcs[arcIdx] = new FST.Arc<>();\n      }\n\n      if (index == null) {\n        fstReader = null;\n      } else {\n        fstReader = index.getBytesReader();\n      }\n\n      // TODO: if the automaton is \"smallish\" we really\n      // should use the terms index to seek at least to\n      // the initial term and likely to subsequent terms\n      // (or, maybe just fallback to ATE for such cases).\n      // Else the seek cost of loading the frames will be\n      // too costly.\n\n      final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n      // Empty string prefix must have an output in the index!\n      assert arc.isFinal();\n\n      // Special pushFrame since it's the first one:\n      final Frame f = stack[0];\n      f.fp = f.fpOrig = rootBlockFP;\n      f.prefix = 0;\n      f.setState(runAutomaton.getInitialState());\n      f.arc = arc;\n      f.outputPrefix = arc.output;\n      f.load(rootCode);\n\n      // for assert:\n      assert setSavedStartTerm(startTerm);\n\n      currentFrame = f;\n      if (startTerm != null) {\n        seekToStartTerm(startTerm);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","date":1400179494,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":null,"sourceOld":"    // TODO: in some cases we can filter by length?  eg\n    // regexp foo*bar must be at least length 6 bytes\n    public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n      // }\n      runAutomaton = compiled.runAutomaton;\n      compiledAutomaton = compiled;\n      in = parent.in.clone();\n      stack = new Frame[5];\n      for(int idx=0;idx<stack.length;idx++) {\n        stack[idx] = new Frame(idx);\n      }\n      for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n        arcs[arcIdx] = new FST.Arc<>();\n      }\n\n      if (index == null) {\n        fstReader = null;\n      } else {\n        fstReader = index.getBytesReader();\n      }\n\n      // TODO: if the automaton is \"smallish\" we really\n      // should use the terms index to seek at least to\n      // the initial term and likely to subsequent terms\n      // (or, maybe just fallback to ATE for such cases).\n      // Else the seek cost of loading the frames will be\n      // too costly.\n\n      final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n      // Empty string prefix must have an output in the index!\n      assert arc.isFinal();\n\n      // Special pushFrame since it's the first one:\n      final Frame f = stack[0];\n      f.fp = f.fpOrig = rootBlockFP;\n      f.prefix = 0;\n      f.setState(runAutomaton.getInitialState());\n      f.arc = arc;\n      f.outputPrefix = arc.output;\n      f.load(rootCode);\n\n      // for assert:\n      assert setSavedStartTerm(startTerm);\n\n      currentFrame = f;\n      if (startTerm != null) {\n        seekToStartTerm(startTerm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d289450fa5030c34b5e378c04bcb03a026aad9f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["d289450fa5030c34b5e378c04bcb03a026aad9f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d289450fa5030c34b5e378c04bcb03a026aad9f4":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d289450fa5030c34b5e378c04bcb03a026aad9f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}