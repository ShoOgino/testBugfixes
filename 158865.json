{"path":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(\"lookups\", lookups);\n        map.put(\"hits\", hits);\n        map.put(\"hitratio\", calcHitRatio(lookups, hits));\n        map.put(\"inserts\", inserts);\n        map.put(\"evictions\", evictions);\n        map.put(\"size\", size);\n\n        map.put(\"warmupTime\", warmupTime);\n        map.put(\"timeDecay\", timeDecay);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(\"lookups\", lookups);\n        map.put(\"hits\", hits);\n        map.put(\"hitratio\", calcHitRatio(lookups, hits));\n        map.put(\"inserts\", inserts);\n        map.put(\"evictions\", evictions);\n        map.put(\"size\", size);\n\n        map.put(\"warmupTime\", warmupTime);\n        map.put(\"timeDecay\", timeDecay);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(\"lookups\", lookups);\n        map.put(\"hits\", hits);\n        map.put(\"hitratio\", calcHitRatio(lookups, hits));\n        map.put(\"inserts\", inserts);\n        map.put(\"evictions\", evictions);\n        map.put(\"size\", size);\n\n        map.put(\"warmupTime\", warmupTime);\n        map.put(\"timeDecay\", timeDecay);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(\"lookups\", lookups);\n        map.put(\"hits\", hits);\n        map.put(\"hitratio\", calcHitRatio(lookups, hits));\n        map.put(\"inserts\", inserts);\n        map.put(\"evictions\", evictions);\n        map.put(\"size\", size);\n\n        map.put(\"warmupTime\", warmupTime);\n        map.put(\"timeDecay\", timeDecay);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(\"lookups\", lookups);\n        map.put(\"hits\", hits);\n        map.put(\"hitratio\", calcHitRatio(lookups, hits));\n        map.put(\"inserts\", inserts);\n        map.put(\"evictions\", evictions);\n        map.put(\"size\", size);\n\n        map.put(\"warmupTime\", warmupTime);\n        map.put(\"timeDecay\", timeDecay);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(\"lookups\", lookups);\n        map.put(\"hits\", hits);\n        map.put(\"hitratio\", calcHitRatio(lookups, hits));\n        map.put(\"inserts\", inserts);\n        map.put(\"evictions\", evictions);\n        map.put(\"size\", size);\n\n        map.put(\"warmupTime\", warmupTime);\n        map.put(\"timeDecay\", timeDecay);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}