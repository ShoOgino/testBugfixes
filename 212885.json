{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","sourceNew":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","sourceNew":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","bugFix":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","sourceNew":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","sourceNew":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"871f13bf1a6255d5315451355f9fd2ebdd84e740","date":1316056877,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","sourceNew":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        null, true, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        \"\", false, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    analyzer.setTokenSeparator(null);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n    analyzer.setOutputUnigrams(false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","sourceNew":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        null, true, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        \"\", false, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        null, true, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        \"\", false, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testNullTokenSeparator().mjava","sourceNew":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        null, true, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        \"\", false, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","sourceOld":"  public void testNullTokenSeparator() throws Exception {\n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        null, true, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"please\", \"pleasedivide\", \n                                         \"divide\", \"divideinto\", \n                                         \"into\", \"intoshingles\", \n                                         \"shingles\" },\n                          new int[] { 0,  0,  7,  7, 14, 14, 19 },\n                          new int[] { 6, 13, 13, 18, 18, 27, 27 },\n                          new int[] { 1,  0,  1,  0,  1,  0,  1 });\n\n    analyzer = new ShingleAnalyzerWrapper(\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false),\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE,\n        \"\", false, false);\n    assertAnalyzesToReuse(analyzer, \"please divide into shingles\",\n                          new String[] { \"pleasedivide\", \n                                         \"divideinto\", \n                                         \"intoshingles\" },\n                          new int[] {  0,  7, 14 },\n                          new int[] { 13, 18, 27 },\n                          new int[] {  1,  1,  1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["871f13bf1a6255d5315451355f9fd2ebdd84e740"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"871f13bf1a6255d5315451355f9fd2ebdd84e740":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","871f13bf1a6255d5315451355f9fd2ebdd84e740"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"871f13bf1a6255d5315451355f9fd2ebdd84e740":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}