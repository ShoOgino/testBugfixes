{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a","date":1329823675,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n    assertFieldInfos(leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n    assertFieldInfos(leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws IOException {\n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n    assertFieldInfos(leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8af96162d6e24bbd73a74cf381037e6aea675cd8","date":1422142293,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws IOException {\n    int numdocs = TEST_NIGHTLY ? atLeast(2000) : atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    rightReader = rightWriter.getReader();\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws IOException {\n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba9caaba4a39a5a534238cde390e71bdf5b32d0b","date":1427857197,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  // we use a small amount of docs here, so it works with any codec \n  public void testEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    rightReader = rightWriter.getReader();\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws IOException {\n    int numdocs = TEST_NIGHTLY ? atLeast(2000) : atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    rightReader = rightWriter.getReader();\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a58eaf3091ffefcf10c1b723e97edb50e4eed8f","date":1427857255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  // we use a small amount of docs here, so it works with any codec \n  public void testEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    rightReader = rightWriter.getReader();\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws IOException {\n    int numdocs = TEST_NIGHTLY ? atLeast(2000) : atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    rightReader = rightWriter.getReader();\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  // we use a small amount of docs here, so it works with any codec \n  public void testEquals() throws IOException {\n    int numdocs = atLeast(20);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    rightReader = rightWriter.getReader();\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  // we use a small amount of docs here, so it works with any codec \n  public void testEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = leftWriter.getReader();\n    rightReader = rightWriter.getReader();\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["ba9caaba4a39a5a534238cde390e71bdf5b32d0b"],"9a58eaf3091ffefcf10c1b723e97edb50e4eed8f":["8af96162d6e24bbd73a74cf381037e6aea675cd8","ba9caaba4a39a5a534238cde390e71bdf5b32d0b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8af96162d6e24bbd73a74cf381037e6aea675cd8":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba9caaba4a39a5a534238cde390e71bdf5b32d0b":["8af96162d6e24bbd73a74cf381037e6aea675cd8"],"aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a58eaf3091ffefcf10c1b723e97edb50e4eed8f":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a"],"8af96162d6e24bbd73a74cf381037e6aea675cd8":["9a58eaf3091ffefcf10c1b723e97edb50e4eed8f","ba9caaba4a39a5a534238cde390e71bdf5b32d0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ba9caaba4a39a5a534238cde390e71bdf5b32d0b":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","9a58eaf3091ffefcf10c1b723e97edb50e4eed8f"],"aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["8af96162d6e24bbd73a74cf381037e6aea675cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9a58eaf3091ffefcf10c1b723e97edb50e4eed8f","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}