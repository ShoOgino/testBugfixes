{"path":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","commits":[{"id":"15fb22f207e0cbf913dbc9857b6a4fe30390a625","date":1475989569,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","sourceNew":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient);\n        client.setParallelUpdates(random().nextBoolean());\n        client.setDefaultCollection(COLLECTION);\n        client.getLbClient().setConnectionTimeout(30000);\n        client.getLbClient().setSoTimeout(60000);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","sourceOld":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient);\n        client.setParallelUpdates(random().nextBoolean());\n        client.setDefaultCollection(COLLECTION);\n        client.getLbClient().setConnectionTimeout(30000);\n        client.getLbClient().setSoTimeout(60000);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","pathOld":"/dev/null","sourceNew":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient);\n        client.setParallelUpdates(random().nextBoolean());\n        client.setDefaultCollection(COLLECTION);\n        client.getLbClient().setConnectionTimeout(30000);\n        client.getLbClient().setSoTimeout(60000);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","sourceNew":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient, 30000, 60000);\n        client.setParallelUpdates(random().nextBoolean());\n        client.setDefaultCollection(COLLECTION);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","sourceOld":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient);\n        client.setParallelUpdates(random().nextBoolean());\n        client.setDefaultCollection(COLLECTION);\n        client.getLbClient().setConnectionTimeout(30000);\n        client.getLbClient().setSoTimeout(60000);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","sourceNew":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient, 30000, 60000);\n        client.setParallelUpdates(random().nextBoolean());\n        client.setDefaultCollection(COLLECTION);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","sourceOld":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient);\n        client.setParallelUpdates(random().nextBoolean());\n        client.setDefaultCollection(COLLECTION);\n        client.getLbClient().setConnectionTimeout(30000);\n        client.getLbClient().setSoTimeout(60000);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c","date":1510261138,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/impl/ConnectionReuseTest#buildClient(CloseableHttpClient,URL).mjava","sourceNew":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient, 30000, 60000);\n        client.setDefaultCollection(COLLECTION);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","sourceOld":"  private SolrClient buildClient(CloseableHttpClient httpClient, URL url) {\n    switch (random().nextInt(3)) {\n      case 0:\n        // currently only testing with 1 thread\n        return getConcurrentUpdateSolrClient(url.toString() + \"/\" + COLLECTION, httpClient, 6, 1);\n      case 1:\n        return getHttpSolrClient(url.toString() + \"/\" + COLLECTION, httpClient);\n      case 2:\n        CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress(), random().nextBoolean(), httpClient, 30000, 60000);\n        client.setParallelUpdates(random().nextBoolean());\n        client.setDefaultCollection(COLLECTION);\n        return client;\n    }\n    throw new RuntimeException(\"impossible\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c":["43d1e498704edd2bba13548a189eed4dfccff11b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["15fb22f207e0cbf913dbc9857b6a4fe30390a625","43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c"]},"commit2Childs":{"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43d1e498704edd2bba13548a189eed4dfccff11b":["15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15fb22f207e0cbf913dbc9857b6a4fe30390a625","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}