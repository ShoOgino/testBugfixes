{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","commits":[{"id":"bc2d3f6907e405a8ca4eb6fc6eb31a7c77478f35","date":1264659287,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"/dev/null","sourceNew":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FieldStreamDataSource#getData(String).mjava","sourceNew":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","sourceOld":"  public InputStream getData(String query) {\r\n    Object o = wrapper.getVariableResolver().resolve(dataField);\r\n    if (o == null) {\r\n      throw new DataImportHandlerException(SEVERE, \"No field available for name : \" + dataField);\r\n    }\r\n    if (o instanceof Blob) {\r\n      Blob blob = (Blob) o;\r\n      try {\r\n        //Most of the JDBC drivers have getBinaryStream defined as public\r\n        // so let us just check it\r\n        Method m = blob.getClass().getDeclaredMethod(\"getBinaryStream\");\r\n        if (Modifier.isPublic(m.getModifiers())) {\r\n          return (InputStream) m.invoke(blob);\r\n        } else {\r\n          // force invoke\r\n          m.setAccessible(true);\r\n          return (InputStream) m.invoke(blob);\r\n        }\r\n      } catch (Exception e) {\r\n        LOG.info(\"Unable to get data from BLOB\");\r\n        return null;\r\n\r\n      }\r\n    } else if (o instanceof byte[]) {\r\n      byte[] bytes = (byte[]) o;\r\n      return new ByteArrayInputStream(bytes);\r\n    } else {\r\n      throw new RuntimeException(\"unsupported type : \" + o.getClass());\r\n    } \r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["bc2d3f6907e405a8ca4eb6fc6eb31a7c77478f35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc2d3f6907e405a8ca4eb6fc6eb31a7c77478f35":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bc2d3f6907e405a8ca4eb6fc6eb31a7c77478f35"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bc2d3f6907e405a8ca4eb6fc6eb31a7c77478f35":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}