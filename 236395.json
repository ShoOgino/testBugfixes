{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#createBlockSlice(IndexInput,String,long,long,int).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#createBlockSlice(IndexInput,String,long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for using {@link #IndexedDISI(IndexInput, RandomAccessInput, int, byte, long)}.\n   * Creates a disiSlice for the IndexedDISI data blocks, without the jump-table.\n   * @param slice backing data, holding both blocks and jump-table.\n   * @param sliceDescription human readable slice designation.\n   * @param offset relative to the backing data.\n   * @param length full length of the IndexedDISI, including blocks and jump-table data.\n   * @param jumpTableEntryCount the number of blocks covered by the jump-table.\n   * @return a jumpTable containing the block jump-data or null if no such table exists.\n   * @throws IOException if a RandomAccessInput could not be created from slice.\n   */\n  public static IndexInput createBlockSlice(\n      IndexInput slice, String sliceDescription, long offset, long length, int jumpTableEntryCount) throws IOException {\n    long jumpTableBytes = jumpTableEntryCount < 0 ? 0 : jumpTableEntryCount*Integer.BYTES*2;\n    return slice.slice(sliceDescription, offset, length - jumpTableBytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#createBlockSlice(IndexInput,String,long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for using {@link #IndexedDISI(IndexInput, RandomAccessInput, int, byte, long)}.\n   * Creates a disiSlice for the IndexedDISI data blocks, without the jump-table.\n   * @param slice backing data, holding both blocks and jump-table.\n   * @param sliceDescription human readable slice designation.\n   * @param offset relative to the backing data.\n   * @param length full length of the IndexedDISI, including blocks and jump-table data.\n   * @param jumpTableEntryCount the number of blocks covered by the jump-table.\n   * @return a jumpTable containing the block jump-data or null if no such table exists.\n   * @throws IOException if a RandomAccessInput could not be created from slice.\n   */\n  public static IndexInput createBlockSlice(\n      IndexInput slice, String sliceDescription, long offset, long length, int jumpTableEntryCount) throws IOException {\n    long jumpTableBytes = jumpTableEntryCount < 0 ? 0 : jumpTableEntryCount*Integer.BYTES*2;\n    return slice.slice(sliceDescription, offset, length - jumpTableBytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}