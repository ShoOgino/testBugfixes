{"path":"lucene/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","sourceNew":"  private void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","sourceOld":"  private void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}