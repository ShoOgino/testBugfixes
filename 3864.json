{"path":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#newSynonymQuery(TermAndBoost[]).mjava","commits":[{"id":"3ac99c5ad157ae4ccdb201f140463a90f12f07b3","date":1582540181,"type":1,"author":"Alessandro Benedetti","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#newSynonymQuery(TermAndBoost[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#newSynonymQuery(Term[]).mjava","sourceNew":"  /**\n   * Builds a new SynonymQuery instance.\n   * <p>\n   * This is intended for subclasses that wish to customize the generated queries.\n   * @return new Query instance\n   */\n  protected Query newSynonymQuery(TermAndBoost[] terms) {\n    SynonymQuery.Builder builder = new SynonymQuery.Builder(terms[0].term.field());\n    for (TermAndBoost t : terms) {\n      builder.addTerm(t.term, t.boost);\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  /**\n   * Builds a new SynonymQuery instance.\n   * <p>\n   * This is intended for subclasses that wish to customize the generated queries.\n   * @return new Query instance\n   */\n  protected Query newSynonymQuery(Term terms[]) {\n    SynonymQuery.Builder builder = new SynonymQuery.Builder(terms[0].field());\n    for (Term term : terms) {\n      builder.addTerm(term);\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ac99c5ad157ae4ccdb201f140463a90f12f07b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ac99c5ad157ae4ccdb201f140463a90f12f07b3"]},"commit2Childs":{"3ac99c5ad157ae4ccdb201f140463a90f12f07b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ac99c5ad157ae4ccdb201f140463a90f12f07b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}