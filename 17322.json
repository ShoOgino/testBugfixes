{"path":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","commits":[{"id":"65a70ca4e6df183f7a8f69687b55379fea0ddac2","date":1225224829,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : cumulativeStats) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    return lst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["17361a479c1f90310e847f62780e15542c5e65b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d4424574f391ca669469f48ae303c7ed206061","date":1225269057,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : cumulativeStats) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : cumulativeStats) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa89a35683d73665c61d7af1d16f41649c25e5a7","date":1228684315,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : cumulativeStats) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : cumulativeStats) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17361a479c1f90310e847f62780e15542c5e65b1","date":1267915764,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : cumulativeStats) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa89a35683d73665c61d7af1d16f41649c25e5a7":["46d4424574f391ca669469f48ae303c7ed206061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["17361a479c1f90310e847f62780e15542c5e65b1"],"46d4424574f391ca669469f48ae303c7ed206061":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"65a70ca4e6df183f7a8f69687b55379fea0ddac2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"17361a479c1f90310e847f62780e15542c5e65b1":["fa89a35683d73665c61d7af1d16f41649c25e5a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fa89a35683d73665c61d7af1d16f41649c25e5a7":["17361a479c1f90310e847f62780e15542c5e65b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"46d4424574f391ca669469f48ae303c7ed206061":["fa89a35683d73665c61d7af1d16f41649c25e5a7"],"65a70ca4e6df183f7a8f69687b55379fea0ddac2":["46d4424574f391ca669469f48ae303c7ed206061"],"17361a479c1f90310e847f62780e15542c5e65b1":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}