{"path":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter#split(int,int,List[InclusiveRange]).mjava","commits":[{"id":"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30","date":1387399235,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter#split(int,int,List[InclusiveRange]).mjava","pathOld":"/dev/null","sourceNew":"  private static LongRangeNode split(int start, int end, List<InclusiveRange> elementaryIntervals) {\n    if (start == end-1) {\n      // leaf\n      InclusiveRange range = elementaryIntervals.get(start);\n      return new LongRangeNode(range.start, range.end, null, null, start);\n    } else {\n      int mid = (start + end) >>> 1;\n      LongRangeNode left = split(start, mid, elementaryIntervals);\n      LongRangeNode right = split(mid, end, elementaryIntervals);\n      return new LongRangeNode(left.start, right.end, left, right, -1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter#split(int,int,List[InclusiveRange]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter#split(int,int,List[InclusiveRange]).mjava","sourceNew":"  private static LongRangeNode split(int start, int end, List<InclusiveRange> elementaryIntervals) {\n    if (start == end-1) {\n      // leaf\n      InclusiveRange range = elementaryIntervals.get(start);\n      return new LongRangeNode(range.start, range.end, null, null, start);\n    } else {\n      int mid = (start + end) >>> 1;\n      LongRangeNode left = split(start, mid, elementaryIntervals);\n      LongRangeNode right = split(mid, end, elementaryIntervals);\n      return new LongRangeNode(left.start, right.end, left, right, -1);\n    }\n  }\n\n","sourceOld":"  private static LongRangeNode split(int start, int end, List<InclusiveRange> elementaryIntervals) {\n    if (start == end-1) {\n      // leaf\n      InclusiveRange range = elementaryIntervals.get(start);\n      return new LongRangeNode(range.start, range.end, null, null, start);\n    } else {\n      int mid = (start + end) >>> 1;\n      LongRangeNode left = split(start, mid, elementaryIntervals);\n      LongRangeNode right = split(mid, end, elementaryIntervals);\n      return new LongRangeNode(left.start, right.end, left, right, -1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30"],"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}