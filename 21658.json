{"path":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","commits":[{"id":"9ca3876d7ad90122420134007bec508c30af5a18","date":1302308866,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"/dev/null","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer();\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer();\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"/dev/null","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"/dev/null","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      ts.reset();\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      ts.reset();\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"/dev/null","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      ts.reset();\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.reusableTokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      ts.reset();\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      ts.end();\n      ts.close();\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      ts.reset();\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17d78bc3fbc0b27e48b38e68992a03f25053bc03","date":1317017573,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.reusableTokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.reusableTokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      int count = 0;\n      ts.reset();\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          break;\n        }\n        count++;\n      }\n      ts.end();\n      ts.close();\n      if (count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.reusableTokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#getRandomTerm(String).mjava","sourceNew":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","sourceOld":"  // Produces a realistic unicode random string that\n  // survives MockAnalyzer unchanged:\n  private String getRandomTerm(String other) throws IOException {\n    Analyzer a = new MockAnalyzer(random);\n    while(true) {\n      String s = _TestUtil.randomRealisticUnicodeString(random);\n      if (other != null && s.equals(other)) {\n        continue;\n      }\n      final TokenStream ts = a.tokenStream(\"foo\", new StringReader(s));\n      final TermToBytesRefAttribute termAtt = ts.getAttribute(TermToBytesRefAttribute.class);\n      final BytesRef termBytes = termAtt.getBytesRef();\n      ts.reset();\n\n      int count = 0;\n      boolean changed = false;\n\n      while(ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        if (count == 0 && !termBytes.utf8ToString().equals(s)) {\n          // The value was changed during analysis.  Keep iterating so the\n          // tokenStream is exhausted.\n          changed = true;\n        }\n        count++;\n      }\n\n      ts.end();\n      ts.close();\n\n      // Did we iterate just once and the value was unchanged?\n      if (!changed && count == 1) {\n        return s;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca3876d7ad90122420134007bec508c30af5a18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cf7efd82433f3f64684711c16edfd149db6af111":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"17d78bc3fbc0b27e48b38e68992a03f25053bc03":["cf7efd82433f3f64684711c16edfd149db6af111"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["9ca3876d7ad90122420134007bec508c30af5a18"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["17d78bc3fbc0b27e48b38e68992a03f25053bc03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9ca3876d7ad90122420134007bec508c30af5a18":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"962d04139994fce5193143ef35615499a9a96d78":[],"cf7efd82433f3f64684711c16edfd149db6af111":["17d78bc3fbc0b27e48b38e68992a03f25053bc03"],"17d78bc3fbc0b27e48b38e68992a03f25053bc03":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["cf7efd82433f3f64684711c16edfd149db6af111","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ca3876d7ad90122420134007bec508c30af5a18","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"69e043c521d4e8db770cc140c63f5ef51f03426a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}