{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testCacheScoresIfNecessary().mjava","commits":[{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testCacheScoresIfNecessary().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testCacheScoresIfNecessary().mjava","sourceNew":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(ScoreMode.COMPLETE_NO_SCORES, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    Collector c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // only one collector needs scores => no caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreAndDoc.class);\n    c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // several collectors need scores => caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCacheScoresIfNecessary() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    iw.commit();\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    \n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    expectThrows(AssertionError.class, () -> {\n      collector(ScoreMode.COMPLETE_NO_SCORES, ScoreCachingWrappingScorer.class).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    });\n\n    // no collector needs scores => no caching\n    Collector c1 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    Collector c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // only one collector needs scores => no caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreAndDoc.class);\n    c2 = collector(ScoreMode.COMPLETE_NO_SCORES, ScoreAndDoc.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    // several collectors need scores => caching\n    c1 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}