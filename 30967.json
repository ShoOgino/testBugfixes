{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","commits":[{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"/dev/null","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = new MockRAMDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(new Field(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(new Field(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory(random);\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(new Field(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(new Field(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = new MockRAMDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(new Field(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(new Field(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(new Field(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(new Field(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory(random);\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(new Field(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(new Field(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(new Field(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(new Field(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      IndexReader wr = SlowMultiReaderWrapper.wrap(r);\n      w.close();\n\n      assertNull(wr.getDeletedDocs());\n      r.close();\n\n      r = IndexReader.open(dir, false);\n      wr = SlowMultiReaderWrapper.wrap(r);\n\n      assertNull(wr.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(wr.getDeletedDocs());\n      assertTrue(wr.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(wr.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"/dev/null","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random, dir);\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":null,"sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":null,"sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testMultiReaderDeletes().mjava","sourceNew":null,"sourceOld":"    public void testMultiReaderDeletes() throws Exception {\n      Directory dir = newDirectory();\n      RandomIndexWriter w= new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      Document doc = new Document();\n      doc.add(newField(\"f\", \"doctor\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      doc = new Document();\n      w.commit();\n      doc.add(newField(\"f\", \"who\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n      IndexReader r = new SlowMultiReaderWrapper(w.getReader());\n      w.close();\n\n      assertNull(r.getDeletedDocs());\n      r.close();\n\n      r = new SlowMultiReaderWrapper(IndexReader.open(dir, false));\n\n      assertNull(r.getDeletedDocs());\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"doctor\")));\n      assertNotNull(r.getDeletedDocs());\n      assertTrue(r.getDeletedDocs().get(0));\n      assertEquals(1, r.deleteDocuments(new Term(\"f\", \"who\")));\n      assertTrue(r.getDeletedDocs().get(1));\n      r.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"51c34a3639838887e7997850b6be80f838a4d6f7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51c34a3639838887e7997850b6be80f838a4d6f7"],"c19f985e36a65cc969e8e564fe337a0d41512075":["51c34a3639838887e7997850b6be80f838a4d6f7"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","51c34a3639838887e7997850b6be80f838a4d6f7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c34a3639838887e7997850b6be80f838a4d6f7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["a05409176bd65129d67a785ee70e881e238a9aef"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}