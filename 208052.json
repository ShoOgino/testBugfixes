{"path":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleDistance().mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleDistance().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircleTest#testCircleDistance().mjava","sourceNew":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","date":1441921550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleDistance().mjava","sourceNew":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = new GeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae6b82f3eeb00bd6696223fc1aaf31128810162a","date":1441977719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleDistance().mjava","sourceNew":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = new GeoStandardCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleDistance().mjava","sourceNew":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["ae6b82f3eeb00bd6696223fc1aaf31128810162a"],"ae6b82f3eeb00bd6696223fc1aaf31128810162a":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["ae6b82f3eeb00bd6696223fc1aaf31128810162a"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae6b82f3eeb00bd6696223fc1aaf31128810162a":["b4e444678504caf66a8060b1d514383aa4feac0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}