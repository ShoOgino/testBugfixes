{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testBulkOperations().mjava","commits":[{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testBulkOperations().mjava","pathOld":"/dev/null","sourceNew":"  /** Test the {@link BitSet#and}, {@link BitSet#or} and {@link BitSet#andNot} methods. */\n  public void testBulkOperations() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, 0), numBits);\n    T set2 = copyOf(set1, numBits);\n    final int iters = 10 + random().nextInt(100);\n    for (int i = 0; i < iters; ++i) {\n      // make extreme percents more likely\n      float percentSet2 = (float) Math.pow(random().nextDouble(), 2);\n      if (random().nextBoolean()) {\n        percentSet2 = 1 - percentSet2;\n      }\n      BitSet bulkSet = new JavaUtilBitSet(randomSet(numBits, percentSet2), numBits);\n      // operations are sometimes specialized based on the impl, so randomize the impl\n      final DocIdSet bulkSetCopy = randomCopy(bulkSet, numBits);\n      // now randomize the operation\n      if (bulkSetCopy.iterator() == null) {\n        continue;\n      }\n      switch (random().nextInt(3)) {\n        case 0:\n          set1.or(bulkSetCopy.iterator());\n          set2.or(bulkSetCopy.iterator());\n          break;\n        case 1:\n          set1.and(bulkSetCopy.iterator());\n          set2.and(bulkSetCopy.iterator());\n          break;\n        default:\n          set1.andNot(bulkSetCopy.iterator());\n          set2.andNot(bulkSetCopy.iterator());\n          break;\n      }\n      assertEquals(set1, set2, numBits);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testBulkOperations().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testBulkOperations().mjava","sourceNew":"  /** Test the {@link BitSet#and}, {@link BitSet#or} and {@link BitSet#andNot} methods. */\n  public void testBulkOperations() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, 0), numBits);\n    T set2 = copyOf(set1, numBits);\n    final int iters = 50 + random().nextInt(50);\n    for (int i = 0; i < iters; ++i) {\n      // make extreme percents more likely\n      float percentSet2 = rarely() ? 0 : (float) Math.pow(random().nextDouble(), 2);\n      if (random().nextBoolean()) {\n        percentSet2 = 1 - percentSet2;\n      }\n      BitSet bulkSet = new JavaUtilBitSet(randomSet(numBits, percentSet2), numBits);\n      // operations are sometimes specialized based on the impl, so randomize the impl\n      final DocIdSet bulkSetCopy = randomCopy(bulkSet, numBits);\n      // now randomize the operation\n      if (bulkSetCopy.iterator() == null) {\n        continue;\n      }\n      DocIdSetIterator it1 = bulkSetCopy.iterator();\n      DocIdSetIterator it2 = bulkSetCopy.iterator();\n      switch (random().nextInt(3)) {\n        case 0:\n          set1.or(it1);\n          set2.or(it2);\n          break;\n        case 1:\n          set1.and(it1);\n          set2.and(it2);\n          break;\n        default:\n          set1.andNot(it1);\n          set2.andNot(it2);\n          break;\n      }\n      assertEquals(set1, set2, numBits);\n    }\n  }\n\n","sourceOld":"  /** Test the {@link BitSet#and}, {@link BitSet#or} and {@link BitSet#andNot} methods. */\n  public void testBulkOperations() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, 0), numBits);\n    T set2 = copyOf(set1, numBits);\n    final int iters = 10 + random().nextInt(100);\n    for (int i = 0; i < iters; ++i) {\n      // make extreme percents more likely\n      float percentSet2 = (float) Math.pow(random().nextDouble(), 2);\n      if (random().nextBoolean()) {\n        percentSet2 = 1 - percentSet2;\n      }\n      BitSet bulkSet = new JavaUtilBitSet(randomSet(numBits, percentSet2), numBits);\n      // operations are sometimes specialized based on the impl, so randomize the impl\n      final DocIdSet bulkSetCopy = randomCopy(bulkSet, numBits);\n      // now randomize the operation\n      if (bulkSetCopy.iterator() == null) {\n        continue;\n      }\n      switch (random().nextInt(3)) {\n        case 0:\n          set1.or(bulkSetCopy.iterator());\n          set2.or(bulkSetCopy.iterator());\n          break;\n        case 1:\n          set1.and(bulkSetCopy.iterator());\n          set2.and(bulkSetCopy.iterator());\n          break;\n        default:\n          set1.andNot(bulkSetCopy.iterator());\n          set2.andNot(bulkSetCopy.iterator());\n          break;\n      }\n      assertEquals(set1, set2, numBits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd","date":1417101195,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testBulkOperations().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testBulkOperations().mjava","sourceNew":"  /** Test the {@link BitSet#and}, {@link BitSet#or} and {@link BitSet#andNot} methods. */\n  public void testBulkOperations() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, 0), numBits);\n    T set2 = copyOf(set1, numBits);\n    final int iters = TEST_NIGHTLY ? 50 + random().nextInt(50) : 10 + random().nextInt(10);\n    for (int i = 0; i < iters; ++i) {\n      // make extreme percents more likely\n      float percentSet2 = rarely() ? 0 : (float) Math.pow(random().nextDouble(), 2);\n      if (random().nextBoolean()) {\n        percentSet2 = 1 - percentSet2;\n      }\n      BitSet bulkSet = new JavaUtilBitSet(randomSet(numBits, percentSet2), numBits);\n      // operations are sometimes specialized based on the impl, so randomize the impl\n      final DocIdSet bulkSetCopy = randomCopy(bulkSet, numBits);\n      // now randomize the operation\n      if (bulkSetCopy.iterator() == null) {\n        continue;\n      }\n      DocIdSetIterator it1 = bulkSetCopy.iterator();\n      DocIdSetIterator it2 = bulkSetCopy.iterator();\n      switch (random().nextInt(3)) {\n        case 0:\n          set1.or(it1);\n          set2.or(it2);\n          break;\n        case 1:\n          set1.and(it1);\n          set2.and(it2);\n          break;\n        default:\n          set1.andNot(it1);\n          set2.andNot(it2);\n          break;\n      }\n      assertEquals(set1, set2, numBits);\n    }\n  }\n\n","sourceOld":"  /** Test the {@link BitSet#and}, {@link BitSet#or} and {@link BitSet#andNot} methods. */\n  public void testBulkOperations() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, 0), numBits);\n    T set2 = copyOf(set1, numBits);\n    final int iters = 50 + random().nextInt(50);\n    for (int i = 0; i < iters; ++i) {\n      // make extreme percents more likely\n      float percentSet2 = rarely() ? 0 : (float) Math.pow(random().nextDouble(), 2);\n      if (random().nextBoolean()) {\n        percentSet2 = 1 - percentSet2;\n      }\n      BitSet bulkSet = new JavaUtilBitSet(randomSet(numBits, percentSet2), numBits);\n      // operations are sometimes specialized based on the impl, so randomize the impl\n      final DocIdSet bulkSetCopy = randomCopy(bulkSet, numBits);\n      // now randomize the operation\n      if (bulkSetCopy.iterator() == null) {\n        continue;\n      }\n      DocIdSetIterator it1 = bulkSetCopy.iterator();\n      DocIdSetIterator it2 = bulkSetCopy.iterator();\n      switch (random().nextInt(3)) {\n        case 0:\n          set1.or(it1);\n          set2.or(it2);\n          break;\n        case 1:\n          set1.and(it1);\n          set2.and(it2);\n          break;\n        default:\n          set1.andNot(it1);\n          set2.andNot(it2);\n          break;\n      }\n      assertEquals(set1, set2, numBits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78d4e34b37df32ff7feb218a5ae197be13445bb","date":1419239875,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseBitSetTestCase#testBulkOperations().mjava","sourceNew":null,"sourceOld":"  /** Test the {@link BitSet#and}, {@link BitSet#or} and {@link BitSet#andNot} methods. */\n  public void testBulkOperations() throws IOException {\n    final int numBits = 1 + random().nextInt(100000);\n    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, 0), numBits);\n    T set2 = copyOf(set1, numBits);\n    final int iters = TEST_NIGHTLY ? 50 + random().nextInt(50) : 10 + random().nextInt(10);\n    for (int i = 0; i < iters; ++i) {\n      // make extreme percents more likely\n      float percentSet2 = rarely() ? 0 : (float) Math.pow(random().nextDouble(), 2);\n      if (random().nextBoolean()) {\n        percentSet2 = 1 - percentSet2;\n      }\n      BitSet bulkSet = new JavaUtilBitSet(randomSet(numBits, percentSet2), numBits);\n      // operations are sometimes specialized based on the impl, so randomize the impl\n      final DocIdSet bulkSetCopy = randomCopy(bulkSet, numBits);\n      // now randomize the operation\n      if (bulkSetCopy.iterator() == null) {\n        continue;\n      }\n      DocIdSetIterator it1 = bulkSetCopy.iterator();\n      DocIdSetIterator it2 = bulkSetCopy.iterator();\n      switch (random().nextInt(3)) {\n        case 0:\n          set1.or(it1);\n          set2.or(it2);\n          break;\n        case 1:\n          set1.and(it1);\n          set2.and(it2);\n          break;\n        default:\n          set1.andNot(it1);\n          set2.andNot(it2);\n          break;\n      }\n      assertEquals(set1, set2, numBits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f78d4e34b37df32ff7feb218a5ae197be13445bb":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f78d4e34b37df32ff7feb218a5ae197be13445bb"]},"commit2Childs":{"f78d4e34b37df32ff7feb218a5ae197be13445bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["f78d4e34b37df32ff7feb218a5ae197be13445bb"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}