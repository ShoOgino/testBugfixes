{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarStraightBytesField(FieldInfo,IndexOutput,IndexOutput,Iterable[BytesRef]).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarStraightBytesField(FieldInfo,IndexOutput,IndexOutput,Iterable[BytesRef]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarStraightBytesField(FieldInfo,IndexOutput,IndexOutput,Iterable[BytesRef]).mjava","sourceNew":"  // NOTE: 4.0 file format docs are crazy/wrong here...\n  private void addVarStraightBytesField(FieldInfo field, IndexOutput data, IndexOutput index, Iterable<BytesRef> values) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.BYTES_VAR_STRAIGHT.name());\n    \n    CodecUtil.writeHeader(data, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    CodecUtil.writeHeader(index, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    /* values */\n    \n    final long startPos = data.getFilePointer();\n    \n    for (BytesRef v : values) {\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    \n    /* addresses */\n    \n    final long maxAddress = data.getFilePointer() - startPos;\n    index.writeVLong(maxAddress);\n    \n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert maxDoc != Integer.MAX_VALUE; // unsupported by the 4.0 impl\n    \n    final PackedInts.Writer w = PackedInts.getWriter(index, maxDoc+1, PackedInts.bitsRequired(maxAddress), PackedInts.DEFAULT);\n    long currentPosition = 0;\n    for (BytesRef v : values) {\n      w.add(currentPosition);\n      if (v != null) {\n        currentPosition += v.length;\n      }\n    }\n    // write sentinel\n    assert currentPosition == maxAddress;\n    w.add(currentPosition);\n    w.finish();\n  }\n\n","sourceOld":"  // NOTE: 4.0 file format docs are crazy/wrong here...\n  private void addVarStraightBytesField(FieldInfo field, IndexOutput data, IndexOutput index, Iterable<BytesRef> values) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.BYTES_VAR_STRAIGHT.name());\n    \n    CodecUtil.writeHeader(data, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    CodecUtil.writeHeader(index, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    /* values */\n    \n    final long startPos = data.getFilePointer();\n    \n    for (BytesRef v : values) {\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    \n    /* addresses */\n    \n    final long maxAddress = data.getFilePointer() - startPos;\n    index.writeVLong(maxAddress);\n    \n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert maxDoc != Integer.MAX_VALUE; // unsupported by the 4.0 impl\n    \n    final PackedInts.Writer w = PackedInts.getWriter(index, maxDoc+1, PackedInts.bitsRequired(maxAddress), PackedInts.DEFAULT);\n    long currentPosition = 0;\n    for (BytesRef v : values) {\n      w.add(currentPosition);\n      if (v != null) {\n        currentPosition += v.length;\n      }\n    }\n    // write sentinel\n    assert currentPosition == maxAddress;\n    w.add(currentPosition);\n    w.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarStraightBytesField(FieldInfo,IndexOutput,IndexOutput,Iterable[BytesRef]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarStraightBytesField(FieldInfo,IndexOutput,IndexOutput,Iterable[BytesRef]).mjava","sourceNew":"  // NOTE: 4.0 file format docs are crazy/wrong here...\n  private void addVarStraightBytesField(FieldInfo field, IndexOutput data, IndexOutput index, Iterable<BytesRef> values) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.BYTES_VAR_STRAIGHT.name());\n    \n    CodecUtil.writeHeader(data, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    CodecUtil.writeHeader(index, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    /* values */\n    \n    final long startPos = data.getFilePointer();\n    \n    for (BytesRef v : values) {\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    \n    /* addresses */\n    \n    final long maxAddress = data.getFilePointer() - startPos;\n    index.writeVLong(maxAddress);\n    \n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert maxDoc != Integer.MAX_VALUE; // unsupported by the 4.0 impl\n    \n    final PackedInts.Writer w = PackedInts.getWriter(index, maxDoc+1, PackedInts.bitsRequired(maxAddress), PackedInts.DEFAULT);\n    long currentPosition = 0;\n    for (BytesRef v : values) {\n      w.add(currentPosition);\n      if (v != null) {\n        currentPosition += v.length;\n      }\n    }\n    // write sentinel\n    assert currentPosition == maxAddress;\n    w.add(currentPosition);\n    w.finish();\n  }\n\n","sourceOld":"  // NOTE: 4.0 file format docs are crazy/wrong here...\n  private void addVarStraightBytesField(FieldInfo field, IndexOutput data, IndexOutput index, Iterable<BytesRef> values) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.BYTES_VAR_STRAIGHT.name());\n    \n    CodecUtil.writeHeader(data, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    CodecUtil.writeHeader(index, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    /* values */\n    \n    final long startPos = data.getFilePointer();\n    \n    for (BytesRef v : values) {\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    \n    /* addresses */\n    \n    final long maxAddress = data.getFilePointer() - startPos;\n    index.writeVLong(maxAddress);\n    \n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert maxDoc != Integer.MAX_VALUE; // unsupported by the 4.0 impl\n    \n    final PackedInts.Writer w = PackedInts.getWriter(index, maxDoc+1, PackedInts.bitsRequired(maxAddress), PackedInts.DEFAULT);\n    long currentPosition = 0;\n    for (BytesRef v : values) {\n      w.add(currentPosition);\n      if (v != null) {\n        currentPosition += v.length;\n      }\n    }\n    // write sentinel\n    assert currentPosition == maxAddress;\n    w.add(currentPosition);\n    w.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarStraightBytesField(FieldInfo,IndexOutput,IndexOutput,Iterable[BytesRef]).mjava","sourceNew":null,"sourceOld":"  // NOTE: 4.0 file format docs are crazy/wrong here...\n  private void addVarStraightBytesField(FieldInfo field, IndexOutput data, IndexOutput index, Iterable<BytesRef> values) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.BYTES_VAR_STRAIGHT.name());\n    \n    CodecUtil.writeHeader(data, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_DAT,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    CodecUtil.writeHeader(index, \n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_CODEC_NAME_IDX,\n                          Lucene40DocValuesFormat.BYTES_VAR_STRAIGHT_VERSION_CURRENT);\n    \n    /* values */\n    \n    final long startPos = data.getFilePointer();\n    \n    for (BytesRef v : values) {\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n    \n    /* addresses */\n    \n    final long maxAddress = data.getFilePointer() - startPos;\n    index.writeVLong(maxAddress);\n    \n    final int maxDoc = state.segmentInfo.getDocCount();\n    assert maxDoc != Integer.MAX_VALUE; // unsupported by the 4.0 impl\n    \n    final PackedInts.Writer w = PackedInts.getWriter(index, maxDoc+1, PackedInts.bitsRequired(maxAddress), PackedInts.DEFAULT);\n    long currentPosition = 0;\n    for (BytesRef v : values) {\n      w.add(currentPosition);\n      if (v != null) {\n        currentPosition += v.length;\n      }\n    }\n    // write sentinel\n    assert currentPosition == maxAddress;\n    w.add(currentPosition);\n    w.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}