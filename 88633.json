{"path":"src/java/org/apache/solr/util/NumberUtils#long2sortableStr(long,char[],int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/NumberUtils#long2sortableStr(long,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  // uses binary representation of an int to build a string of\n  // chars that will sort correctly.  Only char ranges\n  // less than 0xd800 will be used to avoid UCS-16 surrogates.\n  // we can use the lowest 15 bits of a char, (or a mask of 0x7fff)\n  public static int long2sortableStr(long val, char[] out, int offset) {\n    val += Long.MIN_VALUE;\n    out[offset++] = (char)(val >>>60);\n    out[offset++] = (char)(val >>>45 & 0x7fff);\n    out[offset++] = (char)(val >>>30 & 0x7fff);\n    out[offset++] = (char)(val >>>15 & 0x7fff);\n    out[offset] = (char)(val & 0x7fff);\n    return 5;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/NumberUtils#long2sortableStr(long,char[],int).mjava","pathOld":"src/java/org/apache/solr/util/NumberUtils#long2sortableStr(long,char[],int).mjava","sourceNew":"  // uses binary representation of an int to build a string of\n  // chars that will sort correctly.  Only char ranges\n  // less than 0xd800 will be used to avoid UCS-16 surrogates.\n  // we can use the lowest 15 bits of a char, (or a mask of 0x7fff)\n  public static int long2sortableStr(long val, char[] out, int offset) {\n    val += Long.MIN_VALUE;\n    out[offset++] = (char)(val >>>60);\n    out[offset++] = (char)(val >>>45 & 0x7fff);\n    out[offset++] = (char)(val >>>30 & 0x7fff);\n    out[offset++] = (char)(val >>>15 & 0x7fff);\n    out[offset] = (char)(val & 0x7fff);\n    return 5;\n  }\n\n","sourceOld":"  // uses binary representation of an int to build a string of\n  // chars that will sort correctly.  Only char ranges\n  // less than 0xd800 will be used to avoid UCS-16 surrogates.\n  // we can use the lowest 15 bits of a char, (or a mask of 0x7fff)\n  public static int long2sortableStr(long val, char[] out, int offset) {\n    val += Long.MIN_VALUE;\n    out[offset++] = (char)(val >>>60);\n    out[offset++] = (char)(val >>>45 & 0x7fff);\n    out[offset++] = (char)(val >>>30 & 0x7fff);\n    out[offset++] = (char)(val >>>15 & 0x7fff);\n    out[offset] = (char)(val & 0x7fff);\n    return 5;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}