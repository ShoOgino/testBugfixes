{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(true, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(true, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, mergedSegment, null, CodecProvider.getDefault());\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(false, mergedDir, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true,\n        -1, null, false, merger.hasProx(), merger.getCodec()), BufferedIndexInput.BUFFER_SIZE, true, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, null);\n\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, mergedSegment);\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(true, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestSegmentMerger#testMerge().mjava","sourceNew":null,"sourceOld":"  public void testMerge() throws IOException {                             \n    SegmentMerger merger = new SegmentMerger(mergedDir, IndexWriter.DEFAULT_TERM_INDEX_INTERVAL, mergedSegment, null, CodecProvider.getDefault());\n    merger.add(reader1);\n    merger.add(reader2);\n    int docsMerged = merger.merge();\n    merger.closeReaders();\n    assertTrue(docsMerged == 2);\n    //Should be able to open a new SegmentReader against the new directory\n    SegmentReader mergedReader = SegmentReader.get(false, mergedDir, new SegmentInfo(mergedSegment, docsMerged, mergedDir, false, true,\n        -1, null, false, merger.hasProx(), merger.getCodec()), BufferedIndexInput.BUFFER_SIZE, true, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, null);\n\n    assertTrue(mergedReader != null);\n    assertTrue(mergedReader.numDocs() == 2);\n    Document newDoc1 = mergedReader.document(0);\n    assertTrue(newDoc1 != null);\n    //There are 2 unstored fields on the document\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = mergedReader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    \n    TermDocs termDocs = mergedReader.termDocs(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    assertTrue(termDocs != null);\n    assertTrue(termDocs.next() == true);\n    \n    Collection stored = mergedReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR);\n    assertTrue(stored != null);\n    //System.out.println(\"stored size: \" + stored.size());\n    assertTrue(\"We do not have 3 fields that were indexed with term vector\",stored.size() == 3);\n    \n    TermFreqVector vector = mergedReader.getTermFreqVector(0, DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    //System.out.println(\"Terms size: \" + terms.length);\n    assertTrue(terms.length == 3);\n    int [] freqs = vector.getTermFrequencies();\n    assertTrue(freqs != null);\n    //System.out.println(\"Freqs size: \" + freqs.length);\n    assertTrue(vector instanceof TermPositionVector == true);\n    \n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      int freq = freqs[i];\n      //System.out.println(\"Term: \" + term + \" Freq: \" + freq);\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(DocHelper.FIELD_2_FREQS[i] == freq);\n    }\n\n    TestSegmentReader.checkNorms(mergedReader);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}