{"path":"src/test/org/apache/solr/handler/component/TermsComponentTest#testLowerExclusive().mjava","commits":[{"id":"a8735269939bbb2e67365b93dac83a85bf21a345","date":1227966716,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testLowerExclusive().mjava","pathOld":"/dev/null","sourceNew":"  public void testLowerExclusive() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    //test where the lower is an actual term\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    \n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 5, terms.size() == 5);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is not null\", terms.get(\"a\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    //test where the lower is not a term\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"cc\");\n    params.add(TermsParams.TERMS_UPPER, \"d\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"725326303b39157323796ef620a9ad99eb185f11","date":1241874089,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testLowerExclusive().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testLowerExclusive().mjava","sourceNew":"  public void testLowerExclusive() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    //test where the lower is an actual term\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    \n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 5, terms.size() == 5);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is not null\", terms.get(\"a\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    //test where the lower is not a term\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"cc\");\n    params.add(TermsParams.TERMS_UPPER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n  }\n\n","sourceOld":"  public void testLowerExclusive() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    //test where the lower is an actual term\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    \n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 5, terms.size() == 5);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is not null\", terms.get(\"a\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    //test where the lower is not a term\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"cc\");\n    params.add(TermsParams.TERMS_UPPER, \"d\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testLowerExclusive().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testLowerExclusive().mjava","sourceNew":"  public void testLowerExclusive() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    //test where the lower is an actual term\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    \n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 5, terms.size() == 5);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is not null\", terms.get(\"a\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    //test where the lower is not a term\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"cc\");\n    params.add(TermsParams.TERMS_UPPER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n  }\n\n","sourceOld":"  public void testLowerExclusive() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n    //test where the lower is an actual term\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    \n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 5, terms.size() == 5);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is not null\", terms.get(\"a\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    //test where the lower is not a term\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_LOWER_INCLUSIVE, \"false\");\n    params.add(TermsParams.TERMS_FIELD, \"standardfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"cc\");\n    params.add(TermsParams.TERMS_UPPER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"standardfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"725326303b39157323796ef620a9ad99eb185f11":["a8735269939bbb2e67365b93dac83a85bf21a345"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a8735269939bbb2e67365b93dac83a85bf21a345":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["725326303b39157323796ef620a9ad99eb185f11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"725326303b39157323796ef620a9ad99eb185f11":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a8735269939bbb2e67365b93dac83a85bf21a345"],"a8735269939bbb2e67365b93dac83a85bf21a345":["725326303b39157323796ef620a9ad99eb185f11"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}