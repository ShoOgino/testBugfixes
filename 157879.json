{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","pathOld":"/dev/null","sourceNew":"    public GeoLatitudeZone(double topLat, double bottomLat)\n    {\n        this.topLat = topLat;\n        this.bottomLat = bottomLat;\n          \n        double sinTopLat = Math.sin(topLat);\n        double sinBottomLat = Math.sin(bottomLat);\n        cosTopLat = Math.cos(topLat);\n        cosBottomLat = Math.cos(bottomLat);\n          \n        // Construct sample points, so we get our sidedness right\n        Vector topPoint = new Vector(0.0,0.0,sinTopLat);\n        Vector bottomPoint = new Vector(0.0,0.0,sinBottomLat);\n\n        this.topPlane = new SidedPlane(bottomPoint,sinTopLat);\n        this.bottomPlane = new SidedPlane(topPoint,sinBottomLat);\n\n        // Compute an interior point.  Pick one whose lat is between top and bottom.\n        double sinMiddleLat = (topLat + bottomLat) * 0.5;\n        interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat),0.0,sinMiddleLat);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab7d51740456adc459ec788c8fe27746bdc60a55","date":1429185101,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","sourceNew":"    public GeoLatitudeZone(double topLat, double bottomLat)\n    {\n        this.topLat = topLat;\n        this.bottomLat = bottomLat;\n          \n        double sinTopLat = Math.sin(topLat);\n        double sinBottomLat = Math.sin(bottomLat);\n        cosTopLat = Math.cos(topLat);\n        cosBottomLat = Math.cos(bottomLat);\n          \n        // Construct sample points, so we get our sidedness right\n        Vector topPoint = new Vector(0.0,0.0,sinTopLat);\n        Vector bottomPoint = new Vector(0.0,0.0,sinBottomLat);\n\n        // Compute an interior point.  Pick one whose lat is between top and bottom.\n        double middleLat = (topLat + bottomLat) * 0.5;\n        double sinMiddleLat = Math.sin(middleLat);\n        interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat),0.0,sinMiddleLat);\n        \n        this.topPlane = new SidedPlane(interiorPoint,sinTopLat);\n        this.bottomPlane = new SidedPlane(interiorPoint,sinBottomLat);\n    }\n\n","sourceOld":"    public GeoLatitudeZone(double topLat, double bottomLat)\n    {\n        this.topLat = topLat;\n        this.bottomLat = bottomLat;\n          \n        double sinTopLat = Math.sin(topLat);\n        double sinBottomLat = Math.sin(bottomLat);\n        cosTopLat = Math.cos(topLat);\n        cosBottomLat = Math.cos(bottomLat);\n          \n        // Construct sample points, so we get our sidedness right\n        Vector topPoint = new Vector(0.0,0.0,sinTopLat);\n        Vector bottomPoint = new Vector(0.0,0.0,sinBottomLat);\n\n        this.topPlane = new SidedPlane(bottomPoint,sinTopLat);\n        this.bottomPlane = new SidedPlane(topPoint,sinBottomLat);\n\n        // Compute an interior point.  Pick one whose lat is between top and bottom.\n        double sinMiddleLat = (topLat + bottomLat) * 0.5;\n        interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat),0.0,sinMiddleLat);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","sourceNew":"    public GeoLatitudeZone(final double topLat, final double bottomLat)\n    {\n        this.topLat = topLat;\n        this.bottomLat = bottomLat;\n          \n        final double sinTopLat = Math.sin(topLat);\n        final double sinBottomLat = Math.sin(bottomLat);\n        this.cosTopLat = Math.cos(topLat);\n        this.cosBottomLat = Math.cos(bottomLat);\n          \n        // Construct sample points, so we get our sidedness right\n        final Vector topPoint = new Vector(0.0,0.0,sinTopLat);\n        final Vector bottomPoint = new Vector(0.0,0.0,sinBottomLat);\n\n        // Compute an interior point.  Pick one whose lat is between top and bottom.\n        final double middleLat = (topLat + bottomLat) * 0.5;\n        final double sinMiddleLat = Math.sin(middleLat);\n        this.interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat),0.0,sinMiddleLat);\n        this.topBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinTopLat * sinTopLat),0.0,sinTopLat);\n        this.bottomBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinBottomLat * sinBottomLat),0.0,sinBottomLat);\n        \n        this.topPlane = new SidedPlane(interiorPoint,sinTopLat);\n        this.bottomPlane = new SidedPlane(interiorPoint,sinBottomLat);\n        \n        this.edgePoints = new GeoPoint[]{topBoundaryPoint,bottomBoundaryPoint};\n    }\n\n","sourceOld":"    public GeoLatitudeZone(double topLat, double bottomLat)\n    {\n        this.topLat = topLat;\n        this.bottomLat = bottomLat;\n          \n        double sinTopLat = Math.sin(topLat);\n        double sinBottomLat = Math.sin(bottomLat);\n        cosTopLat = Math.cos(topLat);\n        cosBottomLat = Math.cos(bottomLat);\n          \n        // Construct sample points, so we get our sidedness right\n        Vector topPoint = new Vector(0.0,0.0,sinTopLat);\n        Vector bottomPoint = new Vector(0.0,0.0,sinBottomLat);\n\n        // Compute an interior point.  Pick one whose lat is between top and bottom.\n        double middleLat = (topLat + bottomLat) * 0.5;\n        double sinMiddleLat = Math.sin(middleLat);\n        interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat),0.0,sinMiddleLat);\n        \n        this.topPlane = new SidedPlane(interiorPoint,sinTopLat);\n        this.bottomPlane = new SidedPlane(interiorPoint,sinBottomLat);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","sourceNew":"  public GeoLatitudeZone(final double topLat, final double bottomLat) {\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosTopLat = Math.cos(topLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Construct sample points, so we get our sidedness right\n    final Vector topPoint = new Vector(0.0, 0.0, sinTopLat);\n    final Vector bottomPoint = new Vector(0.0, 0.0, sinBottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 0.0, sinMiddleLat);\n    this.topBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinTopLat * sinTopLat), 0.0, sinTopLat);\n    this.bottomBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 0.0, sinBottomLat);\n\n    this.topPlane = new SidedPlane(interiorPoint, sinTopLat);\n    this.bottomPlane = new SidedPlane(interiorPoint, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint, bottomBoundaryPoint};\n  }\n\n","sourceOld":"    public GeoLatitudeZone(final double topLat, final double bottomLat)\n    {\n        this.topLat = topLat;\n        this.bottomLat = bottomLat;\n          \n        final double sinTopLat = Math.sin(topLat);\n        final double sinBottomLat = Math.sin(bottomLat);\n        this.cosTopLat = Math.cos(topLat);\n        this.cosBottomLat = Math.cos(bottomLat);\n          \n        // Construct sample points, so we get our sidedness right\n        final Vector topPoint = new Vector(0.0,0.0,sinTopLat);\n        final Vector bottomPoint = new Vector(0.0,0.0,sinBottomLat);\n\n        // Compute an interior point.  Pick one whose lat is between top and bottom.\n        final double middleLat = (topLat + bottomLat) * 0.5;\n        final double sinMiddleLat = Math.sin(middleLat);\n        this.interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat),0.0,sinMiddleLat);\n        this.topBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinTopLat * sinTopLat),0.0,sinTopLat);\n        this.bottomBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinBottomLat * sinBottomLat),0.0,sinBottomLat);\n        \n        this.topPlane = new SidedPlane(interiorPoint,sinTopLat);\n        this.bottomPlane = new SidedPlane(interiorPoint,sinBottomLat);\n        \n        this.edgePoints = new GeoPoint[]{topBoundaryPoint,bottomBoundaryPoint};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","pathOld":"/dev/null","sourceNew":"  public GeoLatitudeZone(final double topLat, final double bottomLat) {\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosTopLat = Math.cos(topLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Construct sample points, so we get our sidedness right\n    final Vector topPoint = new Vector(0.0, 0.0, sinTopLat);\n    final Vector bottomPoint = new Vector(0.0, 0.0, sinBottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 0.0, sinMiddleLat);\n    this.topBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinTopLat * sinTopLat), 0.0, sinTopLat);\n    this.bottomBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 0.0, sinBottomLat);\n\n    this.topPlane = new SidedPlane(interiorPoint, sinTopLat);\n    this.bottomPlane = new SidedPlane(interiorPoint, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint, bottomBoundaryPoint};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(PlanetModel,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","sourceNew":"  public GeoLatitudeZone(final PlanetModel planetModel, final double topLat, final double bottomLat) {\n    super(planetModel);\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosTopLat = Math.cos(topLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.topBoundaryPoint = new GeoPoint(planetModel, sinTopLat, 0.0, Math.sqrt(1.0 - sinTopLat * sinTopLat), 1.0);\n    this.bottomBoundaryPoint = new GeoPoint(planetModel, sinBottomLat, 0.0, Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 1.0);\n\n    this.topPlane = new SidedPlane(interiorPoint, planetModel, sinTopLat);\n    this.bottomPlane = new SidedPlane(interiorPoint, planetModel, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint, bottomBoundaryPoint};\n  }\n\n","sourceOld":"  public GeoLatitudeZone(final double topLat, final double bottomLat) {\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosTopLat = Math.cos(topLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Construct sample points, so we get our sidedness right\n    final Vector topPoint = new Vector(0.0, 0.0, sinTopLat);\n    final Vector bottomPoint = new Vector(0.0, 0.0, sinBottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 0.0, sinMiddleLat);\n    this.topBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinTopLat * sinTopLat), 0.0, sinTopLat);\n    this.bottomBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 0.0, sinBottomLat);\n\n    this.topPlane = new SidedPlane(interiorPoint, sinTopLat);\n    this.bottomPlane = new SidedPlane(interiorPoint, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint, bottomBoundaryPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":5,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(PlanetModel,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLatitudeZone#GeoLatitudeZone(double,double).mjava","sourceNew":"  public GeoLatitudeZone(final PlanetModel planetModel, final double topLat, final double bottomLat) {\n    super(planetModel);\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosTopLat = Math.cos(topLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.topBoundaryPoint = new GeoPoint(planetModel, sinTopLat, 0.0, Math.sqrt(1.0 - sinTopLat * sinTopLat), 1.0);\n    this.bottomBoundaryPoint = new GeoPoint(planetModel, sinBottomLat, 0.0, Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 1.0);\n\n    this.topPlane = new SidedPlane(interiorPoint, planetModel, sinTopLat);\n    this.bottomPlane = new SidedPlane(interiorPoint, planetModel, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint, bottomBoundaryPoint};\n  }\n\n","sourceOld":"  public GeoLatitudeZone(final double topLat, final double bottomLat) {\n    this.topLat = topLat;\n    this.bottomLat = bottomLat;\n\n    final double sinTopLat = Math.sin(topLat);\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosTopLat = Math.cos(topLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Construct sample points, so we get our sidedness right\n    final Vector topPoint = new Vector(0.0, 0.0, sinTopLat);\n    final Vector bottomPoint = new Vector(0.0, 0.0, sinBottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (topLat + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 0.0, sinMiddleLat);\n    this.topBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinTopLat * sinTopLat), 0.0, sinTopLat);\n    this.bottomBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 0.0, sinBottomLat);\n\n    this.topPlane = new SidedPlane(interiorPoint, sinTopLat);\n    this.bottomPlane = new SidedPlane(interiorPoint, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{topBoundaryPoint, bottomBoundaryPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["ab7d51740456adc459ec788c8fe27746bdc60a55"],"ab7d51740456adc459ec788c8fe27746bdc60a55":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"ab7d51740456adc459ec788c8fe27746bdc60a55":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["ab7d51740456adc459ec788c8fe27746bdc60a55"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}