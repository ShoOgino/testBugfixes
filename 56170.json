{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#projectAddReplica(Cell,Replica,Consumer[Row.OperationInfo],boolean).mjava","commits":[{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#projectAddReplica(Cell,Replica,Consumer[Row.OperationInfo],boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#projectAddReplica(Cell,ReplicaInfo,Consumer[Row.OperationInfo],boolean).mjava","sourceNew":"  public void projectAddReplica(Cell cell, Replica ri, Consumer<Row.OperationInfo> opCollector, boolean strictMode) {\n    if (strictMode) {\n      // we do not want to add a replica of the 'withCollection' in strict mode\n      return;\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> withCollectionMap = (Map<String, String>) cell.val;\n    if (withCollectionMap == null || withCollectionMap.isEmpty()) return;\n\n    Set<String> uniqueColls = new HashSet<>();\n    Row row = cell.row;\n    row.forEachReplica(replicaInfo -> uniqueColls.add(replicaInfo.getCollection()));\n\n    for (Map.Entry<String, String> e : withCollectionMap.entrySet()) {\n      if (uniqueColls.contains(e.getKey()) && !uniqueColls.contains(e.getValue())) {\n        String withCollection = e.getValue();\n\n        opCollector.accept(new Row.OperationInfo(withCollection, \"shard1\", row.node, cell.name, true, Replica.Type.NRT));\n      }\n    }\n  }\n\n","sourceOld":"  public void projectAddReplica(Cell cell, ReplicaInfo ri, Consumer<Row.OperationInfo> opCollector, boolean strictMode) {\n    if (strictMode) {\n      // we do not want to add a replica of the 'withCollection' in strict mode\n      return;\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> withCollectionMap = (Map<String, String>) cell.val;\n    if (withCollectionMap == null || withCollectionMap.isEmpty()) return;\n\n    Set<String> uniqueColls = new HashSet<>();\n    Row row = cell.row;\n    row.forEachReplica(replicaInfo -> uniqueColls.add(replicaInfo.getCollection()));\n\n    for (Map.Entry<String, String> e : withCollectionMap.entrySet()) {\n      if (uniqueColls.contains(e.getKey()) && !uniqueColls.contains(e.getValue())) {\n        String withCollection = e.getValue();\n\n        opCollector.accept(new Row.OperationInfo(withCollection, \"shard1\", row.node, cell.name, true, Replica.Type.NRT));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#projectAddReplica(Cell,Replica,Consumer[Row.OperationInfo],boolean).mjava","sourceNew":null,"sourceOld":"  public void projectAddReplica(Cell cell, Replica ri, Consumer<Row.OperationInfo> opCollector, boolean strictMode) {\n    if (strictMode) {\n      // we do not want to add a replica of the 'withCollection' in strict mode\n      return;\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> withCollectionMap = (Map<String, String>) cell.val;\n    if (withCollectionMap == null || withCollectionMap.isEmpty()) return;\n\n    Set<String> uniqueColls = new HashSet<>();\n    Row row = cell.row;\n    row.forEachReplica(replicaInfo -> uniqueColls.add(replicaInfo.getCollection()));\n\n    for (Map.Entry<String, String> e : withCollectionMap.entrySet()) {\n      if (uniqueColls.contains(e.getKey()) && !uniqueColls.contains(e.getValue())) {\n        String withCollection = e.getValue();\n\n        opCollector.accept(new Row.OperationInfo(withCollection, \"shard1\", row.node, cell.name, true, Replica.Type.NRT));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}