{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","commits":[{"id":"b4407017a35dea85f652ec066e4565818dd75436","date":1431296729,"type":0,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      try {\n        client.getById(\"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(ids, null);\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", \"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", ids, null);\n      } catch (ParseException ignored) {}\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","sourceNew":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      try {\n        client.getById(\"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(ids, null);\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", \"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", ids, null);\n      } catch (ParseException ignored) {}\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      try {\n        client.getById(\"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(ids, null);\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", \"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", ids, null);\n      } catch (ParseException ignored) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","sourceNew":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      try {\n        client.getById(\"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(ids, null);\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", \"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", ids, null);\n      } catch (ParseException ignored) {}\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      try {\n        client.getById(\"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(ids, null);\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", \"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", ids, null);\n      } catch (ParseException ignored) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","sourceNew":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      expectThrows(ParseException.class, () -> client.getById(\"a\"));\n      expectThrows(ParseException.class, () -> client.getById(ids, null));\n      expectThrows(ParseException.class, () -> client.getById(\"foo\", \"a\"));\n      expectThrows(ParseException.class, () -> client.getById(\"foo\", ids, null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      try {\n        client.getById(\"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(ids, null);\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", \"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", ids, null);\n      } catch (ParseException ignored) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","sourceNew":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      expectThrows(ParseException.class, () -> client.getById(\"a\"));\n      expectThrows(ParseException.class, () -> client.getById(ids, null));\n      expectThrows(ParseException.class, () -> client.getById(\"foo\", \"a\"));\n      expectThrows(ParseException.class, () -> client.getById(\"foo\", ids, null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      try {\n        client.getById(\"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(ids, null);\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", \"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", ids, null);\n      } catch (ParseException ignored) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","sourceNew":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      expectThrows(ParseException.class, () -> client.getById(\"a\"));\n      expectThrows(ParseException.class, () -> client.getById(ids, null));\n      expectThrows(ParseException.class, () -> client.getById(\"foo\", \"a\"));\n      expectThrows(ParseException.class, () -> client.getById(\"foo\", ids, null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      try {\n        client.getById(\"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(ids, null);\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", \"a\");\n      } catch (ParseException ignored) {}\n\n      try {\n        client.getById(\"foo\", ids, null);\n      } catch (ParseException ignored) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testGetById().mjava","sourceNew":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.getById(\"a\"));\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.getById(ids, null));\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.getById(\"foo\", \"a\"));\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.getById(\"foo\", ids, null));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetById() throws Exception {\n    DebugServlet.clear();\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      Collection<String> ids = Collections.singletonList(\"a\");\n      expectThrows(ParseException.class, () -> client.getById(\"a\"));\n      expectThrows(ParseException.class, () -> client.getById(ids, null));\n      expectThrows(ParseException.class, () -> client.getById(\"foo\", \"a\"));\n      expectThrows(ParseException.class, () -> client.getById(\"foo\", ids, null));\n    }\n  }\n\n","bugFix":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["b4407017a35dea85f652ec066e4565818dd75436"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b4407017a35dea85f652ec066e4565818dd75436","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"b4407017a35dea85f652ec066e4565818dd75436":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4407017a35dea85f652ec066e4565818dd75436"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"b4407017a35dea85f652ec066e4565818dd75436":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}