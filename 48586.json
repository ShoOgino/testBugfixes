{"path":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testSmallBitSets().mjava","commits":[{"id":"843b7d20cfe6c2c4632b9123a73596f271baa10d","date":1310926494,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testSmallBitSets().mjava","pathOld":"/dev/null","sourceNew":"  public void testSmallBitSets() {\n    // Make sure size 0-10 bit sets are OK:\n    for(int numBits=0;numBits<10;numBits++) {\n      FixedBitSet b1 = new FixedBitSet(numBits);\n      FixedBitSet b2 = new FixedBitSet(numBits);\n      assertTrue(b1.equals(b2));\n      assertEquals(b1.hashCode(), b2.hashCode());\n      assertEquals(0, b1.cardinality());\n      if (numBits > 0) {\n        b1.set(0, numBits);\n        assertEquals(numBits, b1.cardinality());\n        b1.flip(0, numBits);\n        assertEquals(0, b1.cardinality());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet#testSmallBitSets().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFixedBitSet#testSmallBitSets().mjava","sourceNew":"  public void testSmallBitSets() {\n    // Make sure size 0-10 bit sets are OK:\n    for(int numBits=0;numBits<10;numBits++) {\n      FixedBitSet b1 = new FixedBitSet(numBits);\n      FixedBitSet b2 = new FixedBitSet(numBits);\n      assertTrue(b1.equals(b2));\n      assertEquals(b1.hashCode(), b2.hashCode());\n      assertEquals(0, b1.cardinality());\n      if (numBits > 0) {\n        b1.set(0, numBits);\n        assertEquals(numBits, b1.cardinality());\n        b1.flip(0, numBits);\n        assertEquals(0, b1.cardinality());\n      }\n    }\n  }\n\n","sourceOld":"  public void testSmallBitSets() {\n    // Make sure size 0-10 bit sets are OK:\n    for(int numBits=0;numBits<10;numBits++) {\n      FixedBitSet b1 = new FixedBitSet(numBits);\n      FixedBitSet b2 = new FixedBitSet(numBits);\n      assertTrue(b1.equals(b2));\n      assertEquals(b1.hashCode(), b2.hashCode());\n      assertEquals(0, b1.cardinality());\n      if (numBits > 0) {\n        b1.set(0, numBits);\n        assertEquals(numBits, b1.cardinality());\n        b1.flip(0, numBits);\n        assertEquals(0, b1.cardinality());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["843b7d20cfe6c2c4632b9123a73596f271baa10d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"843b7d20cfe6c2c4632b9123a73596f271baa10d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["843b7d20cfe6c2c4632b9123a73596f271baa10d"],"843b7d20cfe6c2c4632b9123a73596f271baa10d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}