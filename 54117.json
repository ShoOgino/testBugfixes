{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testDocsWithValuesInField().mjava","commits":[{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testDocsWithValuesInField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithValuesInField() throws Exception {\n    assertEquals(\"someone changed the test setup of HAS_VAL_FIELDS, w/o updating the sanity check\",\n                 25, HAS_VAL_FIELDS.size());\n    for (String f : HAS_VAL_FIELDS) {\n      // for all of these fields, these 2 syntaxes should be functionally equivilent\n      // in matching the one doc that contains these fields\n      for (String q : Arrays.asList( f + \":*\", f + \":[* TO *]\" )) {\n        assertJQ(req(\"q\", q) \n                 , \"/response/numFound==1\"\n                 , \"/response/docs/[0]/id=='999'\"\n                 );\n        // the same syntaxes should be valid even if no doc has the field...\n        assertJQ(req(\"q\", \"bogus___\" + q) \n                 , \"/response/numFound==0\"\n                 );\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testDocsWithValuesInField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithValuesInField() throws Exception {\n    assertEquals(\"someone changed the test setup of HAS_VAL_FIELDS, w/o updating the sanity check\",\n                 25, HAS_VAL_FIELDS.size());\n    for (String f : HAS_VAL_FIELDS) {\n      // for all of these fields, these 2 syntaxes should be functionally equivilent\n      // in matching the one doc that contains these fields\n      for (String q : Arrays.asList( f + \":*\", f + \":[* TO *]\" )) {\n        assertJQ(req(\"q\", q) \n                 , \"/response/numFound==1\"\n                 , \"/response/docs/[0]/id=='999'\"\n                 );\n        // the same syntaxes should be valid even if no doc has the field...\n        assertJQ(req(\"q\", \"bogus___\" + q) \n                 , \"/response/numFound==0\"\n                 );\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testDocsWithValuesInField().mjava","sourceNew":null,"sourceOld":"  public void testDocsWithValuesInField() throws Exception {\n    assertEquals(\"someone changed the test setup of HAS_VAL_FIELDS, w/o updating the sanity check\",\n                 25, HAS_VAL_FIELDS.size());\n    for (String f : HAS_VAL_FIELDS) {\n      // for all of these fields, these 2 syntaxes should be functionally equivilent\n      // in matching the one doc that contains these fields\n      for (String q : Arrays.asList( f + \":*\", f + \":[* TO *]\" )) {\n        assertJQ(req(\"q\", q) \n                 , \"/response/numFound==1\"\n                 , \"/response/docs/[0]/id=='999'\"\n                 );\n        // the same syntaxes should be valid even if no doc has the field...\n        assertJQ(req(\"q\", \"bogus___\" + q) \n                 , \"/response/numFound==0\"\n                 );\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testDocsWithValuesInField().mjava","sourceNew":null,"sourceOld":"  public void testDocsWithValuesInField() throws Exception {\n    assertEquals(\"someone changed the test setup of HAS_VAL_FIELDS, w/o updating the sanity check\",\n                 25, HAS_VAL_FIELDS.size());\n    for (String f : HAS_VAL_FIELDS) {\n      // for all of these fields, these 2 syntaxes should be functionally equivilent\n      // in matching the one doc that contains these fields\n      for (String q : Arrays.asList( f + \":*\", f + \":[* TO *]\" )) {\n        assertJQ(req(\"q\", q) \n                 , \"/response/numFound==1\"\n                 , \"/response/docs/[0]/id=='999'\"\n                 );\n        // the same syntaxes should be valid even if no doc has the field...\n        assertJQ(req(\"q\", \"bogus___\" + q) \n                 , \"/response/numFound==0\"\n                 );\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testDocsWithValuesInField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsWithValuesInField() throws Exception {\n    assertEquals(\"someone changed the test setup of HAS_VAL_FIELDS, w/o updating the sanity check\",\n                 41, HAS_VAL_FIELDS.size());\n    for (String f : HAS_VAL_FIELDS) {\n      // for all of these fields, these 2 syntaxes should be functionally equivilent\n      // in matching the one doc that contains these fields\n      for (String q : Arrays.asList( f + \":*\", f + \":[* TO *]\" )) {\n        assertJQ(req(\"q\", q)\n                 , \"/response/numFound==1\"\n                 , \"/response/docs/[0]/id=='999'\"\n                 );\n        // the same syntaxes should be valid even if no doc has the field...\n        assertJQ(req(\"q\", \"bogus___\" + q)\n                 , \"/response/numFound==0\"\n                 );\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c81907bd971f786e378654d32b80da32b0e950d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}