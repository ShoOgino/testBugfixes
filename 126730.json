{"path":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#findForRemove(K,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#findForRemove(K,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find()} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(K key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index].equals(key)) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#findForRemove(K,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find()} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(K key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index].equals(key)) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#findForRemove(K,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find()} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(K key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index].equals(key)) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#findForRemove(K,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap#findForRemove(K,int).mjava","sourceNew":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find()} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(K key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index].equals(key)) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Find the actual index of a given key with it's baseHashIndex.<br>\n   * Some methods use the baseHashIndex. If those call {@link #find()} there's\n   * no need to re-calculate that hash.\n   * \n   * @param key\n   * @param baseHashIndex\n   * @return the index of the given key, or 0 as 'Ground' if the key wasn't\n   *         found.\n   */\n  private int findForRemove(K key, int baseHashIndex) {\n    // Start from the hash entry.\n    this.prev = 0;\n    int index = baseHash[baseHashIndex];\n\n    // while the index does not point to the 'Ground'\n    while (index != 0) {\n      // returns the index found in case of of a matching key.\n      if (keys[index].equals(key)) {\n        return index;\n      }\n\n      // next the local index\n      prev = index;\n      index = next[index];\n    }\n\n    // If we got this far, it could only mean we did not find the key we\n    // were asked for. return 'Ground' index.\n    this.prev = 0;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}