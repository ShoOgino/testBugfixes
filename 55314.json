{"path":"lucene/backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","sourceNew":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n  }\n\n","sourceOld":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestBufferedIndexInput#testReadBytes().mjava","sourceNew":null,"sourceOld":"  // Call readBytes() repeatedly, with various chunk sizes (from 1 byte to\n  // larger than the buffer size), and see that it returns the bytes we expect.\n  // Our input comes from a dynamically generated \"file\" -\n  // see MyBufferedIndexInput below.\n  public void testReadBytes() throws Exception {\n    final Random r = newRandom();\n\n    MyBufferedIndexInput input = new MyBufferedIndexInput();\n    runReadBytes(input, BufferedIndexInput.BUFFER_SIZE, r);\n\n    // This tests the workaround code for LUCENE-1566 where readBytesInternal\n    // provides a workaround for a JVM Bug that incorrectly raises a OOM Error\n    // when a large byte buffer is passed to a file read.\n    // NOTE: this does only test the chunked reads and NOT if the Bug is triggered.\n    //final int tmpFileSize = 1024 * 1024 * 5;\n    final int inputBufferSize = 128;\n    File tmpInputFile = File.createTempFile(\"IndexInput\", \"tmpFile\");\n    tmpInputFile.deleteOnExit();\n    writeBytes(tmpInputFile, TEST_FILE_LENGTH);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new SimpleFSIndexInput(tmpInputFile,\n                                                inputBufferSize, 10), inputBufferSize, r);\n\n    // run test with chunk size of 10 bytes\n    runReadBytesAndClose(new NIOFSIndexInput(tmpInputFile,\n                                             inputBufferSize, 10), inputBufferSize, r);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}