{"path":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","commits":[{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"/dev/null","sourceNew":"  public IndexReader getReader() throws IOException {\n    if (r.nextBoolean()) {\n      return w.getReader();\n    } else {\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"/dev/null","sourceNew":"  public IndexReader getReader() throws IOException {\n    if (r.nextBoolean()) {\n      return w.getReader();\n    } else {\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    // nocommit: hack!\n    if (w.codecs.getWriter(null).name.equals(\"PreFlex\")) {\n      w.commit();\n      return IndexReader.open(w.getDirectory(),\n          null,\n          false,\n          _TestUtil.nextInt(r, 1, 10),\n          _TestUtil.alwaysCodec(new PreFlexCodec()));\n    }\n    \n    if (r.nextBoolean()) {\n      return w.getReader();\n    } else {\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    if (r.nextBoolean()) {\n      return w.getReader();\n    } else {\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    // nocommit: hack!\n    if (w.codecs.getWriter(null).name.equals(\"PreFlex\")) {\n      w.commit();\n      return IndexReader.open(w.getDirectory(),\n          null,\n          false,\n          _TestUtil.nextInt(r, 1, 10),\n          _TestUtil.alwaysCodec(new PreFlexCodec()));\n    }\n    \n    if (r.nextBoolean()) {\n      return w.getReader();\n    } else {\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    if (r.nextBoolean()) {\n      return w.getReader();\n    } else {\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    if (r.nextBoolean()) {\n      return w.getReader();\n    } else {\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"676ed1f296680ec01fd638393fab83f6ce81211a","date":1289224578,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getWriter(null).name.equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCaseJ4.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["c084e47df29de3330311d69dabf515ceaa989512"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["676ed1f296680ec01fd638393fab83f6ce81211a"],"85a883878c0af761245ab048babc63d099f835f3":["43b04c27924fe393e38e9f0986e32c634f261859","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"676ed1f296680ec01fd638393fab83f6ce81211a":["43b04c27924fe393e38e9f0986e32c634f261859"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"43b04c27924fe393e38e9f0986e32c634f261859":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"c084e47df29de3330311d69dabf515ceaa989512":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["163fe85a71d778fd2b7747f65ca27b54829e2e57"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"676ed1f296680ec01fd638393fab83f6ce81211a":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43b04c27924fe393e38e9f0986e32c634f261859":["85a883878c0af761245ab048babc63d099f835f3","676ed1f296680ec01fd638393fab83f6ce81211a"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57","5f4e87790277826a2aea119328600dfb07761f32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}