{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestSortedSetDocValuesFacets#testRandom().mjava","commits":[{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestSortedSetDocValuesFacets#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    assumeTrue(\"Test requires SortedSetDV support\", defaultCodecSupportsSortedSet());\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new SortedSetDocValuesFacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // Per-top-reader state:\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(searcher.getIndexReader());\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      TopDocs hits = FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      //sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, searcher.getIndexReader(), indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sortedset/TestSortedSetDocValuesFacets#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestSortedSetDocValuesFacets#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    assumeTrue(\"Test requires SortedSetDV support\", defaultCodecSupportsSortedSet());\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new SortedSetDocValuesFacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // Per-top-reader state:\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(searcher.getIndexReader());\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      //sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, searcher.getIndexReader(), indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    assumeTrue(\"Test requires SortedSetDV support\", defaultCodecSupportsSortedSet());\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new SortedSetDocValuesFacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // Per-top-reader state:\n    SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(searcher.getIndexReader());\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      TopDocs hits = FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new SortedSetDocValuesFacetCounts(state, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      //sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, searcher.getIndexReader(), indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56d44586f4c409c6c6c5942b9f0227df806b7300","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}