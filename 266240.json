{"path":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","commits":[{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n        pool.nextBuffer();\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n      assert !merge;\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n        pool.nextBuffer();\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4","date":1318260487,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n        pool.nextBuffer();\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.FixedBytesWriterBase#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert lastDocID < docID;\n\n      if (size == -1) {\n        if (bytes.length > BYTE_BLOCK_SIZE) {\n          throw new IllegalArgumentException(\"bytes arrays > \" + Short.MAX_VALUE + \" are not supported\");\n        }\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      if (lastDocID+1 < docID) {\n        advancePool(docID);\n      }\n      pool.copy(bytes);\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4"],"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}