{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#JaspellTernarySearchTrie(File,boolean).mjava","sourceNew":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","sourceOld":"  /**\n   * Constructs a Ternary Search Trie and loads data from a <code>File</code>\n   * into the Trie. The file is a normal text document, where each line is of\n   * the form \"word TAB float\".\n   * \n   *@param file\n   *          The <code>File</code> with the data to load into the Trie.\n   *@param compression\n   *          If true, the file is compressed with the GZIP algorithm, and if\n   *          false, the file is a normal text document.\n   *@exception IOException\n   *              A problem occured while reading the data.\n   */\n  public JaspellTernarySearchTrie(File file, boolean compression)\n          throws IOException {\n    this();\n    BufferedReader in;\n    if (compression)\n      in = new BufferedReader(new InputStreamReader(new GZIPInputStream(\n              new FileInputStream(file))));\n    else in = new BufferedReader(new InputStreamReader((new FileInputStream(\n            file))));\n    String word;\n    int pos;\n    Float occur, one = new Float(1);\n    int numWords = 0;\n    while ((word = in.readLine()) != null) {\n      numWords++;\n      pos = word.indexOf(\"\\t\");\n      occur = one;\n      if (pos != -1) {\n        occur = Float.parseFloat(word.substring(pos + 1).trim());\n        word = word.substring(0, pos);\n      }\n      String key = word.toLowerCase();\n      if (rootNode == null) {\n        rootNode = new TSTNode(key.charAt(0), null);\n      }\n      TSTNode node = null;\n      if (key.length() > 0 && rootNode != null) {\n        TSTNode currentNode = rootNode;\n        int charIndex = 0;\n        while (true) {\n          if (currentNode == null) break;\n          int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n                  currentNode.splitchar);\n          if (charComp == 0) {\n            charIndex++;\n            if (charIndex == key.length()) {\n              node = currentNode;\n              break;\n            }\n            currentNode = currentNode.relatives[TSTNode.EQKID];\n          } else if (charComp < 0) {\n            currentNode = currentNode.relatives[TSTNode.LOKID];\n          } else {\n            currentNode = currentNode.relatives[TSTNode.HIKID];\n          }\n        }\n        Float occur2 = null;\n        if (node != null) occur2 = ((Float) (node.data));\n        if (occur2 != null) {\n          occur += occur2.floatValue();\n        }\n        currentNode = getOrCreateNode(word.trim().toLowerCase());\n        currentNode.data = occur;\n      }\n    }\n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}