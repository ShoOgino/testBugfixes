{"path":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/strategy/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/strategy/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/strategy/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.info(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.info(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.info(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.info(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a24bff9b8b5990b2e39206b8742b848c8d88181","date":1330491455,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/strategy/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.info(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.info(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.info(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.info(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6a24bff9b8b5990b2e39206b8742b848c8d88181":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6a24bff9b8b5990b2e39206b8742b848c8d88181":[],"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["6a24bff9b8b5990b2e39206b8742b848c8d88181"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6a24bff9b8b5990b2e39206b8742b848c8d88181","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}