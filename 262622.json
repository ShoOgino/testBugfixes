{"path":"solr/core/src/java/org/apache/solr/parser/CharStream#backup(int).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/CharStream#backup(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implemetation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/CharStream#backup(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implemetation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246882bcb7625b4ec0d71abb0d4917d6e34e0ac6","date":1580825798,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/CharStream#backup(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/CharStream#backup(int).mjava","sourceNew":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implementation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","sourceOld":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implemetation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f43184d94158070757ac9bb9d71dc7b72925013","date":1600412010,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/parser/CharStream#backup(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implementation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f43184d94158070757ac9bb9d71dc7b72925013":["246882bcb7625b4ec0d71abb0d4917d6e34e0ac6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"246882bcb7625b4ec0d71abb0d4917d6e34e0ac6":["3cdb67100dc016748799a77218aa409478372d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f43184d94158070757ac9bb9d71dc7b72925013"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","246882bcb7625b4ec0d71abb0d4917d6e34e0ac6"],"5f43184d94158070757ac9bb9d71dc7b72925013":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"246882bcb7625b4ec0d71abb0d4917d6e34e0ac6":["5f43184d94158070757ac9bb9d71dc7b72925013"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}