{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getCurrentSegmentFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getCurrentSegmentFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getCurrentSegmentFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfoPerCommit info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfoPerCommit info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfo info = info(i);\n      if (info.dir == dir) {\n        files.addAll(info(i).files());\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"223ce75dc250b91ab073c488f8f99e344634e001","date":1378725110,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfoPerCommit info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        /*\n         * TODO: if lastGen == -1 we get might get null here it seems wrong to\n         * add null to the files set\n         */\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfoPerCommit info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfoPerCommit info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    \n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfoPerCommit info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentCommitInfo info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    \n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentInfoPerCommit info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    \n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentCommitInfo info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    \n    return files;\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<String>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentCommitInfo info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    \n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba839b7548159227edcb740033d0f814b323d8d","date":1424455904,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":"  /**\n   * Returns all file names referenced by SegmentInfo.\n   * @deprecated Use {@link #files(boolean)} instead.\n   */\n  @Deprecated\n  public final Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    return files(includeSegmentsFile);\n  }\n\n","sourceOld":"  /** Returns all file names referenced by SegmentInfo\n   *  instances matching the provided Directory (ie files\n   *  associated with any \"external\" segments are skipped).\n   *  The returned collection is recomputed on each\n   *  invocation.  */\n  public Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    HashSet<String> files = new HashSet<>();\n    if (includeSegmentsFile) {\n      final String segmentFileName = getSegmentsFileName();\n      if (segmentFileName != null) {\n        files.add(segmentFileName);\n      }\n    }\n    final int size = size();\n    for(int i=0;i<size;i++) {\n      final SegmentCommitInfo info = info(i);\n      assert info.info.dir == dir;\n      if (info.info.dir == dir) {\n        files.addAll(info.files());\n      }\n    }\n    \n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ccce186408f57d2cb66d65a12e181526e47a165","date":1424456571,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#files(Directory,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns all file names referenced by SegmentInfo.\n   * @deprecated Use {@link #files(boolean)} instead.\n   */\n  @Deprecated\n  public final Collection<String> files(Directory dir, boolean includeSegmentsFile) throws IOException {\n    return files(includeSegmentsFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["223ce75dc250b91ab073c488f8f99e344634e001"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["438e995b4e32916f631722aab36254146830fefb","9d153abcf92dc5329d98571a8c3035df9bd80648"],"fba839b7548159227edcb740033d0f814b323d8d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"223ce75dc250b91ab073c488f8f99e344634e001":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["438e995b4e32916f631722aab36254146830fefb"],"6ccce186408f57d2cb66d65a12e181526e47a165":["fba839b7548159227edcb740033d0f814b323d8d"],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ccce186408f57d2cb66d65a12e181526e47a165"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fba839b7548159227edcb740033d0f814b323d8d"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["223ce75dc250b91ab073c488f8f99e344634e001"],"223ce75dc250b91ab073c488f8f99e344634e001":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"fba839b7548159227edcb740033d0f814b323d8d":["6ccce186408f57d2cb66d65a12e181526e47a165"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6ccce186408f57d2cb66d65a12e181526e47a165":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"438e995b4e32916f631722aab36254146830fefb":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}