{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#toDot(PrintStream).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#toDot(PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: this consumes alot of RAM!\n  // final arcs have a flat end (not arrow)\n  // arcs w/ NEXT opto are in blue\n  /*\n    eg:\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      \n    then dot -Tpng out.dot > /x/tmp/out.png\n  */\n  public void toDot(PrintStream out) throws IOException {\n\n    final List<Integer> queue = new ArrayList<Integer>();\n    queue.add(startNode);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startNode);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startNode + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    if (emptyOutput != null) {\n      out.println(\"  initial -> \" + startNode + \" [arrowhead=tee label=\\\"(\" + outputs.outputToString(emptyOutput) + \")\\\"];\");\n    } else {\n      out.println(\"  initial -> \" + startNode);\n    }\n\n    final Arc<T> arc = new Arc<T>();\n\n    while(queue.size() != 0) {\n      Integer node = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n\n      if (node == FINAL_END_NODE || node == NON_FINAL_END_NODE) {\n        continue;\n      }\n\n      // scan all arcs\n      readFirstArc(node, arc);\n      while(true) {\n\n        if (!seen.contains(arc.target)) {\n          //out.println(\"  \" + arc.target + \" [label=\" + arc.target + \"];\");\n          out.println(\"  \" + arc.target + \" [label=\\\"\\\" shape=circle];\");\n          seen.add(arc.target);\n          queue.add(arc.target);\n        }\n        String outs;\n        if (arc.output != NO_OUTPUT) {\n          outs = \"/\" + outputs.outputToString(arc.output);\n        } else {\n          outs = \"\";\n        }\n        if (arc.isFinal() && arc.nextFinalOutput != NO_OUTPUT) {\n          outs += \" (\" + outputs.outputToString(arc.nextFinalOutput) + \")\";\n        }\n        out.print(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + arc.label + outs + \"\\\"\");\n        if (arc.isFinal()) {\n          out.print(\" arrowhead=tee\");\n        }\n        if (arc.flag(BIT_TARGET_NEXT)) {\n          out.print(\" color=blue\");\n        }\n        out.println(\"];\");\n        \n        if (arc.isLast()) {\n          break;\n        } else {\n          readNextArc(arc);\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#toDot(PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: this consumes alot of RAM!\n  // final arcs have a flat end (not arrow)\n  // arcs w/ NEXT opto are in blue\n  /*\n    eg:\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      \n    then dot -Tpng out.dot > /x/tmp/out.png\n  */\n  public void toDot(PrintStream out) throws IOException {\n\n    final List<Integer> queue = new ArrayList<Integer>();\n    queue.add(startNode);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startNode);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startNode + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    if (emptyOutput != null) {\n      out.println(\"  initial -> \" + startNode + \" [arrowhead=tee label=\\\"(\" + outputs.outputToString(emptyOutput) + \")\\\"];\");\n    } else {\n      out.println(\"  initial -> \" + startNode);\n    }\n\n    final Arc<T> arc = new Arc<T>();\n\n    while(queue.size() != 0) {\n      Integer node = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n\n      if (node == FINAL_END_NODE || node == NON_FINAL_END_NODE) {\n        continue;\n      }\n\n      // scan all arcs\n      readFirstArc(node, arc);\n      while(true) {\n\n        if (!seen.contains(arc.target)) {\n          //out.println(\"  \" + arc.target + \" [label=\" + arc.target + \"];\");\n          out.println(\"  \" + arc.target + \" [label=\\\"\\\" shape=circle];\");\n          seen.add(arc.target);\n          queue.add(arc.target);\n        }\n        String outs;\n        if (arc.output != NO_OUTPUT) {\n          outs = \"/\" + outputs.outputToString(arc.output);\n        } else {\n          outs = \"\";\n        }\n        if (arc.isFinal() && arc.nextFinalOutput != NO_OUTPUT) {\n          outs += \" (\" + outputs.outputToString(arc.nextFinalOutput) + \")\";\n        }\n        out.print(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + arc.label + outs + \"\\\"\");\n        if (arc.isFinal()) {\n          out.print(\" arrowhead=tee\");\n        }\n        if (arc.flag(BIT_TARGET_NEXT)) {\n          out.print(\" color=blue\");\n        }\n        out.println(\"];\");\n        \n        if (arc.isLast()) {\n          break;\n        } else {\n          readNextArc(arc);\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#toDot(PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: this consumes alot of RAM!\n  // final arcs have a flat end (not arrow)\n  // arcs w/ NEXT opto are in blue\n  /*\n    eg:\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      \n    then dot -Tpng out.dot > /x/tmp/out.png\n  */\n  public void toDot(PrintStream out) throws IOException {\n\n    final List<Integer> queue = new ArrayList<Integer>();\n    queue.add(startNode);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startNode);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startNode + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    if (emptyOutput != null) {\n      out.println(\"  initial -> \" + startNode + \" [arrowhead=tee label=\\\"(\" + outputs.outputToString(emptyOutput) + \")\\\"];\");\n    } else {\n      out.println(\"  initial -> \" + startNode);\n    }\n\n    final Arc<T> arc = new Arc<T>();\n\n    while(queue.size() != 0) {\n      Integer node = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n\n      if (node == FINAL_END_NODE || node == NON_FINAL_END_NODE) {\n        continue;\n      }\n\n      // scan all arcs\n      readFirstArc(node, arc);\n      while(true) {\n\n        if (!seen.contains(arc.target)) {\n          //out.println(\"  \" + arc.target + \" [label=\" + arc.target + \"];\");\n          out.println(\"  \" + arc.target + \" [label=\\\"\\\" shape=circle];\");\n          seen.add(arc.target);\n          queue.add(arc.target);\n        }\n        String outs;\n        if (arc.output != NO_OUTPUT) {\n          outs = \"/\" + outputs.outputToString(arc.output);\n        } else {\n          outs = \"\";\n        }\n        if (arc.isFinal() && arc.nextFinalOutput != NO_OUTPUT) {\n          outs += \" (\" + outputs.outputToString(arc.nextFinalOutput) + \")\";\n        }\n        out.print(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + arc.label + outs + \"\\\"\");\n        if (arc.isFinal()) {\n          out.print(\" arrowhead=tee\");\n        }\n        if (arc.flag(BIT_TARGET_NEXT)) {\n          out.print(\" color=blue\");\n        }\n        out.println(\"];\");\n        \n        if (arc.isLast()) {\n          break;\n        } else {\n          readNextArc(arc);\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#toDot(PrintStream).mjava","sourceNew":null,"sourceOld":"  // NOTE: this consumes alot of RAM!\n  // final arcs have a flat end (not arrow)\n  // arcs w/ NEXT opto are in blue\n  /*\n    eg:\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      \n    then dot -Tpng out.dot > /x/tmp/out.png\n  */\n  public void toDot(PrintStream out) throws IOException {\n\n    final List<Integer> queue = new ArrayList<Integer>();\n    queue.add(startNode);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startNode);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startNode + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    if (emptyOutput != null) {\n      out.println(\"  initial -> \" + startNode + \" [arrowhead=tee label=\\\"(\" + outputs.outputToString(emptyOutput) + \")\\\"];\");\n    } else {\n      out.println(\"  initial -> \" + startNode);\n    }\n\n    final Arc<T> arc = new Arc<T>();\n\n    while(queue.size() != 0) {\n      Integer node = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n\n      if (node == FINAL_END_NODE || node == NON_FINAL_END_NODE) {\n        continue;\n      }\n\n      // scan all arcs\n      readFirstArc(node, arc);\n      while(true) {\n\n        if (!seen.contains(arc.target)) {\n          //out.println(\"  \" + arc.target + \" [label=\" + arc.target + \"];\");\n          out.println(\"  \" + arc.target + \" [label=\\\"\\\" shape=circle];\");\n          seen.add(arc.target);\n          queue.add(arc.target);\n        }\n        String outs;\n        if (arc.output != NO_OUTPUT) {\n          outs = \"/\" + outputs.outputToString(arc.output);\n        } else {\n          outs = \"\";\n        }\n        if (arc.isFinal() && arc.nextFinalOutput != NO_OUTPUT) {\n          outs += \" (\" + outputs.outputToString(arc.nextFinalOutput) + \")\";\n        }\n        out.print(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + arc.label + outs + \"\\\"\");\n        if (arc.isFinal()) {\n          out.print(\" arrowhead=tee\");\n        }\n        if (arc.flag(BIT_TARGET_NEXT)) {\n          out.print(\" color=blue\");\n        }\n        out.println(\"];\");\n        \n        if (arc.isLast()) {\n          break;\n        } else {\n          readNextArc(arc);\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#toDot(PrintStream).mjava","sourceNew":null,"sourceOld":"  // NOTE: this consumes alot of RAM!\n  // final arcs have a flat end (not arrow)\n  // arcs w/ NEXT opto are in blue\n  /*\n    eg:\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      \n    then dot -Tpng out.dot > /x/tmp/out.png\n  */\n  public void toDot(PrintStream out) throws IOException {\n\n    final List<Integer> queue = new ArrayList<Integer>();\n    queue.add(startNode);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startNode);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startNode + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    if (emptyOutput != null) {\n      out.println(\"  initial -> \" + startNode + \" [arrowhead=tee label=\\\"(\" + outputs.outputToString(emptyOutput) + \")\\\"];\");\n    } else {\n      out.println(\"  initial -> \" + startNode);\n    }\n\n    final Arc<T> arc = new Arc<T>();\n\n    while(queue.size() != 0) {\n      Integer node = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n\n      if (node == FINAL_END_NODE || node == NON_FINAL_END_NODE) {\n        continue;\n      }\n\n      // scan all arcs\n      readFirstArc(node, arc);\n      while(true) {\n\n        if (!seen.contains(arc.target)) {\n          //out.println(\"  \" + arc.target + \" [label=\" + arc.target + \"];\");\n          out.println(\"  \" + arc.target + \" [label=\\\"\\\" shape=circle];\");\n          seen.add(arc.target);\n          queue.add(arc.target);\n        }\n        String outs;\n        if (arc.output != NO_OUTPUT) {\n          outs = \"/\" + outputs.outputToString(arc.output);\n        } else {\n          outs = \"\";\n        }\n        if (arc.isFinal() && arc.nextFinalOutput != NO_OUTPUT) {\n          outs += \" (\" + outputs.outputToString(arc.nextFinalOutput) + \")\";\n        }\n        out.print(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + arc.label + outs + \"\\\"\");\n        if (arc.isFinal()) {\n          out.print(\" arrowhead=tee\");\n        }\n        if (arc.flag(BIT_TARGET_NEXT)) {\n          out.print(\" color=blue\");\n        }\n        out.println(\"];\");\n        \n        if (arc.isLast()) {\n          break;\n        } else {\n          readNextArc(arc);\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#toDot(PrintStream).mjava","sourceNew":null,"sourceOld":"  // NOTE: this consumes alot of RAM!\n  // final arcs have a flat end (not arrow)\n  // arcs w/ NEXT opto are in blue\n  /*\n    eg:\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      \n    then dot -Tpng out.dot > /x/tmp/out.png\n  */\n  public void toDot(PrintStream out) throws IOException {\n\n    final List<Integer> queue = new ArrayList<Integer>();\n    queue.add(startNode);\n\n    final Set<Integer> seen = new HashSet<Integer>();\n    seen.add(startNode);\n    \n    out.println(\"digraph FST {\");\n    out.println(\"  rankdir = LR;\");\n    //out.println(\"  \" + startNode + \" [shape=circle label=\" + startNode + \"];\");\n    out.println(\"  \" + startNode + \" [label=\\\"\\\" shape=circle];\");\n    out.println(\"  initial [shape=point color=white label=\\\"\\\"];\");\n    if (emptyOutput != null) {\n      out.println(\"  initial -> \" + startNode + \" [arrowhead=tee label=\\\"(\" + outputs.outputToString(emptyOutput) + \")\\\"];\");\n    } else {\n      out.println(\"  initial -> \" + startNode);\n    }\n\n    final Arc<T> arc = new Arc<T>();\n\n    while(queue.size() != 0) {\n      Integer node = queue.get(queue.size()-1);\n      queue.remove(queue.size()-1);\n\n      if (node == FINAL_END_NODE || node == NON_FINAL_END_NODE) {\n        continue;\n      }\n\n      // scan all arcs\n      readFirstArc(node, arc);\n      while(true) {\n\n        if (!seen.contains(arc.target)) {\n          //out.println(\"  \" + arc.target + \" [label=\" + arc.target + \"];\");\n          out.println(\"  \" + arc.target + \" [label=\\\"\\\" shape=circle];\");\n          seen.add(arc.target);\n          queue.add(arc.target);\n        }\n        String outs;\n        if (arc.output != NO_OUTPUT) {\n          outs = \"/\" + outputs.outputToString(arc.output);\n        } else {\n          outs = \"\";\n        }\n        if (arc.isFinal() && arc.nextFinalOutput != NO_OUTPUT) {\n          outs += \" (\" + outputs.outputToString(arc.nextFinalOutput) + \")\";\n        }\n        out.print(\"  \" + node + \" -> \" + arc.target + \" [label=\\\"\" + arc.label + outs + \"\\\"\");\n        if (arc.isFinal()) {\n          out.print(\" arrowhead=tee\");\n        }\n        if (arc.flag(BIT_TARGET_NEXT)) {\n          out.print(\" color=blue\");\n        }\n        out.println(\"];\");\n        \n        if (arc.isLast()) {\n          break;\n        } else {\n          readNextArc(arc);\n        }\n      }\n    }\n    out.println(\"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56da903869515527852ee21ea7ef7bfe414cd40d"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["56da903869515527852ee21ea7ef7bfe414cd40d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}