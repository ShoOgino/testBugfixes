{"path":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#newRangeQuery(String,float[],float[]).mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#newRangeQuery(String,float[],float[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a range query for n-dimensional half-float values. Bounds will be\n   * rounded to the closest half-float if they cannot be represented accurately\n   * as a half-float.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue[i] = Float.NEGATIVE_INFINITY} or {@code upperValue[i] = Float.POSITIVE_INFINITY}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code nextUp(lowerValue[i])}\n   * or {@code nextDown(upperValue[i])}.\n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be {@code null}.\n   * @param upperValue upper portion of the range (inclusive). must not be {@code null}.\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null, if {@code upperValue} is null,\n   *                                  or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float[] lowerValue, float[] upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, pack(lowerValue).bytes, pack(upperValue).bytes, lowerValue.length) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return Float.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#newRangeQuery(String,float[],float[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a range query for n-dimensional half-float values. Bounds will be\n   * rounded to the closest half-float if they cannot be represented accurately\n   * as a half-float.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue[i] = Float.NEGATIVE_INFINITY} or {@code upperValue[i] = Float.POSITIVE_INFINITY}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code nextUp(lowerValue[i])}\n   * or {@code nextDown(upperValue[i])}.\n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be {@code null}.\n   * @param upperValue upper portion of the range (inclusive). must not be {@code null}.\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null, if {@code upperValue} is null,\n   *                                  or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float[] lowerValue, float[] upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, pack(lowerValue).bytes, pack(upperValue).bytes, lowerValue.length) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return Float.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#newRangeQuery(String,float[],float[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a range query for n-dimensional half-float values. Bounds will be\n   * rounded to the closest half-float if they cannot be represented accurately\n   * as a half-float.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue[i] = Float.NEGATIVE_INFINITY} or {@code upperValue[i] = Float.POSITIVE_INFINITY}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code nextUp(lowerValue[i])}\n   * or {@code nextDown(upperValue[i])}.\n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive). must not be {@code null}.\n   * @param upperValue upper portion of the range (inclusive). must not be {@code null}.\n   * @throws IllegalArgumentException if {@code field} is null, if {@code lowerValue} is null, if {@code upperValue} is null,\n   *                                  or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float[] lowerValue, float[] upperValue) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, pack(lowerValue).bytes, pack(upperValue).bytes, lowerValue.length) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return Float.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"]},"commit2Childs":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}