{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","commits":[{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","pathOld":"/dev/null","sourceNew":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","sourceNew":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such resource available: \" + key + \", url : \"+ url);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      log.error(\"Error loading resource \"+ url, e);\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","sourceOld":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","sourceNew":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such resource available: \" + key + \", url : \" + url);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      log.error(\"Error loading resource \" + url, e);\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","sourceOld":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such resource available: \" + key + \", url : \"+ url);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      log.error(\"Error loading resource \"+ url, e);\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","sourceNew":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","sourceOld":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such resource available: \" + key + \", url : \" + url);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      log.error(\"Error loading resource \" + url, e);\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchFromUrl(String,String).mjava","sourceNew":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","sourceOld":"  ByteBuffer fetchFromUrl(String key, String url) {\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such resource available: \" + key + \", url : \" + url);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is, MAX_JAR_SIZE);\n      }\n    } catch (Exception e) {\n      log.error(\"Error loading resource \" + url, e);\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"627e70d5711ab39d080a080f089685268525f54d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["627e70d5711ab39d080a080f089685268525f54d"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"627e70d5711ab39d080a080f089685268525f54d":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["627e70d5711ab39d080a080f089685268525f54d"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}