{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getLiveNodes().mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getLiveNodes().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#liveNodes().mjava","sourceNew":"  @Override\n  public Set<String> getLiveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":"  @Override\n  public Set<String> liveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getLiveNodes().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getLiveNodes().mjava","sourceNew":"  @Override\n  public Set<String> getLiveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":"  @Override\n  public Set<String> getLiveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#getLiveNodes().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#getLiveNodes().mjava","sourceNew":"  @Override\n  public Set<String> getLiveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        String baseUrl = Utils.getBaseUrlForNodeName(nodeName, urlScheme);\n        try (SolrClient client = getSolrClient(baseUrl)) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch cluster state from {} failed.\", baseUrl, e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","sourceOld":"  @Override\n  public Set<String> getLiveNodes() {\n    if (liveNodes == null) {\n      throw new RuntimeException(\"We don't know of any live_nodes to fetch the\"\n          + \" latest live_nodes information from. \"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    }\n    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {\n      for (String nodeName: liveNodes) {\n        try (HttpSolrClient client = new HttpSolrClient.Builder().\n            withBaseSolrUrl(Utils.getBaseUrlForNodeName(nodeName, urlScheme)).\n            withHttpClient(httpClient).build()) {\n          Set<String> liveNodes = fetchLiveNodes(client);\n          this.liveNodes = (liveNodes);\n          liveNodesTimestamp = System.nanoTime();\n          return liveNodes;\n        } catch (Exception e) {\n          log.warn(\"Attempt to fetch live_nodes from \" +\n              Utils.getBaseUrlForNodeName(nodeName, urlScheme) + \" failed.\", e);\n        }\n      }\n      throw new RuntimeException(\"Tried fetching live_nodes using all the node names we knew of, i.e. \" + liveNodes +\". However, \"\n          + \"succeeded in obtaining the cluster state from none of them.\"\n          + \"If you think your Solr cluster is up and is accessible,\"\n          + \" you could try re-creating a new CloudSolrClient using working\"\n          + \" solrUrl(s) or zkHost(s).\");\n    } else {\n      return liveNodes; // cached copy is fresh enough\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}