{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestSimTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TestSimTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":["a6a5c1c40529f15b445e6720dfde1967e139bff1","3c9595c75582a7ea7efb585014102ed83f2d9c8b","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2d9523abb6906938bf5685963ce2d30d541cd7","date":1544417732,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n      \n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final String nodeName = cluster.simAddNode();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second of simulated time)\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n\n    // since we know the nodeAddded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cluster.getTimeSource().getTimeNs();\n    \n    // even though our trigger has detected an added node, the *action* we registered should not have\n    // been run yet, due to the large waitFor configuration...\n    assertEquals(\"initial trigger action should not have fired\", false, triggerFired.get());\n    assertEquals(\"initial trigger action latch should not have counted down\",\n                 1, triggerFiredLatch.getCount());\n    assertEquals(\"initial trigger action should not have recorded any events: \" + events.toString(),\n                 0, events.size());\n\n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n    \n    // the trigger actions should now (eventually) record that the new node is added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    final TriggerEvent event = assertSingleEvent(nodeName, maxEventTimeNs);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      timeOut.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    String newNode = cluster.simAddNode();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    cluster.getTimeSource().sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.toString(), nodeNames.contains(newNode));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b336749840ccc5e7c88aa0a787fc6e3730d6e7","date":1546960615,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n      \n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final String nodeName = cluster.simAddNode();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second of simulated time)\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n\n    // since we know the nodeAddded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cluster.getTimeSource().getTimeNs();\n    \n    // even though our trigger has detected an added node, the *action* we registered should not have\n    // been run yet, due to the large waitFor configuration...\n    assertEquals(\"initial trigger action should not have fired\", false, triggerFired.get());\n    assertEquals(\"initial trigger action latch should not have counted down\",\n                 1, triggerFiredLatch.getCount());\n    assertEquals(\"initial trigger action should not have recorded any events: \" + events.toString(),\n                 0, events.size());\n\n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n    \n    // the trigger actions should now (eventually) record that the new node is added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    final TriggerEvent event = assertSingleEvent(nodeName, maxEventTimeNs);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n      \n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final String nodeName = cluster.simAddNode();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second of simulated time)\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n\n    // since we know the nodeAddded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cluster.getTimeSource().getTimeNs();\n    \n    // even though our trigger has detected an added node, the *action* we registered should not have\n    // been run yet, due to the large waitFor configuration...\n    assertEquals(\"initial trigger action should not have fired\", false, triggerFired.get());\n    assertEquals(\"initial trigger action latch should not have counted down\",\n                 1, triggerFiredLatch.getCount());\n    assertEquals(\"initial trigger action should not have recorded any events: \" + events.toString(),\n                 0, events.size());\n\n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n    \n    // the trigger actions should now (eventually) record that the new node is added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    final TriggerEvent event = assertSingleEvent(nodeName, maxEventTimeNs);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77ed2a76957001d375534c0874b183bce42c546c","date":1547809215,"type":3,"author":"fabric8-cd","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n      \n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final String nodeName = cluster.simAddNode();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second of simulated time)\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n        .waitFor(\"initial trigger never ran to detect new live node\", () ->\n            (((Map<String, Long>) getTriggerState(triggerName).get(\"nodeNameVsTimeAdded\"))\n                .containsKey(nodeName)));\n\n    Map<String, Long> nodeNameVsTimeAdded = (Map<String, Long>) getTriggerState(triggerName).get(\"nodeNameVsTimeAdded\");\n\n\n    // since we know the nodeAddded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cluster.getTimeSource().getTimeNs();\n    \n    // even though our trigger has detected an added node, the *action* we registered should not have\n    // been run yet, due to the large waitFor configuration...\n    assertEquals(\"initial trigger action should not have fired\", false, triggerFired.get());\n    assertEquals(\"initial trigger action latch should not have counted down\",\n                 1, triggerFiredLatch.getCount());\n    assertEquals(\"initial trigger action should not have recorded any events: \" + events.toString(),\n                 0, events.size());\n\n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n    \n    // the trigger actions should now (eventually) record that the new node is added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    final TriggerEvent event = assertSingleEvent(nodeName, maxEventTimeNs);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n    // assert that the time nodes were added was actually restored\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) event;\n    List<String> addedNodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    List<Long> addedNodeTimes = (List<Long>) nodeAddedEvent.getProperty(TriggerEvent.EVENT_TIMES);\n\n    assertFalse(\"Empty addedNodeNames\", addedNodeNames.isEmpty());\n    assertEquals(\"Size of addedNodeNames and addedNodeTimes does not match\",\n        addedNodeNames.size(), addedNodeTimes.size());\n    for (int i = 0; i < addedNodeNames.size(); i++) {\n      String nn = addedNodeNames.get(i);\n      Long nt = addedNodeTimes.get(i);\n      assertEquals(nodeNameVsTimeAdded.get(nn), nt);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n      \n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final String nodeName = cluster.simAddNode();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second of simulated time)\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n\n    // since we know the nodeAddded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cluster.getTimeSource().getTimeNs();\n    \n    // even though our trigger has detected an added node, the *action* we registered should not have\n    // been run yet, due to the large waitFor configuration...\n    assertEquals(\"initial trigger action should not have fired\", false, triggerFired.get());\n    assertEquals(\"initial trigger action latch should not have counted down\",\n                 1, triggerFiredLatch.getCount());\n    assertEquals(\"initial trigger action should not have recorded any events: \" + events.toString(),\n                 0, events.size());\n\n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n    \n    // the trigger actions should now (eventually) record that the new node is added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    final TriggerEvent event = assertSingleEvent(nodeName, maxEventTimeNs);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n      \n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final String nodeName = cluster.simAddNode();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second of simulated time)\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n        .waitFor(\"initial trigger never ran to detect new live node\", () ->\n            (((Map<String, Long>) getTriggerState(triggerName).get(\"nodeNameVsTimeAdded\"))\n                .containsKey(nodeName)));\n\n    Map<String, Long> nodeNameVsTimeAdded = (Map<String, Long>) getTriggerState(triggerName).get(\"nodeNameVsTimeAdded\");\n\n\n    // since we know the nodeAddded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cluster.getTimeSource().getTimeNs();\n    \n    // even though our trigger has detected an added node, the *action* we registered should not have\n    // been run yet, due to the large waitFor configuration...\n    assertEquals(\"initial trigger action should not have fired\", false, triggerFired.get());\n    assertEquals(\"initial trigger action latch should not have counted down\",\n                 1, triggerFiredLatch.getCount());\n    assertEquals(\"initial trigger action should not have recorded any events: \" + events.toString(),\n                 0, events.size());\n\n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n    \n    // the trigger actions should now (eventually) record that the new node is added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    final TriggerEvent event = assertSingleEvent(nodeName, maxEventTimeNs);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n    // assert that the time nodes were added was actually restored\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) event;\n    List<String> addedNodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    List<Long> addedNodeTimes = (List<Long>) nodeAddedEvent.getProperty(TriggerEvent.EVENT_TIMES);\n\n    assertFalse(\"Empty addedNodeNames\", addedNodeNames.isEmpty());\n    assertEquals(\"Size of addedNodeNames and addedNodeTimes does not match\",\n        addedNodeNames.size(), addedNodeTimes.size());\n    for (int i = 0; i < addedNodeNames.size(); i++) {\n      String nn = addedNodeNames.get(i);\n      Long nt = addedNodeTimes.get(i);\n      assertEquals(nodeNameVsTimeAdded.get(nn), nt);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n      \n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final String nodeName = cluster.simAddNode();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second of simulated time)\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n        .waitFor(\"initial trigger never ran to detect new live node\", () ->\n            (((Map<String, Long>) getTriggerState(triggerName).get(\"nodeNameVsTimeAdded\"))\n                .containsKey(nodeName)));\n\n    Map<String, Long> nodeNameVsTimeAdded = (Map<String, Long>) getTriggerState(triggerName).get(\"nodeNameVsTimeAdded\");\n\n\n    // since we know the nodeAddded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cluster.getTimeSource().getTimeNs();\n    \n    // even though our trigger has detected an added node, the *action* we registered should not have\n    // been run yet, due to the large waitFor configuration...\n    assertEquals(\"initial trigger action should not have fired\", false, triggerFired.get());\n    assertEquals(\"initial trigger action latch should not have counted down\",\n                 1, triggerFiredLatch.getCount());\n    assertEquals(\"initial trigger action should not have recorded any events: \" + events.toString(),\n                 0, events.size());\n\n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n    \n    // the trigger actions should now (eventually) record that the new node is added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    final TriggerEvent event = assertSingleEvent(nodeName, maxEventTimeNs);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n    // assert that the time nodes were added was actually restored\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) event;\n    List<String> addedNodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    List<Long> addedNodeTimes = (List<Long>) nodeAddedEvent.getProperty(TriggerEvent.EVENT_TIMES);\n\n    assertFalse(\"Empty addedNodeNames\", addedNodeNames.isEmpty());\n    assertEquals(\"Size of addedNodeNames and addedNodeTimes does not match\",\n        addedNodeNames.size(), addedNodeTimes.size());\n    for (int i = 0; i < addedNodeNames.size(); i++) {\n      String nn = addedNodeNames.get(i);\n      Long nt = addedNodeTimes.get(i);\n      assertEquals(nodeNameVsTimeAdded.get(nn), nt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeAddedTriggerRestoreState().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n      \n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final String nodeName = cluster.simAddNode();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second of simulated time)\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n    (new TimeOut(30, TimeUnit.SECONDS, cluster.getTimeSource()))\n        .waitFor(\"initial trigger never ran to detect new live node\", () ->\n            (((Map<String, Long>) getTriggerState(triggerName).get(\"nodeNameVsTimeAdded\"))\n                .containsKey(nodeName)));\n\n    Map<String, Long> nodeNameVsTimeAdded = (Map<String, Long>) getTriggerState(triggerName).get(\"nodeNameVsTimeAdded\");\n\n\n    // since we know the nodeAddded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cluster.getTimeSource().getTimeNs();\n    \n    // even though our trigger has detected an added node, the *action* we registered should not have\n    // been run yet, due to the large waitFor configuration...\n    assertEquals(\"initial trigger action should not have fired\", false, triggerFired.get());\n    assertEquals(\"initial trigger action latch should not have counted down\",\n                 1, triggerFiredLatch.getCount());\n    assertEquals(\"initial trigger action should not have recorded any events: \" + events.toString(),\n                 0, events.size());\n\n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n    \n    // the trigger actions should now (eventually) record that the new node is added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    final TriggerEvent event = assertSingleEvent(nodeName, maxEventTimeNs);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n    // assert that the time nodes were added was actually restored\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) event;\n    List<String> addedNodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    List<Long> addedNodeTimes = (List<Long>) nodeAddedEvent.getProperty(TriggerEvent.EVENT_TIMES);\n\n    assertFalse(\"Empty addedNodeNames\", addedNodeNames.isEmpty());\n    assertEquals(\"Size of addedNodeNames and addedNodeTimes does not match\",\n        addedNodeNames.size(), addedNodeTimes.size());\n    for (int i = 0; i < addedNodeNames.size(); i++) {\n      String nn = addedNodeNames.get(i);\n      Long nt = addedNodeTimes.get(i);\n      assertEquals(nodeNameVsTimeAdded.get(nn), nt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"77ed2a76957001d375534c0874b183bce42c546c":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"ef2d9523abb6906938bf5685963ce2d30d541cd7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["77ed2a76957001d375534c0874b183bce42c546c"],"914270355efc1f9583010cb165bb031a1e698f84":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["914270355efc1f9583010cb165bb031a1e698f84"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["ef2d9523abb6906938bf5685963ce2d30d541cd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["89948af0461fead48f44ba8fb7866f107ce83f22"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"77ed2a76957001d375534c0874b183bce42c546c":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"ef2d9523abb6906938bf5685963ce2d30d541cd7":["89948af0461fead48f44ba8fb7866f107ce83f22"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"914270355efc1f9583010cb165bb031a1e698f84":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["77ed2a76957001d375534c0874b183bce42c546c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ef2d9523abb6906938bf5685963ce2d30d541cd7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["914270355efc1f9583010cb165bb031a1e698f84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}