{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state);\n\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state);\n\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938935e3efe6aaecb925448d7f992783247366de","date":1554389977,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n    state.segmentInfo.putAttribute(MODE_KEY, fstLoadMode.name());\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ba24d6f9380e2463dbe5130d27502647f64904","date":1554881362,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n    if (state.segmentInfo.getAttribute(MODE_KEY) != null && fstLoadMode.name().equals(state.segmentInfo.getAttribute(MODE_KEY)) == false) {\n      throw new IllegalStateException(\"found existing value for \" + MODE_KEY + \" for segment: \" + state.segmentInfo.name +\n          \" old=\" + state.segmentInfo.getAttribute(MODE_KEY) + \", new=\" + fstLoadMode.name());\n    }\n    state.segmentInfo.putAttribute(MODE_KEY, fstLoadMode.name());\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n    state.segmentInfo.putAttribute(MODE_KEY, fstLoadMode.name());\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n    if (state.segmentInfo.getAttribute(MODE_KEY) != null && fstLoadMode.name().equals(state.segmentInfo.getAttribute(MODE_KEY)) == false) {\n      throw new IllegalStateException(\"found existing value for \" + MODE_KEY + \" for segment: \" + state.segmentInfo.name +\n          \" old=\" + state.segmentInfo.getAttribute(MODE_KEY) + \", new=\" + fstLoadMode.name());\n    }\n    state.segmentInfo.putAttribute(MODE_KEY, fstLoadMode.name());\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    BlockTreeTermsWriter.DEFAULT_MIN_BLOCK_SIZE, \n                                                    BlockTreeTermsWriter.DEFAULT_MAX_BLOCK_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, \n                                                    postingsWriter,\n                                                    minTermBlockSize, \n                                                    maxTermBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["68ba24d6f9380e2463dbe5130d27502647f64904"],"68ba24d6f9380e2463dbe5130d27502647f64904":["938935e3efe6aaecb925448d7f992783247366de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"938935e3efe6aaecb925448d7f992783247366de":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"68ba24d6f9380e2463dbe5130d27502647f64904":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"938935e3efe6aaecb925448d7f992783247366de":["68ba24d6f9380e2463dbe5130d27502647f64904"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["938935e3efe6aaecb925448d7f992783247366de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}