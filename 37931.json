{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#setUp().mjava","commits":[{"id":"2e327741cef719817558806865704ff0864d12fd","date":1363899030,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = 1000;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"707f5285c280ff14fa898e7722e57b7a46b81a76","date":1363965759,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = 1000;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = 1000;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#setUp().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = 1000;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2e327741cef719817558806865704ff0864d12fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"707f5285c280ff14fa898e7722e57b7a46b81a76":["2e327741cef719817558806865704ff0864d12fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["707f5285c280ff14fa898e7722e57b7a46b81a76"]},"commit2Childs":{"2e327741cef719817558806865704ff0864d12fd":["707f5285c280ff14fa898e7722e57b7a46b81a76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e327741cef719817558806865704ff0864d12fd"],"707f5285c280ff14fa898e7722e57b7a46b81a76":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}