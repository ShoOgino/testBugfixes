{"path":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","sourceNew":"    @Override\n    public int next() throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n\n      return pending[upto++];\n    }\n\n","sourceOld":"    @Override\n    public int next() throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n\n      return pending[upto++];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56f003b3dda5793ba1b4037182a0a8e3aa499be0","date":1341397971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","sourceNew":"    @Override\n    public int next() throws IOException {\n      if (seekPending) {\n        // Seek & load new block\n        in.seek(pendingFP);\n        lastBlockFP = pendingFP;\n        blockReader.readBlock();\n        seekPending = false;\n      } else if (upto == blockSize) {\n        // Load new block\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n      return pending[upto++];\n    }\n\n","sourceOld":"    @Override\n    public int next() throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n\n      return pending[upto++];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","sourceNew":"    @Override\n    public int next() throws IOException {\n      if (seekPending) {\n        // Seek & load new block\n        in.seek(pendingFP);\n        lastBlockFP = pendingFP;\n        blockReader.readBlock();\n        seekPending = false;\n      } else if (upto == blockSize) {\n        // Load new block\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n      return pending[upto++];\n    }\n\n","sourceOld":"    @Override\n    public int next() throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n\n      return pending[upto++];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","sourceNew":"    @Override\n    public int next() throws IOException {\n      if (seekPending) {\n        // Seek & load new block\n        in.seek(pendingFP);\n        lastBlockFP = pendingFP;\n        blockReader.readBlock();\n        seekPending = false;\n      } else if (upto == blockSize) {\n        // Load new block\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n      return pending[upto++];\n    }\n\n","sourceOld":"    @Override\n    public int next() throws IOException {\n      this.maybeSeek();\n      if (upto == blockSize) {\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n\n      return pending[upto++];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/intblock/FixedIntBlockIndexInput.Reader#next().mjava","sourceNew":"    @Override\n    public int next() throws IOException {\n      if (seekPending) {\n        // Seek & load new block\n        in.seek(pendingFP);\n        lastBlockFP = pendingFP;\n        blockReader.readBlock();\n        seekPending = false;\n      } else if (upto == blockSize) {\n        // Load new block\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n      return pending[upto++];\n    }\n\n","sourceOld":"    @Override\n    public int next() throws IOException {\n      if (seekPending) {\n        // Seek & load new block\n        in.seek(pendingFP);\n        lastBlockFP = pendingFP;\n        blockReader.readBlock();\n        seekPending = false;\n      } else if (upto == blockSize) {\n        // Load new block\n        lastBlockFP = in.getFilePointer();\n        blockReader.readBlock();\n        upto = 0;\n      }\n      return pending[upto++];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"56f003b3dda5793ba1b4037182a0a8e3aa499be0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","56f003b3dda5793ba1b4037182a0a8e3aa499be0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"56f003b3dda5793ba1b4037182a0a8e3aa499be0":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","56f003b3dda5793ba1b4037182a0a8e3aa499be0","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}