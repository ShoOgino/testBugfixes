{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getTreeCellIterator(Shape,int).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getTreeCellIterator(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getTreeCellIterator(Shape,int).mjava","sourceNew":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added. For cells at detailLevel, they are marked as\n   * leaves too, unless it's a point.\n   * <p>\n   * IMPORTANT: Cells returned from the iterator can be re-used for cells at the same level. So you can't simply\n   * iterate to subsequent cells and still refer to the former cell nor the bytes returned from the former cell, unless\n   * you know the former cell is a parent.\n   *\n   * @param shape       the shape; possibly null but the caller should liberally call\n   *  {@code remove()} if so.\n   * @param detailLevel the maximum detail level to get cells for\n   * @return the matching cells\n   */\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    return new TreeCellIterator(shape, detailLevel, getWorldCell());\n  }\n\n","sourceOld":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added. For cells at detailLevel, they are marked as\n   * leaves too, unless it's a point.\n   * <p>\n   * IMPORTANT: Cells returned from the iterator can be re-used for cells at the same level. So you can't simply\n   * iterate to subsequent cells and still refer to the former cell nor the bytes returned from the former cell, unless\n   * you know the former cell is a parent.\n   *\n   * @param shape       the shape; possibly null but the caller should liberally call\n   *  {@code remove()} if so.\n   * @param detailLevel the maximum detail level to get cells for\n   * @return the matching cells\n   */\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    return new TreeCellIterator(shape, detailLevel, getWorldCell());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getTreeCellIterator(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getTreeCellIterator(Shape,int).mjava","sourceNew":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added. For cells at detailLevel, they are marked as\n   * leaves too, unless it's a point.\n   * <p>\n   * IMPORTANT: Cells returned from the iterator can be re-used for cells at the same level. So you can't simply\n   * iterate to subsequent cells and still refer to the former cell nor the bytes returned from the former cell, unless\n   * you know the former cell is a parent.\n   *\n   * @param shape       the shape; possibly null but the caller should liberally call\n   *  {@code remove()} if so.\n   * @param detailLevel the maximum detail level to get cells for\n   * @return the matching cells\n   */\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    return new TreeCellIterator(shape, detailLevel, getWorldCell());\n  }\n\n","sourceOld":"  /**\n   * Gets the intersecting cells for the specified shape, without exceeding\n   * detail level. If a cell is within the query shape then it's marked as a\n   * leaf and none of its children are added. For cells at detailLevel, they are marked as\n   * leaves too, unless it's a point.\n   * <p>\n   * IMPORTANT: Cells returned from the iterator can be re-used for cells at the same level. So you can't simply\n   * iterate to subsequent cells and still refer to the former cell nor the bytes returned from the former cell, unless\n   * you know the former cell is a parent.\n   *\n   * @param shape       the shape; possibly null but the caller should liberally call\n   *  {@code remove()} if so.\n   * @param detailLevel the maximum detail level to get cells for\n   * @return the matching cells\n   */\n  public CellIterator getTreeCellIterator(Shape shape, int detailLevel) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n    return new TreeCellIterator(shape, detailLevel, getWorldCell());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}