{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\r\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\r\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\r\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\r\n   * c) avoids any \"TooManyBooleanClauses\" exception.\r\n   * However, if your application really needs to use the\r\n   * old-fashioned BooleanQuery expansion rewriting and the above\r\n   * points are not relevant then use this to change\r\n   * the rewrite method.\r\n   */\r\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\r\n    multiTermRewriteMethod = method;\r\n  }\r\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\r\n   * By default QueryParser uses {@link org.apache.lucene.search.MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\r\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it\r\n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score\r\n   * c) avoids any \"TooManyBooleanClauses\" exception.\r\n   * However, if your application really needs to use the\r\n   * old-fashioned BooleanQuery expansion rewriting and the above\r\n   * points are not relevant then use this to change\r\n   * the rewrite method.\r\n   */\r\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\r\n    multiTermRewriteMethod = method;\r\n  }\r\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":null,"sourceOld":"  /**\n   * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["9454a6510e2db155fb01faa5c049b06ece95fab9","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}