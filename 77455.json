{"path":"lucene/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws LockObtainFailedException, IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws LockObtainFailedException, IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws LockObtainFailedException, IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws LockObtainFailedException, IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}