{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream#backup(int).mjava","commits":[{"id":"4a009b1ead486cdd766fc886dccd36621d4f9827","date":1341697311,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream#backup(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implemetation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream#backup(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implemetation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream#backup(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implemetation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream#backup(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implemetation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream#backup(int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream#backup(int).mjava","sourceNew":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implementation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","sourceOld":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implemetation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f43184d94158070757ac9bb9d71dc7b72925013","date":1600412010,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream#backup(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Backs up the input stream by amount steps. Lexer calls this method if it\n   * had already read some characters, but could not use them to match a\n   * (longer) token. So, they will be used again as the prefix of the next\n   * token and it is the implementation's responsibility to do this right.\n   */\n  void backup(int amount);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"4a009b1ead486cdd766fc886dccd36621d4f9827":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f43184d94158070757ac9bb9d71dc7b72925013":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a009b1ead486cdd766fc886dccd36621d4f9827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f43184d94158070757ac9bb9d71dc7b72925013"],"46d8ada1fff8d18cb197c38c7983225162599948":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["5f43184d94158070757ac9bb9d71dc7b72925013"],"4a009b1ead486cdd766fc886dccd36621d4f9827":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5f43184d94158070757ac9bb9d71dc7b72925013":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a009b1ead486cdd766fc886dccd36621d4f9827","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}