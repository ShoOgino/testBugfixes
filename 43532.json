{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#rm(File).mjava","commits":[{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#rm(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes a file or a directory (and everything underneath it).\n   */\n  public static void rm(File location) throws IOException {\n    if (!location.exists()) {\n      return;\n    }\n\n    if (location.isDirectory()) {\n      for (File f : location.listFiles()) {\n        rm(f);\n      }\n    } else {\n      if (!location.delete()) {\n        throw new IOException(\"Could not delete: \" + location.getAbsolutePath());\n      }\n    }\n\n    assert !location.exists();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be04a7534a8a0679382542b62556ea5fba6cfb7f","date":1396613089,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#rm(File).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#rm(File).mjava","sourceNew":"  /**\n   * Deletes a file or a directory (and everything underneath it).\n   */\n  public static void rm(File location) throws IOException {\n    ArrayList<File> unremoved = rm(location, new ArrayList<File>());\n    if (!unremoved.isEmpty()) {\n      StringBuilder b = new StringBuilder(\"Could not remove the following files (in the order of attempts):\\n\");\n      for (File f : unremoved) {\n        b.append(\"   \")\n         .append(f.getAbsolutePath())\n         .append(\"\\n\");\n      }\n      throw new IOException(b.toString());\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes a file or a directory (and everything underneath it).\n   */\n  public static void rm(File location) throws IOException {\n    if (!location.exists()) {\n      return;\n    }\n\n    if (location.isDirectory()) {\n      for (File f : location.listFiles()) {\n        rm(f);\n      }\n    } else {\n      if (!location.delete()) {\n        throw new IOException(\"Could not delete: \" + location.getAbsolutePath());\n      }\n    }\n\n    assert !location.exists();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#rm(File...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#rm(File).mjava","sourceNew":"  /**\n   * Deletes one or more files or directories (and everything underneath it).\n   * \n   * @throws IOException if any of the given files (or their subhierarchy files in case\n   * of directories) cannot be removed.\n   */\n  public static void rm(File... locations) throws IOException {\n    ArrayList<File> unremoved = rm(new ArrayList<File>(), locations);\n    if (!unremoved.isEmpty()) {\n      StringBuilder b = new StringBuilder(\"Could not remove the following files (in the order of attempts):\\n\");\n      for (File f : unremoved) {\n        b.append(\"   \")\n         .append(f.getAbsolutePath())\n         .append(\"\\n\");\n      }\n      throw new IOException(b.toString());\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes a file or a directory (and everything underneath it).\n   */\n  public static void rm(File location) throws IOException {\n    ArrayList<File> unremoved = rm(location, new ArrayList<File>());\n    if (!unremoved.isEmpty()) {\n      StringBuilder b = new StringBuilder(\"Could not remove the following files (in the order of attempts):\\n\");\n      for (File f : unremoved) {\n        b.append(\"   \")\n         .append(f.getAbsolutePath())\n         .append(\"\\n\");\n      }\n      throw new IOException(b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["5eb2511ababf862ea11e10761c70ee560cd84510"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}