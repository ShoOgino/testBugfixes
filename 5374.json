{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","commits":[{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return reader.get(docID);\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return reader.get(docID);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return reader.get(docID);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56fca4cf418a84a71d0701bbb6fda4db84fa5796","date":1361031660,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new LongNumericDocValues() {\n      @Override\n      public long get(long id) {\n        return reader.get(id);\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return reader.get(docID);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new LongNumericDocValues() {\n      @Override\n      public long get(long id) {\n        return reader.get(id);\n      }\n    };\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        return reader.get(docID);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long[] table = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    return new LongNumericDocValues() {\n      @Override\n      public long get(long id) {\n        return reader.get(id);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long[] table = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long[] table = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":null,"sourceOld":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long[] table = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#getNumeric(FieldInfo,NumericEntry).mjava","sourceNew":null,"sourceOld":"  private LongNumericDocValues getNumeric(FieldInfo field, final NumericEntry entry) throws IOException {\n    final IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final BlockPackedReader reader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return reader.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final BlockPackedReader quotientReader = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n        return new LongNumericDocValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long[] table = entry.table;\n        final int bitsRequired = PackedInts.bitsRequired(table.length - 1);\n        final PackedInts.Reader ords = PackedInts.getDirectReaderNoHeader(data, PackedInts.Format.PACKED, entry.packedIntsVersion, (int) entry.count, bitsRequired);\n        return new LongNumericDocValues() {\n          @Override\n          long get(long id) {\n            return table[(int) ords.get((int) id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","11a746437bc5c0a0b3df0337ed249c387c812871"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","56fca4cf418a84a71d0701bbb6fda4db84fa5796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["56fca4cf418a84a71d0701bbb6fda4db84fa5796","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}