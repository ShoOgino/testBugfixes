{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8474c4e5a03f0ca187f99c062af83e092717f3","date":1269253267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7375bc69c270e1e62c08c5091793a3e9dce937f","date":1275471695,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ea008241c4805c9032c481c739c1611c94e12","date":1282654655,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"257da767277782760db0814096b999899995b2b1","date":1289498882,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit.getClass().getName()).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047784e704fe141e0ff36affac8a7cb6c7bbec","date":1295352100,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"maxFieldLength=\").append(maxFieldLength).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b281157bd1e723dc9a712b6058506090cf2a8a","date":1304007734,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(indexerThreadPool.getMaxThreadStates()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"maxThreadStates=\").append(maxThreadStates).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codecProvider=\").append(codecProvider).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream == null ? \"null\" : infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream == null ? \"null\" : infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarityProvider=\").append(similarityProvider.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"c7375bc69c270e1e62c08c5091793a3e9dce937f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","257da767277782760db0814096b999899995b2b1"],"902ea008241c4805c9032c481c739c1611c94e12":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["56da903869515527852ee21ea7ef7bfe414cd40d"],"257da767277782760db0814096b999899995b2b1":["902ea008241c4805c9032c481c739c1611c94e12"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19b281157bd1e723dc9a712b6058506090cf2a8a":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["85a883878c0af761245ab048babc63d099f835f3","56da903869515527852ee21ea7ef7bfe414cd40d"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"85a883878c0af761245ab048babc63d099f835f3":["902ea008241c4805c9032c481c739c1611c94e12","257da767277782760db0814096b999899995b2b1"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","19b281157bd1e723dc9a712b6058506090cf2a8a"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"7b91922b55d15444d554721b352861d028eb8278":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"56da903869515527852ee21ea7ef7bfe414cd40d":["257da767277782760db0814096b999899995b2b1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7375bc69c270e1e62c08c5091793a3e9dce937f":["902ea008241c4805c9032c481c739c1611c94e12","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"902ea008241c4805c9032c481c739c1611c94e12":["257da767277782760db0814096b999899995b2b1","85a883878c0af761245ab048babc63d099f835f3"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["19b281157bd1e723dc9a712b6058506090cf2a8a"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"257da767277782760db0814096b999899995b2b1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","85a883878c0af761245ab048babc63d099f835f3","56da903869515527852ee21ea7ef7bfe414cd40d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"19b281157bd1e723dc9a712b6058506090cf2a8a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"85a883878c0af761245ab048babc63d099f835f3":["70ad682703b8585f5d0a637efec044d57ec05efb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"56da903869515527852ee21ea7ef7bfe414cd40d":["c2047784e704fe141e0ff36affac8a7cb6c7bbec","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}