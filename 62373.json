{"path":"lucene/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","sourceNew":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static final String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static final String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","sourceNew":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static final String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, \"\", ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static final String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","sourceNew":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, \"\", ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static final String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, \"\", ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#fileNameFromGeneration(String,String,long).mjava","sourceNew":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, \"\", ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the full file name from base, extension and generation. If the\n   * generation is -1, the file name is null. If it's 0, the file name is\n   * &lt;base&gt;.&lt;ext&gt;. If it's > 0, the file name is\n   * &lt;base&gt;_&lt;gen&gt;.&lt;ext&gt;.<br>\n   * <b>NOTE:</b> .&lt;ext&gt; is added to the name only if <code>ext</code> is\n   * not an empty string.\n   * \n   * @param base main part of the file name\n   * @param ext extension of the filename\n   * @param gen generation\n   */\n  public static String fileNameFromGeneration(String base, String ext, long gen) {\n    if (gen == SegmentInfo.NO) {\n      return null;\n    } else if (gen == SegmentInfo.WITHOUT_GEN) {\n      return segmentFileName(base, \"\", ext);\n    } else {\n      // The '6' part in the length is: 1 for '.', 1 for '_' and 4 as estimate\n      // to the gen length as string (hopefully an upper limit so SB won't\n      // expand in the middle.\n      StringBuilder res = new StringBuilder(base.length() + 6 + ext.length())\n          .append(base).append('_').append(Long.toString(gen, Character.MAX_RADIX));\n      if (ext.length() > 0) {\n        res.append('.').append(ext);\n      }\n      return res.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6267e1ce56c2eec111425690cd04e251b6f14952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}