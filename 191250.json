{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","commits":[{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public ShardState(IndexSearcher s) {\n      IndexReader[] subReaders = s.getIndexReader().getSequentialSubReaders();\n      if (subReaders == null) {\n        subReaders = new IndexReader[] {s.getIndexReader()};\n      }\n      subSearchers = new ShardSearcher[subReaders.length];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof IndexReader.AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((IndexReader.AtomicReaderContext) ctx, ctx);\n      } else {\n        final IndexReader.CompositeReaderContext compCTX = (IndexReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) { \n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders[subIDX].maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public ShardState(IndexSearcher s) {\n      IndexReader[] subReaders = s.getIndexReader().getSequentialSubReaders();\n      if (subReaders == null) {\n        subReaders = new IndexReader[] {s.getIndexReader()};\n      }\n      subSearchers = new ShardSearcher[subReaders.length];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof IndexReader.AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((IndexReader.AtomicReaderContext) ctx, ctx);\n      } else {\n        final IndexReader.CompositeReaderContext compCTX = (IndexReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) { \n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders[subIDX].maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      IndexReader[] subReaders = s.getIndexReader().getSequentialSubReaders();\n      if (subReaders == null) {\n        subReaders = new IndexReader[] {s.getIndexReader()};\n      }\n      subSearchers = new ShardSearcher[subReaders.length];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof IndexReader.AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((IndexReader.AtomicReaderContext) ctx, ctx);\n      } else {\n        final IndexReader.CompositeReaderContext compCTX = (IndexReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders[subIDX].maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      IndexReader[] subReaders = s.getIndexReader().getSequentialSubReaders();\n      if (subReaders == null) {\n        subReaders = new IndexReader[] {s.getIndexReader()};\n      }\n      subSearchers = new ShardSearcher[subReaders.length];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof IndexReader.AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((IndexReader.AtomicReaderContext) ctx, ctx);\n      } else {\n        final IndexReader.CompositeReaderContext compCTX = (IndexReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) { \n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders[subIDX].maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2","date":1327854270,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      List<AtomicIndexReader> subReaders = new ArrayList<AtomicIndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeIndexReader.CompositeReaderContext compCTX = (CompositeIndexReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      IndexReader[] subReaders = s.getIndexReader().getSequentialSubReaders();\n      if (subReaders == null) {\n        subReaders = new IndexReader[] {s.getIndexReader()};\n      }\n      subSearchers = new ShardSearcher[subReaders.length];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof IndexReader.AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((IndexReader.AtomicReaderContext) ctx, ctx);\n      } else {\n        final IndexReader.CompositeReaderContext compCTX = (IndexReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders[subIDX].maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReader.CompositeReaderContext compCTX = (CompositeReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      List<AtomicIndexReader> subReaders = new ArrayList<AtomicIndexReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeIndexReader.CompositeReaderContext compCTX = (CompositeIndexReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReaderContext compCTX = (CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReader.CompositeReaderContext compCTX = (CompositeReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReaderContext compCTX = (CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      IndexReader[] subReaders = s.getIndexReader().getSequentialSubReaders();\n      if (subReaders == null) {\n        subReaders = new IndexReader[] {s.getIndexReader()};\n      }\n      subSearchers = new ShardSearcher[subReaders.length];\n      final IndexReader.ReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof IndexReader.AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((IndexReader.AtomicReaderContext) ctx, ctx);\n      } else {\n        final IndexReader.CompositeReaderContext compCTX = (IndexReader.CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders[subIDX].maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReaderContext compCTX = (CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReaderContext compCTX = (CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["7528ec8c6e88061e2e6af98c4ae1f72a30f180b2"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["4739c84c362b9673ab5ed3e038ff760c718c30c8","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["7528ec8c6e88061e2e6af98c4ae1f72a30f180b2","5cab9a86bd67202d20b6adc463008c8e982b070a"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","4739c84c362b9673ab5ed3e038ff760c718c30c8"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}