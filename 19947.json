{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockHoleInjectingTokenFilter#incrementToken().mjava","commits":[{"id":"6795c6bc2f5a6b2a2230cb20ff4744003faf7802","date":1333839972,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockHoleInjectingTokenFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final int posInc = posIncAtt.getPositionIncrement();\n      if (posInc > 0 && random.nextInt(5) == 3) {\n        posIncAtt.setPositionIncrement(posInc + _TestUtil.nextInt(random, 1, 5));\n        // TODO: should we tweak offsets...?\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1fe9452de26a70442324c5bdc5a5a333e55f07db"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1fe9452de26a70442324c5bdc5a5a333e55f07db","date":1333912637,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockHoleInjectingTokenFilter#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockHoleInjectingTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final int posInc = posIncAtt.getPositionIncrement();\n\n      int nextPos = pos + posInc;\n\n      // Carefully inject a hole only where it won't mess up\n      // the graph:\n      if (posInc > 0 && maxPos <= nextPos && random.nextInt(5) == 3) {\n        final int holeSize = _TestUtil.nextInt(random, 1, 5);\n        posIncAtt.setPositionIncrement(posInc + holeSize);\n        nextPos += holeSize;\n      }\n\n      pos = nextPos;\n      maxPos = Math.max(maxPos, pos + posLenAtt.getPositionLength());\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final int posInc = posIncAtt.getPositionIncrement();\n      if (posInc > 0 && random.nextInt(5) == 3) {\n        posIncAtt.setPositionIncrement(posInc + _TestUtil.nextInt(random, 1, 5));\n        // TODO: should we tweak offsets...?\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockHoleInjectingTokenFilter#incrementToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockHoleInjectingTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final int posInc = posIncAtt.getPositionIncrement();\n\n      int nextPos = pos + posInc;\n\n      // Carefully inject a hole only where it won't mess up\n      // the graph:\n      if (posInc > 0 && maxPos <= nextPos && random.nextInt(5) == 3) {\n        final int holeSize = TestUtil.nextInt(random, 1, 5);\n        posIncAtt.setPositionIncrement(posInc + holeSize);\n        nextPos += holeSize;\n      }\n\n      pos = nextPos;\n      maxPos = Math.max(maxPos, pos + posLenAtt.getPositionLength());\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      final int posInc = posIncAtt.getPositionIncrement();\n\n      int nextPos = pos + posInc;\n\n      // Carefully inject a hole only where it won't mess up\n      // the graph:\n      if (posInc > 0 && maxPos <= nextPos && random.nextInt(5) == 3) {\n        final int holeSize = _TestUtil.nextInt(random, 1, 5);\n        posIncAtt.setPositionIncrement(posInc + holeSize);\n        nextPos += holeSize;\n      }\n\n      pos = nextPos;\n      maxPos = Math.max(maxPos, pos + posLenAtt.getPositionLength());\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["1fe9452de26a70442324c5bdc5a5a333e55f07db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fe9452de26a70442324c5bdc5a5a333e55f07db":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"1fe9452de26a70442324c5bdc5a5a333e55f07db":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["1fe9452de26a70442324c5bdc5a5a333e55f07db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}