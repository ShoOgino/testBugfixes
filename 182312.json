{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n            // cool - we can use this number globally\n            fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n        \n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n            // cool - we can use this number globally\n            fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n        \n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n            // cool - we can use this number globally\n            fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n        \n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n            // cool - we can use this number globally\n            fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n        \n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e84d639980c2b2eb5d41330d5ff68d143239495","date":1337729749,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumberBiMap#addOrGet(String,int).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber) {\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n            // cool - we can use this number globally\n            fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n        \n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4e84d639980c2b2eb5d41330d5ff68d143239495"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a851824c09818632c94eba41e60ef5e72e323c8e":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"4e84d639980c2b2eb5d41330d5ff68d143239495":["a851824c09818632c94eba41e60ef5e72e323c8e"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a851824c09818632c94eba41e60ef5e72e323c8e":["4e84d639980c2b2eb5d41330d5ff68d143239495"],"4e84d639980c2b2eb5d41330d5ff68d143239495":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["a851824c09818632c94eba41e60ef5e72e323c8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}