{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#resolveAliases(List[String]).mjava","commits":[{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#resolveAliases(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private LinkedHashSet<String> resolveAliases(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (stateProvider.getState(collectionName) == null) {\n        // perhaps it's an alias\n        List<String> aliasedCollections = stateProvider.resolveAlias(collectionName);\n        // one more level of alias indirection...  (dubious that we should support this)\n        for (String aliasedCollection : aliasedCollections) {\n          collectionNames.addAll(stateProvider.resolveAlias(aliasedCollection));\n        }\n      } else {\n        collectionNames.add(collectionName); // it's a collection\n      }\n    }\n    return collectionNames;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#resolveAliases(List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#resolveAliases(List[String]).mjava","sourceNew":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private LinkedHashSet<String> resolveAliases(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (getClusterStateProvider().getState(collectionName) == null) {\n        // perhaps it's an alias\n        List<String> aliasedCollections = getClusterStateProvider().resolveAlias(collectionName);\n        // one more level of alias indirection...  (dubious that we should support this)\n        for (String aliasedCollection : aliasedCollections) {\n          collectionNames.addAll(getClusterStateProvider().resolveAlias(aliasedCollection));\n        }\n      } else {\n        collectionNames.add(collectionName); // it's a collection\n      }\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  /** Resolves the input collections to their possible aliased collections. Doesn't validate collection existence. */\n  private LinkedHashSet<String> resolveAliases(List<String> inputCollections) {\n    LinkedHashSet<String> collectionNames = new LinkedHashSet<>(); // consistent ordering\n    for (String collectionName : inputCollections) {\n      if (stateProvider.getState(collectionName) == null) {\n        // perhaps it's an alias\n        List<String> aliasedCollections = stateProvider.resolveAlias(collectionName);\n        // one more level of alias indirection...  (dubious that we should support this)\n        for (String aliasedCollection : aliasedCollections) {\n          collectionNames.addAll(stateProvider.resolveAlias(aliasedCollection));\n        }\n      } else {\n        collectionNames.add(collectionName); // it's a collection\n      }\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}