{"path":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#doTestBuildOnStartup(boolean).mjava","commits":[{"id":"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee","date":1421799060,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#doTestBuildOnStartup(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestBuildOnStartup(boolean createNewCores) throws Exception {\n    \n    final String suggesterFuzzy = \"suggest_fuzzy_doc_dict\";\n    \n    // the test relies on useColdSearcher=false\n    assertFalse(\"Precondition not met for test. useColdSearcher must be false\", \n        h.getCore().getSolrConfig().useColdSearcher);\n    \n    // validate that this suggester is not storing the lookup and buildOnStartup is not set\n    assertEquals(suggesterFuzzy, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='name']\", false));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='storeDir']\", false));\n    \n    // assert that buildOnStartup=false\n    assertEquals(\"false\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='buildOnStartup']\", false));\n    \n    // verify that this suggester is built (there was a commit in setUp)\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n    \n    // reload the core and wait for for the listeners to finish\n    reloadCore(createNewCores);\n    if (System.getProperty(SYSPROP_NIGHTLY) != null) {\n      // wait some time here in nightly to make sure there are no race conditions in suggester build\n      Thread.sleep(1000);\n    }\n    \n    // The suggester should be empty\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='0']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    // validate the suggester is built again\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n    \n    final String suggestStartup = \"suggest_fuzzy_doc_dict_build_startup\";\n    \n    // repeat the test with \"suggest_fuzzy_doc_dict_build_startup\", it is exactly the same but with buildOnStartup=true\n    assertEquals(suggestStartup, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='name']\", false));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='storeDir']\", false));\n    assertEquals(\"true\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='buildOnStartup']\", false));\n    \n    // reload the core\n    reloadCore(createNewCores);\n    // verify that this suggester is built (should build on startup)\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggestStartup, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggestStartup + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46a552067d28b0dd9e5716bc043c22ccf0fc044","date":1422225644,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#doTestBuildOnStartup(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SuggestComponentTest#doTestBuildOnStartup(boolean).mjava","sourceNew":"  private void doTestBuildOnStartup(boolean createNewCores) throws Exception {\n    \n    final String suggesterFuzzy = \"suggest_fuzzy_doc_dict\";\n    \n    // the test relies on useColdSearcher=false\n    assertFalse(\"Precondition not met for test. useColdSearcher must be false\", \n        h.getCore().getSolrConfig().useColdSearcher);\n    \n    // validate that this suggester is not storing the lookup and buildOnStartup is not set\n    assertEquals(suggesterFuzzy, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='name']\", false));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='storeDir']\", false));\n    \n    // assert that buildOnStartup=false\n    assertEquals(\"false\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='buildOnStartup']\", false));\n    assertEquals(\"true\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='buildOnCommit']\", false));\n    \n    // verify that this suggester is built (there was a commit in setUp)\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n    \n    // reload the core and wait for for the listeners to finish\n    reloadCore(createNewCores);\n    if (System.getProperty(SYSPROP_NIGHTLY) != null) {\n      // wait some time here in nightly to make sure there are no race conditions in suggester build\n      Thread.sleep(1000);\n    }\n    \n    // The suggester should be empty\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='0']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    // validate the suggester is built again\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n    \n    final String suggestStartup = \"suggest_fuzzy_doc_dict_build_startup\";\n    \n    // repeat the test with \"suggest_fuzzy_doc_dict_build_startup\", it is exactly the same but with buildOnStartup=true\n    assertEquals(suggestStartup, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='name']\", false));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='storeDir']\", false));\n    assertEquals(\"true\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='buildOnStartup']\", false));\n    assertEquals(\"false\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='buildOnCommit']\", false));\n    \n    // reload the core\n    reloadCore(createNewCores);\n    // verify that this suggester is built (should build on startup)\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggestStartup, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggestStartup + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n    \n    // add one more doc, this should not be seen without rebuilding manually or reloading the core (buildOnCommit=false)\n    assertU(adoc(\"id\", \"10\", \"cat\", \"example data extra \", \"price\", \"40\", \"weight\", \"35\"));\n    assertU((commit()));\n    \n    waitForWarming();\n\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggestStartup, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggestStartup + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggestStartup, \n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggestStartup, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"5\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggestStartup + \"']/lst[@name='exampel']/int[@name='numFound'][.='3']\"\n        );\n  }\n\n","sourceOld":"  private void doTestBuildOnStartup(boolean createNewCores) throws Exception {\n    \n    final String suggesterFuzzy = \"suggest_fuzzy_doc_dict\";\n    \n    // the test relies on useColdSearcher=false\n    assertFalse(\"Precondition not met for test. useColdSearcher must be false\", \n        h.getCore().getSolrConfig().useColdSearcher);\n    \n    // validate that this suggester is not storing the lookup and buildOnStartup is not set\n    assertEquals(suggesterFuzzy, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='name']\", false));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='storeDir']\", false));\n    \n    // assert that buildOnStartup=false\n    assertEquals(\"false\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[3]/str[@name='buildOnStartup']\", false));\n    \n    // verify that this suggester is built (there was a commit in setUp)\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n    \n    // reload the core and wait for for the listeners to finish\n    reloadCore(createNewCores);\n    if (System.getProperty(SYSPROP_NIGHTLY) != null) {\n      // wait some time here in nightly to make sure there are no race conditions in suggester build\n      Thread.sleep(1000);\n    }\n    \n    // The suggester should be empty\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='0']\"\n        );\n    \n    // build the suggester manually\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_BUILD, \"true\"),\n        \"//str[@name='command'][.='build']\"\n        );\n    \n    // validate the suggester is built again\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggesterFuzzy + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n    \n    final String suggestStartup = \"suggest_fuzzy_doc_dict_build_startup\";\n    \n    // repeat the test with \"suggest_fuzzy_doc_dict_build_startup\", it is exactly the same but with buildOnStartup=true\n    assertEquals(suggestStartup, \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='name']\", false));\n    assertNull(h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='storeDir']\", false));\n    assertEquals(\"true\", \n        h.getCore().getSolrConfig().getVal(\"//searchComponent[@name='suggest']/lst[5]/str[@name='buildOnStartup']\", false));\n    \n    // reload the core\n    reloadCore(createNewCores);\n    // verify that this suggester is built (should build on startup)\n    assertQ(req(\"qt\", rh, \n        SuggesterParams.SUGGEST_DICT, suggestStartup, \n        SuggesterParams.SUGGEST_Q, \"exampel\",\n        SuggesterParams.SUGGEST_COUNT, \"2\"),\n        \"//lst[@name='suggest']/lst[@name='\" + suggestStartup + \"']/lst[@name='exampel']/int[@name='numFound'][.='2']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5b4a5e9cf8f26adacaf06c3101e4e43174473ee"],"c46a552067d28b0dd9e5716bc043c22ccf0fc044":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5b4a5e9cf8f26adacaf06c3101e4e43174473ee":["c46a552067d28b0dd9e5716bc043c22ccf0fc044"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}