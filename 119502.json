{"path":"solr/test-framework/src/java/org/apache/solr/util/RandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, \n                                             int maxSegmentCount, \n                                             Map<SegmentCommitInfo,Boolean> segmentsToMerge) \n    throws IOException {\n    \n    return inner.findForcedMerges(segmentInfos, maxSegmentCount, segmentsToMerge);\n  }\n\n","sourceOld":"  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, \n                                             int maxSegmentCount, \n                                             Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) \n    throws IOException {\n    \n    return inner.findForcedMerges(segmentInfos, maxSegmentCount, segmentsToMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7852e752a7724f7606ba613a541ca76a5ea8a36","date":1401535761,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, \n                                             int maxSegmentCount, \n                                             Map<SegmentCommitInfo,Boolean> segmentsToMerge,\n                                             IndexWriter writer) \n    throws IOException {\n    \n    return inner.findForcedMerges(segmentInfos, maxSegmentCount, segmentsToMerge, writer);\n  }\n\n","sourceOld":"  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, \n                                             int maxSegmentCount, \n                                             Map<SegmentCommitInfo,Boolean> segmentsToMerge) \n    throws IOException {\n    \n    return inner.findForcedMerges(segmentInfos, maxSegmentCount, segmentsToMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7852e752a7724f7606ba613a541ca76a5ea8a36":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7852e752a7724f7606ba613a541ca76a5ea8a36"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["e7852e752a7724f7606ba613a541ca76a5ea8a36"],"e7852e752a7724f7606ba613a541ca76a5ea8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}