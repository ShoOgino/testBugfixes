{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","sourceNew":"  private void and(final long[] otherArr, final int otherLen) {\n    final long[] thisArr = this.bits;\n    int pos = Math.min(thisArr.length, otherLen);\n    while(--pos >= 0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (thisArr.length > otherLen) {\n      Arrays.fill(thisArr, otherLen, thisArr.length, 0L);\n    }\n  }\n\n","sourceOld":"  private void and(final long[] otherArr, final int otherLen) {\n    final long[] thisArr = this.bits;\n    int pos = Math.min(thisArr.length, otherLen);\n    while(--pos >= 0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (thisArr.length > otherLen) {\n      Arrays.fill(thisArr, otherLen, thisArr.length, 0L);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e991ef3a1dcc08cddb533f26f17a958fd64f982","date":1358522758,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","sourceNew":"  private void and(final long[] otherArr, final int otherLen) {\n    final long[] thisArr = this.bits;\n    int pos = Math.min(this.wordLength, otherLen);\n    while(--pos >= 0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (this.wordLength > otherLen) {\n      Arrays.fill(thisArr, otherLen, this.wordLength, 0L);\n    }\n  }\n\n","sourceOld":"  private void and(final long[] otherArr, final int otherLen) {\n    final long[] thisArr = this.bits;\n    int pos = Math.min(thisArr.length, otherLen);\n    while(--pos >= 0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (thisArr.length > otherLen) {\n      Arrays.fill(thisArr, otherLen, thisArr.length, 0L);\n    }\n  }\n\n","bugFix":["b8ea5d384746c397b7afee5e0b870d31bd488832"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","sourceNew":"  private void and(final long[] otherArr, final int otherLen) {\n    final long[] thisArr = this.bits;\n    int pos = Math.min(this.wordLength, otherLen);\n    while(--pos >= 0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (this.wordLength > otherLen) {\n      Arrays.fill(thisArr, otherLen, this.wordLength, 0L);\n    }\n  }\n\n","sourceOld":"  private void and(final long[] otherArr, final int otherLen) {\n    final long[] thisArr = this.bits;\n    int pos = Math.min(thisArr.length, otherLen);\n    while(--pos >= 0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (thisArr.length > otherLen) {\n      Arrays.fill(thisArr, otherLen, thisArr.length, 0L);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#and(long[],int).mjava","sourceNew":"  private void and(final long[] otherArr, final int otherNumWords) {\n    final long[] thisArr = this.bits;\n    int pos = Math.min(this.numWords, otherNumWords);\n    while(--pos >= 0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (this.numWords > otherNumWords) {\n      Arrays.fill(thisArr, otherNumWords, this.numWords, 0L);\n    }\n  }\n\n","sourceOld":"  private void and(final long[] otherArr, final int otherLen) {\n    final long[] thisArr = this.bits;\n    int pos = Math.min(this.wordLength, otherLen);\n    while(--pos >= 0) {\n      thisArr[pos] &= otherArr[pos];\n    }\n    if (this.wordLength > otherLen) {\n      Arrays.fill(thisArr, otherLen, this.wordLength, 0L);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c4015cd39dff8d4dec562d909f9766debac53aa6","4e991ef3a1dcc08cddb533f26f17a958fd64f982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e991ef3a1dcc08cddb533f26f17a958fd64f982":["c4015cd39dff8d4dec562d909f9766debac53aa6","a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}