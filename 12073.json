{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","sourceNew":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","sourceOld":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","sourceNew":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","sourceOld":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","sourceNew":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","sourceOld":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","sourceNew":"  public Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","sourceOld":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","sourceNew":"  public Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","sourceOld":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","sourceNew":"  public Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","sourceOld":"  Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#parseDate(String).mjava","sourceNew":"  public Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","sourceOld":"  public Date parseDate(String dateStr) {\n    dateStr = dateStr.trim();\n    DateFormatInfo dfi = getDateFormatInfo();\n    for (int i = 0; i < dfi.dfs.length; i++) {\n      DateFormat df = dfi.dfs[i];\n      dfi.pos.setIndex(0);\n      dfi.pos.setErrorIndex(-1);\n      Date d = df.parse(dateStr, dfi.pos);\n      if (d != null) {\n        // Parse succeeded.\n        return d;\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    if (verbose) {\n      System.out.println(\"failed to parse date (assigning 'now') for: \" + dateStr);\n    }\n    return null; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","3cdad2c6b6234338031bcc1f24c001a5ad66f714","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["b89678825b68eccaf09e6ab71675fc0b0af1e099","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}