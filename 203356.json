{"path":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","sourceNew":"  private List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      TermsEnum terms = fieldsEnum.terms();\n      while (terms.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, terms.term()));\n        } else {\n          sample.add(new Term(field, terms.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","sourceOld":"  private List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      TermsEnum terms = fieldsEnum.terms();\n      while (terms.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, terms.term()));\n        } else {\n          sample.add(new Term(field, terms.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","sourceNew":"  private List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, termsEnum.term()));\n        } else {\n          sample.add(new Term(field, termsEnum.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","sourceOld":"  private List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      TermsEnum terms = fieldsEnum.terms();\n      while (terms.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, terms.term()));\n        } else {\n          sample.add(new Term(field, terms.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#sample(IndexReader,int).mjava","sourceNew":"  private List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, termsEnum.term()));\n        } else {\n          sample.add(new Term(field, termsEnum.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","sourceOld":"  private List<Term> sample(IndexReader reader, int size) throws IOException {\n    List<Term> sample = new ArrayList<Term>();\n    Random random = new Random();\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      Terms terms = fieldsEnum.terms();\n      assertNotNull(terms);\n      TermsEnum termsEnum = terms.iterator(null);\n      while (termsEnum.next() != null) {\n        if (sample.size() >= size) {\n          int pos = random.nextInt(size);\n          sample.set(pos, new Term(field, termsEnum.term()));\n        } else {\n          sample.add(new Term(field, termsEnum.term()));\n        }\n      }\n    }\n    Collections.shuffle(sample);\n    return sample;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}