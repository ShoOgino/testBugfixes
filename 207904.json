{"path":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          if (spans.end() <= end)                 // there is a match\n            return true;\n          \n          return next();                          // scan to next match\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n        public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af54d2e9e95d08aae526fa69cdd34b66a49b763","date":1075728472,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          if (spans.end() <= end)                 // there is a match\n            return true;\n\n          return next();                          // scan to next match\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n        public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          if (spans.end() <= end)                 // there is a match\n            return true;\n          \n          return next();                          // scan to next match\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n        public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new PayloadSpans() {\n        private PayloadSpans spans = match.getPayloadSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          if (spans.end() <= end)                 // there is a match\n            return true;\n\n          return next();                          // scan to next match\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n        public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new PayloadSpans() {\n        private PayloadSpans spans = match.getPayloadSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection/*<byte[]>*/ getPayload() throws IOException {\n        ArrayList result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        @Override\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        @Override\n        public int doc() { return spans.doc(); }\n        @Override\n        public int start() { return spans.start(); }\n        @Override\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        public int doc() { return spans.doc(); }\n        public int start() { return spans.start(); }\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n     public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        @Override\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        @Override\n        public int doc() { return spans.doc(); }\n        @Override\n        public int start() { return spans.start(); }\n        @Override\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        @Override\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        @Override\n        public int doc() { return spans.doc(); }\n        @Override\n        public int start() { return spans.start(); }\n        @Override\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd5947db4de866f035b932f219674c03562d904e":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["fd5947db4de866f035b932f219674c03562d904e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"fd5947db4de866f035b932f219674c03562d904e":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["ef82ff03e4016c705811b2658e81471a645c0e49"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["fd5947db4de866f035b932f219674c03562d904e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}