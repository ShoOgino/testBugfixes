{"path":"src/java/org/apache/solr/analysis/HyphenatedWordsFilter#next(Token).mjava","commits":[{"id":"fe8ae1ed027200f075b0de9f264776fa32c4862f","date":1207066219,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HyphenatedWordsFilter#next(Token).mjava","pathOld":"src/java/org/apache/solr/analysis/HyphenatedWordsFilter#next().mjava","sourceNew":"  /**\n\t * @inheritDoc\n\t * @see org.apache.lucene.analysis.TokenStream#next()\n\t */\n\tpublic final Token next(Token in) throws IOException {\n\t\tStringBuilder termText = new StringBuilder(25);\n\t\tint startOffset = -1, firstPositionIncrement = -1, wordsMerged = 0;\n\t\tToken lastToken = null;\n\t\tfor (Token token = input.next(in); token != null; token = input.next()) {\n\t\t\ttermText.append(token.termBuffer(), 0, token.termLength());\n\t\t\t//current token ends with hyphen -> grab the next token and glue them together\n\t\t\tif (termText.charAt(termText.length() - 1) == '-') {\n\t\t\t\twordsMerged++;\n\t\t\t\t//remove the hyphen\n\t\t\t\ttermText.setLength(termText.length()-1);\n\t\t\t\tif (startOffset == -1) {\n\t\t\t\t\tstartOffset = token.startOffset();\n\t\t\t\t\tfirstPositionIncrement = token.getPositionIncrement();\n\t\t\t\t}\n\t\t\t\tlastToken = token;\n\t\t\t} else {\n\t\t\t\t//shortcut returns token\n\t\t\t\tif (wordsMerged == 0)\n\t\t\t\t\treturn token;\n\t\t\t\tToken mergedToken = new Token(termText.toString(), startOffset, token.endOffset(), token.type());\n\t\t\t\tmergedToken.setPositionIncrement(firstPositionIncrement);\n\t\t\t\treturn mergedToken;\n\t\t\t}\n\t\t}\n\t\t//last token ending with hyphen? - we know that we have only one token in\n\t\t//this situation, so we can safely return firstToken\n\t\tif (startOffset != -1)\n\t\t\treturn lastToken;\n\t\telse\n\t\t\treturn null; //end of token stream\n\t}\n\n","sourceOld":"\t/**\n\t * @inheritDoc\n\t * @see org.apache.lucene.analysis.TokenStream#next()\n\t */\n\tpublic final Token next() throws IOException {\n\t\tStringBuffer termText = new StringBuffer(25);\n\t\tint startOffset = -1, firstPositionIncrement = -1, wordsMerged = 0;\n\t\tToken lastToken = null;\n\t\tfor (Token token = input.next(); token != null; token = input.next()) {\n\t\t\ttermText.append(token.termText());\n\t\t\t//current token ends with hyphen -> grab the next token and glue them together\n\t\t\tif (termText.charAt(termText.length() - 1) == '-') {\n\t\t\t\twordsMerged++;\n\t\t\t\t//remove the hyphen\n\t\t\t\ttermText.setLength(termText.length()-1);\n\t\t\t\tif (startOffset == -1) {\n\t\t\t\t\tstartOffset = token.startOffset();\n\t\t\t\t\tfirstPositionIncrement = token.getPositionIncrement();\n\t\t\t\t}\n\t\t\t\tlastToken = token;\n\t\t\t} else {\n\t\t\t\t//shortcut returns token\n\t\t\t\tif (wordsMerged == 0)\n\t\t\t\t\treturn token;\n\t\t\t\tToken mergedToken = new Token(termText.toString(), startOffset, token.endOffset(), token.type());\n\t\t\t\tmergedToken.setPositionIncrement(firstPositionIncrement);\n\t\t\t\treturn mergedToken;\n\t\t\t}\n\t\t}\n\t\t//last token ending with hyphen? - we know that we have only one token in\n\t\t//this situation, so we can safely return firstToken\n\t\tif (startOffset != -1)\n\t\t\treturn lastToken;\n\t\telse\n\t\t\treturn null; //end of token stream\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/HyphenatedWordsFilter#next(Token).mjava","sourceNew":null,"sourceOld":"  /**\n\t * @inheritDoc\n\t * @see org.apache.lucene.analysis.TokenStream#next()\n\t */\n\tpublic final Token next(Token in) throws IOException {\n\t\tStringBuilder termText = new StringBuilder(25);\n\t\tint startOffset = -1, firstPositionIncrement = -1, wordsMerged = 0;\n\t\tToken lastToken = null;\n\t\tfor (Token token = input.next(in); token != null; token = input.next()) {\n\t\t\ttermText.append(token.termBuffer(), 0, token.termLength());\n\t\t\t//current token ends with hyphen -> grab the next token and glue them together\n\t\t\tif (termText.charAt(termText.length() - 1) == '-') {\n\t\t\t\twordsMerged++;\n\t\t\t\t//remove the hyphen\n\t\t\t\ttermText.setLength(termText.length()-1);\n\t\t\t\tif (startOffset == -1) {\n\t\t\t\t\tstartOffset = token.startOffset();\n\t\t\t\t\tfirstPositionIncrement = token.getPositionIncrement();\n\t\t\t\t}\n\t\t\t\tlastToken = token;\n\t\t\t} else {\n\t\t\t\t//shortcut returns token\n\t\t\t\tif (wordsMerged == 0)\n\t\t\t\t\treturn token;\n\t\t\t\tToken mergedToken = new Token(termText.toString(), startOffset, token.endOffset(), token.type());\n\t\t\t\tmergedToken.setPositionIncrement(firstPositionIncrement);\n\t\t\t\treturn mergedToken;\n\t\t\t}\n\t\t}\n\t\t//last token ending with hyphen? - we know that we have only one token in\n\t\t//this situation, so we can safely return firstToken\n\t\tif (startOffset != -1)\n\t\t\treturn lastToken;\n\t\telse\n\t\t\treturn null; //end of token stream\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef28ac95f5f85bbf872801277448c0924b0a6827","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}