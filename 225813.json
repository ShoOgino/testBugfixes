{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCoded(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCoded(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCoded(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCoded(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCoded(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCoded(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random, 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random.nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCoded(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCoded(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22abfa0c2df167320b9c97d1bdbb19347ff95402","date":1359067319,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCodedBytes(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCodedBytes(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCoded(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCoded(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCodedBytes(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCodedBytes(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCoded(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCoded(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCodedBytes(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCodedBytes(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = _TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCodedBytes(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCodedBytes(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      NumericUtils.longToPrefixCodedBytes(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      NumericUtils.longToPrefixCodedBytes(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG), upperBytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n      NumericUtils.longToPrefixCodedBytes(lower, 0, lowerBytes);\n      NumericUtils.longToPrefixCodedBytes(upper, 0, upperBytes);\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":["22abfa0c2df167320b9c97d1bdbb19347ff95402","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCodedBytes(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      LegacyNumericUtils.longToPrefixCodedBytes(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      LegacyNumericRangeQuery<Long> tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      NumericUtils.longToPrefixCodedBytes(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      NumericUtils.longToPrefixCodedBytes(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      NumericRangeQuery<Long> tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq=NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","date":1455407361,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      LegacyNumericUtils.longToPrefixCoded(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      LegacyNumericRangeQuery<Long> tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCodedBytes(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      LegacyNumericUtils.longToPrefixCodedBytes(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      LegacyNumericRangeQuery<Long> tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":null,"sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      LegacyNumericUtils.longToPrefixCoded(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      LegacyNumericRangeQuery<Long> tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":null,"sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      LegacyNumericUtils.longToPrefixCoded(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      LegacyNumericRangeQuery<Long> tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":null,"sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      LegacyNumericUtils.longToPrefixCoded(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      LegacyNumericRangeQuery<Long> tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRandomTrieAndClassicRangeQuery(int).mjava","sourceNew":null,"sourceOld":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int totalTermCountT=0,totalTermCountC=0,termCountT,termCountC;\n    int num = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < num; i++) {\n      long lower=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(random().nextDouble()*noDocs*distance)+startOffset;\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      final BytesRef lowerBytes, upperBytes;\n      BytesRefBuilder b = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(lower, 0, b);\n      lowerBytes = b.toBytesRef();\n      LegacyNumericUtils.longToPrefixCoded(upper, 0, b);\n      upperBytes = b.toBytesRef();\n      \n      // test inclusive range\n      LegacyNumericRangeQuery<Long> tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n      TermRangeQuery cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test left exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, false, true);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, false, true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n      // test right exclusive range\n      tq= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, false);\n      cq=new TermRangeQuery(field, lowerBytes, upperBytes, true, false);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      totalTermCountT += termCountT = countTerms(tq);\n      totalTermCountC += termCountC = countTerms(cq);\n      checkTermCounts(precisionStep, termCountT, termCountC);\n    }\n    \n    checkTermCounts(precisionStep, totalTermCountT, totalTermCountC);\n    if (VERBOSE && precisionStep != Integer.MAX_VALUE) {\n      System.out.println(\"Average number of terms during random search on '\" + field + \"':\");\n      System.out.println(\" Numeric query: \" + (((double)totalTermCountT)/(num * 4)));\n      System.out.println(\" Classical query: \" + (((double)totalTermCountC)/(num * 4)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["22abfa0c2df167320b9c97d1bdbb19347ff95402"],"22abfa0c2df167320b9c97d1bdbb19347ff95402":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","22abfa0c2df167320b9c97d1bdbb19347ff95402"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["6613659748fe4411a7dcf85266e55db1f95f7315"],"770342641f7b505eaa8dccdc666158bff2419109":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"22abfa0c2df167320b9c97d1bdbb19347ff95402":["6613659748fe4411a7dcf85266e55db1f95f7315","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["22abfa0c2df167320b9c97d1bdbb19347ff95402","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}