{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","commits":[{"id":"ec8a43401b8f308918076d84b2f72ee396dd054b","date":1363285518,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","pathOld":"/dev/null","sourceNew":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, \n                                             BreakIterator.getSentenceInstance(Locale.ROOT), \n                                             new PassageScorer(0, 0.75f, 87), \n                                             new PassageFormatter());\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, \n                                                              BreakIterator.getSentenceInstance(Locale.ROOT)) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, \n                                             BreakIterator.getSentenceInstance(Locale.ROOT), \n                                             new PassageScorer(0, 0.75f, 87), \n                                             new PassageFormatter());\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157d49068cfc35be5fed366f40bc20cbcddea695","date":1364791189,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, \n                                                              BreakIterator.getSentenceInstance(Locale.ROOT)) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query.build(), 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query.build(), searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":null,"sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query.build(), 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query.build(), searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#testCustomK1().mjava","sourceNew":null,"sourceOld":"  /** sets k1=0 for simple coordinate-level match (# of query terms present) */\n  public void testCustomK1() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field body = new Field(\"body\", \"\", offsetsType);\n    Document doc = new Document();\n    doc.add(body);\n    \n    body.setStringValue(\"This has only foo foo. \" + \n                        \"On the other hand this sentence contains both foo and bar. \" + \n                        \"This has only bar bar bar bar bar bar bar bar bar bar bar bar.\");\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected PassageScorer getScorer(String field) {\n          return new PassageScorer(0, 0.75f, 87);\n        }\n      };\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(\"body\", \"foo\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"body\", \"bar\")), BooleanClause.Occur.SHOULD);\n    TopDocs topDocs = searcher.search(query.build(), 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query.build(), searcher, topDocs, 1);\n    assertEquals(1, snippets.length);\n    assertTrue(snippets[0].startsWith(\"On the other hand\"));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","381618eac2691bb34ab9a3fca76ad55c6274517e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4831dd345148fcd7c33877b449ade21fc45459d8":["ec8a43401b8f308918076d84b2f72ee396dd054b"],"ec8a43401b8f308918076d84b2f72ee396dd054b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["157d49068cfc35be5fed366f40bc20cbcddea695"],"157d49068cfc35be5fed366f40bc20cbcddea695":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4831dd345148fcd7c33877b449ade21fc45459d8":["157d49068cfc35be5fed366f40bc20cbcddea695"],"ec8a43401b8f308918076d84b2f72ee396dd054b":["4831dd345148fcd7c33877b449ade21fc45459d8"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8a43401b8f308918076d84b2f72ee396dd054b"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"157d49068cfc35be5fed366f40bc20cbcddea695":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}