{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","commits":[{"id":"78ae724e55b07e7d158110151c0a7247cd54b460","date":1396011287,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f900ef89aa1e7b79fbc0a8a4a81937ca271b962a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n    } finally {\n      //remove collections\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f900ef89aa1e7b79fbc0a8a4a81937ca271b962a","date":1428989112,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n    }\n  }\n\n","bugFix":["78ae724e55b07e7d158110151c0a7247cd54b460"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      assertEquals(\"1\", collection.get(\"realtimeReplicas\"));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      assertEquals(\"1\", collection.get(\"realtimeReplicas\"));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      assertEquals(\"1\", collection.get(\"realtimeReplicas\"));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n//      assertEquals(\"1\", collection.get(\"nrtReplicas\"));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      assertEquals(\"1\", collection.get(\"realtimeReplicas\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n//      assertEquals(\"1\", collection.get(\"nrtReplicas\"));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      assertEquals(\"1\", collection.get(\"realtimeReplicas\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n//      assertEquals(\"1\", collection.get(\"nrtReplicas\"));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n//      assertEquals(\"1\", collection.get(\"nrtReplicas\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithCollection().mjava","sourceNew":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n//      assertEquals(\"1\", collection.get(\"nrtReplicas\"));\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollection() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      assertNotNull(collection);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n//      assertEquals(\"1\", collection.get(\"nrtReplicas\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","78ae724e55b07e7d158110151c0a7247cd54b460"],"b94236357aaa22b76c10629851fe4e376e0cea82":["61c45e99cf6676da48f19d7511c73712ad39402b","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bafca15d8e408346a67f4282ad1143b88023893b":["78ae724e55b07e7d158110151c0a7247cd54b460"],"78ae724e55b07e7d158110151c0a7247cd54b460":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f900ef89aa1e7b79fbc0a8a4a81937ca271b962a":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["f900ef89aa1e7b79fbc0a8a4a81937ca271b962a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"be320990bdc77e643388fa801e75017f19289c42":["f900ef89aa1e7b79fbc0a8a4a81937ca271b962a"],"ab68488225b6a6c357dda72ed11dedca9914a192":["f900ef89aa1e7b79fbc0a8a4a81937ca271b962a","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61c45e99cf6676da48f19d7511c73712ad39402b":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"78ae724e55b07e7d158110151c0a7247cd54b460":["5eb2511ababf862ea11e10761c70ee560cd84510","bafca15d8e408346a67f4282ad1143b88023893b"],"f900ef89aa1e7b79fbc0a8a4a81937ca271b962a":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","78ae724e55b07e7d158110151c0a7247cd54b460"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["f900ef89aa1e7b79fbc0a8a4a81937ca271b962a"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}