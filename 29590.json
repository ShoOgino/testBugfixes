{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","commits":[{"id":"d97ba94eef1fc33c5451259a7aa2ac682646c1af","date":1488285427,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","pathOld":"/dev/null","sourceNew":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(null /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n          break;\n        default:\n          assertEquals(null /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","sourceNew":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(null /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n          break;\n        default:\n          assertEquals(null /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","sourceNew":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(null /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n          break;\n        default:\n          assertEquals(null /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersion());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d05c0bb0fd185ce269ddd99da83d3986dffbbb25","date":1498844750,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","sourceNew":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"unsupported.index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fe05f332e77cbf262172227a8ab7b0c396db6fe","date":1499084178,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","sourceNew":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    InputStream resource = getClass().getResourceAsStream(\"unsupported.index.single-empty-doc.7.0.0.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"unsupported.index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","sourceNew":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    InputStream resource = getClass().getResourceAsStream(\"unsupported.index.single-empty-doc.7.0.0.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","sourceNew":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    InputStream resource = getClass().getResourceAsStream(\"unsupported.index.single-empty-doc.7.0.0.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.630.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(6 /** 6.3.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d722b735bc69d2234e957cb69cf96ad28ea7e1c3","date":1546867201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestIndexWriterOnOldIndex#testOpenModeAndCreatedVersion().mjava","sourceNew":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    assumeTrue(\"Reenable when 8.0 is released\", false);\n    InputStream resource = getClass().getResourceAsStream(\"index.single-empty-doc.8.0.0.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOpenModeAndCreatedVersion() throws IOException {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    InputStream resource = getClass().getResourceAsStream(\"unsupported.index.single-empty-doc.7.0.0.zip\");\n    assertNotNull(resource);\n    Path path = createTempDir();\n    TestUtil.unzip(resource, path);\n    Directory dir = newFSDirectory(path);\n    for (OpenMode openMode : OpenMode.values()) {\n      Directory tmpDir = newDirectory(dir);\n      assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      IndexWriter w = new IndexWriter(tmpDir, newIndexWriterConfig().setOpenMode(openMode));\n      w.commit();\n      w.close();\n      switch (openMode) {\n        case CREATE:\n          assertEquals(Version.LATEST.major, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n          break;\n        default:\n          assertEquals(7 /** 7.0.0 */, SegmentInfos.readLatestCommit(tmpDir).getIndexCreatedVersionMajor());\n      }\n      tmpDir.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d05c0bb0fd185ce269ddd99da83d3986dffbbb25":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["31741cf1390044e38a2ec3127cf302ba841bfd75","1fe05f332e77cbf262172227a8ab7b0c396db6fe"],"30c8e5574b55d57947e989443dfde611646530ee":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cc018b79379c67835b40b1259cd3dc931df60944"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"1fe05f332e77cbf262172227a8ab7b0c396db6fe":["d05c0bb0fd185ce269ddd99da83d3986dffbbb25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["cc018b79379c67835b40b1259cd3dc931df60944"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"]},"commit2Childs":{"d05c0bb0fd185ce269ddd99da83d3986dffbbb25":["1fe05f332e77cbf262172227a8ab7b0c396db6fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","d722b735bc69d2234e957cb69cf96ad28ea7e1c3"],"30c8e5574b55d57947e989443dfde611646530ee":[],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["30c8e5574b55d57947e989443dfde611646530ee"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"1fe05f332e77cbf262172227a8ab7b0c396db6fe":["cc018b79379c67835b40b1259cd3dc931df60944"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d05c0bb0fd185ce269ddd99da83d3986dffbbb25","cc018b79379c67835b40b1259cd3dc931df60944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d722b735bc69d2234e957cb69cf96ad28ea7e1c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}