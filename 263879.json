{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","commits":[{"id":"ad96108474aafa94aa3be9844152c42c7ed43fca","date":1430010887,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","pathOld":"/dev/null","sourceNew":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    intersections[slot] = intersection;  // save for later\n    int num = collect(intersection, slot);\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faf1236ae092482293a7e0659e347d172185ef6f","date":1430314113,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","sourceNew":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    filters[slot] = rangeQ;\n    intersections[slot] = intersection;  // save for later  // TODO: only save if number of slots is small enough?\n    int num = collect(intersection, slot);\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","sourceOld":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    intersections[slot] = intersection;  // save for later\n    int num = collect(intersection, slot);\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","sourceNew":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    filters[slot] = rangeQ;\n    intersections[slot] = intersection;  // save for later  // TODO: only save if number of slots is small enough?\n    int num = collect(intersection, slot, slotNum -> { return new SlotContext(rangeQ); });\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","sourceOld":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    filters[slot] = rangeQ;\n    intersections[slot] = intersection;  // save for later  // TODO: only save if number of slots is small enough?\n    int num = collect(intersection, slot);\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","sourceNew":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    filters[slot] = rangeQ;\n    intersections[slot] = intersection;  // save for later  // TODO: only save if number of slots is small enough?\n    long num = collect(intersection, slot, slotNum -> { return new SlotContext(rangeQ); });\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","sourceOld":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    filters[slot] = rangeQ;\n    intersections[slot] = intersection;  // save for later  // TODO: only save if number of slots is small enough?\n    int num = collect(intersection, slot, slotNum -> { return new SlotContext(rangeQ); });\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","bugFix":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#rangeStats(Range,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#rangeStats(Range,int).mjava","sourceNew":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    filters[slot] = rangeQ;\n    intersections[slot] = intersection;  // save for later  // TODO: only save if number of slots is small enough?\n    long num = collect(intersection, slot, slotNum -> { return new SlotAcc.SlotContext(rangeQ); });\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","sourceOld":"  private void rangeStats(Range range, int slot) throws IOException {\n    Query rangeQ = sf.getType().getRangeQuery(null, sf, range.low == null ? null : calc.formatValue(range.low), range.high==null ? null : calc.formatValue(range.high), range.includeLower, range.includeUpper);\n    // TODO: specialize count only\n    DocSet intersection = fcontext.searcher.getDocSet(rangeQ, fcontext.base);\n    filters[slot] = rangeQ;\n    intersections[slot] = intersection;  // save for later  // TODO: only save if number of slots is small enough?\n    long num = collect(intersection, slot, slotNum -> { return new SlotContext(rangeQ); });\n    countAcc.incrementCount(slot, num); // TODO: roll this into collect()\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["faf1236ae092482293a7e0659e347d172185ef6f"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad96108474aafa94aa3be9844152c42c7ed43fca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"faf1236ae092482293a7e0659e347d172185ef6f":["ad96108474aafa94aa3be9844152c42c7ed43fca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["1c841e27891873cab110ebeb89f124a8ec470176"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad96108474aafa94aa3be9844152c42c7ed43fca"],"ad96108474aafa94aa3be9844152c42c7ed43fca":["faf1236ae092482293a7e0659e347d172185ef6f"],"faf1236ae092482293a7e0659e347d172185ef6f":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}