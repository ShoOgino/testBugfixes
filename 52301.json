{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","commits":[{"id":"e147cce225492338f15a94a427f51f867da574ee","date":1346365916,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int).mjava","sourceNew":"  /**\n   *\n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * works up to 65537 before requested num of ranges is one short\n   * \n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions) {\n    // some hokey code to partition the int space\n    long range = Integer.MAX_VALUE + (Math.abs((long) Integer.MIN_VALUE));\n    long srange = range / partitions;\n    \n    List<Range> ranges = new ArrayList<Range>(partitions);\n    \n    long end = 0;\n    long start = Integer.MIN_VALUE;\n    \n    while (end < Integer.MAX_VALUE) {\n      end = start + srange;\n      ranges.add(new Range(start, end));\n      start = end + 1L;\n    }\n    \n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","date":1347918051,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","sourceNew":"  /**\n   *\n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","sourceNew":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param partitions\n   * @return Range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","sourceNew":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#partitionRange(int,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashPartitioner#partitionRange(int,int,int).mjava","sourceNew":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * Returns the range for each partition\n   */\n  public List<Range> partitionRange(int partitions, int min, int max) {\n    assert max >= min;\n    if (partitions == 0) return Collections.EMPTY_LIST;\n    long range = (long)max - (long)min;\n    long srange = Math.max(1, range / partitions);\n\n    List<Range> ranges = new ArrayList<Range>(partitions);\n\n    long start = min;\n    long end = start;\n\n    while (end < max) {\n      end = start + srange;\n      // make last range always end exactly on MAX_VALUE\n      if (ranges.size() == partitions - 1) {\n        end = max;\n      }\n      ranges.add(new Range((int)start, (int)end));\n      start = end + 1L;\n    }\n\n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d"],"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d":["e147cce225492338f15a94a427f51f867da574ee"],"c5a558d54519c651068ddb202f03befefb1514a7":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c5a558d54519c651068ddb202f03befefb1514a7"],"e147cce225492338f15a94a427f51f867da574ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e147cce225492338f15a94a427f51f867da574ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5a558d54519c651068ddb202f03befefb1514a7"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e147cce225492338f15a94a427f51f867da574ee","05a14b2611ead08655a2b2bdc61632eb31316e57"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"e147cce225492338f15a94a427f51f867da574ee":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}