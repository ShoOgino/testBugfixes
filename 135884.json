{"path":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","commits":[{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":1,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDeleteReaderReaderConflict().mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory(true);\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.delete(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.delete(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.delete(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    public void testDeleteReaderReaderConflict() throws IOException\n    {\n        Directory dir = getDirectory(true);\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.delete(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.delete(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.delete(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory(true);\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory(true);\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.delete(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.delete(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.delete(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory(true);\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException\n    {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderReaderConflict(boolean).mjava","sourceNew":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","sourceOld":"    private void deleteReaderReaderConflict(boolean optimize) throws IOException {\n        Directory dir = getDirectory();\n\n        Term searchTerm1 = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n        Term searchTerm3 = new Term(\"content\", \"ccc\");\n\n        //  add 100 documents with term : aaa\n        //  add 100 documents with term : bbb\n        //  add 100 documents with term : ccc\n        IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer, searchTerm1.text());\n            addDoc(writer, searchTerm2.text());\n            addDoc(writer, searchTerm3.text());\n        }\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // OPEN TWO READERS\n        // Both readers get segment info as exists at this time\n        IndexReader reader1 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader1, searchTerm3, 100);\n\n        IndexReader reader2 = IndexReader.open(dir, false);\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"first opened\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"first opened\", reader2, searchTerm1, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"first opened\", reader2, searchTerm3, 100);\n\n        // DELETE DOCS FROM READER 2 and CLOSE IT\n        // delete documents containing term: aaa\n        // when the reader is closed, the segment info is updated and\n        // the first reader is now stale\n        reader2.deleteDocuments(searchTerm1);\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        // Make sure reader 1 is unchanged since it was open earlier\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"after delete 1\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm1, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"after delete 1\", reader1, searchTerm3, 100);\n\n\n        // ATTEMPT TO DELETE FROM STALE READER\n        // delete documents containing term: bbb\n        try {\n            reader1.deleteDocuments(searchTerm2);\n            fail(\"Delete allowed from a stale index reader\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // RECREATE READER AND TRY AGAIN\n        reader1.close();\n        reader1 = IndexReader.open(dir, false);\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"reopened\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm2, 100);\n        assertTermDocsCount(\"reopened\", reader1, searchTerm3, 100);\n\n        reader1.deleteDocuments(searchTerm2);\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm1));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm2));\n        assertEquals(\"deleted 2\", 100, reader1.docFreq(searchTerm3));\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm1, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm2, 0);\n        assertTermDocsCount(\"deleted 2\", reader1, searchTerm3, 100);\n        reader1.close();\n\n        // Open another reader to confirm that everything is deleted\n        reader2 = IndexReader.open(dir, false);\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm1));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm2));\n        assertEquals(\"reopened 2\", 100, reader2.docFreq(searchTerm3));\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm1, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm2, 0);\n        assertTermDocsCount(\"reopened 2\", reader2, searchTerm3, 100);\n        reader2.close();\n\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["0018e7a0579df5d3de71d0bd878322a7abef04d9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["66b12ba4967665216eeb706b58d424c51fb3641a"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"66b12ba4967665216eeb706b58d424c51fb3641a":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"66b12ba4967665216eeb706b58d424c51fb3641a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["66b12ba4967665216eeb706b58d424c51fb3641a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}