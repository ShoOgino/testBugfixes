{"path":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( SolrParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( SolrParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c75f91399860246ab9f8ec31c07133ceaa1882d","date":1191270371,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    MultiCore multicore = MultiCore.getRegistry();\n    if( useMultiCore ) {\n      if( request.getCore() != null ) {\n        if( !multicore.isEnabled() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n              \"multicore access is not enabled\" );\n        }\n        core = multicore.getCore( request.getCore() );\n        if( core == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"Unknown core: \"+request.getCore() );\n        }\n      }\n      else {\n        core = multicore.getDefaultCore();\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          useMultiCore && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b","1a45fbd60083428b1b13884c5c8c2e33e7e71ee7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7","date":1198275819,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    MultiCore multicore = MultiCore.getRegistry();\n    if( useMultiCore ) {\n      String c = getDefaultCore();\n      if( request.getCore() != null ) {\n        c = request.getCore();\n      }\n      if( c != null ) {\n        if( !multicore.isEnabled() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n              \"multicore access is not enabled\" );\n        }\n        if( c.length() > 0 ) {\n          core = multicore.getCore( c );\n        }\n        else {\n          core = multicore.getDefaultCore();\n        }\n        if( core == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"Unknown core: \"+c );\n        }\n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"missing core\" );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          useMultiCore && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    MultiCore multicore = MultiCore.getRegistry();\n    if( useMultiCore ) {\n      if( request.getCore() != null ) {\n        if( !multicore.isEnabled() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n              \"multicore access is not enabled\" );\n        }\n        core = multicore.getCore( request.getCore() );\n        if( core == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"Unknown core: \"+request.getCore() );\n        }\n      }\n      else {\n        core = multicore.getDefaultCore();\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          useMultiCore && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f9e70cea495aaf83300e16f5027ed8cb2da59fd","date":1201238296,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    MultiCore multicore = MultiCore.getRegistry();\n    if( useMultiCore ) {\n      String c = getDefaultCore();\n      if( request.getCore() != null ) {\n        c = request.getCore();\n      }\n      if( c != null ) {\n        if( !multicore.isEnabled() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n              \"multicore access is not enabled\" );\n        }\n        if( c.length() > 0 ) {\n          core = multicore.getCore( c );\n        }\n        else {\n          core = multicore.getDefaultCore();\n        }\n        if( core == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"Unknown core: \"+c );\n        }\n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"missing core\" );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          useMultiCore && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      // TODO: writers might be able to output binary someday\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    MultiCore multicore = MultiCore.getRegistry();\n    if( useMultiCore ) {\n      String c = getDefaultCore();\n      if( request.getCore() != null ) {\n        c = request.getCore();\n      }\n      if( c != null ) {\n        if( !multicore.isEnabled() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n              \"multicore access is not enabled\" );\n        }\n        if( c.length() > 0 ) {\n          core = multicore.getCore( c );\n        }\n        else {\n          core = multicore.getDefaultCore();\n        }\n        if( core == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"Unknown core: \"+c );\n        }\n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"missing core\" );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          useMultiCore && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd4fd4f3ce083390e6392c44b17e7437029f0d6b","date":1201280007,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    MultiCore multicore = MultiCore.getRegistry();\n    if( useMultiCore ) {\n      String c = getDefaultCore();\n      if( request.getCore() != null ) {\n        c = request.getCore();\n      }\n      if( c != null ) {\n        if( !multicore.isEnabled() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n              \"multicore access is not enabled\" );\n        }\n        if( c.length() > 0 ) {\n          core = multicore.getCore( c );\n        }\n        else {\n          core = multicore.getDefaultCore();\n        }\n        if( core == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"Unknown core: \"+c );\n        }\n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"missing core\" );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          useMultiCore && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      // TODO: writers might be able to output binary someday\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    MultiCore multicore = MultiCore.getRegistry();\n    if( useMultiCore ) {\n      String c = getDefaultCore();\n      if( request.getCore() != null ) {\n        c = request.getCore();\n      }\n      if( c != null ) {\n        if( !multicore.isEnabled() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n              \"multicore access is not enabled\" );\n        }\n        if( c.length() > 0 ) {\n          core = multicore.getCore( c );\n        }\n        else {\n          core = multicore.getDefaultCore();\n        }\n        if( core == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"Unknown core: \"+c );\n        }\n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"missing core\" );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          useMultiCore && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      // TODO: writers might be able to output binary someday\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41bffa147dec8d55cfa362ef9aca41509819ae04","date":1201997733,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    MultiCore multicore = MultiCore.getRegistry();\n    SolrCore core = this.core;\n    if( core == null ) {\n      core = multicore.getCore( coreName );\n      if( core == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Unknown core: \"+coreName );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreName != null && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      // TODO: writers might be able to output binary someday\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    MultiCore multicore = MultiCore.getRegistry();\n    if( useMultiCore ) {\n      String c = getDefaultCore();\n      if( request.getCore() != null ) {\n        c = request.getCore();\n      }\n      if( c != null ) {\n        if( !multicore.isEnabled() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n              \"multicore access is not enabled\" );\n        }\n        if( c.length() > 0 ) {\n          core = multicore.getCore( c );\n        }\n        else {\n          core = multicore.getDefaultCore();\n        }\n        if( core == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n              \"Unknown core: \"+c );\n        }\n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n            \"missing core\" );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          useMultiCore && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      // TODO: writers might be able to output binary someday\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58b41d4093a9662306bdc051e4b46643deff70de","date":1205090944,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    if( core == null ) {\n      core = multicore.getCore( coreName );\n      if( core == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Unknown core: \"+coreName );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          multicore != null &&\n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      // TODO: writers might be able to output binary someday\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    MultiCore multicore = MultiCore.getRegistry();\n    SolrCore core = this.core;\n    if( core == null ) {\n      core = multicore.getCore( coreName );\n      if( core == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Unknown core: \"+coreName );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreName != null && \n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      // TODO: writers might be able to output binary someday\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed2c4ed5c29fe660a8439d197834decc1649a057","date":1216696633,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    if( core == null ) {\n      core = multicore.getCore( coreName );\n      if( core == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Unknown core: \"+coreName );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          multicore != null &&\n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    if( core == null ) {\n      core = multicore.getCore( coreName );\n      if( core == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Unknown core: \"+coreName );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          multicore != null &&\n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      // TODO: writers might be able to output binary someday\n      \n      req.close();\n      return _processor.processResponse( new StringReader( out.toString() ) );\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4926b5318ba4167d360445a0c5f3fc8af2cf8c49","date":1218678599,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    if( core == null )\n      core = multicore.getCore( coreName );\n    // solr-647\n    //else\n    //  core = core.open();\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          coreName == null? \"No core\": \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          multicore != null &&\n          path.equals( multicore.getAdminPath() ) ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      // solr-647\n      // core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      // solr-647\n      // core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    if( core == null ) {\n      core = multicore.getCore( coreName );\n      if( core == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Unknown core: \"+coreName );\n      }\n    }\n\n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          multicore != null &&\n          path.equals( multicore.getAdminPath() ) && \n          multicore.isEnabled() ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n    \n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2284f4281eb212e60f8318c30e1d67c7d25422a7","date":1218739496,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core = this.core;\n    if( core == null )\n      core = multicore.getCore( coreName );\n    // solr-647\n    //else\n    //  core = core.open();\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          coreName == null? \"No core\": \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          multicore != null &&\n          path.equals( multicore.getAdminPath() ) ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      // solr-647\n      // core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      // solr-647\n      // core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for multicore action\n    SolrCore core = this.core;\n    if( core == null )\n      core = multicore.getCore( coreName );\n    // solr-647\n    //else\n    //  core = core.open();\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          coreName == null? \"No core\": \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          multicore != null &&\n          path.equals( multicore.getAdminPath() ) ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      // solr-647\n      // core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      // solr-647\n      // core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core = this.core;\n    if( core == null )\n      core = multicore.getCore( coreName );\n    // solr-647\n    //else\n    //  core = core.open();\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          coreName == null? \"No core\": \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          multicore != null &&\n          path.equals( multicore.getAdminPath() ) ) {\n        handler = multicore.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      // solr-647\n      // core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      // solr-647\n      // core.close();\n    }\n  }\n\n","bugFix":["41bffa147dec8d55cfa362ef9aca41509819ae04","4926b5318ba4167d360445a0c5f3fc8af2cf8c49","58b41d4093a9662306bdc051e4b46643deff70de","048361614025800e582bfc7a7b0329dc6fd6a95e"],"bugIntro":["3a5e336414841f2315620497003210b2447553a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    try {\n      SolrQueryRequest req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      req.close();\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ed2c4ed5c29fe660a8439d197834decc1649a057":["58b41d4093a9662306bdc051e4b46643deff70de"],"41bffa147dec8d55cfa362ef9aca41509819ae04":["dd4fd4f3ce083390e6392c44b17e7437029f0d6b"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"58b41d4093a9662306bdc051e4b46643deff70de":["41bffa147dec8d55cfa362ef9aca41509819ae04"],"6c75f91399860246ab9f8ec31c07133ceaa1882d":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"e3602d5eab954caecc726ab136ad580ac1ceb917":["c28792ff7d1774c306e16afbd44ded91a417049b"],"2284f4281eb212e60f8318c30e1d67c7d25422a7":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["ed2c4ed5c29fe660a8439d197834decc1649a057"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["6c75f91399860246ab9f8ec31c07133ceaa1882d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd4fd4f3ce083390e6392c44b17e7437029f0d6b":["4f9e70cea495aaf83300e16f5027ed8cb2da59fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f9e70cea495aaf83300e16f5027ed8cb2da59fd":["1a45fbd60083428b1b13884c5c8c2e33e7e71ee7"]},"commit2Childs":{"ed2c4ed5c29fe660a8439d197834decc1649a057":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"41bffa147dec8d55cfa362ef9aca41509819ae04":["58b41d4093a9662306bdc051e4b46643deff70de"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"58b41d4093a9662306bdc051e4b46643deff70de":["ed2c4ed5c29fe660a8439d197834decc1649a057"],"c28792ff7d1774c306e16afbd44ded91a417049b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"6c75f91399860246ab9f8ec31c07133ceaa1882d":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["6c75f91399860246ab9f8ec31c07133ceaa1882d"],"1a45fbd60083428b1b13884c5c8c2e33e7e71ee7":["4f9e70cea495aaf83300e16f5027ed8cb2da59fd"],"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"2284f4281eb212e60f8318c30e1d67c7d25422a7":["c28792ff7d1774c306e16afbd44ded91a417049b"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["1a45fbd60083428b1b13884c5c8c2e33e7e71ee7"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd4fd4f3ce083390e6392c44b17e7437029f0d6b":["41bffa147dec8d55cfa362ef9aca41509819ae04"],"4f9e70cea495aaf83300e16f5027ed8cb2da59fd":["dd4fd4f3ce083390e6392c44b17e7437029f0d6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}