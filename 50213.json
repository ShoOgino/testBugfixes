{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","commits":[{"id":"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275","date":1458043999,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues().size(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMinPackedValue(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMaxPackedValue(\"field\"));\n\n    assertEquals(\"term\", leafReader.getBinaryDocValues(\"field\").get(0).utf8ToString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","sourceNew":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues().size(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMinPackedValue(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMaxPackedValue(\"field\"));\n\n    BinaryDocValues dvs = leafReader.getBinaryDocValues(\"field\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(\"term\", dvs.binaryValue().utf8ToString());\n  }\n\n","sourceOld":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues().size(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMinPackedValue(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMaxPackedValue(\"field\"));\n\n    assertEquals(\"term\", leafReader.getBinaryDocValues(\"field\").get(0).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","sourceNew":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues().size(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMinPackedValue(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMaxPackedValue(\"field\"));\n\n    BinaryDocValues dvs = leafReader.getBinaryDocValues(\"field\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(\"term\", dvs.binaryValue().utf8ToString());\n  }\n\n","sourceOld":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues().size(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMinPackedValue(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMaxPackedValue(\"field\"));\n\n    assertEquals(\"term\", leafReader.getBinaryDocValues(\"field\").get(0).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","sourceNew":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues(\"field\").size());\n    assertArrayEquals(packedPoint, leafReader.getPointValues(\"field\").getMinPackedValue());\n    assertArrayEquals(packedPoint, leafReader.getPointValues(\"field\").getMaxPackedValue());\n\n    BinaryDocValues dvs = leafReader.getBinaryDocValues(\"field\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(\"term\", dvs.binaryValue().utf8ToString());\n  }\n\n","sourceOld":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues().size(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMinPackedValue(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMaxPackedValue(\"field\"));\n\n    BinaryDocValues dvs = leafReader.getBinaryDocValues(\"field\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(\"term\", dvs.binaryValue().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testIndexingPointsAndDocValues().mjava","sourceNew":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues(\"field\").size());\n    assertArrayEquals(packedPoint, leafReader.getPointValues(\"field\").getMinPackedValue());\n    assertArrayEquals(packedPoint, leafReader.getPointValues(\"field\").getMaxPackedValue());\n\n    BinaryDocValues dvs = leafReader.getBinaryDocValues(\"field\");\n    assertEquals(0, dvs.nextDoc());\n    assertEquals(\"term\", dvs.binaryValue().utf8ToString());\n  }\n\n","sourceOld":"  public void testIndexingPointsAndDocValues() throws Exception {\n    FieldType type = new FieldType();\n    type.setDimensions(1, 4);\n    type.setDocValuesType(DocValuesType.BINARY);\n    type.freeze();\n    Document doc = new Document();\n    byte[] packedPoint = \"term\".getBytes(StandardCharsets.UTF_8);\n    doc.add(new BinaryPoint(\"field\", packedPoint, type));\n    MemoryIndex mi = MemoryIndex.fromDocument(doc, analyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    assertEquals(1, leafReader.getPointValues().size(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMinPackedValue(\"field\"));\n    assertArrayEquals(packedPoint, leafReader.getPointValues().getMaxPackedValue(\"field\"));\n\n    assertEquals(\"term\", leafReader.getBinaryDocValues(\"field\").get(0).utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}