{"path":"src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","commits":[{"id":"5391288921372c32bf6096df320497ad2d05757f","date":1200634221,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationMap(Config).mjava","sourceNew":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","sourceOld":"  private Map<String, ElevationObj> loadElevationMap( Config cfg ) throws IOException\n  {\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    Map<String, ElevationObj> map = new HashMap<String, ElevationObj>();\n    NodeList nodes = (NodeList)cfg.evaluate( \"elevate/query\", XPathConstants.NODESET );\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item( i );\n      String qstr = DOMUtil.getAttr( node, \"text\", \"missing query 'text'\" );\n      \n      NodeList children = null;\n      try {\n        children = (NodeList)xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } \n      catch (XPathExpressionException e) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"query requires '<doc .../>' child\" );\n      }\n\n      ArrayList<String> include = new ArrayList<String>();\n      ArrayList<String> exclude = new ArrayList<String>();\n      for (int j=0; j<children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr( child, \"id\", \"missing 'id'\" );\n        String e = DOMUtil.getAttr( child, EXCLUDE, null );\n        if( e != null ) {\n          if( Boolean.valueOf( e ) ) {\n            exclude.add( id );\n            continue;\n          }\n        }\n        include.add( id );\n      }\n      \n      ElevationObj elev = new ElevationObj( qstr, include, exclude );\n      if( map.containsKey( elev.analyzed ) ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n            \"Boosting query defined twice for query: '\"+elev.text+\"' (\"+elev.analyzed+\"')\" );\n      }\n      map.put( elev.analyzed, elev );\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5391288921372c32bf6096df320497ad2d05757f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5391288921372c32bf6096df320497ad2d05757f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5391288921372c32bf6096df320497ad2d05757f":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5391288921372c32bf6096df320497ad2d05757f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}