{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random();\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random();\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      LightAutomaton a = BasicAutomata.makeCharRangeLight(startCode, endCode);\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random();\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random();\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      Automaton a = Automata.makeCharRange(startCode, endCode);\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random();\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      LightAutomaton a = BasicAutomata.makeCharRangeLight(startCode, endCode);\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random();\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      Automaton a = Automata.makeCharRange(startCode, endCode);\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random();\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}