{"path":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#totalTermFreq(Term).mjava","commits":[{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    ensureOpen();\n    long total = 0;        // sum freqs in subreaders\n    for (int i = 0; i < subReaders.length; i++) {\n      long sub = subReaders[i].totalTermFreq(term);\n      if (sub == -1) {\n        return -1;\n      }\n      total += sub;\n    }\n    return total;\n  }\n\n","sourceOld":"  @Override\n  public final int docFreq(String field, BytesRef t) throws IOException {\n    ensureOpen();\n    int total = 0;          // sum freqs in subreaders\n    for (int i = 0; i < subReaders.length; i++) {\n      total += subReaders[i].docFreq(field, t);\n    }\n    return total;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#totalTermFreq(Term).mjava","sourceNew":"  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    ensureOpen();\n    long total = 0;        // sum freqs in subreaders\n    for (int i = 0; i < subReaders.length; i++) {\n      long sub = subReaders[i].totalTermFreq(term);\n      assert sub >= 0;\n      assert sub <= subReaders[i].getSumTotalTermFreq(term.field());\n      total += sub;\n    }\n    return total;\n  }\n\n","sourceOld":"  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    ensureOpen();\n    long total = 0;        // sum freqs in subreaders\n    for (int i = 0; i < subReaders.length; i++) {\n      long sub = subReaders[i].totalTermFreq(term);\n      if (sub == -1) {\n        return -1;\n      }\n      total += sub;\n    }\n    return total;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#totalTermFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BaseCompositeReader#totalTermFreq(Term).mjava","sourceNew":"  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    ensureOpen();\n    long total = 0;        // sum freqs in subreaders\n    for (int i = 0; i < subReaders.length; i++) {\n      long sub = subReaders[i].totalTermFreq(term);\n      assert sub >= 0;\n      assert sub <= subReaders[i].getSumTotalTermFreq(term.field());\n      total += sub;\n    }\n    return total;\n  }\n\n","sourceOld":"  @Override\n  public final long totalTermFreq(Term term) throws IOException {\n    ensureOpen();\n    long total = 0;        // sum freqs in subreaders\n    for (int i = 0; i < subReaders.length; i++) {\n      long sub = subReaders[i].totalTermFreq(term);\n      if (sub == -1) {\n        return -1;\n      }\n      total += sub;\n    }\n    return total;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b6a0e3c1c21aac8ecf75706605133012833585c7","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}