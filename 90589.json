{"path":"backwards/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanNearExact() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977});\n\n    assertTrue(searcher.explain(query, 77).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue() > 0.0f);\n\n    QueryUtils.check(term1);\n    QueryUtils.check(term2);\n    QueryUtils.checkUnequal(term1,term2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNearExact().mjava","sourceNew":"  public void testSpanNearExact() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977});\n\n    assertTrue(searcher.explain(query, 77).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue() > 0.0f);\n\n    QueryUtils.check(term1);\n    QueryUtils.check(term2);\n    QueryUtils.checkUnequal(term1,term2);\n  }\n\n","sourceOld":"  public void testSpanNearExact() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"seven\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            0, true);\n    checkHits(query, new int[]\n      {77, 177, 277, 377, 477, 577, 677, 777, 877, 977});\n\n    assertTrue(searcher.explain(query, 77).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 977).getValue() > 0.0f);\n\n    QueryUtils.check(term1);\n    QueryUtils.check(term2);\n    QueryUtils.checkUnequal(term1,term2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}