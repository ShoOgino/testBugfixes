{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#asMatches(IntervalIterator,MatchesIterator,int).mjava","commits":[{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#asMatches(IntervalIterator,MatchesIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  static MatchesIterator asMatches(IntervalIterator iterator, MatchesIterator source, int doc) throws IOException {\n    if (source == null) {\n      return null;\n    }\n    if (iterator.advance(doc) != doc) {\n      return null;\n    }\n    if (iterator.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new MatchesIterator() {\n\n      boolean cached = true;\n\n      @Override\n      public boolean next() throws IOException {\n        if (cached) {\n          cached = false;\n          return true;\n        }\n        return iterator.nextInterval() != IntervalIterator.NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public int startPosition() {\n        return source.startPosition();\n      }\n\n      @Override\n      public int endPosition() {\n        return source.endPosition();\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return source.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return source.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() throws IOException {\n        return source.getSubMatches();\n      }\n\n      @Override\n      public Query getQuery() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f272fe1542bca669076ff8ed44b298b316ab4aa5","date":1546365319,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#asMatches(IntervalIterator,MatchesIterator,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#asMatches(IntervalIterator,MatchesIterator,int).mjava","sourceNew":"  static MatchesIterator asMatches(IntervalIterator iterator, MatchesIterator source, int doc) throws IOException {\n    if (source == null) {\n      return null;\n    }\n    if (iterator.advance(doc) != doc) {\n      return null;\n    }\n    if (iterator.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new MatchesIterator() {\n\n      boolean cached = true;\n\n      @Override\n      public boolean next() throws IOException {\n        if (cached) {\n          cached = false;\n          return true;\n        }\n        return iterator.nextInterval() != IntervalIterator.NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public int startPosition() {\n        return iterator.start();\n      }\n\n      @Override\n      public int endPosition() {\n        return iterator.end();\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return source.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return source.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() throws IOException {\n        return source.getSubMatches();\n      }\n\n      @Override\n      public Query getQuery() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  static MatchesIterator asMatches(IntervalIterator iterator, MatchesIterator source, int doc) throws IOException {\n    if (source == null) {\n      return null;\n    }\n    if (iterator.advance(doc) != doc) {\n      return null;\n    }\n    if (iterator.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new MatchesIterator() {\n\n      boolean cached = true;\n\n      @Override\n      public boolean next() throws IOException {\n        if (cached) {\n          cached = false;\n          return true;\n        }\n        return iterator.nextInterval() != IntervalIterator.NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public int startPosition() {\n        return source.startPosition();\n      }\n\n      @Override\n      public int endPosition() {\n        return source.endPosition();\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return source.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return source.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() throws IOException {\n        return source.getSubMatches();\n      }\n\n      @Override\n      public Query getQuery() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalMatches#asMatches(IntervalIterator,MatchesIterator,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#asMatches(IntervalIterator,MatchesIterator,int).mjava","sourceNew":"  static MatchesIterator asMatches(IntervalIterator iterator, MatchesIterator source, int doc) throws IOException {\n    if (source == null) {\n      return null;\n    }\n    if (iterator.advance(doc) != doc) {\n      return null;\n    }\n    if (iterator.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new MatchesIterator() {\n\n      boolean cached = true;\n\n      @Override\n      public boolean next() throws IOException {\n        if (cached) {\n          cached = false;\n          return true;\n        }\n        return iterator.nextInterval() != IntervalIterator.NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public int startPosition() {\n        return iterator.start();\n      }\n\n      @Override\n      public int endPosition() {\n        return iterator.end();\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return source.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return source.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() throws IOException {\n        return source.getSubMatches();\n      }\n\n      @Override\n      public Query getQuery() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  static MatchesIterator asMatches(IntervalIterator iterator, MatchesIterator source, int doc) throws IOException {\n    if (source == null) {\n      return null;\n    }\n    if (iterator.advance(doc) != doc) {\n      return null;\n    }\n    if (iterator.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new MatchesIterator() {\n\n      boolean cached = true;\n\n      @Override\n      public boolean next() throws IOException {\n        if (cached) {\n          cached = false;\n          return true;\n        }\n        return iterator.nextInterval() != IntervalIterator.NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public int startPosition() {\n        return iterator.start();\n      }\n\n      @Override\n      public int endPosition() {\n        return iterator.end();\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return source.startOffset();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return source.endOffset();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() throws IOException {\n        return source.getSubMatches();\n      }\n\n      @Override\n      public Query getQuery() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2375622520a4e480775e3104a2f9a423536755b4"],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"2375622520a4e480775e3104a2f9a423536755b4":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}