{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lock();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, coll -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n        Iterator<ReplicaInfo> it = replicas.iterator();\n        while (it.hasNext()) {\n          ReplicaInfo ri = it.next();\n          if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n            it.remove();\n          }\n        }\n      });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simDeleteShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Delete a shard. This uses a similar algorithm as {@link org.apache.solr.cloud.api.collections.DeleteShardCmd}\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simDeleteShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    if (collection == null) {\n      throw new Exception(\"Collection \" + collectionName + \" doesn't exist\");\n    }\n    Slice slice = collection.getSlice(sliceName);\n    if (slice == null) {\n      throw new Exception(\" Collection \" + collectionName + \" slice \" + sliceName + \" doesn't exist.\");\n    }\n\n    opDelay(collectionName, CollectionParams.CollectionAction.DELETESHARD.name());\n\n    lock.lockInterruptibly();\n    try {\n      sliceProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      colShardReplicaMap.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>()).remove(sliceName);\n      nodeReplicaMap.forEach((n, replicas) -> {\n          synchronized (replicas) {\n            Iterator<ReplicaInfo> it = replicas.iterator();\n            while (it.hasNext()) {\n              ReplicaInfo ri = it.next();\n              if (ri.getCollection().equals(collectionName) && ri.getShard().equals(sliceName)) {\n                it.remove();\n              }\n            }\n          }\n        });\n      collectionsStatesRef.set(null);\n      results.add(\"success\", \"\");\n    } catch (Exception e) {\n      results.add(\"failure\", e.toString());\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"9c6c0dad4932399aec99b4818086cb1772773916":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["9c6c0dad4932399aec99b4818086cb1772773916"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["9c6c0dad4932399aec99b4818086cb1772773916","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"9c6c0dad4932399aec99b4818086cb1772773916":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"b94236357aaa22b76c10629851fe4e376e0cea82":["9c6c0dad4932399aec99b4818086cb1772773916"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}