{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStragey#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","commits":[{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStragey#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, true, false, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"802a334e6d4a20dcfbb4061fd25c74375368534b","date":1348220248,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStragey#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStragey#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, true, false, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, true, false, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa4fd6bd0250f1b712cd202e24c0366da728d40","date":1348220703,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStragey#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, true, false, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, true, false, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaa4fd6bd0250f1b712cd202e24c0366da728d40":["802a334e6d4a20dcfbb4061fd25c74375368534b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"802a334e6d4a20dcfbb4061fd25c74375368534b":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aaa4fd6bd0250f1b712cd202e24c0366da728d40"]},"commit2Childs":{"aaa4fd6bd0250f1b712cd202e24c0366da728d40":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"802a334e6d4a20dcfbb4061fd25c74375368534b":["aaa4fd6bd0250f1b712cd202e24c0366da728d40"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["802a334e6d4a20dcfbb4061fd25c74375368534b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}