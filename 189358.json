{"path":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","commits":[{"id":"b893541afcaa76dcbac2fcd24bbfa05ca6b41129","date":1342450620,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","sourceNew":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void setReader(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n  }\n\n","sourceOld":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void reset(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void setReader(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void setReader(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","sourceNew":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n    assert setReaderTestPoint();\n  }\n\n","sourceOld":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void setReader(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","sourceNew":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n    assert setReaderTestPoint();\n  }\n\n","sourceOld":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void setReader(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","sourceNew":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    if (input == null) {\n      throw new NullPointerException(\"input must not be null\");\n    }\n    this.input = ILLEGAL_STATE_READER;\n    this.inputPending = input;\n    assert setReaderTestPoint();\n  }\n\n","sourceOld":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    assert input != null: \"input must not be null\";\n    this.input = input;\n    assert setReaderTestPoint();\n  }\n\n","bugFix":null,"bugIntro":["99c9d8533c954f661481ae44273622957dbf572f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","sourceNew":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    if (input == null) {\n      throw new NullPointerException(\"input must not be null\");\n    } else if (this.input != ILLEGAL_STATE_READER) {\n      throw new IllegalStateException(\"TokenStream contract violation: close() call missing\");\n    }\n    this.inputPending = input;\n    assert setReaderTestPoint();\n  }\n\n","sourceOld":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    if (input == null) {\n      throw new NullPointerException(\"input must not be null\");\n    }\n    this.input = ILLEGAL_STATE_READER;\n    this.inputPending = input;\n    assert setReaderTestPoint();\n  }\n\n","bugFix":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529","date":1419024596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","sourceNew":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    if (input == null) {\n      throw new NullPointerException(\"input must not be null\");\n    } else if (this.input != ILLEGAL_STATE_READER) {\n      throw new IllegalStateException(\"TokenStream contract violation: close() call missing\");\n    }\n    this.inputPending = input;\n    setReaderTestPoint();\n  }\n\n","sourceOld":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    if (input == null) {\n      throw new NullPointerException(\"input must not be null\");\n    } else if (this.input != ILLEGAL_STATE_READER) {\n      throw new IllegalStateException(\"TokenStream contract violation: close() call missing\");\n    }\n    this.inputPending = input;\n    assert setReaderTestPoint();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e859719dc778fb66d3d21e7be08cd408fc2bde98","date":1446717611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Tokenizer#setReader(Reader).mjava","sourceNew":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) {\n    if (input == null) {\n      throw new NullPointerException(\"input must not be null\");\n    } else if (this.input != ILLEGAL_STATE_READER) {\n      throw new IllegalStateException(\"TokenStream contract violation: close() call missing\");\n    }\n    this.inputPending = input;\n    setReaderTestPoint();\n  }\n\n","sourceOld":"  /** Expert: Set a new reader on the Tokenizer.  Typically, an\n   *  analyzer (in its tokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public final void setReader(Reader input) throws IOException {\n    if (input == null) {\n      throw new NullPointerException(\"input must not be null\");\n    } else if (this.input != ILLEGAL_STATE_READER) {\n      throw new IllegalStateException(\"TokenStream contract violation: close() call missing\");\n    }\n    this.inputPending = input;\n    setReaderTestPoint();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"4c1b87b155748a27fbed84a0ffb3f8799177451e":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["4c1b87b155748a27fbed84a0ffb3f8799177451e"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b893541afcaa76dcbac2fcd24bbfa05ca6b41129"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["99c9d8533c954f661481ae44273622957dbf572f"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e859719dc778fb66d3d21e7be08cd408fc2bde98"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"4c1b87b155748a27fbed84a0ffb3f8799177451e":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","05a14b2611ead08655a2b2bdc61632eb31316e57"],"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["99c9d8533c954f661481ae44273622957dbf572f"],"b893541afcaa76dcbac2fcd24bbfa05ca6b41129":["4c1b87b155748a27fbed84a0ffb3f8799177451e","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b893541afcaa76dcbac2fcd24bbfa05ca6b41129","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}