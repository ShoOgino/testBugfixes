{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","commits":[{"id":"86358218bb481e768241fd45cac8aad053098183","date":1359591971,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    long hours = millis / 3600000;\n    long minutes = (millis / 60000) % 60;\n    long seconds = (millis / 1000) % 60;\n    long milliseconds = millis % 1000;\n    if (hours>0) {\n      System.out.println(String.format(\"Time taken: %02d:%02d:%02d.%03d\", hours, minutes, seconds, milliseconds));\n    } else if (minutes>0) {\n      System.out.println(String.format(\"Time taken: %02d:%02d.%03d\", minutes, seconds, milliseconds));\n    } else {\n      System.out.println(String.format(\"Time taken: %d.%03ds\", seconds, milliseconds));\n    }\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6995359b5372263902f1eb7cfa813b4a18da7959","date":1359602338,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","sourceNew":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    // TODO: if the intent is user-display: this should use SimpleDateFormat \n    // or similar instead of homemade formatting.\n    long hours = millis / 3600000;\n    long minutes = (millis / 60000) % 60;\n    long seconds = (millis / 1000) % 60;\n    long milliseconds = millis % 1000;\n    if (hours>0) {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %02d:%02d:%02d.%03d\", hours, minutes, seconds, milliseconds));\n    } else if (minutes>0) {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %02d:%02d.%03d\", minutes, seconds, milliseconds));\n    } else {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %d.%03ds\", seconds, milliseconds));\n    }\n }\n\n","sourceOld":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    long hours = millis / 3600000;\n    long minutes = (millis / 60000) % 60;\n    long seconds = (millis / 1000) % 60;\n    long milliseconds = millis % 1000;\n    if (hours>0) {\n      System.out.println(String.format(\"Time taken: %02d:%02d:%02d.%03d\", hours, minutes, seconds, milliseconds));\n    } else if (minutes>0) {\n      System.out.println(String.format(\"Time taken: %02d:%02d.%03d\", minutes, seconds, milliseconds));\n    } else {\n      System.out.println(String.format(\"Time taken: %d.%03ds\", seconds, milliseconds));\n    }\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    // TODO: if the intent is user-display: this should use SimpleDateFormat \n    // or similar instead of homemade formatting.\n    long hours = millis / 3600000;\n    long minutes = (millis / 60000) % 60;\n    long seconds = (millis / 1000) % 60;\n    long milliseconds = millis % 1000;\n    if (hours>0) {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %02d:%02d:%02d.%03d\", hours, minutes, seconds, milliseconds));\n    } else if (minutes>0) {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %02d:%02d.%03d\", minutes, seconds, milliseconds));\n    } else {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %d.%03ds\", seconds, milliseconds));\n    }\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4adb9b82dcd0732b4d4d4514d683f518b7649e42","date":1359628385,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","sourceNew":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    SimpleDateFormat df = new SimpleDateFormat(\"H:mm:ss.SSS\", Locale.getDefault());\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    System.out.println(\"Time spent: \"+df.format(new Date(millis)));\n  }\n\n","sourceOld":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    // TODO: if the intent is user-display: this should use SimpleDateFormat \n    // or similar instead of homemade formatting.\n    long hours = millis / 3600000;\n    long minutes = (millis / 60000) % 60;\n    long seconds = (millis / 1000) % 60;\n    long milliseconds = millis % 1000;\n    if (hours>0) {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %02d:%02d:%02d.%03d\", hours, minutes, seconds, milliseconds));\n    } else if (minutes>0) {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %02d:%02d.%03d\", minutes, seconds, milliseconds));\n    } else {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %d.%03ds\", seconds, milliseconds));\n    }\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","date":1359670147,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","sourceNew":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    SimpleDateFormat df = new SimpleDateFormat(\"H:mm:ss.SSS\", Locale.getDefault());\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    System.out.println(\"Time spent: \"+df.format(new Date(millis)));\n  }\n\n","sourceOld":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    // TODO: if the intent is user-display: this should use SimpleDateFormat \n    // or similar instead of homemade formatting.\n    long hours = millis / 3600000;\n    long minutes = (millis / 60000) % 60;\n    long seconds = (millis / 1000) % 60;\n    long milliseconds = millis % 1000;\n    if (hours>0) {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %02d:%02d:%02d.%03d\", hours, minutes, seconds, milliseconds));\n    } else if (minutes>0) {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %02d:%02d.%03d\", minutes, seconds, milliseconds));\n    } else {\n      System.out.println(String.format(Locale.getDefault(), \"Time taken: %d.%03ds\", seconds, milliseconds));\n    }\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#displayTiming(long).mjava","sourceNew":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    SimpleDateFormat df = new SimpleDateFormat(\"H:mm:ss.SSS\", Locale.getDefault());\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    CLIO.out(\"Time spent: \"+df.format(new Date(millis)));\n  }\n\n","sourceOld":"  /**\n   * Pretty prints the number of milliseconds taken to post the content to Solr\n   * @param millis the time in milliseconds\n   */\n  private void displayTiming(long millis) {\n    SimpleDateFormat df = new SimpleDateFormat(\"H:mm:ss.SSS\", Locale.getDefault());\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    System.out.println(\"Time spent: \"+df.format(new Date(millis)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":["61d5f95d14e5b9b046998c51e16709a398c15226","4adb9b82dcd0732b4d4d4514d683f518b7649e42"],"61d5f95d14e5b9b046998c51e16709a398c15226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6995359b5372263902f1eb7cfa813b4a18da7959"],"86358218bb481e768241fd45cac8aad053098183":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6995359b5372263902f1eb7cfa813b4a18da7959":["86358218bb481e768241fd45cac8aad053098183"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4adb9b82dcd0732b4d4d4514d683f518b7649e42":["6995359b5372263902f1eb7cfa813b4a18da7959"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["4adb9b82dcd0732b4d4d4514d683f518b7649e42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":[],"61d5f95d14e5b9b046998c51e16709a398c15226":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86"],"86358218bb481e768241fd45cac8aad053098183":["6995359b5372263902f1eb7cfa813b4a18da7959"],"6995359b5372263902f1eb7cfa813b4a18da7959":["61d5f95d14e5b9b046998c51e16709a398c15226","4adb9b82dcd0732b4d4d4514d683f518b7649e42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61d5f95d14e5b9b046998c51e16709a398c15226","86358218bb481e768241fd45cac8aad053098183"],"4adb9b82dcd0732b4d4d4514d683f518b7649e42":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}