{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","sourceNew":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","sourceNew":"  /**\n   * Highlights terms in the  text , extracting the most relevant sections\n   * and concatenating the chosen fragments with a separator (typically \"...\").\n   * The document text is analysed in chunks to record hit statistics\n   * across the document. After accumulating stats, the fragments with the highest scores\n   * are returned in order as \"separator\" delimited strings.\n   *\n   * @param text        text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n   *\n   * @return highlighted text\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String getBestFragments(\n    TokenStream tokenStream,\n    String text,\n    int maxNumFragments,\n    String separator)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    String sections[] =  getBestFragments(tokenStream,text, maxNumFragments);\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < sections.length; i++)\n    {\n      if (i > 0)\n      {\n        result.append(separator);\n      }\n      result.append(sections[i]);\n    }\n    return result.toString();\n  }\n\n","sourceOld":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}