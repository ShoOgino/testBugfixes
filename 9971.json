{"path":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676","date":1398736164,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file, true);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file, true);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file, true);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60","date":1417468898,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(name, file, true);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(file, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(name, file, true);\n  }\n\n","sourceOld":"  /** Creates a new, empty file in the directory with the given name. Returns a stream writing this file. */\n  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(name, file, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e12d86b6c563341330016a95710e4dedbfa7ef1","date":1466431399,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    if (fileMap.putIfAbsent(name, file) != null) {\n      throw new FileAlreadyExistsException(name);\n    }\n    return new RAMOutputStream(name, file, true);\n  }\n\n","sourceOld":"  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(name, file, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    if (fileMap.putIfAbsent(name, file) != null) {\n      throw new FileAlreadyExistsException(name);\n    }\n    return new RAMOutputStream(name, file, true);\n  }\n\n","sourceOld":"  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(name, file, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    if (fileMap.putIfAbsent(name, file) != null) {\n      throw new FileAlreadyExistsException(name);\n    }\n    return new RAMOutputStream(name, file, true);\n  }\n\n","sourceOld":"  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    RAMFile existing = fileMap.remove(name);\n    if (existing != null) {\n      sizeInBytes.addAndGet(-existing.sizeInBytes);\n      existing.directory = null;\n    }\n    fileMap.put(name, file);\n    return new RAMOutputStream(name, file, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#createOutput(String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexOutput createOutput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    RAMFile file = newRAMFile();\n    if (fileMap.putIfAbsent(name, file) != null) {\n      throw new FileAlreadyExistsException(name);\n    }\n    return new RAMOutputStream(name, file, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["867e3d9153fb761456b54a9dcce566e1545c5ef6","4e12d86b6c563341330016a95710e4dedbfa7ef1"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d77dafd89756a5161d244985903e3487ca109182":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"4e12d86b6c563341330016a95710e4dedbfa7ef1":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8833cc981e4be2dcfe8c6b5ca2781c59e1124a60"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["867e3d9153fb761456b54a9dcce566e1545c5ef6","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","8833cc981e4be2dcfe8c6b5ca2781c59e1124a60"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["d77dafd89756a5161d244985903e3487ca109182","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8833cc981e4be2dcfe8c6b5ca2781c59e1124a60":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e12d86b6c563341330016a95710e4dedbfa7ef1":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","4e12d86b6c563341330016a95710e4dedbfa7ef1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}