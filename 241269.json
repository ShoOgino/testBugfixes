{"path":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    MockRAMDirectory ramDir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    MockRAMDirectory ramDir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    MockRAMDirectory ramDir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    MockRAMDirectory ramDir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    MaxFreqCollector c = new MaxFreqCollector();\n    searcher.search(query, c);\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, c.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    // returns the max Scorer.freq() found, because even though norms are omitted, many index stats are different\n    // with these different tokens/distributions/lengths.. otherwise this test is very fragile.\n    return c.max; \n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    MaxFreqCollector c = new MaxFreqCollector();\n    searcher.search(query, c);\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, c.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    reader.close();\n    ramDir.close();\n\n    // returns the max Scorer.freq() found, because even though norms are omitted, many index stats are different\n    // with these different tokens/distributions/lengths.. otherwise this test is very fragile.\n    return c.max; \n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    MaxFreqCollector c = new MaxFreqCollector();\n    searcher.search(query, c);\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, c.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    // returns the max Scorer.freq() found, because even though norms are omitted, many index stats are different\n    // with these different tokens/distributions/lengths.. otherwise this test is very fragile.\n    return c.max; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    MaxFreqCollector c = new MaxFreqCollector();\n    searcher.search(query, c);\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, c.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    reader.close();\n    ramDir.close();\n\n    // returns the max Scorer.freq() found, because even though norms are omitted, many index stats are different\n    // with these different tokens/distributions/lengths.. otherwise this test is very fragile.\n    return c.max; \n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    MaxFreqCollector c = new MaxFreqCollector();\n    searcher.search(query, c);\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, c.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    searcher.close();\n    reader.close();\n    ramDir.close();\n\n    // returns the max Scorer.freq() found, because even though norms are omitted, many index stats are different\n    // with these different tokens/distributions/lengths.. otherwise this test is very fragile.\n    return c.max; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    MaxFreqCollector c = new MaxFreqCollector();\n    searcher.search(query, c);\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, c.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    reader.close();\n    ramDir.close();\n\n    // returns the max Scorer.freq() found, because even though norms are omitted, many index stats are different\n    // with these different tokens/distributions/lengths.. otherwise this test is very fragile.\n    return c.max; \n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, ramDir, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    IndexSearcher searcher = newSearcher(reader);\n    MaxFreqCollector c = new MaxFreqCollector();\n    searcher.search(query, c);\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, c.totalHits);\n\n    //QueryUtils.check(query,searcher);\n    writer.close();\n    reader.close();\n    ramDir.close();\n\n    // returns the max Scorer.freq() found, because even though norms are omitted, many index stats are different\n    // with these different tokens/distributions/lengths.. otherwise this test is very fragile.\n    return c.max; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"c084e47df29de3330311d69dabf515ceaa989512":["c7f8e68717c68517265937c911e1ce9f25750247"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5f4e87790277826a2aea119328600dfb07761f32":["c7f8e68717c68517265937c911e1ce9f25750247","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"c7f8e68717c68517265937c911e1ce9f25750247":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}