{"path":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1();\n    Directory dir2 = getDir2();\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    d = new Document();\n    d.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", TextField.TYPE_STORED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", TextField.TYPE_STORED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIsOptimized().mjava","sourceNew":null,"sourceOld":"  public void testIsOptimized() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    \n    // add another document to ensure that the indexes are not optimized\n    IndexWriter modifier = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document d = new Document();\n    d.add(newField(\"f1\", \"v1\", TextField.TYPE_STORED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    modifier = new IndexWriter(\n        dir2,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    d = new Document();\n    d.add(newField(\"f2\", \"v2\", TextField.TYPE_STORED));\n    modifier.addDocument(d);\n    modifier.close();\n\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    assertFalse(pr.isOptimized());\n    pr.close();\n    \n    modifier = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // just one of the two indexes are optimized\n    assertFalse(pr.isOptimized());\n    pr.close();\n\n    \n    modifier = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    modifier.optimize();\n    modifier.close();\n    \n    pr = new ParallelReader();\n    pr.add(IndexReader.open(dir1, false));\n    pr.add(IndexReader.open(dir2, false));\n    // now both indexes are optimized\n    assertTrue(pr.isOptimized());\n    pr.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}