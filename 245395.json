{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","commits":[{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","pathOld":"/dev/null","sourceNew":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getSegmentCodecs() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","pathOld":"/dev/null","sourceNew":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getSegmentCodecs() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","pathOld":"/dev/null","sourceNew":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getSegmentCodecs() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","sourceNew":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","sourceOld":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getSegmentCodecs() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","sourceNew":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","sourceOld":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["7b91922b55d15444d554721b352861d028eb8278","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}