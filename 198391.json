{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      SimpleTextFieldsEnum fe = (SimpleTextFieldsEnum) iterator();\n      String fieldUpto;\n      while((fieldUpto = fe.next()) != null) {\n        if (fieldUpto.equals(field)) {\n          terms = new SimpleTextTerms(field, fe.in.getFilePointer());\n          break;\n        }\n      }\n      termsCache.put(field, terms);\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      SimpleTextFieldsEnum fe = (SimpleTextFieldsEnum) iterator();\n      String fieldUpto;\n      while((fieldUpto = fe.next()) != null) {\n        if (fieldUpto.equals(field)) {\n          terms = new SimpleTextTerms(field, fe.in.getFilePointer());\n          break;\n        }\n      }\n      termsCache.put(field, terms);\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      SimpleTextFieldsEnum fe = (SimpleTextFieldsEnum) iterator();\n      String fieldUpto;\n      while((fieldUpto = fe.next()) != null) {\n        if (fieldUpto.equals(field)) {\n          terms = new SimpleTextTerms(field, fe.in.getFilePointer());\n          break;\n        }\n      }\n      termsCache.put(field, terms);\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      SimpleTextFieldsEnum fe = (SimpleTextFieldsEnum) iterator();\n      String fieldUpto;\n      while((fieldUpto = fe.next()) != null) {\n        if (fieldUpto.equals(field)) {\n          terms = new SimpleTextTerms(field, fe.in.getFilePointer());\n          break;\n        }\n      }\n      termsCache.put(field, terms);\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      SimpleTextFieldsEnum fe = (SimpleTextFieldsEnum) iterator();\n      String fieldUpto;\n      while((fieldUpto = fe.next()) != null) {\n        if (fieldUpto.equals(field)) {\n          terms = new SimpleTextTerms(field, fe.in.getFilePointer());\n          break;\n        }\n      }\n      termsCache.put(field, terms);\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}