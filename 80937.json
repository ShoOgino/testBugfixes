{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#next(Token).mjava","sourceNew":"  public boolean incrementToken() throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(input.correctOffset(tokenStart), input.correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","sourceOld":"  public Token next(final Token reusableToken) throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return null;\n    else {\n      reusableToken.clear();\n      reusableToken.reinit(buffer.toString(), input.correctOffset(tokenStart), input.correctOffset(tokenEnd), \"sentence\");\n      return reusableToken;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d0e16ae1a83f5658ad4d16453fb88650460140","date":1250287302,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","sourceNew":"  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(input.correctOffset(tokenStart), input.correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(input.correctOffset(tokenStart), input.correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a82fda1447250ff156ff3b862d94a99bf0a3c23c","date":1252649533,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","sourceNew":"  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(correctOffset(tokenStart), correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(input.correctOffset(tokenStart), input.correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","bugFix":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(correctOffset(tokenStart), correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(correctOffset(tokenStart), correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/SentenceTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(correctOffset(tokenStart), correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    buffer.setLength(0);\n    int ci;\n    char ch, pch;\n    boolean atBegin = true;\n    tokenStart = tokenEnd;\n    ci = input.read();\n    ch = (char) ci;\n\n    while (true) {\n      if (ci == -1) {\n        break;\n      } else if (PUNCTION.indexOf(ch) != -1) {\n        // End of a sentence\n        buffer.append(ch);\n        tokenEnd++;\n        break;\n      } else if (atBegin && Utility.SPACES.indexOf(ch) != -1) {\n        tokenStart++;\n        tokenEnd++;\n        ci = input.read();\n        ch = (char) ci;\n      } else {\n        buffer.append(ch);\n        atBegin = false;\n        tokenEnd++;\n        pch = ch;\n        ci = input.read();\n        ch = (char) ci;\n        // Two spaces, such as CR, LF\n        if (Utility.SPACES.indexOf(ch) != -1\n            && Utility.SPACES.indexOf(pch) != -1) {\n          // buffer.append(ch);\n          tokenEnd++;\n          break;\n        }\n      }\n    }\n    if (buffer.length() == 0)\n      return false;\n    else {\n      termAtt.setTermBuffer(buffer.toString());\n      offsetAtt.setOffset(correctOffset(tokenStart), correctOffset(tokenEnd));\n      typeAtt.setType(\"sentence\");\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}