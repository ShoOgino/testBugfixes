{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testDaemonUpdateStreamInsufficientCredentials().mjava","commits":[{"id":"d959ec4c6f38b465c2b853271aecb516e06e7d94","date":1580403663,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testDaemonUpdateStreamInsufficientCredentials().mjava","pathOld":"/dev/null","sourceNew":"  public void testDaemonUpdateStreamInsufficientCredentials() throws Exception {\n    final String daemonUrl = getRandomCoreUrl(COLLECTION_X);\n    log.info(\"Using Daemon @ {}\", daemonUrl);\n    \n    // both of these users have valid credentials and authz read COLLECTION_X, but neither has\n    // authz to write to X...\n    for (String user : Arrays.asList(READ_ONLY_USER, WRITE_Y_USER)) {\n      final String daemonId = \"daemon_\" + user;\n      {\n        final String expr\n          = \"daemon(id=\"+daemonId+\",runInterval=1000,terminate=true,           \"\n          + \"       update(\"+COLLECTION_X+\",tuple(id=42,a_i=1,b_i=5)))     \"\n          ;\n        final SolrStream solrStream = new SolrStream(daemonUrl,\n                                                     params(\"qt\", \"/stream\",\n                                                            \"_trace\", \"start_\" + daemonId,\n                                                            \"expr\", expr));\n        solrStream.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(solrStream);\n        assertEquals(1, tuples.size()); // daemon starting status\n      }\n      try {\n        // We have to poll the daemon 'list' to know once it's run / terminated...\n        Object state = null;\n        final TimeOut timeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while ( ! timeout.hasTimedOut() ) {\n          final SolrStream daemonCheck = new SolrStream(daemonUrl,\n                                                        params(\"qt\", \"/stream\",\n                                                               \"_trace\", \"check_\" + daemonId,\n                                                               \"action\", \"list\"));\n          daemonCheck.setCredentials(user, user);\n          final List<Tuple> tuples = getTuples(daemonCheck);\n          assertEquals(1, tuples.size()); // our daemon;\n          log.info(\"Current daemon status: {}\", tuples.get(0).fields);\n          assertEquals(daemonId + \" should have never had a successful iteration\",\n                       Long.valueOf(0L), tuples.get(0).getLong(\"iterations\"));\n          state = tuples.get(0).get(\"state\");\n          if (\"TERMINATED\".equals(state)) {\n            // once the daemon has failed, break out of TimeOut\n            break;\n          }\n          Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n        }\n        assertEquals(\"Timed out w/o ever getting TERMINATED state from \" + daemonId,\n                     \"TERMINATED\", state);\n      } finally {\n        // kill the damon...\n        final SolrStream daemonKiller = new SolrStream(daemonUrl,\n                                                       params(\"qt\", \"/stream\",\n                                                              \"_trace\", \"kill_\" + daemonId,\n                                                              \"action\", \"kill\",\n                                                              \"id\", daemonId));\n        daemonKiller.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(daemonKiller);\n        assertEquals(1, tuples.size()); // daemon death status\n      }\n      \n      assertEquals(\"doc count after daemon update for \" + user,\n                   0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    }\n    \n    // sanity check\n    assertEquals(\"final doc count\",\n                 0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testDaemonUpdateStreamInsufficientCredentials().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testDaemonUpdateStreamInsufficientCredentials().mjava","sourceNew":"  public void testDaemonUpdateStreamInsufficientCredentials() throws Exception {\n    final String daemonUrl = getRandomCoreUrl(COLLECTION_X);\n    log.info(\"Using Daemon @ {}\", daemonUrl);\n    \n    // both of these users have valid credentials and authz read COLLECTION_X, but neither has\n    // authz to write to X...\n    for (String user : Arrays.asList(READ_ONLY_USER, WRITE_Y_USER)) {\n      final String daemonId = \"daemon_\" + user;\n      {\n        final String expr\n          = \"daemon(id=\"+daemonId+\",runInterval=1000,terminate=true,           \"\n          + \"       update(\"+COLLECTION_X+\",tuple(id=42,a_i=1,b_i=5)))     \"\n          ;\n        final SolrStream solrStream = new SolrStream(daemonUrl,\n                                                     params(\"qt\", \"/stream\",\n                                                            \"_trace\", \"start_\" + daemonId,\n                                                            \"expr\", expr));\n        solrStream.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(solrStream);\n        assertEquals(1, tuples.size()); // daemon starting status\n      }\n      try {\n        // We have to poll the daemon 'list' to know once it's run / terminated...\n        Object state = null;\n        final TimeOut timeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while ( ! timeout.hasTimedOut() ) {\n          final SolrStream daemonCheck = new SolrStream(daemonUrl,\n                                                        params(\"qt\", \"/stream\",\n                                                               \"_trace\", \"check_\" + daemonId,\n                                                               \"action\", \"list\"));\n          daemonCheck.setCredentials(user, user);\n          final List<Tuple> tuples = getTuples(daemonCheck);\n          assertEquals(1, tuples.size()); // our daemon;\n          if (log.isInfoEnabled()) {\n            log.info(\"Current daemon status: {}\", tuples.get(0).fields);\n          }\n          assertEquals(daemonId + \" should have never had a successful iteration\",\n                       Long.valueOf(0L), tuples.get(0).getLong(\"iterations\"));\n          state = tuples.get(0).get(\"state\");\n          if (\"TERMINATED\".equals(state)) {\n            // once the daemon has failed, break out of TimeOut\n            break;\n          }\n          Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n        }\n        assertEquals(\"Timed out w/o ever getting TERMINATED state from \" + daemonId,\n                     \"TERMINATED\", state);\n      } finally {\n        // kill the damon...\n        final SolrStream daemonKiller = new SolrStream(daemonUrl,\n                                                       params(\"qt\", \"/stream\",\n                                                              \"_trace\", \"kill_\" + daemonId,\n                                                              \"action\", \"kill\",\n                                                              \"id\", daemonId));\n        daemonKiller.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(daemonKiller);\n        assertEquals(1, tuples.size()); // daemon death status\n      }\n      \n      assertEquals(\"doc count after daemon update for \" + user,\n                   0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    }\n    \n    // sanity check\n    assertEquals(\"final doc count\",\n                 0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n  }\n\n","sourceOld":"  public void testDaemonUpdateStreamInsufficientCredentials() throws Exception {\n    final String daemonUrl = getRandomCoreUrl(COLLECTION_X);\n    log.info(\"Using Daemon @ {}\", daemonUrl);\n    \n    // both of these users have valid credentials and authz read COLLECTION_X, but neither has\n    // authz to write to X...\n    for (String user : Arrays.asList(READ_ONLY_USER, WRITE_Y_USER)) {\n      final String daemonId = \"daemon_\" + user;\n      {\n        final String expr\n          = \"daemon(id=\"+daemonId+\",runInterval=1000,terminate=true,           \"\n          + \"       update(\"+COLLECTION_X+\",tuple(id=42,a_i=1,b_i=5)))     \"\n          ;\n        final SolrStream solrStream = new SolrStream(daemonUrl,\n                                                     params(\"qt\", \"/stream\",\n                                                            \"_trace\", \"start_\" + daemonId,\n                                                            \"expr\", expr));\n        solrStream.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(solrStream);\n        assertEquals(1, tuples.size()); // daemon starting status\n      }\n      try {\n        // We have to poll the daemon 'list' to know once it's run / terminated...\n        Object state = null;\n        final TimeOut timeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while ( ! timeout.hasTimedOut() ) {\n          final SolrStream daemonCheck = new SolrStream(daemonUrl,\n                                                        params(\"qt\", \"/stream\",\n                                                               \"_trace\", \"check_\" + daemonId,\n                                                               \"action\", \"list\"));\n          daemonCheck.setCredentials(user, user);\n          final List<Tuple> tuples = getTuples(daemonCheck);\n          assertEquals(1, tuples.size()); // our daemon;\n          log.info(\"Current daemon status: {}\", tuples.get(0).fields);\n          assertEquals(daemonId + \" should have never had a successful iteration\",\n                       Long.valueOf(0L), tuples.get(0).getLong(\"iterations\"));\n          state = tuples.get(0).get(\"state\");\n          if (\"TERMINATED\".equals(state)) {\n            // once the daemon has failed, break out of TimeOut\n            break;\n          }\n          Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n        }\n        assertEquals(\"Timed out w/o ever getting TERMINATED state from \" + daemonId,\n                     \"TERMINATED\", state);\n      } finally {\n        // kill the damon...\n        final SolrStream daemonKiller = new SolrStream(daemonUrl,\n                                                       params(\"qt\", \"/stream\",\n                                                              \"_trace\", \"kill_\" + daemonId,\n                                                              \"action\", \"kill\",\n                                                              \"id\", daemonId));\n        daemonKiller.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(daemonKiller);\n        assertEquals(1, tuples.size()); // daemon death status\n      }\n      \n      assertEquals(\"doc count after daemon update for \" + user,\n                   0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    }\n    \n    // sanity check\n    assertEquals(\"final doc count\",\n                 0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testDaemonUpdateStreamInsufficientCredentials().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testDaemonUpdateStreamInsufficientCredentials().mjava","sourceNew":"  public void testDaemonUpdateStreamInsufficientCredentials() throws Exception {\n    final String daemonUrl = getRandomCoreUrl(COLLECTION_X);\n    log.info(\"Using Daemon @ {}\", daemonUrl);\n    \n    // both of these users have valid credentials and authz read COLLECTION_X, but neither has\n    // authz to write to X...\n    for (String user : Arrays.asList(READ_ONLY_USER, WRITE_Y_USER)) {\n      final String daemonId = \"daemon_\" + user;\n      {\n        final String expr\n          = \"daemon(id=\"+daemonId+\",runInterval=1000,terminate=true,           \"\n          + \"       update(\"+COLLECTION_X+\",tuple(id=42,a_i=1,b_i=5)))     \"\n          ;\n        final SolrStream solrStream = new SolrStream(daemonUrl,\n                                                     params(\"qt\", \"/stream\",\n                                                            \"_trace\", \"start_\" + daemonId,\n                                                            \"expr\", expr));\n        solrStream.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(solrStream);\n        assertEquals(1, tuples.size()); // daemon starting status\n      }\n      try {\n        // We have to poll the daemon 'list' to know once it's run / terminated...\n        Object state = null;\n        final TimeOut timeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while ( ! timeout.hasTimedOut() ) {\n          final SolrStream daemonCheck = new SolrStream(daemonUrl,\n                                                        params(\"qt\", \"/stream\",\n                                                               \"_trace\", \"check_\" + daemonId,\n                                                               \"action\", \"list\"));\n          daemonCheck.setCredentials(user, user);\n          final List<Tuple> tuples = getTuples(daemonCheck);\n          assertEquals(1, tuples.size()); // our daemon;\n          if (log.isInfoEnabled()) {\n            log.info(\"Current daemon status: {}\", tuples.get(0).getFields());\n          }\n          assertEquals(daemonId + \" should have never had a successful iteration\",\n                       Long.valueOf(0L), tuples.get(0).getLong(\"iterations\"));\n          state = tuples.get(0).get(\"state\");\n          if (\"TERMINATED\".equals(state)) {\n            // once the daemon has failed, break out of TimeOut\n            break;\n          }\n          Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n        }\n        assertEquals(\"Timed out w/o ever getting TERMINATED state from \" + daemonId,\n                     \"TERMINATED\", state);\n      } finally {\n        // kill the damon...\n        final SolrStream daemonKiller = new SolrStream(daemonUrl,\n                                                       params(\"qt\", \"/stream\",\n                                                              \"_trace\", \"kill_\" + daemonId,\n                                                              \"action\", \"kill\",\n                                                              \"id\", daemonId));\n        daemonKiller.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(daemonKiller);\n        assertEquals(1, tuples.size()); // daemon death status\n      }\n      \n      assertEquals(\"doc count after daemon update for \" + user,\n                   0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    }\n    \n    // sanity check\n    assertEquals(\"final doc count\",\n                 0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n  }\n\n","sourceOld":"  public void testDaemonUpdateStreamInsufficientCredentials() throws Exception {\n    final String daemonUrl = getRandomCoreUrl(COLLECTION_X);\n    log.info(\"Using Daemon @ {}\", daemonUrl);\n    \n    // both of these users have valid credentials and authz read COLLECTION_X, but neither has\n    // authz to write to X...\n    for (String user : Arrays.asList(READ_ONLY_USER, WRITE_Y_USER)) {\n      final String daemonId = \"daemon_\" + user;\n      {\n        final String expr\n          = \"daemon(id=\"+daemonId+\",runInterval=1000,terminate=true,           \"\n          + \"       update(\"+COLLECTION_X+\",tuple(id=42,a_i=1,b_i=5)))     \"\n          ;\n        final SolrStream solrStream = new SolrStream(daemonUrl,\n                                                     params(\"qt\", \"/stream\",\n                                                            \"_trace\", \"start_\" + daemonId,\n                                                            \"expr\", expr));\n        solrStream.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(solrStream);\n        assertEquals(1, tuples.size()); // daemon starting status\n      }\n      try {\n        // We have to poll the daemon 'list' to know once it's run / terminated...\n        Object state = null;\n        final TimeOut timeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        while ( ! timeout.hasTimedOut() ) {\n          final SolrStream daemonCheck = new SolrStream(daemonUrl,\n                                                        params(\"qt\", \"/stream\",\n                                                               \"_trace\", \"check_\" + daemonId,\n                                                               \"action\", \"list\"));\n          daemonCheck.setCredentials(user, user);\n          final List<Tuple> tuples = getTuples(daemonCheck);\n          assertEquals(1, tuples.size()); // our daemon;\n          if (log.isInfoEnabled()) {\n            log.info(\"Current daemon status: {}\", tuples.get(0).fields);\n          }\n          assertEquals(daemonId + \" should have never had a successful iteration\",\n                       Long.valueOf(0L), tuples.get(0).getLong(\"iterations\"));\n          state = tuples.get(0).get(\"state\");\n          if (\"TERMINATED\".equals(state)) {\n            // once the daemon has failed, break out of TimeOut\n            break;\n          }\n          Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));\n        }\n        assertEquals(\"Timed out w/o ever getting TERMINATED state from \" + daemonId,\n                     \"TERMINATED\", state);\n      } finally {\n        // kill the damon...\n        final SolrStream daemonKiller = new SolrStream(daemonUrl,\n                                                       params(\"qt\", \"/stream\",\n                                                              \"_trace\", \"kill_\" + daemonId,\n                                                              \"action\", \"kill\",\n                                                              \"id\", daemonId));\n        daemonKiller.setCredentials(user, user);\n        final List<Tuple> tuples = getTuples(daemonKiller);\n        assertEquals(1, tuples.size()); // daemon death status\n      }\n      \n      assertEquals(\"doc count after daemon update for \" + user,\n                   0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    }\n    \n    // sanity check\n    assertEquals(\"final doc count\",\n                 0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}