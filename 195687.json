{"path":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#hashCode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery#hashCode().mjava","sourceNew":"  @Override\n  public final int hashCode() {\n    int hash = super.hashCode();\n    hash += precisionStep^0x64365465;\n    if (min != null) hash += min.hashCode()^0x14fa55fb;\n    if (max != null) hash += max.hashCode()^0x733fa5fe;\n    return hash +\n      (Boolean.valueOf(minInclusive).hashCode()^0x14fa55fb)+\n      (Boolean.valueOf(maxInclusive).hashCode()^0x733fa5fe);\n  }\n\n","sourceOld":"  @Override\n  public final int hashCode() {\n    int hash = super.hashCode();\n    hash += precisionStep^0x64365465;\n    if (min != null) hash += min.hashCode()^0x14fa55fb;\n    if (max != null) hash += max.hashCode()^0x733fa5fe;\n    return hash +\n      (Boolean.valueOf(minInclusive).hashCode()^0x14fa55fb)+\n      (Boolean.valueOf(maxInclusive).hashCode()^0x733fa5fe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#hashCode().mjava","sourceNew":"  @Override\n  public final int hashCode() {\n    int hash = super.hashCode();\n    hash += precisionStep^0x64365465;\n    if (min != null) hash += min.hashCode()^0x14fa55fb;\n    if (max != null) hash += max.hashCode()^0x733fa5fe;\n    return hash +\n      (Boolean.valueOf(minInclusive).hashCode()^0x14fa55fb)+\n      (Boolean.valueOf(maxInclusive).hashCode()^0x733fa5fe);\n  }\n\n","sourceOld":"  @Override\n  public final int hashCode() {\n    int hash = super.hashCode();\n    hash += precisionStep^0x64365465;\n    if (min != null) hash += min.hashCode()^0x14fa55fb;\n    if (max != null) hash += max.hashCode()^0x733fa5fe;\n    return hash +\n      (Boolean.valueOf(minInclusive).hashCode()^0x14fa55fb)+\n      (Boolean.valueOf(maxInclusive).hashCode()^0x733fa5fe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}