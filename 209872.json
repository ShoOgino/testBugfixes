{"path":"src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List).mjava","pathOld":"/dev/null","sourceNew":"    public void onCommit(List commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommitPoint lastCommit = (IndexCommitPoint) commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      Iterator it = commits.iterator();\n\n      while(it.hasNext()) {\n        IndexCommitPoint commit = (IndexCommitPoint) it.next();\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a1559506fd82ede79bd8e60facef2a57524e175","date":1204808228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List).mjava","sourceNew":"    public void onCommit(List commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = (IndexCommit) commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      Iterator it = commits.iterator();\n\n      while(it.hasNext()) {\n        IndexCommit commit = (IndexCommit) it.next();\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommitPoint lastCommit = (IndexCommitPoint) commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      Iterator it = commits.iterator();\n\n      while(it.hasNext()) {\n        IndexCommitPoint commit = (IndexCommitPoint) it.next();\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List[#-extends-IndexCommit]).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy.ExpirationTimeDeletionPolicy#onCommit(List).mjava","sourceNew":"    public void onCommit(List<? extends IndexCommit> commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n\n      for (final IndexCommit commit : commits) {\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","sourceOld":"    public void onCommit(List commits) throws IOException {\n      verifyCommitOrder(commits);\n\n      IndexCommit lastCommit = (IndexCommit) commits.get(commits.size()-1);\n\n      // Any commit older than expireTime should be deleted:\n      double expireTime = dir.fileModified(lastCommit.getSegmentsFileName())/1000.0 - expirationTimeSeconds;\n\n      Iterator it = commits.iterator();\n\n      while(it.hasNext()) {\n        IndexCommit commit = (IndexCommit) it.next();\n        double modTime = dir.fileModified(commit.getSegmentsFileName())/1000.0;\n        if (commit != lastCommit && modTime < expireTime) {\n          commit.delete();\n          numDelete += 1;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["8a1559506fd82ede79bd8e60facef2a57524e175"],"8a1559506fd82ede79bd8e60facef2a57524e175":["8b6187898fc4413ccd18229711786550a280383c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["8a1559506fd82ede79bd8e60facef2a57524e175"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a1559506fd82ede79bd8e60facef2a57524e175":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}