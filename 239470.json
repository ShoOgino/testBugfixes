{"path":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","commits":[{"id":"0afa0bff72bc189cdf6fc95f80d80365a6417e3b","date":1118096970,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws IOException\n   */\n  protected void createIndexWriter() throws IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","sourceNew":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws IOException\n   */\n  protected void createIndexWriter() throws IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","bugFix":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","sourceNew":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != 0)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","sourceNew":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      // IndexModifier cannot use ConcurrentMergeScheduler\n      // because it synchronizes on the directory which can\n      // cause deadlock\n      indexWriter.setMergeScheduler(new SerialMergeScheduler());\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != 0)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != 0)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","date":1191352543,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","sourceNew":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      // IndexModifier cannot use ConcurrentMergeScheduler\n      // because it synchronizes on the directory which can\n      // cause deadlock\n      indexWriter.setMergeScheduler(new SerialMergeScheduler());\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      // IndexModifier cannot use ConcurrentMergeScheduler\n      // because it synchronizes on the directory which can\n      // cause deadlock\n      indexWriter.setMergeScheduler(new SerialMergeScheduler());\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != 0)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","sourceNew":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false, IndexWriter.MaxFieldLength.LIMITED);\n      // IndexModifier cannot use ConcurrentMergeScheduler\n      // because it synchronizes on the directory which can\n      // cause deadlock\n      indexWriter.setMergeScheduler(new SerialMergeScheduler());\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false);\n      // IndexModifier cannot use ConcurrentMergeScheduler\n      // because it synchronizes on the directory which can\n      // cause deadlock\n      indexWriter.setMergeScheduler(new SerialMergeScheduler());\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9637651e2bd0a7040acb5f63bdd6b922b244ef","date":1202418455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","sourceNew":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false, new IndexWriter.MaxFieldLength(maxFieldLength));\n      // IndexModifier cannot use ConcurrentMergeScheduler\n      // because it synchronizes on the directory which can\n      // cause deadlock\n      indexWriter.setMergeScheduler(new SerialMergeScheduler());\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","sourceOld":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false, IndexWriter.MaxFieldLength.LIMITED);\n      // IndexModifier cannot use ConcurrentMergeScheduler\n      // because it synchronizes on the directory which can\n      // cause deadlock\n      indexWriter.setMergeScheduler(new SerialMergeScheduler());\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMaxFieldLength(maxFieldLength);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexModifier#createIndexWriter().mjava","sourceNew":null,"sourceOld":"  /**\n   * Close the IndexReader and open an IndexWriter.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  protected void createIndexWriter() throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (indexWriter == null) {\n      if (indexReader != null) {\n        indexReader.close();\n        indexReader = null;\n      }\n      indexWriter = new IndexWriter(directory, analyzer, false, new IndexWriter.MaxFieldLength(maxFieldLength));\n      // IndexModifier cannot use ConcurrentMergeScheduler\n      // because it synchronizes on the directory which can\n      // cause deadlock\n      indexWriter.setMergeScheduler(new SerialMergeScheduler());\n      indexWriter.setInfoStream(infoStream);\n      indexWriter.setUseCompoundFile(useCompoundFile);\n      if (maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH)\n        indexWriter.setMaxBufferedDocs(maxBufferedDocs);\n      indexWriter.setMergeFactor(mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["4d9637651e2bd0a7040acb5f63bdd6b922b244ef"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4d9637651e2bd0a7040acb5f63bdd6b922b244ef":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1b54a9bc667895a2095a886184bf69a3179e63df":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"4d9637651e2bd0a7040acb5f63bdd6b922b244ef":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"1b54a9bc667895a2095a886184bf69a3179e63df":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["4d9637651e2bd0a7040acb5f63bdd6b922b244ef"],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["1b54a9bc667895a2095a886184bf69a3179e63df"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}