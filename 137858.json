{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","commits":[{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema deleteDynamicFields(Collection<String> fieldNamePatterns) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      List<DynamicCopy> dynamicCopyFieldsToRebuild = new ArrayList<>();\n      List<DynamicCopy> newDynamicCopyFields = new ArrayList<>();\n\n      for (String fieldNamePattern : fieldNamePatterns) {\n        DynamicField dynamicField = null;\n        int dfPos = 0;\n        for ( ; dfPos < newSchema.dynamicFields.length ; ++dfPos) {\n          DynamicField df = newSchema.dynamicFields[dfPos];\n          if (df.getRegex().equals(fieldNamePattern)) {\n            dynamicField = df;\n            break;\n          }\n        }\n        if (null == dynamicField) {\n          String msg = \"The dynamic field '\" + fieldNamePattern\n              + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }          \n        for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();\n          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();\n          if ((null != destDynamicBase && fieldNamePattern.equals(destDynamicBase.getRegex()))\n              || (null != sourceDynamicBase && fieldNamePattern.equals(sourceDynamicBase.getRegex()))\n              || dynamicField.matches(dynamicCopy.getRegex())\n              || dynamicField.matches(dynamicCopy.getDestFieldName())) {\n            dynamicCopyFieldsToRebuild.add(dynamicCopy);\n            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it\n          } else {\n            newDynamicCopyFields.add(dynamicCopy);\n          }\n        }\n        if (newSchema.dynamicFields.length > 1) {\n          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];\n          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);\n          // skip over the dynamic field to be deleted\n          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);\n          newSchema.dynamicFields = temp;\n        } else {\n          newSchema.dynamicFields = new DynamicField[0];\n        }\n      }\n      // After removing all dynamic fields, rebuild affected dynamic copy fields.\n      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.\n      if (dynamicCopyFieldsToRebuild.size() > 0) {\n        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);\n        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {\n          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9d62f72d1c60d2be239222de52d5e7b516da5f6f","43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema deleteDynamicFields(Collection<String> fieldNamePatterns) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      List<DynamicCopy> dynamicCopyFieldsToRebuild = new ArrayList<>();\n      List<DynamicCopy> newDynamicCopyFields = new ArrayList<>();\n\n      for (String fieldNamePattern : fieldNamePatterns) {\n        DynamicField dynamicField = null;\n        int dfPos = 0;\n        for ( ; dfPos < newSchema.dynamicFields.length ; ++dfPos) {\n          DynamicField df = newSchema.dynamicFields[dfPos];\n          if (df.getRegex().equals(fieldNamePattern)) {\n            dynamicField = df;\n            break;\n          }\n        }\n        if (null == dynamicField) {\n          String msg = \"The dynamic field '\" + fieldNamePattern\n              + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }          \n        for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();\n          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();\n          if ((null != destDynamicBase && fieldNamePattern.equals(destDynamicBase.getRegex()))\n              || (null != sourceDynamicBase && fieldNamePattern.equals(sourceDynamicBase.getRegex()))\n              || dynamicField.matches(dynamicCopy.getRegex())\n              || dynamicField.matches(dynamicCopy.getDestFieldName())) {\n            dynamicCopyFieldsToRebuild.add(dynamicCopy);\n            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it\n          } else {\n            newDynamicCopyFields.add(dynamicCopy);\n          }\n        }\n        if (newSchema.dynamicFields.length > 1) {\n          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];\n          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);\n          // skip over the dynamic field to be deleted\n          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);\n          newSchema.dynamicFields = temp;\n        } else {\n          newSchema.dynamicFields = new DynamicField[0];\n        }\n      }\n      // After removing all dynamic fields, rebuild affected dynamic copy fields.\n      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.\n      if (dynamicCopyFieldsToRebuild.size() > 0) {\n        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);\n        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {\n          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d62f72d1c60d2be239222de52d5e7b516da5f6f","date":1428554550,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema deleteDynamicFields(Collection<String> fieldNamePatterns) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      List<DynamicCopy> dynamicCopyFieldsToRebuild = new ArrayList<>();\n      List<DynamicCopy> newDynamicCopyFields = new ArrayList<>();\n\n      for (String fieldNamePattern : fieldNamePatterns) {\n        DynamicField dynamicField = null;\n        int dfPos = 0;\n        for ( ; dfPos < newSchema.dynamicFields.length ; ++dfPos) {\n          DynamicField df = newSchema.dynamicFields[dfPos];\n          if (df.getRegex().equals(fieldNamePattern)) {\n            dynamicField = df;\n            break;\n          }\n        }\n        if (null == dynamicField) {\n          String msg = \"The dynamic field '\" + fieldNamePattern\n              + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }          \n        for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();\n          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();\n          if ((null != destDynamicBase && fieldNamePattern.equals(destDynamicBase.getRegex()))\n              || (null != sourceDynamicBase && fieldNamePattern.equals(sourceDynamicBase.getRegex()))\n              || dynamicField.matches(dynamicCopy.getRegex())\n              || dynamicField.matches(dynamicCopy.getDestFieldName())) {\n            dynamicCopyFieldsToRebuild.add(dynamicCopy);\n            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it\n          } else {\n            newDynamicCopyFields.add(dynamicCopy);\n          }\n        }\n        if (newSchema.dynamicFields.length > 1) {\n          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];\n          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);\n          // skip over the dynamic field to be deleted\n          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);\n          newSchema.dynamicFields = temp;\n        } else {\n          newSchema.dynamicFields = new DynamicField[0];\n        }\n      }\n      // After removing all dynamic fields, rebuild affected dynamic copy fields.\n      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.\n      if (dynamicCopyFieldsToRebuild.size() > 0) {\n        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);\n        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {\n          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema deleteDynamicFields(Collection<String> fieldNamePatterns) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      List<DynamicCopy> dynamicCopyFieldsToRebuild = new ArrayList<>();\n      List<DynamicCopy> newDynamicCopyFields = new ArrayList<>();\n\n      for (String fieldNamePattern : fieldNamePatterns) {\n        DynamicField dynamicField = null;\n        int dfPos = 0;\n        for ( ; dfPos < newSchema.dynamicFields.length ; ++dfPos) {\n          DynamicField df = newSchema.dynamicFields[dfPos];\n          if (df.getRegex().equals(fieldNamePattern)) {\n            dynamicField = df;\n            break;\n          }\n        }\n        if (null == dynamicField) {\n          String msg = \"The dynamic field '\" + fieldNamePattern\n              + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }          \n        for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();\n          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();\n          if ((null != destDynamicBase && fieldNamePattern.equals(destDynamicBase.getRegex()))\n              || (null != sourceDynamicBase && fieldNamePattern.equals(sourceDynamicBase.getRegex()))\n              || dynamicField.matches(dynamicCopy.getRegex())\n              || dynamicField.matches(dynamicCopy.getDestFieldName())) {\n            dynamicCopyFieldsToRebuild.add(dynamicCopy);\n            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it\n          } else {\n            newDynamicCopyFields.add(dynamicCopy);\n          }\n        }\n        if (newSchema.dynamicFields.length > 1) {\n          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];\n          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);\n          // skip over the dynamic field to be deleted\n          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);\n          newSchema.dynamicFields = temp;\n        } else {\n          newSchema.dynamicFields = new DynamicField[0];\n        }\n      }\n      // After removing all dynamic fields, rebuild affected dynamic copy fields.\n      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.\n      if (dynamicCopyFieldsToRebuild.size() > 0) {\n        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);\n        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {\n          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3","date":1570208701,"type":3,"author":"Thomas Wöckinger","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema deleteDynamicFields(Collection<String> fieldNamePatterns) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      List<DynamicCopy> dynamicCopyFieldsToRebuild = new ArrayList<>();\n      List<DynamicCopy> newDynamicCopyFields = new ArrayList<>();\n\n      for (String fieldNamePattern : fieldNamePatterns) {\n        DynamicField dynamicField = null;\n        int dfPos = 0;\n        for ( ; dfPos < newSchema.dynamicFields.length ; ++dfPos) {\n          DynamicField df = newSchema.dynamicFields[dfPos];\n          if (df.getRegex().equals(fieldNamePattern)) {\n            dynamicField = df;\n            break;\n          }\n        }\n        if (null == dynamicField) {\n          String msg = \"The dynamic field '\" + fieldNamePattern\n              + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }          \n        for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();\n          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();\n          if ((null != destDynamicBase && fieldNamePattern.equals(destDynamicBase.getRegex()))\n              || (null != sourceDynamicBase && fieldNamePattern.equals(sourceDynamicBase.getRegex()))\n              || dynamicField.matches(dynamicCopy.getRegex())\n              || dynamicField.matches(dynamicCopy.getDestFieldName())) {\n            dynamicCopyFieldsToRebuild.add(dynamicCopy);\n            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it\n          } else {\n            newDynamicCopyFields.add(dynamicCopy);\n          }\n        }\n        if (newSchema.dynamicFields.length > 1) {\n          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];\n          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);\n          // skip over the dynamic field to be deleted\n          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);\n          newSchema.dynamicFields = temp;\n        } else {\n          newSchema.dynamicFields = new DynamicField[] {};\n        }\n      }\n      // After removing all dynamic fields, rebuild affected dynamic copy fields.\n      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.\n      if (dynamicCopyFieldsToRebuild.size() > 0) {\n        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);\n        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {\n          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema deleteDynamicFields(Collection<String> fieldNamePatterns) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      List<DynamicCopy> dynamicCopyFieldsToRebuild = new ArrayList<>();\n      List<DynamicCopy> newDynamicCopyFields = new ArrayList<>();\n\n      for (String fieldNamePattern : fieldNamePatterns) {\n        DynamicField dynamicField = null;\n        int dfPos = 0;\n        for ( ; dfPos < newSchema.dynamicFields.length ; ++dfPos) {\n          DynamicField df = newSchema.dynamicFields[dfPos];\n          if (df.getRegex().equals(fieldNamePattern)) {\n            dynamicField = df;\n            break;\n          }\n        }\n        if (null == dynamicField) {\n          String msg = \"The dynamic field '\" + fieldNamePattern\n              + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }          \n        for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();\n          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();\n          if ((null != destDynamicBase && fieldNamePattern.equals(destDynamicBase.getRegex()))\n              || (null != sourceDynamicBase && fieldNamePattern.equals(sourceDynamicBase.getRegex()))\n              || dynamicField.matches(dynamicCopy.getRegex())\n              || dynamicField.matches(dynamicCopy.getDestFieldName())) {\n            dynamicCopyFieldsToRebuild.add(dynamicCopy);\n            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it\n          } else {\n            newDynamicCopyFields.add(dynamicCopy);\n          }\n        }\n        if (newSchema.dynamicFields.length > 1) {\n          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];\n          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);\n          // skip over the dynamic field to be deleted\n          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);\n          newSchema.dynamicFields = temp;\n        } else {\n          newSchema.dynamicFields = new DynamicField[0];\n        }\n      }\n      // After removing all dynamic fields, rebuild affected dynamic copy fields.\n      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.\n      if (dynamicCopyFieldsToRebuild.size() > 0) {\n        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);\n        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {\n          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#deleteDynamicFields(Collection[String]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema deleteDynamicFields(Collection<String> fieldNamePatterns) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      List<DynamicCopy> dynamicCopyFieldsToRebuild = new ArrayList<>();\n      List<DynamicCopy> newDynamicCopyFields = new ArrayList<>();\n\n      for (String fieldNamePattern : fieldNamePatterns) {\n        DynamicField dynamicField = null;\n        int dfPos = 0;\n        for ( ; dfPos < newSchema.dynamicFields.length ; ++dfPos) {\n          DynamicField df = newSchema.dynamicFields[dfPos];\n          if (df.getRegex().equals(fieldNamePattern)) {\n            dynamicField = df;\n            break;\n          }\n        }\n        if (null == dynamicField) {\n          String msg = \"The dynamic field '\" + fieldNamePattern\n              + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }          \n        for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();\n          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();\n          if ((null != destDynamicBase && fieldNamePattern.equals(destDynamicBase.getRegex()))\n              || (null != sourceDynamicBase && fieldNamePattern.equals(sourceDynamicBase.getRegex()))\n              || dynamicField.matches(dynamicCopy.getRegex())\n              || dynamicField.matches(dynamicCopy.getDestFieldName())) {\n            dynamicCopyFieldsToRebuild.add(dynamicCopy);\n            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it\n          } else {\n            newDynamicCopyFields.add(dynamicCopy);\n          }\n        }\n        if (newSchema.dynamicFields.length > 1) {\n          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];\n          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);\n          // skip over the dynamic field to be deleted\n          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);\n          newSchema.dynamicFields = temp;\n        } else {\n          newSchema.dynamicFields = new DynamicField[] {};\n        }\n      }\n      // After removing all dynamic fields, rebuild affected dynamic copy fields.\n      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.\n      if (dynamicCopyFieldsToRebuild.size() > 0) {\n        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);\n        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {\n          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema deleteDynamicFields(Collection<String> fieldNamePatterns) {\n    ManagedIndexSchema newSchema;\n    if (isMutable) {\n      newSchema = shallowCopy(true);\n\n      newSchema.dynamicCopyFields = new DynamicCopy[dynamicCopyFields.length];\n      System.arraycopy(dynamicCopyFields, 0, newSchema.dynamicCopyFields, 0, dynamicCopyFields.length);\n\n      List<DynamicCopy> dynamicCopyFieldsToRebuild = new ArrayList<>();\n      List<DynamicCopy> newDynamicCopyFields = new ArrayList<>();\n\n      for (String fieldNamePattern : fieldNamePatterns) {\n        DynamicField dynamicField = null;\n        int dfPos = 0;\n        for ( ; dfPos < newSchema.dynamicFields.length ; ++dfPos) {\n          DynamicField df = newSchema.dynamicFields[dfPos];\n          if (df.getRegex().equals(fieldNamePattern)) {\n            dynamicField = df;\n            break;\n          }\n        }\n        if (null == dynamicField) {\n          String msg = \"The dynamic field '\" + fieldNamePattern\n              + \"' is not present in this schema, and so cannot be deleted.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }          \n        for (int i = 0 ; i < newSchema.dynamicCopyFields.length ; ++i) {\n          DynamicCopy dynamicCopy = newSchema.dynamicCopyFields[i];\n          DynamicField destDynamicBase = dynamicCopy.getDestDynamicBase();\n          DynamicField sourceDynamicBase = dynamicCopy.getSourceDynamicBase();\n          if ((null != destDynamicBase && fieldNamePattern.equals(destDynamicBase.getRegex()))\n              || (null != sourceDynamicBase && fieldNamePattern.equals(sourceDynamicBase.getRegex()))\n              || dynamicField.matches(dynamicCopy.getRegex())\n              || dynamicField.matches(dynamicCopy.getDestFieldName())) {\n            dynamicCopyFieldsToRebuild.add(dynamicCopy);\n            newSchema.decrementCopyFieldTargetCount(dynamicCopy.getDestination().getPrototype());\n            // don't add this dynamic copy field to newDynamicCopyFields - effectively removing it\n          } else {\n            newDynamicCopyFields.add(dynamicCopy);\n          }\n        }\n        if (newSchema.dynamicFields.length > 1) {\n          DynamicField[] temp = new DynamicField[newSchema.dynamicFields.length - 1];\n          System.arraycopy(newSchema.dynamicFields, 0, temp, 0, dfPos);\n          // skip over the dynamic field to be deleted\n          System.arraycopy(newSchema.dynamicFields, dfPos + 1, temp, dfPos, newSchema.dynamicFields.length - dfPos - 1);\n          newSchema.dynamicFields = temp;\n        } else {\n          newSchema.dynamicFields = new DynamicField[0];\n        }\n      }\n      // After removing all dynamic fields, rebuild affected dynamic copy fields.\n      // This may trigger an exception, if one of the deleted dynamic fields was the only matching source or target.\n      if (dynamicCopyFieldsToRebuild.size() > 0) {\n        newSchema.dynamicCopyFields = newDynamicCopyFields.toArray(new DynamicCopy[newDynamicCopyFields.size()]);\n        for (DynamicCopy dynamicCopy : dynamicCopyFieldsToRebuild) {\n          newSchema.registerCopyField(dynamicCopy.getRegex(), dynamicCopy.getDestFieldName(), dynamicCopy.getMaxChars());\n        }\n      }\n\n      newSchema.postReadInform();\n      newSchema.refreshAnalyzers();\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eeeea2295d6355a29e259130a5c48ace73022d7c"],"9d62f72d1c60d2be239222de52d5e7b516da5f6f":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9d62f72d1c60d2be239222de52d5e7b516da5f6f","43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9d62f72d1c60d2be239222de52d5e7b516da5f6f":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3","b0b597c65628ca9e73913a07e81691f8229bae35"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}