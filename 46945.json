{"path":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","commits":[{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","pathOld":"/dev/null","sourceNew":"    public TopDocs topDocs(int start, int howMany) {\n      try {\n        TopDocs mainDocs = mainCollector.topDocs(0, reRankDocs);\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntOpenHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, reRankDocs);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          if(howMany > rescoredDocs.scoreDocs.length) {\n            howMany = rescoredDocs.scoreDocs.length;\n          }\n\n          ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n          System.arraycopy(rescoredDocs.scoreDocs,0,scoreDocs,0,howMany);\n          rescoredDocs.scoreDocs = scoreDocs;\n          return rescoredDocs;\n        } else {\n          return new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, howMany);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1","date":1410446084,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntOpenHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n      try {\n        TopDocs mainDocs = mainCollector.topDocs(0, reRankDocs);\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntOpenHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, reRankDocs);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          if(howMany > rescoredDocs.scoreDocs.length) {\n            howMany = rescoredDocs.scoreDocs.length;\n          }\n\n          ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n          System.arraycopy(rescoredDocs.scoreDocs,0,scoreDocs,0,howMany);\n          rescoredDocs.scoreDocs = scoreDocs;\n          return rescoredDocs;\n        } else {\n          return new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, howMany);\n        }\n\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","date":1440409984,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntOpenHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffcff9959b822d9b743768173e0094d3ff62f0dd","date":1470415332,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = reRankQueryRescorer\n              .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = reRankQueryRescorer\n              .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = reRankQueryRescorer\n              .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = reRankQueryRescorer\n              .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38dae0420878d068e24de9026c5f3d34809b3375","date":1474634496,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n        ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n        System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n        mainDocs.scoreDocs = reRankScoreDocs;\n\n        TopDocs rescoredDocs = reRankQueryRescorer\n            .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n        //Lower howMany to return if we've collected fewer documents.\n        howMany = Math.min(howMany, mainScoreDocs.length);\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = reRankQueryRescorer\n              .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = reRankQueryRescorer\n              .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d98108304c4c7ce341ecb1e5b388308dc3b35ca","date":1474893506,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n        ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n        System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n        mainDocs.scoreDocs = reRankScoreDocs;\n\n        TopDocs rescoredDocs = reRankQueryRescorer\n            .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n        //Lower howMany to return if we've collected fewer documents.\n        howMany = Math.min(howMany, mainScoreDocs.length);\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n        }\n\n        if(howMany == rescoredDocs.scoreDocs.length) {\n          return rescoredDocs; // Just return the rescoredDocs\n        } else if(howMany > rescoredDocs.scoreDocs.length) {\n          //We need to return more then we've reRanked, so create the combined page.\n          ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n          System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n          System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n          rescoredDocs.scoreDocs = scoreDocs;\n          return rescoredDocs;\n        } else {\n          //We've rescored more then we need to return.\n          ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n          System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n          rescoredDocs.scoreDocs = scoreDocs;\n          return rescoredDocs;\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n        ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n        System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n        mainDocs.scoreDocs = reRankScoreDocs;\n\n        TopDocs rescoredDocs = reRankQueryRescorer\n            .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n        //Lower howMany to return if we've collected fewer documents.\n        howMany = Math.min(howMany, mainScoreDocs.length);\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d729a652b9a64220536d47218ed1c8324955e86d","date":1474975102,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":null,"sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n        ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n        System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n        mainDocs.scoreDocs = reRankScoreDocs;\n\n        TopDocs rescoredDocs = reRankQueryRescorer\n            .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n        //Lower howMany to return if we've collected fewer documents.\n        howMany = Math.min(howMany, mainScoreDocs.length);\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n        }\n\n        if(howMany == rescoredDocs.scoreDocs.length) {\n          return rescoredDocs; // Just return the rescoredDocs\n        } else if(howMany > rescoredDocs.scoreDocs.length) {\n          //We need to return more then we've reRanked, so create the combined page.\n          ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n          System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n          System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n          rescoredDocs.scoreDocs = scoreDocs;\n          return rescoredDocs;\n        } else {\n          //We've rescored more then we need to return.\n          ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n          System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n          rescoredDocs.scoreDocs = scoreDocs;\n          return rescoredDocs;\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":null,"sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = reRankQueryRescorer\n              .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = reRankQueryRescorer\n              .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankQParserPlugin.ReRankCollector#topDocs(int,int).mjava","sourceNew":null,"sourceOld":"    public TopDocs topDocs(int start, int howMany) {\n\n      try {\n\n        TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n        if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n          return mainDocs;\n        }\n\n        if(boostedPriority != null) {\n          SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n          Map requestContext = null;\n          if(info != null) {\n            requestContext = info.getReq().getContext();\n          }\n\n          IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n          ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n          System.arraycopy(mainScoreDocs,0,reRankScoreDocs,0,reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n\n          //Lower howMany if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n\n        } else {\n\n          ScoreDoc[] mainScoreDocs   = mainDocs.scoreDocs;\n\n          /*\n          *  Create the array for the reRankScoreDocs.\n          */\n          ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n\n          /*\n          *  Copy the initial results into the reRankScoreDocs array.\n          */\n          System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n          mainDocs.scoreDocs = reRankScoreDocs;\n\n          TopDocs rescoredDocs = new QueryRescorer(reRankQuery) {\n            @Override\n            protected float combine(float firstPassScore, boolean secondPassMatches, float secondPassScore) {\n              float score = firstPassScore;\n              if (secondPassMatches) {\n                score += reRankWeight * secondPassScore;\n              }\n              return score;\n            }\n          }.rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n          //Lower howMany to return if we've collected fewer documents.\n          howMany = Math.min(howMany, mainScoreDocs.length);\n\n          if(howMany == rescoredDocs.scoreDocs.length) {\n            return rescoredDocs; // Just return the rescoredDocs\n          } else if(howMany > rescoredDocs.scoreDocs.length) {\n\n            //We need to return more then we've reRanked, so create the combined page.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            //lay down the initial docs\n            System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length);\n            //overlay the rescoreds docs\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          } else {\n            //We've rescored more then we need to return.\n            ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n            System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n            rescoredDocs.scoreDocs = scoreDocs;\n            return rescoredDocs;\n          }\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d729a652b9a64220536d47218ed1c8324955e86d":["0d98108304c4c7ce341ecb1e5b388308dc3b35ca"],"ffcff9959b822d9b743768173e0094d3ff62f0dd":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ffcff9959b822d9b743768173e0094d3ff62f0dd","d729a652b9a64220536d47218ed1c8324955e86d"],"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"38dae0420878d068e24de9026c5f3d34809b3375":["ffcff9959b822d9b743768173e0094d3ff62f0dd"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"0d98108304c4c7ce341ecb1e5b388308dc3b35ca":["38dae0420878d068e24de9026c5f3d34809b3375"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","ffcff9959b822d9b743768173e0094d3ff62f0dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"d729a652b9a64220536d47218ed1c8324955e86d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ffcff9959b822d9b743768173e0094d3ff62f0dd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","38dae0420878d068e24de9026c5f3d34809b3375","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"38dae0420878d068e24de9026c5f3d34809b3375":["0d98108304c4c7ce341ecb1e5b388308dc3b35ca"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["ab323901b34dfa96b6871cb6c5fc9cfcce93c2d1"],"0d98108304c4c7ce341ecb1e5b388308dc3b35ca":["d729a652b9a64220536d47218ed1c8324955e86d"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["ffcff9959b822d9b743768173e0094d3ff62f0dd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}