{"path":"solr/core/src/java/org/apache/solr/parser/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","commits":[{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","pathOld":"/dev/null","sourceNew":"  final public void MultiTerm(String field, List<BooleanClause> clauses) throws ParseException, SyntaxError {\n  Token text;\n  List<String> terms = null;\n    text = jj_consume_token(TERM);\n    if (splitOnWhitespace) {\n      Query q = getFieldQuery(getField(field), discardEscapeChar(text.image), false, true);\n      addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    } else {\n      terms = new ArrayList<String>();\n      terms.add(discardEscapeChar(text.image));\n    }\n    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    label_2:\n    while (true) {\n      text = jj_consume_token(TERM);\n      if (splitOnWhitespace) {\n        Query q = getFieldQuery(getField(field), discardEscapeChar(text.image), false, true);\n        addClause(clauses, CONJ_NONE, MOD_NONE, q);\n      } else {\n        terms.add(discardEscapeChar(text.image));\n      }\n      if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n        ;\n      } else {\n        break label_2;\n      }\n    }\n    if (splitOnWhitespace == false) {\n      Query q = getFieldQuery(getField(field), terms, true);\n      addMultiTermClause(clauses, q);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","pathOld":"/dev/null","sourceNew":"  final public void MultiTerm(String field, List<BooleanClause> clauses) throws ParseException, SyntaxError {\n  Token text;\n  List<String> terms = null;\n    text = jj_consume_token(TERM);\n    if (splitOnWhitespace) {\n      Query q = getFieldQuery(getField(field), discardEscapeChar(text.image), false, true);\n      addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    } else {\n      terms = new ArrayList<String>();\n      terms.add(discardEscapeChar(text.image));\n    }\n    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    label_2:\n    while (true) {\n      text = jj_consume_token(TERM);\n      if (splitOnWhitespace) {\n        Query q = getFieldQuery(getField(field), discardEscapeChar(text.image), false, true);\n        addClause(clauses, CONJ_NONE, MOD_NONE, q);\n      } else {\n        terms.add(discardEscapeChar(text.image));\n      }\n      if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n        ;\n      } else {\n        break label_2;\n      }\n    }\n    if (splitOnWhitespace == false) {\n      Query q = getFieldQuery(getField(field), terms, true);\n      addMultiTermClause(clauses, q);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#MultiTerm(String,List[BooleanClause]).mjava","sourceNew":"  final public void MultiTerm(String field, List<BooleanClause> clauses) throws ParseException, SyntaxError {Token text;\n  List<String> terms = null;\n    text = jj_consume_token(TERM);\nif (splitOnWhitespace) {\n      Query q = getFieldQuery(getField(field), discardEscapeChar(text.image), false, true);\n      addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    } else {\n      terms = new ArrayList<String>();\n      terms.add(discardEscapeChar(text.image));\n    }\n    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    label_2:\n    while (true) {\n      text = jj_consume_token(TERM);\nif (splitOnWhitespace) {\n        Query q = getFieldQuery(getField(field), discardEscapeChar(text.image), false, true);\n        addClause(clauses, CONJ_NONE, MOD_NONE, q);\n      } else {\n        terms.add(discardEscapeChar(text.image));\n      }\n      if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n        ;\n      } else {\n        break label_2;\n      }\n    }\nif (splitOnWhitespace == false) {\n      Query q = getFieldQuery(getField(field), terms, true);\n      addMultiTermClause(clauses, q);\n    }\n}\n\n","sourceOld":"  final public void MultiTerm(String field, List<BooleanClause> clauses) throws ParseException, SyntaxError {\n  Token text;\n  List<String> terms = null;\n    text = jj_consume_token(TERM);\n    if (splitOnWhitespace) {\n      Query q = getFieldQuery(getField(field), discardEscapeChar(text.image), false, true);\n      addClause(clauses, CONJ_NONE, MOD_NONE, q);\n    } else {\n      terms = new ArrayList<String>();\n      terms.add(discardEscapeChar(text.image));\n    }\n    if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n\n    } else {\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    label_2:\n    while (true) {\n      text = jj_consume_token(TERM);\n      if (splitOnWhitespace) {\n        Query q = getFieldQuery(getField(field), discardEscapeChar(text.image), false, true);\n        addClause(clauses, CONJ_NONE, MOD_NONE, q);\n      } else {\n        terms.add(discardEscapeChar(text.image));\n      }\n      if (getToken(1).kind == TERM && allowedPostMultiTerm(getToken(2).kind)) {\n        ;\n      } else {\n        break label_2;\n      }\n    }\n    if (splitOnWhitespace == false) {\n      Query q = getFieldQuery(getField(field), terms, true);\n      addMultiTermClause(clauses, q);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e55782fb51a6e9789542818eb2161a3247f39ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c03778630c4604270d88c148afb8c7de35b51d3c":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c03778630c4604270d88c148afb8c7de35b51d3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}