{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","commits":[{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean).mjava","sourceNew":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","sourceOld":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, boolean longOrds) throws IOException {\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (longOrds) {\n      bytesPerDoc += Long.BYTES;\n    } else {\n      bytesPerDoc += Integer.BYTES;\n    }\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40","date":1458553787,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","sourceNew":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","sourceOld":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eb86b08ad0b927f25ab9f04d077bc51fc6df039","date":1458906280,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","sourceNew":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n    this.bytesPerDoc = bytesPerDoc;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","sourceOld":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","sourceNew":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n    this.bytesPerDoc = bytesPerDoc;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","sourceOld":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n    this.bytesPerDoc = bytesPerDoc;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","sourceNew":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n    this.bytesPerDoc = bytesPerDoc;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","sourceOld":"  OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n    this.bytesPerDoc = bytesPerDoc;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointReader#OfflinePointReader(Directory,String,int,long,long,boolean,boolean).mjava","sourceNew":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length, byte[] reusableBuffer) throws IOException {\n    this.bytesPerDoc = packedBytesLength + Integer.BYTES;\n    this.packedValueLength = packedBytesLength;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n    if (reusableBuffer == null) {\n      throw new IllegalArgumentException(\"[reusableBuffer] cannot be null\");\n    }\n    if (reusableBuffer.length < bytesPerDoc) {\n      throw new IllegalArgumentException(\"Length of [reusableBuffer] must be bigger than \" + bytesPerDoc);\n    }\n\n    this.maxPointOnHeap =  reusableBuffer.length / bytesPerDoc;\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    this.onHeapBuffer = reusableBuffer;\n  }\n\n","sourceOld":"  public OfflinePointReader(Directory tempDir, String tempFileName, int packedBytesLength, long start, long length,\n                     boolean longOrds, boolean singleValuePerDoc) throws IOException {\n    this.singleValuePerDoc = singleValuePerDoc;\n    int bytesPerDoc = packedBytesLength + Integer.BYTES;\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        bytesPerDoc += Long.BYTES;\n      } else {\n        bytesPerDoc += Integer.BYTES;\n      }\n    }\n    this.bytesPerDoc = bytesPerDoc;\n\n    if ((start + length) * bytesPerDoc + CodecUtil.footerLength() > tempDir.fileLength(tempFileName)) {\n      throw new IllegalArgumentException(\"requested slice is beyond the length of this file: start=\" + start + \" length=\" + length + \" bytesPerDoc=\" + bytesPerDoc + \" fileLength=\" + tempDir.fileLength(tempFileName) + \" tempFileName=\" + tempFileName);\n    }\n\n    // Best-effort checksumming:\n    if (start == 0 && length*bytesPerDoc == tempDir.fileLength(tempFileName) - CodecUtil.footerLength()) {\n      // If we are going to read the entire file, e.g. because BKDWriter is now\n      // partitioning it, we open with checksums:\n      in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE);\n    } else {\n      // Since we are going to seek somewhere in the middle of a possibly huge\n      // file, and not read all bytes from there, don't use ChecksumIndexInput here.\n      // This is typically fine, because this same file will later be read fully,\n      // at another level of the BKDWriter recursion\n      in = tempDir.openInput(tempFileName, IOContext.READONCE);\n    }\n    name = tempFileName;\n\n    long seekFP = start * bytesPerDoc;\n    in.seek(seekFP);\n    countLeft = length;\n    packedValue = new byte[packedBytesLength];\n    this.longOrds = longOrds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["3eb86b08ad0b927f25ab9f04d077bc51fc6df039"],"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"3eb86b08ad0b927f25ab9f04d077bc51fc6df039":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["3eb86b08ad0b927f25ab9f04d077bc51fc6df039","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["78bdc7d6906146edb12a1a6c1f765ba680ed5124","9856095f7afb5a607bf5e65077615ed91273508c"],"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["3eb86b08ad0b927f25ab9f04d077bc51fc6df039"],"3eb86b08ad0b927f25ab9f04d077bc51fc6df039":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}