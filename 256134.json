{"path":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exception\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exception\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exception\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exceptoin\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      try (SolrClient client = jetty.newClient()) {\n        SolrException e = expectThrows(SolrException.class, () -> {\n          client.add(\"collection\", new SolrInputDocument());\n        });\n        assertThat(e.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exception\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/RemoteQueryErrorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      try (SolrClient client = jetty.newClient()) {\n        SolrException e = expectThrows(SolrException.class, () -> {\n          client.add(\"collection\", new SolrInputDocument());\n        });\n        assertThat(e.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForThingsToLevelOut(15);\n\n    del(\"*:*\");\n    \n    createCollection(\"collection2\", 2, 1, 10);\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>(2);\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    checkForCollection(\"collection2\", numShardsNumReplicaList, null);\n    waitForRecoveriesToFinish(\"collection2\", true);\n\n    for (SolrClient solrClient : clients) {\n      try {\n        SolrInputDocument emptyDoc = new SolrInputDocument();\n        solrClient.add(emptyDoc);\n        fail(\"Expected unique key exception\");\n      } catch (SolrException ex) {\n        assertThat(ex.getMessage(), containsString(\"Document is missing mandatory uniqueKey field: id\"));\n      } catch(Exception ex) {\n        fail(\"Expected a SolrException to occur, instead received: \" + ex.getClass());\n      } finally {\n        solrClient.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["abb23fcc2461782ab204e61213240feb77d355aa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["cc3b13b430571c2e169f98fe38e1e7666f88522d","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"abb23fcc2461782ab204e61213240feb77d355aa":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["636a04bc82e662bf141a55f1d10f52e1c76c727b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}