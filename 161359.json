{"path":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<Automaton>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static LightAutomaton toAutomaton(Term wildcardquery) {\n    List<LightAutomaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyStringLight());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyCharLight());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeCharLight(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeCharLight(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenateLight(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(Automata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(Automata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(Automata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(Automata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return Operations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static LightAutomaton toAutomaton(Term wildcardquery) {\n    List<LightAutomaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyStringLight());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyCharLight());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeCharLight(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeCharLight(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenateLight(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toAutomaton(Term).mjava","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(Automata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(Automata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(Automata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(Automata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return Operations.concatenate(automata);\n  }\n\n","sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static Automaton toAutomaton(Term wildcardquery) {\n    List<Automaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyString());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyChar());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeChar(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeChar(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenate(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}