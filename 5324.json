{"path":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#doWrite(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"5e0eba829d8047c176db6cee2c2c2e6f37e2925d","date":1575525998,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#doWrite(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void doWrite(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = createEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = createContext(request, response);\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layoutTemplate = request.getParams().get(LAYOUT);\n    boolean layoutEnabled = request.getParams().getBool(LAYOUT_ENABLED, true) && layoutTemplate != null;\n\n    String jsonWrapper = request.getParams().get(JSON);\n    boolean wrapResponse = layoutEnabled || jsonWrapper != null;\n\n    // create output\n    if (!wrapResponse) {\n      // straight-forward template/context merge to output\n      template.merge(context, writer);\n    }\n    else {\n      // merge to a string buffer, then wrap with layout and finally as JSON\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layoutEnabled) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layoutTemplate + TEMPLATE_EXTENSION).merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (jsonWrapper != null) {\n        for (int i=0; i<jsonWrapper.length(); i++) {\n          if (!Character.isJavaIdentifierPart(jsonWrapper.charAt(i))) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid function name for \" + JSON + \": '\" + jsonWrapper + \"'\");\n          }\n        }\n        writer.write(jsonWrapper + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#doWrite(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void doWrite(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = createEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = createContext(request, response);\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layoutTemplate = request.getParams().get(LAYOUT);\n    boolean layoutEnabled = request.getParams().getBool(LAYOUT_ENABLED, true) && layoutTemplate != null;\n\n    String jsonWrapper = request.getParams().get(JSON);\n    boolean wrapResponse = layoutEnabled || jsonWrapper != null;\n\n    // create output\n    if (!wrapResponse) {\n      // straight-forward template/context merge to output\n      template.merge(context, writer);\n    }\n    else {\n      // merge to a string buffer, then wrap with layout and finally as JSON\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layoutEnabled) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layoutTemplate + TEMPLATE_EXTENSION).merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (jsonWrapper != null) {\n        for (int i=0; i<jsonWrapper.length(); i++) {\n          if (!Character.isJavaIdentifierPart(jsonWrapper.charAt(i))) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid function name for \" + JSON + \": '\" + jsonWrapper + \"'\");\n          }\n        }\n        writer.write(jsonWrapper + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#doWrite(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void doWrite(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    VelocityEngine engine = createEngine(request);  // TODO: have HTTP headers available for configuring engine\n\n    Template template = getTemplate(engine, request);\n\n    VelocityContext context = createContext(request, response);\n    context.put(\"engine\", engine);  // for $engine.resourceExists(...)\n\n    String layoutTemplate = request.getParams().get(LAYOUT);\n    boolean layoutEnabled = request.getParams().getBool(LAYOUT_ENABLED, true) && layoutTemplate != null;\n\n    String jsonWrapper = request.getParams().get(JSON);\n    boolean wrapResponse = layoutEnabled || jsonWrapper != null;\n\n    // create output\n    if (!wrapResponse) {\n      // straight-forward template/context merge to output\n      template.merge(context, writer);\n    }\n    else {\n      // merge to a string buffer, then wrap with layout and finally as JSON\n      StringWriter stringWriter = new StringWriter();\n      template.merge(context, stringWriter);\n\n      if (layoutEnabled) {\n        context.put(\"content\", stringWriter.toString());\n        stringWriter = new StringWriter();\n        try {\n          engine.getTemplate(layoutTemplate + TEMPLATE_EXTENSION).merge(context, stringWriter);\n        } catch (Exception e) {\n          throw new IOException(e.getMessage());\n        }\n      }\n\n      if (jsonWrapper != null) {\n        for (int i=0; i<jsonWrapper.length(); i++) {\n          if (!Character.isJavaIdentifierPart(jsonWrapper.charAt(i))) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid function name for \" + JSON + \": '\" + jsonWrapper + \"'\");\n          }\n        }\n        writer.write(jsonWrapper + \"(\");\n        writer.write(getJSONWrap(stringWriter.toString()));\n        writer.write(')');\n      } else {  // using a layout, but not JSON wrapping\n        writer.write(stringWriter.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a90f561fc609ec007ba18b10dea9191dbbd71831":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"5e0eba829d8047c176db6cee2c2c2e6f37e2925d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"]},"commit2Childs":{"a90f561fc609ec007ba18b10dea9191dbbd71831":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a90f561fc609ec007ba18b10dea9191dbbd71831","5e0eba829d8047c176db6cee2c2c2e6f37e2925d"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e0eba829d8047c176db6cee2c2c2e6f37e2925d":["a90f561fc609ec007ba18b10dea9191dbbd71831","b659435fdb2401d91fa87bb3df798ae41a8046cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a90f561fc609ec007ba18b10dea9191dbbd71831","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}