{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String],boolean,String[]).mjava","commits":[{"id":"a688687cbff91a8f44c95d31697c3ba8a47c8c25","date":1593512440,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String],boolean,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String]).mjava","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   * \n   * @param overrides are needed only when shouldDeployClusterPlugins is true, since collection level plugins will get their overrides from ZK (collection params API)\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections, boolean shouldDeployClusterPlugins, String overrides[]) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        if (\"cluster\".equalsIgnoreCase(plugin.type)) {\n          if (!shouldDeployClusterPlugins) continue; // Plugins of type \"cluster\"\n          Map<String, String> overridesMap = getParameterOverrides(overrides);\n          Map<String, String> systemParams = Map.of(\"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, overridesMap, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for cluster level plugin\");\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, overridesMap, systemParams));\n            String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, overridesMap, systemParams);\n            PackageUtils.printGreen(\"Actual: \" + actualValue+\", expected: \" + expectedValue);\n            if (!expectedValue.equals(actualValue)) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n          }          \n        } else {\n          // Plugins of type \"collection\"\n          for (String collection: collections) {\n            Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n  \n            Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n            String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n  \n            if (\"GET\".equalsIgnoreCase(cmd.method)) {\n              String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n              PackageUtils.printGreen(response);\n              String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                  .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n              String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n              if (!expectedValue.equals(actualValue)) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n            }\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        for (String collection: collections) {\n          Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n\n          Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n            String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n            if (!expectedValue.equals(actualValue)) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4","date":1594087785,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String],boolean,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String],boolean,String[]).mjava","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   * \n   * @param overrides are needed only when shouldDeployClusterPlugins is true, since collection level plugins will get their overrides from ZK (collection params API)\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections, boolean shouldDeployClusterPlugins, String overrides[]) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        if (\"cluster\".equalsIgnoreCase(plugin.type)) {\n          if (!shouldDeployClusterPlugins) continue; // Plugins of type \"cluster\"\n          Map<String, String> overridesMap = getParameterOverrides(overrides);\n          Map<String, String> systemParams = Map.of(\"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, overridesMap, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for cluster level plugin\");\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = null;\n            try {\n              actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, overridesMap, systemParams));\n            } catch (PathNotFoundException ex) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n            if (actualValue != null) {\n              String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, overridesMap, systemParams);\n              PackageUtils.printGreen(\"Actual: \" + actualValue+\", expected: \" + expectedValue);\n              if (!expectedValue.equals(actualValue)) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for verify commands\");\n          }          \n        } else {\n          // Plugins of type \"collection\"\n          for (String collection: collections) {\n            Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n  \n            Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n            String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n  \n            if (\"GET\".equalsIgnoreCase(cmd.method)) {\n              String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n              PackageUtils.printGreen(response);\n              String actualValue = null;\n              try {\n                actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                    .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n              } catch (PathNotFoundException ex) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n              if (actualValue != null) {\n                String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n                PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n                if (!expectedValue.equals(actualValue)) {\n                  PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                  success = false;\n                }\n              }\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for verify commands\");\n            }\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   * \n   * @param overrides are needed only when shouldDeployClusterPlugins is true, since collection level plugins will get their overrides from ZK (collection params API)\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections, boolean shouldDeployClusterPlugins, String overrides[]) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        if (\"cluster\".equalsIgnoreCase(plugin.type)) {\n          if (!shouldDeployClusterPlugins) continue; // Plugins of type \"cluster\"\n          Map<String, String> overridesMap = getParameterOverrides(overrides);\n          Map<String, String> systemParams = Map.of(\"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, overridesMap, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for cluster level plugin\");\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, overridesMap, systemParams));\n            String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, overridesMap, systemParams);\n            PackageUtils.printGreen(\"Actual: \" + actualValue+\", expected: \" + expectedValue);\n            if (!expectedValue.equals(actualValue)) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n          }          \n        } else {\n          // Plugins of type \"collection\"\n          for (String collection: collections) {\n            Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n  \n            Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n            String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n  \n            if (\"GET\".equalsIgnoreCase(cmd.method)) {\n              String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n              PackageUtils.printGreen(response);\n              String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                  .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n              String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n              PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n              if (!expectedValue.equals(actualValue)) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for setup commands\");\n            }\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd","date":1596533005,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String],boolean,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#verify(SolrPackageInstance,List[String],boolean,String[]).mjava","sourceNew":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   * \n   * @param overrides are needed only when shouldDeployClusterPlugins is true, since collection level plugins will get their overrides from ZK (collection params API)\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections, boolean shouldDeployClusterPlugins, String overrides[]) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        if (\"cluster\".equalsIgnoreCase(plugin.type)) {\n          if (!shouldDeployClusterPlugins) continue; // Plugins of type \"cluster\"\n          Map<String, String> overridesMap = getParameterOverrides(overrides);\n          Map<String, String> systemParams = Map.of(\"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, overridesMap, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for cluster level plugin\");\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = null;\n            try {\n              actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, overridesMap, systemParams));\n            } catch (PathNotFoundException ex) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n            if (actualValue != null) {\n              String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, overridesMap, systemParams);\n              PackageUtils.printGreen(\"Actual: \" + actualValue + \", expected: \" + expectedValue);\n              if (!expectedValue.equals(actualValue)) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for verify commands\");\n          }          \n        } else {\n          // Plugins of type \"collection\"\n          for (String collection: collections) {\n            Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n  \n            Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n            String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n  \n            if (\"GET\".equalsIgnoreCase(cmd.method)) {\n              String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n              PackageUtils.printGreen(response);\n              String actualValue = null;\n              try {\n                actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                    .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n              } catch (PathNotFoundException ex) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n              if (actualValue != null) {\n                String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n                PackageUtils.printGreen(\"Actual: \" + actualValue + \", expected: \"+expectedValue);\n                if (!expectedValue.equals(actualValue)) {\n                  PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                  success = false;\n                }\n              }\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for verify commands\");\n            }\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Given a package and list of collections, verify if the package is installed\n   * in those collections. It uses the verify command of every plugin in the package (if defined).\n   * \n   * @param overrides are needed only when shouldDeployClusterPlugins is true, since collection level plugins will get their overrides from ZK (collection params API)\n   */\n  public boolean verify(SolrPackageInstance pkg, List<String> collections, boolean shouldDeployClusterPlugins, String overrides[]) {\n    boolean success = true;\n    for (Plugin plugin: pkg.plugins) {\n      Command cmd = plugin.verifyCommand;\n      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {\n        if (\"cluster\".equalsIgnoreCase(plugin.type)) {\n          if (!shouldDeployClusterPlugins) continue; // Plugins of type \"cluster\"\n          Map<String, String> overridesMap = getParameterOverrides(overrides);\n          Map<String, String> systemParams = Map.of(\"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, overridesMap, systemParams);\n          PackageUtils.printGreen(\"Executing \" + url + \" for cluster level plugin\");\n\n          if (\"GET\".equalsIgnoreCase(cmd.method)) {\n            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n            PackageUtils.printGreen(response);\n            String actualValue = null;\n            try {\n              actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, overridesMap, systemParams));\n            } catch (PathNotFoundException ex) {\n              PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n              success = false;\n            }\n            if (actualValue != null) {\n              String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, overridesMap, systemParams);\n              PackageUtils.printGreen(\"Actual: \" + actualValue+\", expected: \" + expectedValue);\n              if (!expectedValue.equals(actualValue)) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n            }\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for verify commands\");\n          }          \n        } else {\n          // Plugins of type \"collection\"\n          for (String collection: collections) {\n            Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);\n  \n            Map<String, String> systemParams = Map.of(\"collection\", collection, \"package-name\", pkg.name, \"package-version\", pkg.version, \"plugin-name\", plugin.name);\n            String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n            PackageUtils.printGreen(\"Executing \" + url + \" for collection:\" + collection);\n  \n            if (\"GET\".equalsIgnoreCase(cmd.method)) {\n              String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);\n              PackageUtils.printGreen(response);\n              String actualValue = null;\n              try {\n                actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())\n                    .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));\n              } catch (PathNotFoundException ex) {\n                PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                success = false;\n              }\n              if (actualValue != null) {\n                String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);\n                PackageUtils.printGreen(\"Actual: \"+actualValue+\", expected: \"+expectedValue);\n                if (!expectedValue.equals(actualValue)) {\n                  PackageUtils.printRed(\"Failed to deploy plugin: \" + plugin.name);\n                  success = false;\n                }\n              }\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST, \"Non-GET method not supported for verify commands\");\n            }\n          }\n        }\n      }\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4"],"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4":["a688687cbff91a8f44c95d31697c3ba8a47c8c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"]},"commit2Childs":{"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a688687cbff91a8f44c95d31697c3ba8a47c8c25"],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}