{"path":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"/dev/null","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["87fd9d0d02614519415a01c83417fd750882a42b","87fd9d0d02614519415a01c83417fd750882a42b","87fd9d0d02614519415a01c83417fd750882a42b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d69e73aaff9b303d13f8dcdf20c4606c6423c4cb","date":1287419434,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"/dev/null","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"/dev/null","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createEphemeralLiveNode().mjava","sourceNew":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    Watcher liveNodeWatcher = new Watcher() {\n\n      public void process(WatchedEvent event) {\n        try {\n          log.info(\"Updating live nodes:\" + zkClient);\n          try {\n            zkStateReader.updateLiveNodes();\n          } finally {\n            // re-make watch\n\n            String path = event.getPath();\n            if(path == null) {\n              // on shutdown, it appears this can trigger with a null path\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n              return;\n            }\n            zkClient.getChildren(event.getPath(), this);\n          }\n        } catch (KeeperException e) {\n          if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n            log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n            return;\n          }\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (IOException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n        \n      }\n      \n    };\n    try {\n      boolean nodeDeleted = true;\n      try {\n        // we attempt a delete in the case of a quick server bounce -\n        // if there was not a graceful shutdown, the node may exist\n        // until expiration timeout - so a node won't be created here because\n        // it exists, but eventually the node will be removed. So delete\n        // in case it exists and create a new node.\n        zkClient.delete(nodePath, -1);\n      } catch (KeeperException.NoNodeException e) {\n        // fine if there is nothing to delete\n        // TODO: annoying that ZK logs a warning on us\n        nodeDeleted = false;\n      }\n      if (nodeDeleted) {\n        log\n            .info(\"Found a previous node that still exists while trying to register a new live node \"\n                + nodePath + \" - removing existing node to create another.\");\n      }\n      zkClient.makePath(nodePath, CreateMode.EPHEMERAL);\n    } catch (KeeperException e) {\n      // its okay if the node already exists\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    zkClient.getChildren(ZkStateReader.LIVE_NODES_ZKNODE, liveNodeWatcher);\n    try {\n      zkStateReader.updateLiveNodes();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d69e73aaff9b303d13f8dcdf20c4606c6423c4cb"],"c26f00b574427b55127e869b935845554afde1fa":["d69e73aaff9b303d13f8dcdf20c4606c6423c4cb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d69e73aaff9b303d13f8dcdf20c4606c6423c4cb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d69e73aaff9b303d13f8dcdf20c4606c6423c4cb"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d69e73aaff9b303d13f8dcdf20c4606c6423c4cb"],"d69e73aaff9b303d13f8dcdf20c4606c6423c4cb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["d69e73aaff9b303d13f8dcdf20c4606c6423c4cb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"d69e73aaff9b303d13f8dcdf20c4606c6423c4cb":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}