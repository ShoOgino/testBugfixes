{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","sourceNew":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","sourceNew":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","sourceNew":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","sourceNew":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","sourceNew":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ENGLISH, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","sourceNew":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      long sizeInBytes;\n      if (lookup instanceof AnalyzingSuggester) {\n        // Just get size of FST: else we are also measuring\n        // size of MockAnalyzer which is non-trivial and\n        // varies depending on test seed:\n        sizeInBytes = ((AnalyzingSuggester) lookup).sizeInBytes();\n      } else {\n        sizeInBytes = RamUsageEstimator.sizeOf(lookup);\n      }\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              sizeInBytes));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              RamUsageEstimator.sizeOf(lookup)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df334aa9e12ddee14197967493d1a06616054048","date":1383568293,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","sourceNew":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      long sizeInBytes = lookup.sizeInBytes();\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              sizeInBytes));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      long sizeInBytes;\n      if (lookup instanceof AnalyzingSuggester) {\n        // Just get size of FST: else we are also measuring\n        // size of MockAnalyzer which is non-trivial and\n        // varies depending on test seed:\n        sizeInBytes = ((AnalyzingSuggester) lookup).sizeInBytes();\n      } else {\n        sizeInBytes = RamUsageEstimator.sizeOf(lookup);\n      }\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              sizeInBytes));\n    }\n  }\n\n","bugFix":null,"bugIntro":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8405d98acebb7e287bf7ac40e937ba05b8661285","date":1401433291,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#testStorageNeeds().mjava","sourceNew":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      long sizeInBytes = lookup.ramBytesUsed();\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              sizeInBytes));\n    }\n  }\n\n","sourceOld":"  /**\n   * Test memory required for the storage.\n   */\n  public void testStorageNeeds() throws Exception {\n    System.err.println(\"-- RAM consumption\");\n    for (Class<? extends Lookup> cls : benchmarkClasses) {\n      Lookup lookup = buildLookup(cls, dictionaryInput);\n      long sizeInBytes = lookup.sizeInBytes();\n      System.err.println(\n          String.format(Locale.ROOT, \"%-15s size[B]:%,13d\",\n              lookup.getClass().getSimpleName(), \n              sizeInBytes));\n    }\n  }\n\n","bugFix":["df334aa9e12ddee14197967493d1a06616054048"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["df334aa9e12ddee14197967493d1a06616054048"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["2acf500f78aa12b92e371fd89c719291986b6b90"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"df334aa9e12ddee14197967493d1a06616054048":["6ce825e9276493231308229152c48f755ce1a0a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6ce825e9276493231308229152c48f755ce1a0a5":["df334aa9e12ddee14197967493d1a06616054048"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","6ce825e9276493231308229152c48f755ce1a0a5","46d8ada1fff8d18cb197c38c7983225162599948"],"df334aa9e12ddee14197967493d1a06616054048":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}