{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f92f9a1cb1cb0c498faf719c9222c6d4fa02dd","date":1291738757,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8c4bb144102e537495ae5b321f77a9898f7b0b8","date":1291834816,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f1fd760e2a7a87de661158ca069c8dacab8360","date":1313992891,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.util.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      source = new StandardTokenizer(matchVersion, reader);\n    } else {\n      source = new ArabicLetterTokenizer(matchVersion, reader);\n    }\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f49143da0a5d278a72f741432047fcfa6da996e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["b8f1fd760e2a7a87de661158ca069c8dacab8360"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","f6f92f9a1cb1cb0c498faf719c9222c6d4fa02dd"],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","f6f92f9a1cb1cb0c498faf719c9222c6d4fa02dd"],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["f6f92f9a1cb1cb0c498faf719c9222c6d4fa02dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f6f92f9a1cb1cb0c498faf719c9222c6d4fa02dd":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"2f49143da0a5d278a72f741432047fcfa6da996e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d8c4bb144102e537495ae5b321f77a9898f7b0b8":[],"b8f1fd760e2a7a87de661158ca069c8dacab8360":["2f49143da0a5d278a72f741432047fcfa6da996e"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8","f6f92f9a1cb1cb0c498faf719c9222c6d4fa02dd"],"f6f92f9a1cb1cb0c498faf719c9222c6d4fa02dd":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8","b8f1fd760e2a7a87de661158ca069c8dacab8360"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d8c4bb144102e537495ae5b321f77a9898f7b0b8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}