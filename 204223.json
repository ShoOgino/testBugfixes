{"path":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertNotNull(metrics);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\" category=\"+category+\" metrics=\"+metrics,\n          (scope == null || category == null || metrics == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertNotNull(metrics);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\" category=\"+category+\" metrics=\"+metrics,\n          (scope == null || category == null || metrics == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d646b44d1d17a867bcd0e7a07b11c4837b169366","date":1483540291,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","sourceNew":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\", category=\"+category,\n          (scope == null || category == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertNotNull(metrics);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\" category=\"+category+\" metrics=\"+metrics,\n          (scope == null || category == null || metrics == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","sourceNew":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\", category=\"+category,\n          (scope == null || category == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertNotNull(metrics);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\" category=\"+category+\" metrics=\"+metrics,\n          (scope == null || category == null || metrics == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","sourceNew":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\", category=\"+category,\n          (scope == null || category == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\", category=\"+category,\n          (scope == null || category == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testRegisterMetrics().mjava","sourceNew":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\", category=\"+category,\n          (scope == null || category == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRegisterMetrics() {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    try {\n      coreMetricManager.registerMetricProducer(scope, producer);\n      assertNotNull(scope);\n      assertNotNull(category);\n      assertRegistered(scope, metrics, coreMetricManager);\n    } catch (final IllegalArgumentException e) {\n      assertTrue(\"expected at least one null but got: scope=\"+scope+\", category=\"+category,\n          (scope == null || category == null));\n      assertRegistered(scope, new HashMap<>(), coreMetricManager);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}