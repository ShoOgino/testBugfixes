{"path":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77e6111c8c695bcab271a048bf5aae6b05cf415b","date":1450974359,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n\n        addAttributes(next); // just in case there were delayed attribute additions\n\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77e6111c8c695bcab271a048bf5aae6b05cf415b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["77e6111c8c695bcab271a048bf5aae6b05cf415b"]},"commit2Childs":{"77e6111c8c695bcab271a048bf5aae6b05cf415b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["77e6111c8c695bcab271a048bf5aae6b05cf415b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}