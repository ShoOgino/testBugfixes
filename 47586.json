{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","sourceNew":"  private int doSerialTasks() throws Exception {\n    if (rate > 0) {\n      return doSerialTasksWithRate();\n    }\n    \n    initTasksArray();\n    int count = 0;\n\n    final long runTime = (long) (runTimeSec*1000);\n    List<RunBackgroundTask> bgTasks = null;\n\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; fixedTime || (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for(int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        if (task.getRunInBackground()) {\n          if (bgTasks == null) {\n            bgTasks = new ArrayList<RunBackgroundTask>();\n          }\n          RunBackgroundTask bgTask = new RunBackgroundTask(task, letChildReport);\n          bgTask.setPriority(task.getBackgroundDeltaPriority() + Thread.currentThread().getPriority());\n          bgTask.start();\n          bgTasks.add(bgTask);\n        } else {\n          try {\n            final int inc = task.runAndMaybeStats(letChildReport);\n            count += inc;\n            if (countsByTime != null) {\n              final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n              if (slot >= countsByTime.length) {\n                countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n              }\n              countsByTime[slot] += inc;\n            }\n            if (anyExhaustibleTasks)\n              updateExhausted(task);\n          } catch (NoMoreDataException e) {\n            exhausted = true;\n          }\n        }\n      }\n      if (fixedTime && System.currentTimeMillis()-t0 > runTime) {\n        repetitions = k+1;\n        break;\n      }\n    }\n\n    if (bgTasks != null) {\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.stopNow();\n      }\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.join();\n        count += bgTask.getCount();\n      }\n    }\n\n    if (countsByTime != null) {\n      getRunData().getPoints().getCurrentStats().setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    stopNow = false;\n\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasks() throws Exception {\n    if (rate > 0) {\n      return doSerialTasksWithRate();\n    }\n    \n    initTasksArray();\n    int count = 0;\n\n    final long runTime = (long) (runTimeSec*1000);\n    List<RunBackgroundTask> bgTasks = null;\n\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; fixedTime || (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for(int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        if (task.getRunInBackground()) {\n          if (bgTasks == null) {\n            bgTasks = new ArrayList<RunBackgroundTask>();\n          }\n          RunBackgroundTask bgTask = new RunBackgroundTask(task, letChildReport);\n          bgTask.setPriority(task.getBackgroundDeltaPriority() + Thread.currentThread().getPriority());\n          bgTask.start();\n          bgTasks.add(bgTask);\n        } else {\n          try {\n            final int inc = task.runAndMaybeStats(letChildReport);\n            count += inc;\n            if (countsByTime != null) {\n              final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n              if (slot >= countsByTime.length) {\n                countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n              }\n              countsByTime[slot] += inc;\n            }\n            if (anyExhaustibleTasks)\n              updateExhausted(task);\n          } catch (NoMoreDataException e) {\n            exhausted = true;\n          }\n        }\n      }\n      if (fixedTime && System.currentTimeMillis()-t0 > runTime) {\n        repetitions = k+1;\n        break;\n      }\n    }\n\n    if (bgTasks != null) {\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.stopNow();\n      }\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.join();\n        count += bgTask.getCount();\n      }\n    }\n\n    if (countsByTime != null) {\n      getRunData().getPoints().getCurrentStats().setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    stopNow = false;\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","sourceNew":"  private int doSerialTasks() throws Exception {\n    if (rate > 0) {\n      return doSerialTasksWithRate();\n    }\n    \n    initTasksArray();\n    int count = 0;\n\n    final long runTime = (long) (runTimeSec*1000);\n    List<RunBackgroundTask> bgTasks = null;\n\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; fixedTime || (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for(int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        if (task.getRunInBackground()) {\n          if (bgTasks == null) {\n            bgTasks = new ArrayList<RunBackgroundTask>();\n          }\n          RunBackgroundTask bgTask = new RunBackgroundTask(task, letChildReport);\n          bgTask.setPriority(task.getBackgroundDeltaPriority() + Thread.currentThread().getPriority());\n          bgTask.start();\n          bgTasks.add(bgTask);\n        } else {\n          try {\n            final int inc = task.runAndMaybeStats(letChildReport);\n            count += inc;\n            if (countsByTime != null) {\n              final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n              if (slot >= countsByTime.length) {\n                countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n              }\n              countsByTime[slot] += inc;\n            }\n            if (anyExhaustibleTasks)\n              updateExhausted(task);\n          } catch (NoMoreDataException e) {\n            exhausted = true;\n          }\n        }\n      }\n      if (fixedTime && System.currentTimeMillis()-t0 > runTime) {\n        repetitions = k+1;\n        break;\n      }\n    }\n\n    if (bgTasks != null) {\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.stopNow();\n      }\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.join();\n        count += bgTask.getCount();\n      }\n    }\n\n    if (countsByTime != null) {\n      getRunData().getPoints().getCurrentStats().setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    stopNow = false;\n\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasks() throws Exception {\n    if (rate > 0) {\n      return doSerialTasksWithRate();\n    }\n    \n    initTasksArray();\n    int count = 0;\n\n    final long runTime = (long) (runTimeSec*1000);\n    List<RunBackgroundTask> bgTasks = null;\n\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; fixedTime || (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for(int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        if (task.getRunInBackground()) {\n          if (bgTasks == null) {\n            bgTasks = new ArrayList<RunBackgroundTask>();\n          }\n          RunBackgroundTask bgTask = new RunBackgroundTask(task, letChildReport);\n          bgTask.setPriority(task.getBackgroundDeltaPriority() + Thread.currentThread().getPriority());\n          bgTask.start();\n          bgTasks.add(bgTask);\n        } else {\n          try {\n            final int inc = task.runAndMaybeStats(letChildReport);\n            count += inc;\n            if (countsByTime != null) {\n              final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n              if (slot >= countsByTime.length) {\n                countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n              }\n              countsByTime[slot] += inc;\n            }\n            if (anyExhaustibleTasks)\n              updateExhausted(task);\n          } catch (NoMoreDataException e) {\n            exhausted = true;\n          }\n        }\n      }\n      if (fixedTime && System.currentTimeMillis()-t0 > runTime) {\n        repetitions = k+1;\n        break;\n      }\n    }\n\n    if (bgTasks != null) {\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.stopNow();\n      }\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.join();\n        count += bgTask.getCount();\n      }\n    }\n\n    if (countsByTime != null) {\n      getRunData().getPoints().getCurrentStats().setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    stopNow = false;\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","sourceNew":"  private int doSerialTasks() throws Exception {\n    if (rate > 0) {\n      return doSerialTasksWithRate();\n    }\n    \n    initTasksArray();\n    int count = 0;\n\n    final long runTime = (long) (runTimeSec*1000);\n    List<RunBackgroundTask> bgTasks = null;\n\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; fixedTime || (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for(int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        if (task.getRunInBackground()) {\n          if (bgTasks == null) {\n            bgTasks = new ArrayList<RunBackgroundTask>();\n          }\n          RunBackgroundTask bgTask = new RunBackgroundTask(task, letChildReport);\n          bgTask.setPriority(task.getBackgroundDeltaPriority() + Thread.currentThread().getPriority());\n          bgTask.start();\n          bgTasks.add(bgTask);\n        } else {\n          try {\n            final int inc = task.runAndMaybeStats(letChildReport);\n            count += inc;\n            if (countsByTime != null) {\n              final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n              if (slot >= countsByTime.length) {\n                countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n              }\n              countsByTime[slot] += inc;\n            }\n            if (anyExhaustibleTasks)\n              updateExhausted(task);\n          } catch (NoMoreDataException e) {\n            exhausted = true;\n          }\n        }\n      }\n      if (fixedTime && System.currentTimeMillis()-t0 > runTime) {\n        repetitions = k+1;\n        break;\n      }\n    }\n\n    if (bgTasks != null) {\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.stopNow();\n      }\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.join();\n        count += bgTask.getCount();\n      }\n    }\n\n    if (countsByTime != null) {\n      getRunData().getPoints().getCurrentStats().setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    stopNow = false;\n\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasks() throws Exception {\n    if (rate > 0) {\n      return doSerialTasksWithRate();\n    }\n    \n    initTasksArray();\n    int count = 0;\n\n    final long runTime = (long) (runTimeSec*1000);\n    List<RunBackgroundTask> bgTasks = null;\n\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; fixedTime || (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for(int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        if (task.getRunInBackground()) {\n          if (bgTasks == null) {\n            bgTasks = new ArrayList<RunBackgroundTask>();\n          }\n          RunBackgroundTask bgTask = new RunBackgroundTask(task, letChildReport);\n          bgTask.setPriority(task.getBackgroundDeltaPriority() + Thread.currentThread().getPriority());\n          bgTask.start();\n          bgTasks.add(bgTask);\n        } else {\n          try {\n            final int inc = task.runAndMaybeStats(letChildReport);\n            count += inc;\n            if (countsByTime != null) {\n              final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n              if (slot >= countsByTime.length) {\n                countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n              }\n              countsByTime[slot] += inc;\n            }\n            if (anyExhaustibleTasks)\n              updateExhausted(task);\n          } catch (NoMoreDataException e) {\n            exhausted = true;\n          }\n        }\n      }\n      if (fixedTime && System.currentTimeMillis()-t0 > runTime) {\n        repetitions = k+1;\n        break;\n      }\n    }\n\n    if (bgTasks != null) {\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.stopNow();\n      }\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.join();\n        count += bgTask.getCount();\n      }\n    }\n\n    if (countsByTime != null) {\n      getRunData().getPoints().getCurrentStats().setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    stopNow = false;\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doSerialTasks().mjava","sourceNew":"  private int doSerialTasks() throws Exception {\n    if (rate > 0) {\n      return doSerialTasksWithRate();\n    }\n    \n    initTasksArray();\n    int count = 0;\n\n    final long runTime = (long) (runTimeSec*1000);\n    List<RunBackgroundTask> bgTasks = null;\n\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; fixedTime || (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for(int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        if (task.getRunInBackground()) {\n          if (bgTasks == null) {\n            bgTasks = new ArrayList<RunBackgroundTask>();\n          }\n          RunBackgroundTask bgTask = new RunBackgroundTask(task, letChildReport);\n          bgTask.setPriority(task.getBackgroundDeltaPriority() + Thread.currentThread().getPriority());\n          bgTask.start();\n          bgTasks.add(bgTask);\n        } else {\n          try {\n            final int inc = task.runAndMaybeStats(letChildReport);\n            count += inc;\n            if (countsByTime != null) {\n              final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n              if (slot >= countsByTime.length) {\n                countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n              }\n              countsByTime[slot] += inc;\n            }\n            if (anyExhaustibleTasks)\n              updateExhausted(task);\n          } catch (NoMoreDataException e) {\n            exhausted = true;\n          }\n        }\n      }\n      if (fixedTime && System.currentTimeMillis()-t0 > runTime) {\n        repetitions = k+1;\n        break;\n      }\n    }\n\n    if (bgTasks != null) {\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.stopNow();\n      }\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.join();\n        count += bgTask.getCount();\n      }\n    }\n\n    if (countsByTime != null) {\n      getRunData().getPoints().getCurrentStats().setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    stopNow = false;\n\n    return count;\n  }\n\n","sourceOld":"  private int doSerialTasks() throws Exception {\n    if (rate > 0) {\n      return doSerialTasksWithRate();\n    }\n    \n    initTasksArray();\n    int count = 0;\n\n    final long runTime = (long) (runTimeSec*1000);\n    List<RunBackgroundTask> bgTasks = null;\n\n    final long t0 = System.currentTimeMillis();\n    for (int k=0; fixedTime || (repetitions==REPEAT_EXHAUST && !exhausted) || k<repetitions; k++) {\n      if (stopNow) {\n        break;\n      }\n      for(int l=0;l<tasksArray.length;l++) {\n        final PerfTask task = tasksArray[l];\n        if (task.getRunInBackground()) {\n          if (bgTasks == null) {\n            bgTasks = new ArrayList<RunBackgroundTask>();\n          }\n          RunBackgroundTask bgTask = new RunBackgroundTask(task, letChildReport);\n          bgTask.setPriority(task.getBackgroundDeltaPriority() + Thread.currentThread().getPriority());\n          bgTask.start();\n          bgTasks.add(bgTask);\n        } else {\n          try {\n            final int inc = task.runAndMaybeStats(letChildReport);\n            count += inc;\n            if (countsByTime != null) {\n              final int slot = (int) ((System.currentTimeMillis()-t0)/logByTimeMsec);\n              if (slot >= countsByTime.length) {\n                countsByTime = ArrayUtil.grow(countsByTime, 1+slot);\n              }\n              countsByTime[slot] += inc;\n            }\n            if (anyExhaustibleTasks)\n              updateExhausted(task);\n          } catch (NoMoreDataException e) {\n            exhausted = true;\n          }\n        }\n      }\n      if (fixedTime && System.currentTimeMillis()-t0 > runTime) {\n        repetitions = k+1;\n        break;\n      }\n    }\n\n    if (bgTasks != null) {\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.stopNow();\n      }\n      for(RunBackgroundTask bgTask : bgTasks) {\n        bgTask.join();\n        count += bgTask.getCount();\n      }\n    }\n\n    if (countsByTime != null) {\n      getRunData().getPoints().getCurrentStats().setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    stopNow = false;\n\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}