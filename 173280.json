{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#nodesToTokenStrings(Collection[Node]).mjava","sourceNew":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> cellsToTokenStrings(Collection<Cell> cells) {\n    List<String> tokens = new ArrayList<String>((cells.size()));\n    for (Cell cell : cells) {\n      final String token = cell.getTokenString();\n      if (cell.isLeaf()) {\n        tokens.add(token + (char) Cell.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> nodesToTokenStrings(Collection<Node> nodes) {\n    List<String> tokens = new ArrayList<String>((nodes.size()));\n    for (Node node : nodes) {\n      final String token = node.getTokenString();\n      if (node.isLeaf()) {\n        tokens.add(token + (char) Node.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","sourceNew":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> cellsToTokenStrings(Collection<Cell> cells) {\n    List<String> tokens = new ArrayList<>((cells.size()));\n    for (Cell cell : cells) {\n      final String token = cell.getTokenString();\n      if (cell.isLeaf()) {\n        tokens.add(token + (char) Cell.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> cellsToTokenStrings(Collection<Cell> cells) {\n    List<String> tokens = new ArrayList<String>((cells.size()));\n    for (Cell cell : cells) {\n      final String token = cell.getTokenString();\n      if (cell.isLeaf()) {\n        tokens.add(token + (char) Cell.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc64259f3c8f43dfc6841ffad77df3b9446e3a5","date":1395149462,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","sourceNew":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   * @deprecated TODO remove; not used and not interesting, don't need collection in & out\n   */\n  public static List<String> cellsToTokenStrings(Collection<Cell> cells) {\n    List<String> tokens = new ArrayList<>((cells.size()));\n    for (Cell cell : cells) {\n      final String token = cell.getTokenString();\n      if (cell.isLeaf()) {\n        tokens.add(token + (char) Cell.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   */\n  public static List<String> cellsToTokenStrings(Collection<Cell> cells) {\n    List<String> tokens = new ArrayList<>((cells.size()));\n    for (Cell cell : cells) {\n      final String token = cell.getTokenString();\n      if (cell.isLeaf()) {\n        tokens.add(token + (char) Cell.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   * @deprecated TODO remove; not used and not interesting, don't need collection in & out\n   */\n  public static List<String> cellsToTokenStrings(Collection<Cell> cells) {\n    List<String> tokens = new ArrayList<>((cells.size()));\n    for (Cell cell : cells) {\n      final String token = cell.getTokenString();\n      if (cell.isLeaf()) {\n        tokens.add(token + (char) Cell.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#cellsToTokenStrings(Collection[Cell]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Will add the trailing leaf byte for leaves. This isn't particularly efficient.\n   * @deprecated TODO remove; not used and not interesting, don't need collection in & out\n   */\n  public static List<String> cellsToTokenStrings(Collection<Cell> cells) {\n    List<String> tokens = new ArrayList<>((cells.size()));\n    for (Cell cell : cells) {\n      final String token = cell.getTokenString();\n      if (cell.isLeaf()) {\n        tokens.add(token + (char) Cell.LEAF_BYTE);\n      } else {\n        tokens.add(token);\n      }\n    }\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8259c159da2de2e8528524fb76b244b46cbded59"],"efc64259f3c8f43dfc6841ffad77df3b9446e3a5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["efc64259f3c8f43dfc6841ffad77df3b9446e3a5","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["efc64259f3c8f43dfc6841ffad77df3b9446e3a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["efc64259f3c8f43dfc6841ffad77df3b9446e3a5"],"efc64259f3c8f43dfc6841ffad77df3b9446e3a5":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8259c159da2de2e8528524fb76b244b46cbded59":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}