{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  // set up a real cluster as the source of test data\n  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2, 0, 1)\n        .process(cluster.getSolrClient());\n    realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","sourceNew":"  // set up a real cluster as the source of test data\n  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2, 0, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll1\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll10\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n  }\n\n","sourceOld":"  // set up a real cluster as the source of test data\n  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2, 0, 1)\n        .process(cluster.getSolrClient());\n    realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a1cd3b5596944e1a9762fbb60da4d75ce643a29","date":1576500876,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","sourceNew":"  // set up a real cluster as the source of test data\n  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2, 0, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll1\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll10\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(realManager, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(realManager, \".scheduled_maintenance\");\n  }\n\n","sourceOld":"  // set up a real cluster as the source of test data\n  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2, 0, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll1\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll10\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","sourceNew":"  // set up a real cluster as the source of test data\n  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2, 0, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll1\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll10\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(realManager, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(realManager, \".scheduled_maintenance\");\n  }\n\n","sourceOld":"  // set up a real cluster as the source of test data\n  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2, 0, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll1\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll10\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#setupCluster().mjava","sourceNew":null,"sourceOld":"  // set up a real cluster as the source of test data\n  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(NODE_COUNT)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 2, 0, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll1\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(\"coll10\", null, 1, 1)\n        .process(cluster.getSolrClient());\n    realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    // disable .scheduled_maintenance (once it exists)\n    CloudTestUtils.waitForTriggerToBeScheduled(realManager, \".scheduled_maintenance\");\n    CloudTestUtils.suspendTrigger(realManager, \".scheduled_maintenance\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"3f504512a03d978990cbff30db0522b354e846db":["3a1cd3b5596944e1a9762fbb60da4d75ce643a29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a1cd3b5596944e1a9762fbb60da4d75ce643a29":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b945b8f5bba0303382bc69d60c0c287714f23328":["d3d2a34ea3732f91149b31bcad82026ad85fda69","3a1cd3b5596944e1a9762fbb60da4d75ce643a29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["3a1cd3b5596944e1a9762fbb60da4d75ce643a29","b945b8f5bba0303382bc69d60c0c287714f23328"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"3a1cd3b5596944e1a9762fbb60da4d75ce643a29":["3f504512a03d978990cbff30db0522b354e846db","b945b8f5bba0303382bc69d60c0c287714f23328"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}