{"path":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","commits":[{"id":"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf","date":1374966910,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If its a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName(), \n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["51f4989a33b68ac6c30af846eb822ea8e561998c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If its a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName(), \n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName(), \n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If its a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName(), \n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName().trim(),\n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName(), \n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName().trim(),\n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName(), \n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6debb419247061874c92acdabe7b1002fb73c23f","date":1462396795,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName().trim(),\n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName().trim(),\n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName().trim(),\n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List items = upload.parseRequest(req);\n      Iterator iter = items.iterator();\n      while (iter.hasNext()) {\n          FileItem item = (FileItem) iter.next();\n\n          // If it's a form field, put it in our parameter map\n          if (item.isFormField()) {\n            MultiMapSolrParams.addParam( \n              item.getFieldName().trim(),\n              item.getString(), params.getMap() );\n          }\n          // Add the stream\n          else { \n            streams.add( new FileItemContentStream( item ) );\n          }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f4989a33b68ac6c30af846eb822ea8e561998c","date":1481732210,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(\n        final HttpServletRequest req, ArrayList<ContentStream> streams) throws Exception {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","bugFix":["8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(\n        final HttpServletRequest req, ArrayList<ContentStream> streams) throws Exception {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams( \n        final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n    {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n      \n      // Create a factory for disk-based file items\n      DiskFileItemFactory factory = new DiskFileItemFactory();\n\n      // Set factory constraints\n      // TODO - configure factory.setSizeThreshold(yourMaxMemorySize);\n      // TODO - configure factory.setRepository(yourTempDirectory);\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5c4637fb06d45efdeaf0f2d262b133ab2de181","date":1590122088,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrRequestParsers.MultipartRequestParser#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"    @Override\n    public SolrParams parseParamsAndFillStreams(\n        final HttpServletRequest req, ArrayList<ContentStream> streams) throws Exception {\n      if (!isMultipart(req)) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      // Magic way to tell Jetty dynamically we want multi-part processing.  \"Request\" here is a Jetty class\n      req.setAttribute(Request.MULTIPART_CONFIG_ELEMENT, multipartConfigElement);\n\n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n\n      // IMPORTANT: the Parts will all have the delete() method called by cleanupMultipartFiles()\n\n      for (Part part : req.getParts()) {\n        if (part.getSubmittedFileName() == null) { // thus a form field and not file upload\n          // If it's a form field, put it in our parameter map\n          String partAsString = org.apache.commons.io.IOUtils.toString(new PartContentStream(part).getReader());\n          MultiMapSolrParams.addParam(\n              part.getName().trim(),\n              partAsString, params.getMap() );\n        } else { // file upload\n          streams.add(new PartContentStream(part));\n        }\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams parseParamsAndFillStreams(\n        final HttpServletRequest req, ArrayList<ContentStream> streams) throws Exception {\n      if( !ServletFileUpload.isMultipartContent(req) ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \"Not multipart content! \"+req.getContentType() );\n      }\n      \n      MultiMapSolrParams params = parseQueryString( req.getQueryString() );\n\n      // Create a new file upload handler\n      ServletFileUpload upload = new ServletFileUpload(factory);\n      upload.setSizeMax( ((long) uploadLimitKB) * 1024L );\n\n      // Parse the request\n      List<FileItem> items = upload.parseRequest(req);\n      for (FileItem item : items) {\n        // If it's a form field, put it in our parameter map\n        if (item.isFormField()) {\n          MultiMapSolrParams.addParam(\n            item.getFieldName().trim(),\n            item.getString(), params.getMap() );\n        }\n        // Add the stream\n        else {\n          streams.add( new FileItemContentStream( item ) );\n        }\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"ac5c4637fb06d45efdeaf0f2d262b133ab2de181":["51f4989a33b68ac6c30af846eb822ea8e561998c"],"73450c0955930295d34703e7ddbfc6973b7a121a":["0d17ec5164debc23076db7fd11d0331f201583b5","6debb419247061874c92acdabe7b1002fb73c23f"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["0d17ec5164debc23076db7fd11d0331f201583b5","73450c0955930295d34703e7ddbfc6973b7a121a"],"51f4989a33b68ac6c30af846eb822ea8e561998c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","0d17ec5164debc23076db7fd11d0331f201583b5"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"0d17ec5164debc23076db7fd11d0331f201583b5":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["0d17ec5164debc23076db7fd11d0331f201583b5","73450c0955930295d34703e7ddbfc6973b7a121a"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","51f4989a33b68ac6c30af846eb822ea8e561998c"],"6debb419247061874c92acdabe7b1002fb73c23f":["0d17ec5164debc23076db7fd11d0331f201583b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5c4637fb06d45efdeaf0f2d262b133ab2de181"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"ac5c4637fb06d45efdeaf0f2d262b133ab2de181":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","51f4989a33b68ac6c30af846eb822ea8e561998c","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["9856095f7afb5a607bf5e65077615ed91273508c"],"51f4989a33b68ac6c30af846eb822ea8e561998c":["ac5c4637fb06d45efdeaf0f2d262b133ab2de181","9856095f7afb5a607bf5e65077615ed91273508c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"0d17ec5164debc23076db7fd11d0331f201583b5":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","6debb419247061874c92acdabe7b1002fb73c23f"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"6debb419247061874c92acdabe7b1002fb73c23f":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}