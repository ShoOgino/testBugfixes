{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#slowFuzzyMatch(int,int,boolean,List[TermFreq],String).mjava","commits":[{"id":"673d1479bcc124ba45b876b686d19f67435bca90","date":1351013999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#slowFuzzyMatch(int,int,boolean,List[TermFreq],String).mjava","pathOld":"/dev/null","sourceNew":"  private List<LookupResult> slowFuzzyMatch(int prefixLen, int maxEdits, boolean allowTransposition, List<TermFreq> answers, String frag) {\n    final List<LookupResult> results = new ArrayList<LookupResult>();\n    final int fragLen = frag.length();\n    for(TermFreq tf : answers) {\n      //System.out.println(\"  check s=\" + tf.term.utf8ToString());\n      boolean prefixMatches = true;\n      for(int i=0;i<prefixLen;i++) {\n        if (i == fragLen) {\n          // Prefix still matches:\n          break;\n        }\n        if (i == tf.term.length || tf.term.bytes[i] != (byte) frag.charAt(i)) {\n          prefixMatches = false;\n          break;\n        }\n      }\n      //System.out.println(\"    prefixMatches=\" + prefixMatches);\n\n      if (prefixMatches) {\n        final int len = tf.term.length;\n        if (len >= fragLen-maxEdits) {\n          // OK it's possible:\n          //System.out.println(\"    possible\");\n          int d;\n          final String s = tf.term.utf8ToString();\n          if (fragLen == prefixLen) {\n            d = 0;\n          } else if (false && len < fragLen) {\n            d = getDistance(frag, s, allowTransposition);\n          } else {\n            //System.out.println(\"    try loop\");\n            d = maxEdits + 1;\n            for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n              if (s.length() < fragLen - ed) {\n                continue;\n              }\n              String check = s.substring(0, fragLen-ed);\n              d = getDistance(frag, check, allowTransposition);\n              //System.out.println(\"    sub check s=\" + check + \" d=\" + d);\n              if (d <= maxEdits) {\n                break;\n              }\n            }\n          }\n          if (d <= maxEdits) {\n            results.add(new LookupResult(tf.term.utf8ToString(), tf.v));\n          }\n        }\n      }\n\n      Collections.sort(results, new CompareByCostThenAlpha());\n    }\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ba222c174ec1943d8d14d012d1d6e24a1cc4972","date":1351522220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#slowFuzzyMatch(int,int,boolean,List[TermFreq],String).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#slowFuzzyMatch(int,int,boolean,List[TermFreq],String).mjava","sourceNew":"  private List<LookupResult> slowFuzzyMatch(int prefixLen, int maxEdits, boolean allowTransposition, List<TermFreq> answers, String frag) {\n    final List<LookupResult> results = new ArrayList<LookupResult>();\n    final int fragLen = frag.length();\n    for(TermFreq tf : answers) {\n      //System.out.println(\"  check s=\" + tf.term.utf8ToString());\n      boolean prefixMatches = true;\n      for(int i=0;i<prefixLen;i++) {\n        if (i == fragLen) {\n          // Prefix still matches:\n          break;\n        }\n        if (i == tf.term.length || tf.term.bytes[i] != (byte) frag.charAt(i)) {\n          prefixMatches = false;\n          break;\n        }\n      }\n      //System.out.println(\"    prefixMatches=\" + prefixMatches);\n\n      if (prefixMatches) {\n        final int len = tf.term.length;\n        if (len >= fragLen-maxEdits) {\n          // OK it's possible:\n          //System.out.println(\"    possible\");\n          int d;\n          final String s = tf.term.utf8ToString();\n          if (fragLen == prefixLen) {\n            d = 0;\n          } else if (false && len < fragLen) {\n            d = getDistance(frag, s, allowTransposition);\n          } else {\n            //System.out.println(\"    try loop\");\n            d = maxEdits + 1;\n            //for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n            for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n              if (s.length() < fragLen - ed) {\n                continue;\n              }\n              String check = s.substring(0, fragLen-ed);\n              d = getDistance(frag, check, allowTransposition);\n              //System.out.println(\"    sub check s=\" + check + \" d=\" + d);\n              if (d <= maxEdits) {\n                break;\n              }\n            }\n          }\n          if (d <= maxEdits) {\n            results.add(new LookupResult(tf.term.utf8ToString(), tf.v));\n          }\n        }\n      }\n\n      Collections.sort(results, new CompareByCostThenAlpha());\n    }\n\n    return results;\n  }\n\n","sourceOld":"  private List<LookupResult> slowFuzzyMatch(int prefixLen, int maxEdits, boolean allowTransposition, List<TermFreq> answers, String frag) {\n    final List<LookupResult> results = new ArrayList<LookupResult>();\n    final int fragLen = frag.length();\n    for(TermFreq tf : answers) {\n      //System.out.println(\"  check s=\" + tf.term.utf8ToString());\n      boolean prefixMatches = true;\n      for(int i=0;i<prefixLen;i++) {\n        if (i == fragLen) {\n          // Prefix still matches:\n          break;\n        }\n        if (i == tf.term.length || tf.term.bytes[i] != (byte) frag.charAt(i)) {\n          prefixMatches = false;\n          break;\n        }\n      }\n      //System.out.println(\"    prefixMatches=\" + prefixMatches);\n\n      if (prefixMatches) {\n        final int len = tf.term.length;\n        if (len >= fragLen-maxEdits) {\n          // OK it's possible:\n          //System.out.println(\"    possible\");\n          int d;\n          final String s = tf.term.utf8ToString();\n          if (fragLen == prefixLen) {\n            d = 0;\n          } else if (false && len < fragLen) {\n            d = getDistance(frag, s, allowTransposition);\n          } else {\n            //System.out.println(\"    try loop\");\n            d = maxEdits + 1;\n            for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n              if (s.length() < fragLen - ed) {\n                continue;\n              }\n              String check = s.substring(0, fragLen-ed);\n              d = getDistance(frag, check, allowTransposition);\n              //System.out.println(\"    sub check s=\" + check + \" d=\" + d);\n              if (d <= maxEdits) {\n                break;\n              }\n            }\n          }\n          if (d <= maxEdits) {\n            results.add(new LookupResult(tf.term.utf8ToString(), tf.v));\n          }\n        }\n      }\n\n      Collections.sort(results, new CompareByCostThenAlpha());\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","date":1351615637,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#slowFuzzyMatch(int,int,boolean,List[TermFreq],String).mjava","pathOld":"/dev/null","sourceNew":"  private List<LookupResult> slowFuzzyMatch(int prefixLen, int maxEdits, boolean allowTransposition, List<TermFreq> answers, String frag) {\n    final List<LookupResult> results = new ArrayList<LookupResult>();\n    final int fragLen = frag.length();\n    for(TermFreq tf : answers) {\n      //System.out.println(\"  check s=\" + tf.term.utf8ToString());\n      boolean prefixMatches = true;\n      for(int i=0;i<prefixLen;i++) {\n        if (i == fragLen) {\n          // Prefix still matches:\n          break;\n        }\n        if (i == tf.term.length || tf.term.bytes[i] != (byte) frag.charAt(i)) {\n          prefixMatches = false;\n          break;\n        }\n      }\n      //System.out.println(\"    prefixMatches=\" + prefixMatches);\n\n      if (prefixMatches) {\n        final int len = tf.term.length;\n        if (len >= fragLen-maxEdits) {\n          // OK it's possible:\n          //System.out.println(\"    possible\");\n          int d;\n          final String s = tf.term.utf8ToString();\n          if (fragLen == prefixLen) {\n            d = 0;\n          } else if (false && len < fragLen) {\n            d = getDistance(frag, s, allowTransposition);\n          } else {\n            //System.out.println(\"    try loop\");\n            d = maxEdits + 1;\n            //for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n            for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n              if (s.length() < fragLen - ed) {\n                continue;\n              }\n              String check = s.substring(0, fragLen-ed);\n              d = getDistance(frag, check, allowTransposition);\n              //System.out.println(\"    sub check s=\" + check + \" d=\" + d);\n              if (d <= maxEdits) {\n                break;\n              }\n            }\n          }\n          if (d <= maxEdits) {\n            results.add(new LookupResult(tf.term.utf8ToString(), tf.v));\n          }\n        }\n      }\n\n      Collections.sort(results, new CompareByCostThenAlpha());\n    }\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#slowFuzzyMatch(int,int,boolean,List[TermFreqPayload],String).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#slowFuzzyMatch(int,int,boolean,List[TermFreq],String).mjava","sourceNew":"  private List<LookupResult> slowFuzzyMatch(int prefixLen, int maxEdits, boolean allowTransposition, List<TermFreqPayload> answers, String frag) {\n    final List<LookupResult> results = new ArrayList<LookupResult>();\n    final int fragLen = frag.length();\n    for(TermFreqPayload tf : answers) {\n      //System.out.println(\"  check s=\" + tf.term.utf8ToString());\n      boolean prefixMatches = true;\n      for(int i=0;i<prefixLen;i++) {\n        if (i == fragLen) {\n          // Prefix still matches:\n          break;\n        }\n        if (i == tf.term.length || tf.term.bytes[i] != (byte) frag.charAt(i)) {\n          prefixMatches = false;\n          break;\n        }\n      }\n      //System.out.println(\"    prefixMatches=\" + prefixMatches);\n\n      if (prefixMatches) {\n        final int len = tf.term.length;\n        if (len >= fragLen-maxEdits) {\n          // OK it's possible:\n          //System.out.println(\"    possible\");\n          int d;\n          final String s = tf.term.utf8ToString();\n          if (fragLen == prefixLen) {\n            d = 0;\n          } else if (false && len < fragLen) {\n            d = getDistance(frag, s, allowTransposition);\n          } else {\n            //System.out.println(\"    try loop\");\n            d = maxEdits + 1;\n            //for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n            for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n              if (s.length() < fragLen - ed) {\n                continue;\n              }\n              String check = s.substring(0, fragLen-ed);\n              d = getDistance(frag, check, allowTransposition);\n              //System.out.println(\"    sub check s=\" + check + \" d=\" + d);\n              if (d <= maxEdits) {\n                break;\n              }\n            }\n          }\n          if (d <= maxEdits) {\n            results.add(new LookupResult(tf.term.utf8ToString(), tf.v));\n          }\n        }\n      }\n\n      Collections.sort(results, new CompareByCostThenAlpha());\n    }\n\n    return results;\n  }\n\n","sourceOld":"  private List<LookupResult> slowFuzzyMatch(int prefixLen, int maxEdits, boolean allowTransposition, List<TermFreq> answers, String frag) {\n    final List<LookupResult> results = new ArrayList<LookupResult>();\n    final int fragLen = frag.length();\n    for(TermFreq tf : answers) {\n      //System.out.println(\"  check s=\" + tf.term.utf8ToString());\n      boolean prefixMatches = true;\n      for(int i=0;i<prefixLen;i++) {\n        if (i == fragLen) {\n          // Prefix still matches:\n          break;\n        }\n        if (i == tf.term.length || tf.term.bytes[i] != (byte) frag.charAt(i)) {\n          prefixMatches = false;\n          break;\n        }\n      }\n      //System.out.println(\"    prefixMatches=\" + prefixMatches);\n\n      if (prefixMatches) {\n        final int len = tf.term.length;\n        if (len >= fragLen-maxEdits) {\n          // OK it's possible:\n          //System.out.println(\"    possible\");\n          int d;\n          final String s = tf.term.utf8ToString();\n          if (fragLen == prefixLen) {\n            d = 0;\n          } else if (false && len < fragLen) {\n            d = getDistance(frag, s, allowTransposition);\n          } else {\n            //System.out.println(\"    try loop\");\n            d = maxEdits + 1;\n            //for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n            for(int ed=-maxEdits;ed<=maxEdits;ed++) {\n              if (s.length() < fragLen - ed) {\n                continue;\n              }\n              String check = s.substring(0, fragLen-ed);\n              d = getDistance(frag, check, allowTransposition);\n              //System.out.println(\"    sub check s=\" + check + \" d=\" + d);\n              if (d <= maxEdits) {\n                break;\n              }\n            }\n          }\n          if (d <= maxEdits) {\n            results.add(new LookupResult(tf.term.utf8ToString(), tf.v));\n          }\n        }\n      }\n\n      Collections.sort(results, new CompareByCostThenAlpha());\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ba222c174ec1943d8d14d012d1d6e24a1cc4972"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ba222c174ec1943d8d14d012d1d6e24a1cc4972":["673d1479bcc124ba45b876b686d19f67435bca90"],"673d1479bcc124ba45b876b686d19f67435bca90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"]},"commit2Childs":{"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","673d1479bcc124ba45b876b686d19f67435bca90"],"0ba222c174ec1943d8d14d012d1d6e24a1cc4972":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"673d1479bcc124ba45b876b686d19f67435bca90":["0ba222c174ec1943d8d14d012d1d6e24a1cc4972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}