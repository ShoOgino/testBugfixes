{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testBufferActions().mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testBufferActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#doTestBufferActions().mjava","sourceNew":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","sourceOld":"  // check that the buffer state is properly synchronised across nodes\n  public void doTestBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testBufferActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testBufferActions().mjava","sourceNew":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","sourceOld":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testBufferActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testBufferActions().mjava","sourceNew":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","sourceOld":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testBufferActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testBufferActions().mjava","sourceNew":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","sourceOld":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testBufferActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testBufferActions().mjava","sourceNew":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","sourceOld":"  // check that the buffer state is properly synchronised across nodes\n  @Test\n  @ShardsFixed(num = 2)\n  public void testBufferActions() throws Exception {\n    // check initial status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n\n    // send disable buffer action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.DISABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // Restart the leader of shard 1\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.DISABLED);\n\n    // send enable buffer action to second shard\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ENABLEBUFFER);\n    status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.BufferState.ENABLED.toLower(), status.get(CdcrParams.BufferState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STOPPED, CdcrParams.BufferState.ENABLED);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["e7da9d8536c11576df10e348efa79d2739170936"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}