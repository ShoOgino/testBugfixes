{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = TermRangeQuery.newStringRange(field, part1, part2, startInclusive, endInclusive);\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["b12d3e81e0f95a4527b5703953c503f71120ffcc","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["4e9bbb27241bcf9645bb2f724c137537aa69918a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"a53a291ad9b1cc050d846b68758c061a55d52734":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","3e492fb0f2bb0b4b47208286f9331ff55963c656","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e9bbb27241bcf9645bb2f724c137537aa69918a","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}