{"path":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","commits":[{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/example/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid value\", 2.0, node.value, 0.0);\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31703f98041a9e7086254ed134d8f91c22ac933f","date":1360500940,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCLExample#assertCorrectMultiResults(ExampleResult).mjava","sourceNew":null,"sourceOld":"  public static void assertCorrectMultiResults(ExampleResult exampleResults) {\n    List<FacetResult> results = exampleResults.getFacetResults();\n    FacetResult result = results.get(0);\n    assertNotNull(\"Result should not be null\", result);\n    FacetResultNode node = result.getFacetResultNode();\n    assertEquals(\"Invalid label\", \"5\", node.label.toString());\n    assertEquals(\"Invalid # of subresults\", 3, node.subResults.size());\n\n    Iterator<? extends FacetResultNode> subResults = node.subResults.iterator();\n    FacetResultNode sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/2\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/7\", sub.label.toString());\n    sub = subResults.next();\n    assertEquals(\"Invalid subresult value\", 1.0, sub.value, 0.0);\n    assertEquals(\"Invalid subresult label\", \"5/5\", sub.label.toString());\n\n    result = results.get(1);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"5/5\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n    result = results.get(2);\n    node = result.getFacetResultNode();\n    assertNotNull(\"Result should not be null\", result);\n    assertEquals(\"Invalid label\", \"6/2\", node.label.toString());\n    assertEquals(\"Invalid value\", 1, node.value, 0.0);\n    assertEquals(\"Invalid number of subresults\", 0, node.subResults.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"31703f98041a9e7086254ed134d8f91c22ac933f":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31703f98041a9e7086254ed134d8f91c22ac933f"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61d5f95d14e5b9b046998c51e16709a398c15226","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"31703f98041a9e7086254ed134d8f91c22ac933f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","31703f98041a9e7086254ed134d8f91c22ac933f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}