{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#totalize().mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#totalize().mjava","pathOld":"/dev/null","sourceNew":"  public LightAutomaton totalize() {\n    LightAutomaton result = new LightAutomaton();\n    int numStates = getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n    result.finish();\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#totalize().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#totalize().mjava","sourceNew":"  public LightAutomaton totalize() {\n    LightAutomaton result = new LightAutomaton();\n    int numStates = getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  public LightAutomaton totalize() {\n    LightAutomaton result = new LightAutomaton();\n    int numStates = getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n    result.finish();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#totalize().mjava","sourceNew":"  // nocommit move to Operations\n  public Automaton totalize() {\n    Automaton result = new Automaton();\n    int numStates = getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  public LightAutomaton totalize() {\n    LightAutomaton result = new LightAutomaton();\n    int numStates = getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i, isAccept(i));\n    }\n\n    int deadState = result.createState();\n    result.addTransition(deadState, deadState, Character.MIN_CODE_POINT, Character.MAX_CODE_POINT);\n\n    Transition t = new Transition();\n    for(int i=0;i<numStates;i++) {\n      int maxi = Character.MIN_CODE_POINT;\n      int count = initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        getNextTransition(t);\n        result.addTransition(i, t.dest, t.min, t.max);\n        if (t.min > maxi) {\n          result.addTransition(i, deadState, maxi, t.min-1);\n        }\n        if (t.max + 1 > maxi) {\n          maxi = t.max + 1;\n        }\n      }\n\n      if (maxi <= Character.MAX_CODE_POINT) {\n        result.addTransition(i, deadState, maxi, Character.MAX_CODE_POINT);\n      }\n    }\n    result.finishState();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}