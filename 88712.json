{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","sourceNew":"  // 64 bit shifts\n  private void shift() {\n    if ((int)word ==0) {wordShift +=32; word = word >>>32; }\n    if ((word & 0x0000FFFF) == 0) { wordShift +=16; word >>>=16; }\n    if ((word & 0x000000FF) == 0) { wordShift +=8; word >>>=8; }\n    indexArray = bitlist[(int)word & 0xff];\n  }\n\n","sourceOld":"  // 64 bit shifts\n  private void shift() {\n    if ((int)word ==0) {wordShift +=32; word = word >>>32; }\n    if ((word & 0x0000FFFF) == 0) { wordShift +=16; word >>>=16; }\n    if ((word & 0x000000FF) == 0) { wordShift +=8; word >>>=8; }\n    indexArray = bitlist[(int)word & 0xff];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","date":1373484264,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","sourceNew":"  // 64 bit shifts\n  private void shift() {\n    if ((int)word ==0) {wordShift +=32; word = word >>>32; }\n    if ((word & 0x0000FFFF) == 0) { wordShift +=16; word >>>=16; }\n    if ((word & 0x000000FF) == 0) { wordShift +=8; word >>>=8; }\n    indexArray = BitUtil.bitList((byte) word);\n  }\n\n","sourceOld":"  // 64 bit shifts\n  private void shift() {\n    if ((int)word ==0) {wordShift +=32; word = word >>>32; }\n    if ((word & 0x0000FFFF) == 0) { wordShift +=16; word >>>=16; }\n    if ((word & 0x000000FF) == 0) { wordShift +=8; word >>>=8; }\n    indexArray = bitlist[(int)word & 0xff];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","sourceNew":"  // 64 bit shifts\n  private void shift() {\n    if ((int)word ==0) {wordShift +=32; word = word >>>32; }\n    if ((word & 0x0000FFFF) == 0) { wordShift +=16; word >>>=16; }\n    if ((word & 0x000000FF) == 0) { wordShift +=8; word >>>=8; }\n    indexArray = BitUtil.bitList((byte) word);\n  }\n\n","sourceOld":"  // 64 bit shifts\n  private void shift() {\n    if ((int)word ==0) {wordShift +=32; word = word >>>32; }\n    if ((word & 0x0000FFFF) == 0) { wordShift +=16; word >>>=16; }\n    if ((word & 0x000000FF) == 0) { wordShift +=8; word >>>=8; }\n    indexArray = bitlist[(int)word & 0xff];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","sourceNew":null,"sourceOld":"  // 64 bit shifts\n  private void shift() {\n    if ((int)word ==0) {wordShift +=32; word = word >>>32; }\n    if ((word & 0x0000FFFF) == 0) { wordShift +=16; word >>>=16; }\n    if ((word & 0x000000FF) == 0) { wordShift +=8; word >>>=8; }\n    indexArray = BitUtil.bitList((byte) word);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#shift().mjava","sourceNew":null,"sourceOld":"  // 64 bit shifts\n  private void shift() {\n    if ((int)word ==0) {wordShift +=32; word = word >>>32; }\n    if ((word & 0x0000FFFF) == 0) { wordShift +=16; word >>>=16; }\n    if ((word & 0x000000FF) == 0) { wordShift +=8; word >>>=8; }\n    indexArray = BitUtil.bitList((byte) word);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","37a0f60745e53927c4c876cfe5b5a58170f0646c","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}