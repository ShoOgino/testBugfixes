{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testCreateMode().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testCreateMode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateMode() throws Exception {\n    stateManager.makePath(\"/createMode\");\n    stateManager.createData(\"/createMode/persistent\", firstData, CreateMode.PERSISTENT);\n    stateManager.createData(\"/createMode/persistent_seq\", firstData, CreateMode.PERSISTENT);\n    for (int i = 0; i < 10; i++) {\n      stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n    }\n    // check what happens with gaps\n    stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n    stateManager.removeData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 10), -1);\n    stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n\n    stateManager.createData(\"/createMode/ephemeral\", firstData, CreateMode.EPHEMERAL);\n    stateManager.createData(\"/createMode/ephemeral_seq\", firstData, CreateMode.PERSISTENT);\n    for (int i = 0; i < 10; i++) {\n      stateManager.createData(\"/createMode/ephemeral_seq/data\", firstData, CreateMode.EPHEMERAL_SEQUENTIAL);\n    }\n    assertTrue(stateManager.hasData(\"/createMode\"));\n    assertTrue(stateManager.hasData(\"/createMode/persistent\"));\n    assertTrue(stateManager.hasData(\"/createMode/ephemeral\"));\n    List<String> kids = stateManager.listData(\"/createMode/persistent_seq\");\n    assertEquals(11, kids.size());\n    kids = stateManager.listData(\"/createMode/ephemeral_seq\");\n    assertEquals(10, kids.size());\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    assertFalse(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 10)));\n    assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 11)));\n\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/ephemeral_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    // check that ephemeral nodes disappear on disconnect\n    reInit();\n    assertTrue(stateManager.hasData(\"/createMode/persistent\"));\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 11)));\n\n    assertFalse(stateManager.hasData(\"/createMode/ephemeral\"));\n    assertTrue(stateManager.hasData(\"/createMode/ephemeral_seq\"));\n    kids = stateManager.listData(\"/createMode/ephemeral_seq\");\n    assertEquals(0, kids.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistribStateManager#testCreateMode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testCreateMode().mjava","sourceNew":"  @Test\n  public void testCreateMode() throws Exception {\n    stateManager.makePath(\"/createMode\");\n    stateManager.createData(\"/createMode/persistent\", firstData, CreateMode.PERSISTENT);\n    stateManager.createData(\"/createMode/persistent_seq\", firstData, CreateMode.PERSISTENT);\n    for (int i = 0; i < 10; i++) {\n      stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n    }\n    // check what happens with gaps\n    stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n    stateManager.removeData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 10), -1);\n    stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n\n    stateManager.createData(\"/createMode/ephemeral\", firstData, CreateMode.EPHEMERAL);\n    stateManager.createData(\"/createMode/ephemeral_seq\", firstData, CreateMode.PERSISTENT);\n    for (int i = 0; i < 10; i++) {\n      stateManager.createData(\"/createMode/ephemeral_seq/data\", firstData, CreateMode.EPHEMERAL_SEQUENTIAL);\n    }\n    assertTrue(stateManager.hasData(\"/createMode\"));\n    assertTrue(stateManager.hasData(\"/createMode/persistent\"));\n    assertTrue(stateManager.hasData(\"/createMode/ephemeral\"));\n    List<String> kids = stateManager.listData(\"/createMode/persistent_seq\");\n    assertEquals(11, kids.size());\n    kids = stateManager.listData(\"/createMode/ephemeral_seq\");\n    assertEquals(10, kids.size());\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    assertFalse(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 10)));\n    assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 11)));\n\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/ephemeral_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    // check that ephemeral nodes disappear on disconnect\n    reInit();\n    assertTrue(stateManager.hasData(\"/createMode/persistent\"));\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 11)));\n\n    assertFalse(stateManager.hasData(\"/createMode/ephemeral\"));\n    assertTrue(stateManager.hasData(\"/createMode/ephemeral_seq\"));\n    kids = stateManager.listData(\"/createMode/ephemeral_seq\");\n    assertEquals(0, kids.size());\n  }\n\n","sourceOld":"  @Test\n  public void testCreateMode() throws Exception {\n    stateManager.makePath(\"/createMode\");\n    stateManager.createData(\"/createMode/persistent\", firstData, CreateMode.PERSISTENT);\n    stateManager.createData(\"/createMode/persistent_seq\", firstData, CreateMode.PERSISTENT);\n    for (int i = 0; i < 10; i++) {\n      stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n    }\n    // check what happens with gaps\n    stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n    stateManager.removeData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 10), -1);\n    stateManager.createData(\"/createMode/persistent_seq/data\", firstData, CreateMode.PERSISTENT_SEQUENTIAL);\n\n    stateManager.createData(\"/createMode/ephemeral\", firstData, CreateMode.EPHEMERAL);\n    stateManager.createData(\"/createMode/ephemeral_seq\", firstData, CreateMode.PERSISTENT);\n    for (int i = 0; i < 10; i++) {\n      stateManager.createData(\"/createMode/ephemeral_seq/data\", firstData, CreateMode.EPHEMERAL_SEQUENTIAL);\n    }\n    assertTrue(stateManager.hasData(\"/createMode\"));\n    assertTrue(stateManager.hasData(\"/createMode/persistent\"));\n    assertTrue(stateManager.hasData(\"/createMode/ephemeral\"));\n    List<String> kids = stateManager.listData(\"/createMode/persistent_seq\");\n    assertEquals(11, kids.size());\n    kids = stateManager.listData(\"/createMode/ephemeral_seq\");\n    assertEquals(10, kids.size());\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    assertFalse(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 10)));\n    assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 11)));\n\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/ephemeral_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    // check that ephemeral nodes disappear on disconnect\n    reInit();\n    assertTrue(stateManager.hasData(\"/createMode/persistent\"));\n    for (int i = 0; i < 10; i++) {\n      assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", i)));\n    }\n    assertTrue(stateManager.hasData(\"/createMode/persistent_seq/data\" + String.format(Locale.ROOT, \"%010d\", 11)));\n\n    assertFalse(stateManager.hasData(\"/createMode/ephemeral\"));\n    assertTrue(stateManager.hasData(\"/createMode/ephemeral_seq\"));\n    kids = stateManager.listData(\"/createMode/ephemeral_seq\");\n    assertEquals(0, kids.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}