{"path":"src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n    homeFT = schema.getPolyFieldType(\"home\");\n    assertNotNull(homeFT);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    try {\n      FieldType bad = schema.getPolyFieldType(\"foo\");\n      assertTrue(false);\n    } catch (Exception e) {\n    }\n    try {\n      FieldType bad = schema.getPolyFieldTypeNoEx(\"foo\");\n      assertNull(bad);\n    } catch (Exception e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["378c6150f20ef79f184ab9cd89a056771fc918c7","378c6150f20ef79f184ab9cd89a056771fc918c7","378c6150f20ef79f184ab9cd89a056771fc918c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b82ee93a0b7e1703398375f2e9acc80c452b97c4","date":1261679725,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n    homeFT = schema.getPolyFieldType(\"home\");\n    assertNotNull(homeFT);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    try {\n      FieldType bad = schema.getPolyFieldType(\"foo\");\n      assertTrue(false);\n    } catch (Exception e) {\n    }\n    try {\n      FieldType bad = schema.getPolyFieldTypeNoEx(\"foo\");\n      assertNull(bad);\n    } catch (Exception e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b82ee93a0b7e1703398375f2e9acc80c452b97c4"],"b82ee93a0b7e1703398375f2e9acc80c452b97c4":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["b82ee93a0b7e1703398375f2e9acc80c452b97c4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b82ee93a0b7e1703398375f2e9acc80c452b97c4":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}