{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#toExpression(StreamFactory).mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // connection url\n    expression.addParameter(new StreamExpressionNamedParameter(\"connection\", connectionUrl));\n    \n    // sql\n    expression.addParameter(new StreamExpressionNamedParameter(\"sql\", sqlQuery));\n    \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\", definedSort.toExpression(factory)));\n    \n    // driver class\n    if(null != driverClassName){\n      expression.addParameter(new StreamExpressionNamedParameter(\"driver\", driverClassName));      \n    }\n    \n    // connection properties\n    if(null != connectionProperties){\n      for(String propertyName : connectionProperties.stringPropertyNames()){\n        expression.addParameter(new StreamExpressionNamedParameter(propertyName, connectionProperties.getProperty(propertyName)));    \n      }\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // connection url\n    expression.addParameter(new StreamExpressionNamedParameter(\"connection\", connectionUrl));\n    \n    // sql\n    expression.addParameter(new StreamExpressionNamedParameter(\"sql\", sqlQuery));\n    \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(SORT, definedSort.toExpression(factory)));\n    \n    // driver class\n    if(null != driverClassName){\n      expression.addParameter(new StreamExpressionNamedParameter(\"driver\", driverClassName));      \n    }\n    \n    // connection properties\n    if(null != connectionProperties){\n      for(String propertyName : connectionProperties.stringPropertyNames()){\n        expression.addParameter(new StreamExpressionNamedParameter(propertyName, connectionProperties.getProperty(propertyName)));    \n      }\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // connection url\n    expression.addParameter(new StreamExpressionNamedParameter(\"connection\", connectionUrl));\n    \n    // sql\n    expression.addParameter(new StreamExpressionNamedParameter(\"sql\", sqlQuery));\n    \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\", definedSort.toExpression(factory)));\n    \n    // driver class\n    if(null != driverClassName){\n      expression.addParameter(new StreamExpressionNamedParameter(\"driver\", driverClassName));      \n    }\n    \n    // connection properties\n    if(null != connectionProperties){\n      for(String propertyName : connectionProperties.stringPropertyNames()){\n        expression.addParameter(new StreamExpressionNamedParameter(propertyName, connectionProperties.getProperty(propertyName)));    \n      }\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // connection url\n    expression.addParameter(new StreamExpressionNamedParameter(\"connection\", connectionUrl));\n    \n    // sql\n    expression.addParameter(new StreamExpressionNamedParameter(\"sql\", sqlQuery));\n    \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(SORT, definedSort.toExpression(factory)));\n    \n    // driver class\n    if(null != driverClassName){\n      expression.addParameter(new StreamExpressionNamedParameter(\"driver\", driverClassName));      \n    }\n    \n    // connection properties\n    if(null != connectionProperties){\n      for(String propertyName : connectionProperties.stringPropertyNames()){\n        expression.addParameter(new StreamExpressionNamedParameter(propertyName, connectionProperties.getProperty(propertyName)));    \n      }\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // connection url\n    expression.addParameter(new StreamExpressionNamedParameter(\"connection\", connectionUrl));\n    \n    // sql\n    expression.addParameter(new StreamExpressionNamedParameter(\"sql\", sqlQuery));\n    \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\", definedSort.toExpression(factory)));\n    \n    // driver class\n    if(null != driverClassName){\n      expression.addParameter(new StreamExpressionNamedParameter(\"driver\", driverClassName));      \n    }\n    \n    // connection properties\n    if(null != connectionProperties){\n      for(String propertyName : connectionProperties.stringPropertyNames()){\n        expression.addParameter(new StreamExpressionNamedParameter(propertyName, connectionProperties.getProperty(propertyName)));    \n      }\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4149dd739240f7ae0f2188920ae11f66e4a200","date":1554468772,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // connection url\n    expression.addParameter(new StreamExpressionNamedParameter(\"connection\", connectionUrl));\n    \n    // sql\n    expression.addParameter(new StreamExpressionNamedParameter(\"sql\", sqlQuery));\n\n    // fetchSize\n    expression.addParameter(new StreamExpressionNamedParameter(\"fetchSize\", Integer.toString(fetchSize)));\n\n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(SORT, definedSort.toExpression(factory)));\n    \n    // driver class\n    if(null != driverClassName){\n      expression.addParameter(new StreamExpressionNamedParameter(\"driver\", driverClassName));      \n    }\n    \n    // connection properties\n    if(null != connectionProperties){\n      for(String propertyName : connectionProperties.stringPropertyNames()){\n        expression.addParameter(new StreamExpressionNamedParameter(propertyName, connectionProperties.getProperty(propertyName)));    \n      }\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // connection url\n    expression.addParameter(new StreamExpressionNamedParameter(\"connection\", connectionUrl));\n    \n    // sql\n    expression.addParameter(new StreamExpressionNamedParameter(\"sql\", sqlQuery));\n    \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(SORT, definedSort.toExpression(factory)));\n    \n    // driver class\n    if(null != driverClassName){\n      expression.addParameter(new StreamExpressionNamedParameter(\"driver\", driverClassName));      \n    }\n    \n    // connection properties\n    if(null != connectionProperties){\n      for(String propertyName : connectionProperties.stringPropertyNames()){\n        expression.addParameter(new StreamExpressionNamedParameter(propertyName, connectionProperties.getProperty(propertyName)));    \n      }\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea4149dd739240f7ae0f2188920ae11f66e4a200":["01624b85de12fb02335810bdf325124e59040772"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["c533b201163bd7b15aa8881f922f9289a7668187"],"01624b85de12fb02335810bdf325124e59040772":["c533b201163bd7b15aa8881f922f9289a7668187"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4149dd739240f7ae0f2188920ae11f66e4a200"]},"commit2Childs":{"ea4149dd739240f7ae0f2188920ae11f66e4a200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c533b201163bd7b15aa8881f922f9289a7668187":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["ea4149dd739240f7ae0f2188920ae11f66e4a200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}