{"path":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToValue(long).mjava","commits":[{"id":"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c","date":1373406544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToValue(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Given a target value, advance the decoding index to the first bigger or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   */\n  public long advanceToValue(long target) {\n    if (! toAfterCurrentHighBit()) {\n      return NO_MORE_VALUES;\n    }\n    long highTarget = target >>> efEncoder.numLowBits;\n    long highValue = advanceToHighValue(highTarget);\n    if (highValue == NO_MORE_VALUES) {\n      return NO_MORE_VALUES;\n    }\n    // Linear search with low values:\n    long currentValue = combineHighLowValues(highValue, currentLowValue());\n    while (currentValue < target) {\n      currentValue = nextValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToValue(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Given a target value, advance the decoding index to the first bigger or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   */\n  public long advanceToValue(long target) {\n    if (! toAfterCurrentHighBit()) {\n      return NO_MORE_VALUES;\n    }\n    long highTarget = target >>> efEncoder.numLowBits;\n    long highValue = advanceToHighValue(highTarget);\n    if (highValue == NO_MORE_VALUES) {\n      return NO_MORE_VALUES;\n    }\n    // Linear search with low values:\n    long currentValue = combineHighLowValues(highValue, currentLowValue());\n    while (currentValue < target) {\n      currentValue = nextValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423470dff9e19aa0db92590e282e2ca12e34d65a","date":1381851051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToValue(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToValue(long).mjava","sourceNew":"  /** Given a target value, advance the decoding index to the first bigger or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   * <br>The current implementation uses the index on the upper zero bit positions.\n   */\n  public long advanceToValue(long target) {\n    efIndex += 1;\n    if (efIndex >= numEncoded) {\n      return NO_MORE_VALUES;\n    }\n    setBitForIndex += 1; // the high bit at setBitForIndex belongs to the unary code for efIndex\n\n    int highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n    long upperLong = efEncoder.upperLongs[highIndex];\n    curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1))); // may contain the unary 1 bit for efIndex\n\n    // determine index entry to advance to\n    long highTarget = target >>> efEncoder.numLowBits;\n\n    long indexEntryIndex = (highTarget / efEncoder.indexInterval) - 1;\n    if (indexEntryIndex >= 0) { // not before first index entry\n      if (indexEntryIndex >= numIndexEntries) {\n        indexEntryIndex = numIndexEntries - 1; // no further than last index entry\n      }\n      long indexHighValue = (indexEntryIndex + 1) * efEncoder.indexInterval;\n      assert indexHighValue <= highTarget;\n      if (indexHighValue > (setBitForIndex - efIndex)) { // advance to just after zero bit position of index entry.\n        setBitForIndex = unPackValue(efEncoder.upperZeroBitPositionIndex, efEncoder.nIndexEntryBits, indexEntryIndex, indexMask);\n        efIndex = setBitForIndex - indexHighValue; // the high bit at setBitForIndex belongs to the unary code for efIndex\n        highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1))); // may contain the unary 1 bit for efIndex\n      }\n      assert efIndex < numEncoded; // there is a high value to be found.\n    }\n\n    int curSetBits = Long.bitCount(curHighLong); // shifted right.\n    int curClearBits = Long.SIZE - curSetBits - ((int) (setBitForIndex & (Long.SIZE-1))); // subtract right shift, may be more than encoded\n\n    while (((setBitForIndex - efIndex) + curClearBits) < highTarget) {\n      // curHighLong has not enough clear bits to reach highTarget\n      efIndex += curSetBits;\n      if (efIndex >= numEncoded) {\n        return NO_MORE_VALUES;\n      }\n      setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n      // highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      highIndex += 1;\n      upperLong = efEncoder.upperLongs[highIndex];\n      curHighLong = upperLong;\n      curSetBits = Long.bitCount(curHighLong);\n      curClearBits = Long.SIZE - curSetBits;\n    }\n    // curHighLong has enough clear bits to reach highTarget, and may not have enough set bits.\n    while (curHighLong == 0L) {\n      setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n      assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      highIndex += 1;\n      upperLong = efEncoder.upperLongs[highIndex];\n      curHighLong = upperLong;\n    }\n\n    // curHighLong has enough clear bits to reach highTarget, has at least 1 set bit, and may not have enough set bits.\n    int rank = (int) (highTarget - (setBitForIndex - efIndex)); // the rank of the zero bit for highValue.\n    assert (rank <= Long.SIZE) : (\"rank \" + rank);\n    if (rank >= 1) {\n      long invCurHighLong = ~curHighLong;\n      int clearBitForValue = (rank <= 8)\n                              ? BroadWord.selectNaive(invCurHighLong, rank)\n                              : BroadWord.select(invCurHighLong, rank);\n      assert clearBitForValue <= (Long.SIZE-1);\n      setBitForIndex += clearBitForValue + 1; // the high bit just before setBitForIndex is zero\n      int oneBitsBeforeClearBit = clearBitForValue - rank + 1;\n      efIndex += oneBitsBeforeClearBit; // the high bit at setBitForIndex and belongs to the unary code for efIndex\n      if (efIndex >= numEncoded) {\n        return NO_MORE_VALUES;\n      }\n\n      if ((setBitForIndex & (Long.SIZE - 1)) == 0L) { // exhausted curHighLong\n        assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        highIndex += 1;\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong;\n      }\n      else {\n        assert highIndex == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1)));\n      }\n      // curHighLong has enough clear bits to reach highTarget, and may not have enough set bits.\n \n      while (curHighLong == 0L) {\n        setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n        assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        highIndex += 1;\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong;\n      }\n    }\n    setBitForIndex += Long.numberOfTrailingZeros(curHighLong);\n    assert (setBitForIndex - efIndex) >= highTarget; // highTarget reached\n\n    // Linear search also with low values\n    long currentValue = combineHighLowValues((setBitForIndex - efIndex), currentLowValue());\n    while (currentValue < target) {\n      currentValue = nextValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","sourceOld":"  /** Given a target value, advance the decoding index to the first bigger or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   */\n  public long advanceToValue(long target) {\n    if (! toAfterCurrentHighBit()) {\n      return NO_MORE_VALUES;\n    }\n    long highTarget = target >>> efEncoder.numLowBits;\n    long highValue = advanceToHighValue(highTarget);\n    if (highValue == NO_MORE_VALUES) {\n      return NO_MORE_VALUES;\n    }\n    // Linear search with low values:\n    long currentValue = combineHighLowValues(highValue, currentLowValue());\n    while (currentValue < target) {\n      currentValue = nextValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9291fc3833dffda8db27cfa063a07f17a8bbbfe7","date":1415205164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToValue(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToValue(long).mjava","sourceNew":"  /** Given a target value, advance the decoding index to the first bigger or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   * <br>The current implementation uses the index on the upper zero bit positions.\n   */\n  public long advanceToValue(long target) {\n    efIndex += 1;\n    if (efIndex >= numEncoded) {\n      return NO_MORE_VALUES;\n    }\n    setBitForIndex += 1; // the high bit at setBitForIndex belongs to the unary code for efIndex\n\n    int highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n    long upperLong = efEncoder.upperLongs[highIndex];\n    curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1))); // may contain the unary 1 bit for efIndex\n\n    // determine index entry to advance to\n    long highTarget = target >>> efEncoder.numLowBits;\n\n    long indexEntryIndex = (highTarget / efEncoder.indexInterval) - 1;\n    if (indexEntryIndex >= 0) { // not before first index entry\n      if (indexEntryIndex >= numIndexEntries) {\n        indexEntryIndex = numIndexEntries - 1; // no further than last index entry\n      }\n      long indexHighValue = (indexEntryIndex + 1) * efEncoder.indexInterval;\n      assert indexHighValue <= highTarget;\n      if (indexHighValue > (setBitForIndex - efIndex)) { // advance to just after zero bit position of index entry.\n        setBitForIndex = unPackValue(efEncoder.upperZeroBitPositionIndex, efEncoder.nIndexEntryBits, indexEntryIndex, indexMask);\n        efIndex = setBitForIndex - indexHighValue; // the high bit at setBitForIndex belongs to the unary code for efIndex\n        highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1))); // may contain the unary 1 bit for efIndex\n      }\n      assert efIndex < numEncoded; // there is a high value to be found.\n    }\n\n    int curSetBits = Long.bitCount(curHighLong); // shifted right.\n    int curClearBits = Long.SIZE - curSetBits - ((int) (setBitForIndex & (Long.SIZE-1))); // subtract right shift, may be more than encoded\n\n    while (((setBitForIndex - efIndex) + curClearBits) < highTarget) {\n      // curHighLong has not enough clear bits to reach highTarget\n      efIndex += curSetBits;\n      if (efIndex >= numEncoded) {\n        return NO_MORE_VALUES;\n      }\n      setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n      // highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      highIndex += 1;\n      upperLong = efEncoder.upperLongs[highIndex];\n      curHighLong = upperLong;\n      curSetBits = Long.bitCount(curHighLong);\n      curClearBits = Long.SIZE - curSetBits;\n    }\n    // curHighLong has enough clear bits to reach highTarget, and may not have enough set bits.\n    while (curHighLong == 0L) {\n      setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n      assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      highIndex += 1;\n      upperLong = efEncoder.upperLongs[highIndex];\n      curHighLong = upperLong;\n    }\n\n    // curHighLong has enough clear bits to reach highTarget, has at least 1 set bit, and may not have enough set bits.\n    int rank = (int) (highTarget - (setBitForIndex - efIndex)); // the rank of the zero bit for highValue.\n    assert (rank <= Long.SIZE) : (\"rank \" + rank);\n    if (rank >= 1) {\n      long invCurHighLong = ~curHighLong;\n      int clearBitForValue = (rank <= 8)\n                              ? BitUtil.selectNaive(invCurHighLong, rank)\n                              : BitUtil.select(invCurHighLong, rank);\n      assert clearBitForValue >= 0;\n      assert clearBitForValue <= Long.SIZE-1;\n      setBitForIndex += clearBitForValue + 1; // the high bit just before setBitForIndex is zero\n      int oneBitsBeforeClearBit = clearBitForValue - rank + 1;\n      efIndex += oneBitsBeforeClearBit; // the high bit at setBitForIndex and belongs to the unary code for efIndex\n      if (efIndex >= numEncoded) {\n        return NO_MORE_VALUES;\n      }\n\n      if ((setBitForIndex & (Long.SIZE - 1)) == 0L) { // exhausted curHighLong\n        assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        highIndex += 1;\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong;\n      }\n      else {\n        assert highIndex == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1)));\n      }\n      // curHighLong has enough clear bits to reach highTarget, and may not have enough set bits.\n \n      while (curHighLong == 0L) {\n        setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n        assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        highIndex += 1;\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong;\n      }\n    }\n    setBitForIndex += Long.numberOfTrailingZeros(curHighLong);\n    assert (setBitForIndex - efIndex) >= highTarget; // highTarget reached\n\n    // Linear search also with low values\n    long currentValue = combineHighLowValues((setBitForIndex - efIndex), currentLowValue());\n    while (currentValue < target) {\n      currentValue = nextValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","sourceOld":"  /** Given a target value, advance the decoding index to the first bigger or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   * <br>The current implementation uses the index on the upper zero bit positions.\n   */\n  public long advanceToValue(long target) {\n    efIndex += 1;\n    if (efIndex >= numEncoded) {\n      return NO_MORE_VALUES;\n    }\n    setBitForIndex += 1; // the high bit at setBitForIndex belongs to the unary code for efIndex\n\n    int highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n    long upperLong = efEncoder.upperLongs[highIndex];\n    curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1))); // may contain the unary 1 bit for efIndex\n\n    // determine index entry to advance to\n    long highTarget = target >>> efEncoder.numLowBits;\n\n    long indexEntryIndex = (highTarget / efEncoder.indexInterval) - 1;\n    if (indexEntryIndex >= 0) { // not before first index entry\n      if (indexEntryIndex >= numIndexEntries) {\n        indexEntryIndex = numIndexEntries - 1; // no further than last index entry\n      }\n      long indexHighValue = (indexEntryIndex + 1) * efEncoder.indexInterval;\n      assert indexHighValue <= highTarget;\n      if (indexHighValue > (setBitForIndex - efIndex)) { // advance to just after zero bit position of index entry.\n        setBitForIndex = unPackValue(efEncoder.upperZeroBitPositionIndex, efEncoder.nIndexEntryBits, indexEntryIndex, indexMask);\n        efIndex = setBitForIndex - indexHighValue; // the high bit at setBitForIndex belongs to the unary code for efIndex\n        highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1))); // may contain the unary 1 bit for efIndex\n      }\n      assert efIndex < numEncoded; // there is a high value to be found.\n    }\n\n    int curSetBits = Long.bitCount(curHighLong); // shifted right.\n    int curClearBits = Long.SIZE - curSetBits - ((int) (setBitForIndex & (Long.SIZE-1))); // subtract right shift, may be more than encoded\n\n    while (((setBitForIndex - efIndex) + curClearBits) < highTarget) {\n      // curHighLong has not enough clear bits to reach highTarget\n      efIndex += curSetBits;\n      if (efIndex >= numEncoded) {\n        return NO_MORE_VALUES;\n      }\n      setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n      // highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      highIndex += 1;\n      upperLong = efEncoder.upperLongs[highIndex];\n      curHighLong = upperLong;\n      curSetBits = Long.bitCount(curHighLong);\n      curClearBits = Long.SIZE - curSetBits;\n    }\n    // curHighLong has enough clear bits to reach highTarget, and may not have enough set bits.\n    while (curHighLong == 0L) {\n      setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n      assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      highIndex += 1;\n      upperLong = efEncoder.upperLongs[highIndex];\n      curHighLong = upperLong;\n    }\n\n    // curHighLong has enough clear bits to reach highTarget, has at least 1 set bit, and may not have enough set bits.\n    int rank = (int) (highTarget - (setBitForIndex - efIndex)); // the rank of the zero bit for highValue.\n    assert (rank <= Long.SIZE) : (\"rank \" + rank);\n    if (rank >= 1) {\n      long invCurHighLong = ~curHighLong;\n      int clearBitForValue = (rank <= 8)\n                              ? BroadWord.selectNaive(invCurHighLong, rank)\n                              : BroadWord.select(invCurHighLong, rank);\n      assert clearBitForValue <= (Long.SIZE-1);\n      setBitForIndex += clearBitForValue + 1; // the high bit just before setBitForIndex is zero\n      int oneBitsBeforeClearBit = clearBitForValue - rank + 1;\n      efIndex += oneBitsBeforeClearBit; // the high bit at setBitForIndex and belongs to the unary code for efIndex\n      if (efIndex >= numEncoded) {\n        return NO_MORE_VALUES;\n      }\n\n      if ((setBitForIndex & (Long.SIZE - 1)) == 0L) { // exhausted curHighLong\n        assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        highIndex += 1;\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong;\n      }\n      else {\n        assert highIndex == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1)));\n      }\n      // curHighLong has enough clear bits to reach highTarget, and may not have enough set bits.\n \n      while (curHighLong == 0L) {\n        setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n        assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        highIndex += 1;\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong;\n      }\n    }\n    setBitForIndex += Long.numberOfTrailingZeros(curHighLong);\n    assert (setBitForIndex - efIndex) >= highTarget; // highTarget reached\n\n    // Linear search also with low values\n    long currentValue = combineHighLowValues((setBitForIndex - efIndex), currentLowValue());\n    while (currentValue < target) {\n      currentValue = nextValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556259cdb46d4f7fb27f4688c4efcb3eaee4a550","date":1432028057,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoDecoder#advanceToValue(long).mjava","sourceNew":null,"sourceOld":"  /** Given a target value, advance the decoding index to the first bigger or equal value\n   * and return it if it is available. Otherwise return {@link #NO_MORE_VALUES}.\n   * <br>The current implementation uses the index on the upper zero bit positions.\n   */\n  public long advanceToValue(long target) {\n    efIndex += 1;\n    if (efIndex >= numEncoded) {\n      return NO_MORE_VALUES;\n    }\n    setBitForIndex += 1; // the high bit at setBitForIndex belongs to the unary code for efIndex\n\n    int highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n    long upperLong = efEncoder.upperLongs[highIndex];\n    curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1))); // may contain the unary 1 bit for efIndex\n\n    // determine index entry to advance to\n    long highTarget = target >>> efEncoder.numLowBits;\n\n    long indexEntryIndex = (highTarget / efEncoder.indexInterval) - 1;\n    if (indexEntryIndex >= 0) { // not before first index entry\n      if (indexEntryIndex >= numIndexEntries) {\n        indexEntryIndex = numIndexEntries - 1; // no further than last index entry\n      }\n      long indexHighValue = (indexEntryIndex + 1) * efEncoder.indexInterval;\n      assert indexHighValue <= highTarget;\n      if (indexHighValue > (setBitForIndex - efIndex)) { // advance to just after zero bit position of index entry.\n        setBitForIndex = unPackValue(efEncoder.upperZeroBitPositionIndex, efEncoder.nIndexEntryBits, indexEntryIndex, indexMask);\n        efIndex = setBitForIndex - indexHighValue; // the high bit at setBitForIndex belongs to the unary code for efIndex\n        highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1))); // may contain the unary 1 bit for efIndex\n      }\n      assert efIndex < numEncoded; // there is a high value to be found.\n    }\n\n    int curSetBits = Long.bitCount(curHighLong); // shifted right.\n    int curClearBits = Long.SIZE - curSetBits - ((int) (setBitForIndex & (Long.SIZE-1))); // subtract right shift, may be more than encoded\n\n    while (((setBitForIndex - efIndex) + curClearBits) < highTarget) {\n      // curHighLong has not enough clear bits to reach highTarget\n      efIndex += curSetBits;\n      if (efIndex >= numEncoded) {\n        return NO_MORE_VALUES;\n      }\n      setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n      // highIndex = (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      highIndex += 1;\n      upperLong = efEncoder.upperLongs[highIndex];\n      curHighLong = upperLong;\n      curSetBits = Long.bitCount(curHighLong);\n      curClearBits = Long.SIZE - curSetBits;\n    }\n    // curHighLong has enough clear bits to reach highTarget, and may not have enough set bits.\n    while (curHighLong == 0L) {\n      setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n      assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n      highIndex += 1;\n      upperLong = efEncoder.upperLongs[highIndex];\n      curHighLong = upperLong;\n    }\n\n    // curHighLong has enough clear bits to reach highTarget, has at least 1 set bit, and may not have enough set bits.\n    int rank = (int) (highTarget - (setBitForIndex - efIndex)); // the rank of the zero bit for highValue.\n    assert (rank <= Long.SIZE) : (\"rank \" + rank);\n    if (rank >= 1) {\n      long invCurHighLong = ~curHighLong;\n      int clearBitForValue = (rank <= 8)\n                              ? BitUtil.selectNaive(invCurHighLong, rank)\n                              : BitUtil.select(invCurHighLong, rank);\n      assert clearBitForValue >= 0;\n      assert clearBitForValue <= Long.SIZE-1;\n      setBitForIndex += clearBitForValue + 1; // the high bit just before setBitForIndex is zero\n      int oneBitsBeforeClearBit = clearBitForValue - rank + 1;\n      efIndex += oneBitsBeforeClearBit; // the high bit at setBitForIndex and belongs to the unary code for efIndex\n      if (efIndex >= numEncoded) {\n        return NO_MORE_VALUES;\n      }\n\n      if ((setBitForIndex & (Long.SIZE - 1)) == 0L) { // exhausted curHighLong\n        assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        highIndex += 1;\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong;\n      }\n      else {\n        assert highIndex == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        curHighLong = upperLong >>> ((int) (setBitForIndex & (Long.SIZE-1)));\n      }\n      // curHighLong has enough clear bits to reach highTarget, and may not have enough set bits.\n \n      while (curHighLong == 0L) {\n        setBitForIndex += Long.SIZE - (setBitForIndex & (Long.SIZE-1));\n        assert (highIndex + 1) == (int)(setBitForIndex >>> LOG2_LONG_SIZE);\n        highIndex += 1;\n        upperLong = efEncoder.upperLongs[highIndex];\n        curHighLong = upperLong;\n      }\n    }\n    setBitForIndex += Long.numberOfTrailingZeros(curHighLong);\n    assert (setBitForIndex - efIndex) >= highTarget; // highTarget reached\n\n    // Linear search also with low values\n    long currentValue = combineHighLowValues((setBitForIndex - efIndex), currentLowValue());\n    while (currentValue < target) {\n      currentValue = nextValue();\n      if (currentValue == NO_MORE_VALUES) {\n        return NO_MORE_VALUES;\n      }\n    }\n    return currentValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["9291fc3833dffda8db27cfa063a07f17a8bbbfe7"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9291fc3833dffda8db27cfa063a07f17a8bbbfe7":["423470dff9e19aa0db92590e282e2ca12e34d65a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"]},"commit2Childs":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","423470dff9e19aa0db92590e282e2ca12e34d65a"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["9291fc3833dffda8db27cfa063a07f17a8bbbfe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"9291fc3833dffda8db27cfa063a07f17a8bbbfe7":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}