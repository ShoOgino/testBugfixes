{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // TODO: change these all to use readableToIndexed/bytes instead (e.g. for unicode collation)\n    final BytesRef miValue = part1 == null ? null : new BytesRef(toInternal(part1));\n    final BytesRef maxValue = part2 == null ? null : new BytesRef(toInternal(part2));\n\n    if (field.hasDocValues() && !field.indexed()) {\n      return SortedSetDocValuesField.newSlowRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n    } else {\n      SolrRangeQuery rangeQuery = new SolrRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n      return rangeQuery;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // TODO: change these all to use readableToIndexed/bytes instead (e.g. for unicode collation)\n    final BytesRef miValue = part1 == null ? null : new BytesRef(toInternal(part1));\n    final BytesRef maxValue = part2 == null ? null : new BytesRef(toInternal(part2));\n\n    if (field.hasDocValues() && !field.indexed()) {\n      return SortedSetDocValuesField.newSlowRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n    } else {\n      SolrRangeQuery rangeQuery = new SolrRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n      return rangeQuery;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // TODO: change these all to use readableToIndexed/bytes instead (e.g. for unicode collation)\n    final BytesRef miValue = part1 == null ? null : new BytesRef(toInternal(part1));\n    final BytesRef maxValue = part2 == null ? null : new BytesRef(toInternal(part2));\n\n    if (field.hasDocValues() && !field.indexed()) {\n      return SortedSetDocValuesField.newSlowRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n    } else {\n      SolrRangeQuery rangeQuery = new SolrRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n      return rangeQuery;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes part1 and part2 as null if they are '*' respectively. minInclusive and maxInclusive are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in part1 and/or part2 as well as unequal minInclusive and maxInclusive parameters gracefully.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // TODO: change these all to use readableToIndexed/bytes instead (e.g. for unicode collation)\n    final BytesRef miValue = part1 == null ? null : new BytesRef(toInternal(part1));\n    final BytesRef maxValue = part2 == null ? null : new BytesRef(toInternal(part2));\n\n    if (field.hasDocValues() && !field.indexed()) {\n      return SortedSetDocValuesField.newSlowRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n    } else {\n      SolrRangeQuery rangeQuery = new SolrRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n      return rangeQuery;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a Query instance for doing range searches on this field type. {@link org.apache.solr.search.SolrQueryParser}\n   * currently passes <code>part1</code> and <code>part2</code> as null if they are '*' respectively. <code>minInclusive</code> and <code>maxInclusive</code> are both true\n   * currently by SolrQueryParser but that may change in the future. Also, other QueryParser implementations may have\n   * different semantics.\n   * <p>\n   * Sub-classes should override this method to provide their own range query implementation. They should strive to\n   * handle nulls in <code>part1</code> and/or <code>part2</code> as well as unequal <code>minInclusive</code> and <code>maxInclusive</code> parameters gracefully.\n   * <p>\n   * This method does not, and should not, check for or handle existence queries, please look at {@link #getRangeQuery} for that logic.\n   *\n   * @param parser       the {@link org.apache.solr.search.QParser} calling the method\n   * @param field        the schema field\n   * @param part1        the lower boundary of the range, nulls are allowed.\n   * @param part2        the upper boundary of the range, nulls are allowed\n   * @param minInclusive whether the minimum of the range is inclusive or not\n   * @param maxInclusive whether the maximum of the range is inclusive or not\n   *  @return a Query instance to perform range search according to given parameters\n   *\n   */\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, boolean minInclusive, boolean maxInclusive) {\n    // TODO: change these all to use readableToIndexed/bytes instead (e.g. for unicode collation)\n    final BytesRef miValue = part1 == null ? null : new BytesRef(toInternal(part1));\n    final BytesRef maxValue = part2 == null ? null : new BytesRef(toInternal(part2));\n\n    if (field.hasDocValues() && !field.indexed()) {\n      return SortedSetDocValuesField.newSlowRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n    } else {\n      SolrRangeQuery rangeQuery = new SolrRangeQuery(\n          field.getName(),\n          miValue, maxValue,\n          minInclusive, maxInclusive);\n      return rangeQuery;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c81907bd971f786e378654d32b80da32b0e950d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}