{"path":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param in Token stream to be filtered.\n   * @param charTypeTable\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in, byte[] charTypeTable, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal,int splitOnNumerics, int stemEnglishPossessive, CharArraySet protWords) {\n    super(in);\n    this.generateWordParts = generateWordParts;\n    this.generateNumberParts = generateNumberParts;\n    this.catenateWords = catenateWords;\n    this.catenateNumbers = catenateNumbers;\n    this.catenateAll = catenateAll;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.preserveOriginal = preserveOriginal;\n    this.charTypeTable = charTypeTable;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n    this.protWords = protWords;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet).mjava","sourceNew":null,"sourceOld":"  /**\n   *\n   * @param in Token stream to be filtered.\n   * @param charTypeTable\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in, byte[] charTypeTable, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal,int splitOnNumerics, int stemEnglishPossessive, CharArraySet protWords) {\n    super(in);\n    this.generateWordParts = generateWordParts;\n    this.generateNumberParts = generateNumberParts;\n    this.catenateWords = catenateWords;\n    this.catenateNumbers = catenateNumbers;\n    this.catenateAll = catenateAll;\n    this.splitOnCaseChange = splitOnCaseChange;\n    this.preserveOriginal = preserveOriginal;\n    this.charTypeTable = charTypeTable;\n    this.splitOnNumerics = splitOnNumerics;\n    this.stemEnglishPossessive = stemEnglishPossessive;\n    this.protWords = protWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet).mjava","sourceNew":"  /**\n   * @param in Token stream to be filtered.\n   * @param charTypeTable\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in,\n                             byte[] charTypeTable,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    super(in);\n    this.generateWordParts = generateWordParts != 0;\n    this.generateNumberParts = generateNumberParts != 0;\n    this.catenateWords = catenateWords != 0;\n    this.catenateNumbers = catenateNumbers != 0;\n    this.catenateAll = catenateAll != 0;\n    this.preserveOriginal = preserveOriginal != 0;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(charTypeTable, splitOnCaseChange != 0, splitOnNumerics != 0, stemEnglishPossessive != 0);\n  }\n\n","sourceOld":"  /**\n   * @param in Token stream to be filtered.\n   * @param charTypeTable\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in,\n                             byte[] charTypeTable,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    super(in);\n    this.generateWordParts = generateWordParts != 0;\n    this.generateNumberParts = generateNumberParts != 0;\n    this.catenateWords = catenateWords != 0;\n    this.catenateNumbers = catenateNumbers != 0;\n    this.catenateAll = catenateAll != 0;\n    this.preserveOriginal = preserveOriginal != 0;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(charTypeTable, splitOnCaseChange != 0, splitOnNumerics != 0, stemEnglishPossessive != 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param in Token stream to be filtered.\n   * @param charTypeTable\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in,\n                             byte[] charTypeTable,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    super(in);\n    this.generateWordParts = generateWordParts != 0;\n    this.generateNumberParts = generateNumberParts != 0;\n    this.catenateWords = catenateWords != 0;\n    this.catenateNumbers = catenateNumbers != 0;\n    this.catenateAll = catenateAll != 0;\n    this.preserveOriginal = preserveOriginal != 0;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(charTypeTable, splitOnCaseChange != 0, splitOnNumerics != 0, stemEnglishPossessive != 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8598a11db0eb9efa116ba7656c437f5bed7de0f7","date":1272964265,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet).mjava","sourceNew":"  /**\n   * @param in Token stream to be filtered.\n   * @param charTypeTable\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in,\n                             byte[] charTypeTable,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    super(in);\n    this.generateWordParts = generateWordParts != 0;\n    this.generateNumberParts = generateNumberParts != 0;\n    this.catenateWords = catenateWords != 0;\n    this.catenateNumbers = catenateNumbers != 0;\n    this.catenateAll = catenateAll != 0;\n    this.preserveOriginal = preserveOriginal != 0;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(charTypeTable, splitOnCaseChange != 0, splitOnNumerics != 0, stemEnglishPossessive != 0);\n  }\n\n","sourceOld":"  /**\n   * @param in Token stream to be filtered.\n   * @param charTypeTable\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   * @param splitOnNumerics 1, causes \"j2se\" to be three tokens; \"j\" \"2\" \"se\"\n   * @param stemEnglishPossessive If 1, causes trailing \"'s\" to be removed for each subword: \"O'Neil's\" => \"O\", \"Neil\"\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in,\n                             byte[] charTypeTable,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal,\n                             int splitOnNumerics,\n                             int stemEnglishPossessive,\n                             CharArraySet protWords) {\n    super(in);\n    this.generateWordParts = generateWordParts != 0;\n    this.generateNumberParts = generateNumberParts != 0;\n    this.catenateWords = catenateWords != 0;\n    this.catenateNumbers = catenateNumbers != 0;\n    this.catenateAll = catenateAll != 0;\n    this.preserveOriginal = preserveOriginal != 0;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(charTypeTable, splitOnCaseChange != 0, splitOnNumerics != 0, stemEnglishPossessive != 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8598a11db0eb9efa116ba7656c437f5bed7de0f7":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8598a11db0eb9efa116ba7656c437f5bed7de0f7"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["8598a11db0eb9efa116ba7656c437f5bed7de0f7"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"8598a11db0eb9efa116ba7656c437f5bed7de0f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}