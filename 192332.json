{"path":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","commits":[{"id":"1f192203c3feece147e3227c2446101d33858d81","date":1438359704,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","pathOld":"/dev/null","sourceNew":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class clazz, final Comparable... vals) {\n\n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n    \n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef","date":1441300930,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","sourceNew":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class clazz, final Comparable... vals) {\n    clearIndex();\n    \n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n\n    // doc with values\n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    // doc w/o values\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n\n    // sanity check no sort error when there are missing values\n    for (String dir : new String[] { \"asc\", \"desc\" }) {\n      for (String mm : new String[] { \"min\", \"max\" }) {\n        for (String func : new String[] { \"field(\"+fieldname+\",\"+mm+\")\",\n                                          \"def(field(\"+fieldname+\",\"+mm+\"),42)\",\n                                          \"sum(32,field(\"+fieldname+\",\"+mm+\"))\"  }) {\n          assertQ(fieldname,\n                  req(\"q\",\"*:*\", \n                      \"fl\", \"id\",\n                      \"sort\", func + \" \" + dir)\n                  ,\"//*[@numFound='2']\"\n                  // no assumptions about order for now, see bug: SOLR-8005\n                  ,\"//float[@name='id']='1.0'\"\n                  ,\"//float[@name='id']='2.0'\"\n                  );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class clazz, final Comparable... vals) {\n\n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n    \n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n  }\n\n","bugFix":["1f192203c3feece147e3227c2446101d33858d81"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","sourceNew":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class clazz, final Comparable... vals) {\n    clearIndex();\n    \n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n\n    // doc with values\n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    // doc w/o values\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n\n    // sanity check no sort error when there are missing values\n    for (String dir : new String[] { \"asc\", \"desc\" }) {\n      for (String mm : new String[] { \"min\", \"max\" }) {\n        for (String func : new String[] { \"field(\"+fieldname+\",\"+mm+\")\",\n                                          \"def(field(\"+fieldname+\",\"+mm+\"),42)\",\n                                          \"sum(32,field(\"+fieldname+\",\"+mm+\"))\"  }) {\n          assertQ(fieldname,\n                  req(\"q\",\"*:*\", \n                      \"fl\", \"id\",\n                      \"sort\", func + \" \" + dir)\n                  ,\"//*[@numFound='2']\"\n                  // no assumptions about order for now, see bug: SOLR-8005\n                  ,\"//str[@name='id']='1'\"\n                  ,\"//str[@name='id']='2'\"\n                  );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class clazz, final Comparable... vals) {\n    clearIndex();\n    \n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n\n    // doc with values\n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    // doc w/o values\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n\n    // sanity check no sort error when there are missing values\n    for (String dir : new String[] { \"asc\", \"desc\" }) {\n      for (String mm : new String[] { \"min\", \"max\" }) {\n        for (String func : new String[] { \"field(\"+fieldname+\",\"+mm+\")\",\n                                          \"def(field(\"+fieldname+\",\"+mm+\"),42)\",\n                                          \"sum(32,field(\"+fieldname+\",\"+mm+\"))\"  }) {\n          assertQ(fieldname,\n                  req(\"q\",\"*:*\", \n                      \"fl\", \"id\",\n                      \"sort\", func + \" \" + dir)\n                  ,\"//*[@numFound='2']\"\n                  // no assumptions about order for now, see bug: SOLR-8005\n                  ,\"//float[@name='id']='1.0'\"\n                  ,\"//float[@name='id']='2.0'\"\n                  );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","date":1497547232,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class[#],Comparable...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","sourceNew":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class<?> clazz, final Comparable... vals) {\n    clearIndex();\n    \n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n\n    // doc with values\n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    // doc w/o values\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n\n    // sanity check no sort error when there are missing values\n    for (String dir : new String[] { \"asc\", \"desc\" }) {\n      for (String mm : new String[] { \"min\", \"max\" }) {\n        for (String func : new String[] { \"field(\"+fieldname+\",\"+mm+\")\",\n                                          \"def(field(\"+fieldname+\",\"+mm+\"),42)\",\n                                          \"sum(32,field(\"+fieldname+\",\"+mm+\"))\"  }) {\n          assertQ(fieldname,\n                  req(\"q\",\"*:*\", \n                      \"fl\", \"id\",\n                      \"sort\", func + \" \" + dir)\n                  ,\"//*[@numFound='2']\"\n                  // no assumptions about order for now, see bug: SOLR-8005\n                  ,\"//str[@name='id']='1'\"\n                  ,\"//str[@name='id']='2'\"\n                  );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class clazz, final Comparable... vals) {\n    clearIndex();\n    \n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n\n    // doc with values\n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    // doc w/o values\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n\n    // sanity check no sort error when there are missing values\n    for (String dir : new String[] { \"asc\", \"desc\" }) {\n      for (String mm : new String[] { \"min\", \"max\" }) {\n        for (String func : new String[] { \"field(\"+fieldname+\",\"+mm+\")\",\n                                          \"def(field(\"+fieldname+\",\"+mm+\"),42)\",\n                                          \"sum(32,field(\"+fieldname+\",\"+mm+\"))\"  }) {\n          assertQ(fieldname,\n                  req(\"q\",\"*:*\", \n                      \"fl\", \"id\",\n                      \"sort\", func + \" \" + dir)\n                  ,\"//*[@numFound='2']\"\n                  // no assumptions about order for now, see bug: SOLR-8005\n                  ,\"//str[@name='id']='1'\"\n                  ,\"//str[@name='id']='2'\"\n                  );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class[#],Comparable...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","sourceNew":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class<?> clazz, final Comparable... vals) {\n    clearIndex();\n    \n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n\n    // doc with values\n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    // doc w/o values\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n\n    // sanity check no sort error when there are missing values\n    for (String dir : new String[] { \"asc\", \"desc\" }) {\n      for (String mm : new String[] { \"min\", \"max\" }) {\n        for (String func : new String[] { \"field(\"+fieldname+\",\"+mm+\")\",\n                                          \"def(field(\"+fieldname+\",\"+mm+\"),42)\",\n                                          \"sum(32,field(\"+fieldname+\",\"+mm+\"))\"  }) {\n          assertQ(fieldname,\n                  req(\"q\",\"*:*\", \n                      \"fl\", \"id\",\n                      \"sort\", func + \" \" + dir)\n                  ,\"//*[@numFound='2']\"\n                  // no assumptions about order for now, see bug: SOLR-8005\n                  ,\"//str[@name='id']='1'\"\n                  ,\"//str[@name='id']='2'\"\n                  );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class clazz, final Comparable... vals) {\n    clearIndex();\n    \n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n\n    // doc with values\n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    // doc w/o values\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n\n    // sanity check no sort error when there are missing values\n    for (String dir : new String[] { \"asc\", \"desc\" }) {\n      for (String mm : new String[] { \"min\", \"max\" }) {\n        for (String func : new String[] { \"field(\"+fieldname+\",\"+mm+\")\",\n                                          \"def(field(\"+fieldname+\",\"+mm+\"),42)\",\n                                          \"sum(32,field(\"+fieldname+\",\"+mm+\"))\"  }) {\n          assertQ(fieldname,\n                  req(\"q\",\"*:*\", \n                      \"fl\", \"id\",\n                      \"sort\", func + \" \" + dir)\n                  ,\"//*[@numFound='2']\"\n                  // no assumptions about order for now, see bug: SOLR-8005\n                  ,\"//float[@name='id']='1.0'\"\n                  ,\"//float[@name='id']='2.0'\"\n                  );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleValues(String,Class,Comparable...).mjava","sourceNew":null,"sourceOld":"  /** Tests a single doc with a few explicit values, as well as testing exists with and w/o values */\n  protected void testSimpleValues(final String fieldname, final Class clazz, final Comparable... vals) {\n    clearIndex();\n    \n    assert 0 < vals.length;\n    \n    Comparable min = vals[0];\n    Comparable max = vals[0];\n    \n    final String type = clazz.getName();\n    final SolrInputDocument doc1 = sdoc(\"id\", \"1\");\n    for (Comparable v : vals) {\n      doc1.addField(fieldname, v);\n      if (0 < min.compareTo(v)) {\n        min = v;\n      }\n      if (0 > max.compareTo(v)) {\n        max = v;\n      }\n    }\n    assertU(adoc(doc1));\n    assertU(adoc(sdoc(\"id\", \"2\"))); // fieldname doesn't exist\n    assertU(commit());\n\n    // doc with values\n    assertQ(fieldname,\n            req(\"q\",\"id:1\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='true'\"\n            ,\"//bool[@name='exists_val_max']='true'\"\n            ,\"//\"+type+\"[@name='val_min']='\"+min+\"'\"\n            ,\"//\"+type+\"[@name='val_max']='\"+max+\"'\"\n            );\n\n    // doc w/o values\n    assertQ(fieldname,\n            req(\"q\",\"id:2\",\n                \"fl\",\"exists_val_min:exists(field(\"+fieldname+\",min))\",\n                \"fl\",\"exists_val_max:exists(field(\"+fieldname+\",max))\",\n                \"fl\",\"val_min:field(\"+fieldname+\",min)\",\n                \"fl\",\"val_max:field(\"+fieldname+\",max)\")\n            ,\"//*[@numFound='1']\"\n            ,\"//bool[@name='exists_val_min']='false'\"\n            ,\"//bool[@name='exists_val_max']='false'\"\n            ,\"count(//\"+type+\"[@name='val_min'])=0\"\n            ,\"count(//\"+type+\"[@name='val_max'])=0\"\n            );\n\n    // sanity check no sort error when there are missing values\n    for (String dir : new String[] { \"asc\", \"desc\" }) {\n      for (String mm : new String[] { \"min\", \"max\" }) {\n        for (String func : new String[] { \"field(\"+fieldname+\",\"+mm+\")\",\n                                          \"def(field(\"+fieldname+\",\"+mm+\"),42)\",\n                                          \"sum(32,field(\"+fieldname+\",\"+mm+\"))\"  }) {\n          assertQ(fieldname,\n                  req(\"q\",\"*:*\", \n                      \"fl\", \"id\",\n                      \"sort\", func + \" \" + dir)\n                  ,\"//*[@numFound='2']\"\n                  // no assumptions about order for now, see bug: SOLR-8005\n                  ,\"//float[@name='id']='1.0'\"\n                  ,\"//float[@name='id']='2.0'\"\n                  );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef":["1f192203c3feece147e3227c2446101d33858d81"],"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["a71f63026529f3c1f03cfdd664910873ab2369ae"],"1f192203c3feece147e3227c2446101d33858d81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef"],"28288370235ed02234a64753cdbf0c6ec096304a":["b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"1f192203c3feece147e3227c2446101d33858d81":["b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f192203c3feece147e3227c2446101d33858d81"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}