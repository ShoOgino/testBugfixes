{"path":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#computeBBox(double[],double[]).mjava","commits":[{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#computeBBox(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  private static GeoBoundingBox computeBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoBoundingBox(minLon, maxLon, minLat, maxLat);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56","ca8abb1a4010d2a9e71b0162d3600e898a8a4f56","ad0d09e969f4763b0df4230f8e3f74357872a4e4","ad0d09e969f4763b0df4230f8e3f74357872a4e4","04995b00da1e08edb88b14c5a9789d741de5c51d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#computeBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#computeBBox(double[],double[]).mjava","sourceNew":"  private static GeoRect computeBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(minLon, maxLon, minLat, maxLat);\n  }\n\n","sourceOld":"  private static GeoBoundingBox computeBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoBoundingBox(minLon, maxLon, minLat, maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8728c3940d6ab6d12b8afb3369f180328b2b2ef3","date":1446040476,"type":5,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#computeBBox(double[],double[]).mjava","sourceNew":"  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(GeoUtils.unscaleLon(GeoUtils.scaleLon(minLon)), GeoUtils.unscaleLon(GeoUtils.scaleLon(maxLon)),\n        GeoUtils.unscaleLat(GeoUtils.scaleLat(minLat)), GeoUtils.unscaleLat(GeoUtils.scaleLat(maxLat)));\n  }\n\n","sourceOld":"  private static GeoRect computeBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(minLon, maxLon, minLat, maxLat);\n  }\n\n","bugFix":null,"bugIntro":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8728c3940d6ab6d12b8afb3369f180328b2b2ef3":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8728c3940d6ab6d12b8afb3369f180328b2b2ef3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"8728c3940d6ab6d12b8afb3369f180328b2b2ef3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["8728c3940d6ab6d12b8afb3369f180328b2b2ef3"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}