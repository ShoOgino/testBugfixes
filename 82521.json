{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"e81698e1493f01874d99b769bc4d9fc9f07555d6","date":1453489635,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      throw new IOException(\"Invalid expression runInterval parameter expected\");\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue)queueExpression.getParameter()).getValue());\n    }\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2 &&\n        expression.getParameters().size() != streamExpressions.size() + 3) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ab3f83fe809caa1d81a4ed52dfa5372723b348d","date":1458525918,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue)queueExpression.getParameter()).getValue());\n    }\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2 &&\n        expression.getParameters().size() != streamExpressions.size() + 3) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize);\n  }\n\n","sourceOld":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      throw new IOException(\"Invalid expression runInterval parameter expected\");\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue)queueExpression.getParameter()).getValue());\n    }\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2 &&\n        expression.getParameters().size() != streamExpressions.size() + 3) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ac1075ab5d486199f24ec3a7c07dc9b74606161","date":1476897426,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n    StreamExpressionNamedParameter terminateExpression = factory.getNamedOperand(expression, \"terminate\");\n\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n    boolean terminate = false;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue) queueExpression.getParameter()).getValue());\n    }\n\n    if(terminateExpression != null) {\n      terminate = Boolean.parseBoolean(((StreamExpressionValue) terminateExpression.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize, terminate);\n  }\n\n","sourceOld":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue)queueExpression.getParameter()).getValue());\n    }\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2 &&\n        expression.getParameters().size() != streamExpressions.size() + 3) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2305f39a86a068f1cee6fc5fbdfb760b153ac138","date":1476906991,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n    StreamExpressionNamedParameter terminateExpression = factory.getNamedOperand(expression, \"terminate\");\n\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n    boolean terminate = false;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue) queueExpression.getParameter()).getValue());\n    }\n\n    if(terminateExpression != null) {\n      terminate = Boolean.parseBoolean(((StreamExpressionValue) terminateExpression.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize, terminate);\n  }\n\n","sourceOld":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue)queueExpression.getParameter()).getValue());\n    }\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2 &&\n        expression.getParameters().size() != streamExpressions.size() + 3) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n    StreamExpressionNamedParameter terminateExpression = factory.getNamedOperand(expression, \"terminate\");\n\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n    boolean terminate = false;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue) queueExpression.getParameter()).getValue());\n    }\n\n    if(terminateExpression != null) {\n      terminate = Boolean.parseBoolean(((StreamExpressionValue) terminateExpression.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize, terminate);\n  }\n\n","sourceOld":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue)queueExpression.getParameter()).getValue());\n    }\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2 &&\n        expression.getParameters().size() != streamExpressions.size() + 3) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, ID);\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n    StreamExpressionNamedParameter terminateExpression = factory.getNamedOperand(expression, \"terminate\");\n\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n    boolean terminate = false;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue) queueExpression.getParameter()).getValue());\n    }\n\n    if(terminateExpression != null) {\n      terminate = Boolean.parseBoolean(((StreamExpressionValue) terminateExpression.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize, terminate);\n  }\n\n","sourceOld":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n    StreamExpressionNamedParameter terminateExpression = factory.getNamedOperand(expression, \"terminate\");\n\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n    boolean terminate = false;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue) queueExpression.getParameter()).getValue());\n    }\n\n    if(terminateExpression != null) {\n      terminate = Boolean.parseBoolean(((StreamExpressionValue) terminateExpression.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize, terminate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DaemonStream#DaemonStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, ID);\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n    StreamExpressionNamedParameter terminateExpression = factory.getNamedOperand(expression, \"terminate\");\n\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n    boolean terminate = false;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue) queueExpression.getParameter()).getValue());\n    }\n\n    if(terminateExpression != null) {\n      terminate = Boolean.parseBoolean(((StreamExpressionValue) terminateExpression.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize, terminate);\n  }\n\n","sourceOld":"  public DaemonStream(StreamExpression expression, StreamFactory factory) throws IOException{\n\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    TupleStream tupleStream = factory.constructStream(streamExpressions.get(0));\n\n    StreamExpressionNamedParameter idExpression = factory.getNamedOperand(expression, \"id\");\n    StreamExpressionNamedParameter runExpression = factory.getNamedOperand(expression, \"runInterval\");\n    StreamExpressionNamedParameter queueExpression = factory.getNamedOperand(expression, \"queueSize\");\n    StreamExpressionNamedParameter terminateExpression = factory.getNamedOperand(expression, \"terminate\");\n\n\n    String id = null;\n    long runInterval = 0L;\n    int queueSize = 0;\n    boolean terminate = false;\n\n    if(idExpression == null) {\n      throw new IOException(\"Invalid expression id parameter expected\");\n    } else {\n      id = ((StreamExpressionValue) idExpression.getParameter()).getValue();\n    }\n\n    if(runExpression == null) {\n      runInterval = 2000;\n    } else {\n      runInterval = Long.parseLong(((StreamExpressionValue) runExpression.getParameter()).getValue());\n    }\n\n    if(queueExpression != null) {\n       queueSize= Integer.parseInt(((StreamExpressionValue) queueExpression.getParameter()).getValue());\n    }\n\n    if(terminateExpression != null) {\n      terminate = Boolean.parseBoolean(((StreamExpressionValue) terminateExpression.getParameter()).getValue());\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(tupleStream, id, runInterval, queueSize, terminate);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"e81698e1493f01874d99b769bc4d9fc9f07555d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ab3f83fe809caa1d81a4ed52dfa5372723b348d":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"3ac1075ab5d486199f24ec3a7c07dc9b74606161":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d","2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d","3ac1075ab5d486199f24ec3a7c07dc9b74606161"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e81698e1493f01874d99b769bc4d9fc9f07555d6":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"5ab3f83fe809caa1d81a4ed52dfa5372723b348d":["3ac1075ab5d486199f24ec3a7c07dc9b74606161","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"3ac1075ab5d486199f24ec3a7c07dc9b74606161":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}