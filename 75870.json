{"path":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    message(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    message(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a55c46ea262f9033bd9ab60542dea4b38abef33","date":1306109444,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":null,"sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    message(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae132b768aece5bf21cda14e2f17fba66eb6f7d6","date":1306128032,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":null,"sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    message(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":null,"sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    initSearch(queryString);\n    int numHits = computeCount(query);\n    message(numHits + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < numHits; start += HITS_PER_PAGE) {\n      int end = Math.min(numHits, start + HITS_PER_PAGE);\n      ScoreDoc[] hits = search(query, end);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = searcher.doc(hits[ii].doc);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits[ii].score + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits[ii].doc);\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (numHits > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":["9454a6510e2db155fb01faa5c049b06ece95fab9","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["9454a6510e2db155fb01faa5c049b06ece95fab9","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a55c46ea262f9033bd9ab60542dea4b38abef33":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a55c46ea262f9033bd9ab60542dea4b38abef33"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":[],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a55c46ea262f9033bd9ab60542dea4b38abef33":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}