{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#createEmbeddedSolrServer(Path,FileSystem,Path).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#createEmbeddedSolrServer(Path,FileSystem,Path).mjava","pathOld":"/dev/null","sourceNew":"  public static EmbeddedSolrServer createEmbeddedSolrServer(Path solrHomeDir, FileSystem fs, Path outputShardDir)\n      throws IOException {\n\n    if (solrHomeDir == null) {\n      throw new IOException(\"Unable to find solr home setting\");\n    }\n    LOG.info(\"Creating embedded Solr server with solrHomeDir: \" + solrHomeDir + \", fs: \" + fs + \", outputShardDir: \" + outputShardDir);\n\n    Properties props = new Properties();\n    // FIXME note this is odd (no scheme) given Solr doesn't currently\n    // support uris (just abs/relative path)\n    Path solrDataDir = new Path(outputShardDir, \"data\");\n    if (!fs.exists(solrDataDir) && !fs.mkdirs(solrDataDir)) {\n      throw new IOException(\"Unable to create \" + solrDataDir);\n    }\n\n    String dataDirStr = solrDataDir.toUri().toString();\n    props.setProperty(\"solr.data.dir\", dataDirStr);\n    props.setProperty(\"solr.home\", solrHomeDir.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDir.toString(),\n        null, props);\n\n    LOG.info(String\n        .format(Locale.ENGLISH, \n            \"Constructed instance information solr.home %s (%s), instance dir %s, conf dir %s, writing index to solr.data.dir %s, with permdir %s\",\n            solrHomeDir, solrHomeDir.toUri(), loader.getInstanceDir(),\n            loader.getConfigDir(), dataDirStr, outputShardDir));\n\n    CoreContainer container = new CoreContainer(loader);\n    container.load();\n    CoreDescriptor descr = new CoreDescriptor(container, \"core1\",\n        \".\", props);\n    \n    SolrCore core = container.create(descr);\n    container.register(core, false);\n    \n    System.setProperty(\"solr.hdfs.nrtcachingdirectory\", \"false\");\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    System.setProperty(\"solr.autoCommit.maxTime\", \"-1\");\n    System.setProperty(\"solr.autoSoftCommit.maxTime\", \"-1\");\n    EmbeddedSolrServer solr = new EmbeddedSolrServer(container, \"core1\");\n    return solr;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#createEmbeddedSolrServer(Path,FileSystem,Path).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#createEmbeddedSolrServer(Path,FileSystem,Path).mjava","sourceNew":"  public static EmbeddedSolrServer createEmbeddedSolrServer(Path solrHomeDir, FileSystem fs, Path outputShardDir)\n      throws IOException {\n\n    if (solrHomeDir == null) {\n      throw new IOException(\"Unable to find solr home setting\");\n    }\n    LOG.info(\"Creating embedded Solr server with solrHomeDir: \" + solrHomeDir + \", fs: \" + fs + \", outputShardDir: \" + outputShardDir);\n\n    Properties props = new Properties();\n    // FIXME note this is odd (no scheme) given Solr doesn't currently\n    // support uris (just abs/relative path)\n    Path solrDataDir = new Path(outputShardDir, \"data\");\n    if (!fs.exists(solrDataDir) && !fs.mkdirs(solrDataDir)) {\n      throw new IOException(\"Unable to create \" + solrDataDir);\n    }\n\n    String dataDirStr = solrDataDir.toUri().toString();\n    props.setProperty(\"solr.data.dir\", dataDirStr);\n    props.setProperty(\"solr.home\", solrHomeDir.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDir.toString(),\n        null, props);\n\n    LOG.info(String\n        .format(Locale.ENGLISH, \n            \"Constructed instance information solr.home %s (%s), instance dir %s, conf dir %s, writing index to solr.data.dir %s, with permdir %s\",\n            solrHomeDir, solrHomeDir.toUri(), loader.getInstanceDir(),\n            loader.getConfigDir(), dataDirStr, outputShardDir));\n\n    CoreContainer container = new CoreContainer(loader);\n    container.load();\n    CoreDescriptor descr = new CoreDescriptor(container, \"core1\",\n        \".\", props);\n    \n    SolrCore core = container.create(descr);\n    container.register(core, false);\n    \n    System.setProperty(\"solr.hdfs.nrtcachingdirectory\", \"false\");\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    System.setProperty(\"solr.autoCommit.maxTime\", \"-1\");\n    System.setProperty(\"solr.autoSoftCommit.maxTime\", \"-1\");\n    EmbeddedSolrServer solr = new EmbeddedSolrServer(container, \"core1\");\n    return solr;\n  }\n\n","sourceOld":"  public static EmbeddedSolrServer createEmbeddedSolrServer(Path solrHomeDir, FileSystem fs, Path outputShardDir)\n      throws IOException {\n\n    if (solrHomeDir == null) {\n      throw new IOException(\"Unable to find solr home setting\");\n    }\n    LOG.info(\"Creating embedded Solr server with solrHomeDir: \" + solrHomeDir + \", fs: \" + fs + \", outputShardDir: \" + outputShardDir);\n\n    Properties props = new Properties();\n    // FIXME note this is odd (no scheme) given Solr doesn't currently\n    // support uris (just abs/relative path)\n    Path solrDataDir = new Path(outputShardDir, \"data\");\n    if (!fs.exists(solrDataDir) && !fs.mkdirs(solrDataDir)) {\n      throw new IOException(\"Unable to create \" + solrDataDir);\n    }\n\n    String dataDirStr = solrDataDir.toUri().toString();\n    props.setProperty(\"solr.data.dir\", dataDirStr);\n    props.setProperty(\"solr.home\", solrHomeDir.toString());\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDir.toString(),\n        null, props);\n\n    LOG.info(String\n        .format(Locale.ENGLISH, \n            \"Constructed instance information solr.home %s (%s), instance dir %s, conf dir %s, writing index to solr.data.dir %s, with permdir %s\",\n            solrHomeDir, solrHomeDir.toUri(), loader.getInstanceDir(),\n            loader.getConfigDir(), dataDirStr, outputShardDir));\n\n    CoreContainer container = new CoreContainer(loader);\n    container.load();\n    CoreDescriptor descr = new CoreDescriptor(container, \"core1\",\n        \".\", props);\n    \n    SolrCore core = container.create(descr);\n    container.register(core, false);\n    \n    System.setProperty(\"solr.hdfs.nrtcachingdirectory\", \"false\");\n    System.setProperty(\"solr.hdfs.blockcache.enabled\", \"false\");\n    System.setProperty(\"solr.autoCommit.maxTime\", \"-1\");\n    System.setProperty(\"solr.autoSoftCommit.maxTime\", \"-1\");\n    EmbeddedSolrServer solr = new EmbeddedSolrServer(container, \"core1\");\n    return solr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}