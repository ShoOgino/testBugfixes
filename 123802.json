{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","commits":[{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.123456789123456);\n    values.put(\"b\", -4.123456789123456);\n    values.put(\"c\", -4.123456789123456);\n    values.put(\"d\", -4.123456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.123456789123456, result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","sourceNew":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.12345678);\n    values.put(\"b\", -4.12345678);\n    values.put(\"c\", -4.12345678);\n    values.put(\"d\", -4.12345678);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.12345678, result);\n  }\n\n","sourceOld":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.123456789123456);\n    values.put(\"b\", -4.123456789123456);\n    values.put(\"c\", -4.123456789123456);\n    values.put(\"d\", -4.123456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.123456789123456, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","sourceNew":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.12345678);\n    values.put(\"b\", -4.12345678);\n    values.put(\"c\", -4.12345678);\n    values.put(\"d\", -4.12345678);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.12345678, result);\n  }\n\n","sourceOld":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.123456789123456);\n    values.put(\"b\", -4.123456789123456);\n    values.put(\"c\", -4.123456789123456);\n    values.put(\"d\", -4.123456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.123456789123456, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","sourceNew":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.12345678);\n    values.put(\"b\", -4.12345678);\n    values.put(\"c\", -4.12345678);\n    values.put(\"d\", -4.12345678);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.12345678, result);\n  }\n\n","sourceOld":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.123456789123456);\n    values.put(\"b\", -4.123456789123456);\n    values.put(\"c\", -4.123456789123456);\n    values.put(\"d\", -4.123456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.123456789123456, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3eb251dab40cb8cabcea8ed646a2c060d423f18","date":1570756765,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","sourceNew":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(10D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(4 * 123456789123456789D, result);\n    \n    values.clear();\n    values.put(\"a\", -4.12345678);\n    values.put(\"b\", -4.12345678);\n    values.put(\"c\", -4.12345678);\n    values.put(\"d\", -4.12345678);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.12345678, result);\n  }\n\n","sourceOld":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.12345678);\n    values.put(\"b\", -4.12345678);\n    values.put(\"c\", -4.12345678);\n    values.put(\"d\", -4.12345678);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.12345678, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/AddEvaluatorTest#addManyFieldsWithManySubAddsWithNegative().mjava","sourceNew":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(10D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertEquals(4 * 123456789123456789D, result);\n    \n    values.clear();\n    values.put(\"a\", -4.12345678);\n    values.put(\"b\", -4.12345678);\n    values.put(\"c\", -4.12345678);\n    values.put(\"d\", -4.12345678);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.12345678, result);\n  }\n\n","sourceOld":"  @Test\n  public void addManyFieldsWithManySubAddsWithNegative() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"add(add(a,b),add(c,d),add(c,a))\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", -1);\n    values.put(\"b\", 2);\n    values.put(\"c\", 3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(10L, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    values.put(\"c\", -3);\n    values.put(\"d\", 4);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 4.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(2.2D, result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    values.put(\"c\", -3.1);\n    values.put(\"d\", 5.223456789123456);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(3.323456789123456, result);\n    \n    values.clear();\n    values.put(\"a\", 123456789123456789L);\n    values.put(\"b\", -123456789123456789L);\n    values.put(\"c\", 123456789123456789L);\n    values.put(\"d\", 123456789123456789L);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Long);\n    Assert.assertEquals(4 * 123456789123456789L, result);\n    \n    values.clear();\n    values.put(\"a\", -4.12345678);\n    values.put(\"b\", -4.12345678);\n    values.put(\"c\", -4.12345678);\n    values.put(\"d\", -4.12345678);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Double);\n    Assert.assertEquals(6 * -4.12345678, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"c3eb251dab40cb8cabcea8ed646a2c060d423f18":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c3eb251dab40cb8cabcea8ed646a2c060d423f18"],"b0b597c65628ca9e73913a07e81691f8229bae35":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","c3eb251dab40cb8cabcea8ed646a2c060d423f18"]},"commit2Childs":{"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","c3eb251dab40cb8cabcea8ed646a2c060d423f18","b0b597c65628ca9e73913a07e81691f8229bae35"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"c3eb251dab40cb8cabcea8ed646a2c060d423f18":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}