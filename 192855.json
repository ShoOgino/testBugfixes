{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte23 << 15) | (byte24 << 7) | (byte25 >>> 1);\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte25 & 1) << 22) | (byte26 << 14) | (byte27 << 6) | (byte28 >>> 2);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 3) << 21) | (byte29 << 13) | (byte30 << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 20) | (byte32 << 12) | (byte33 << 4) | (byte34 >>> 4);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 15) << 19) | (byte35 << 11) | (byte36 << 3) | (byte37 >>> 5);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 31) << 18) | (byte38 << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 17) | (byte41 << 9) | (byte42 << 1) | (byte43 >>> 7);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 127) << 16) | (byte44 << 8) | byte45;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte46 << 15) | (byte47 << 7) | (byte48 >>> 1);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 1) << 22) | (byte49 << 14) | (byte50 << 6) | (byte51 >>> 2);\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte51 & 3) << 21) | (byte52 << 13) | (byte53 << 5) | (byte54 >>> 3);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 7) << 20) | (byte55 << 12) | (byte56 << 4) | (byte57 >>> 4);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 15) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 31) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 17) | (byte64 << 9) | (byte65 << 1) | (byte66 >>> 7);\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte66 & 127) << 16) | (byte67 << 8) | byte68;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte69 << 15) | (byte70 << 7) | (byte71 >>> 1);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 1) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 21) | (byte75 << 13) | (byte76 << 5) | (byte77 >>> 3);\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte77 & 7) << 20) | (byte78 << 12) | (byte79 << 4) | (byte80 >>> 4);\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte80 & 15) << 19) | (byte81 << 11) | (byte82 << 3) | (byte83 >>> 5);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 31) << 18) | (byte84 << 10) | (byte85 << 2) | (byte86 >>> 6);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 63) << 17) | (byte87 << 9) | (byte88 << 1) | (byte89 >>> 7);\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte89 & 127) << 16) | (byte90 << 8) | byte91;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte92 << 15) | (byte93 << 7) | (byte94 >>> 1);\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 1) << 22) | (byte95 << 14) | (byte96 << 6) | (byte97 >>> 2);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 3) << 21) | (byte98 << 13) | (byte99 << 5) | (byte100 >>> 3);\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 7) << 20) | (byte101 << 12) | (byte102 << 4) | (byte103 >>> 4);\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte103 & 15) << 19) | (byte104 << 11) | (byte105 << 3) | (byte106 >>> 5);\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte106 & 31) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte109 & 63) << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 16) | (byte113 << 8) | byte114;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte115 << 15) | (byte116 << 7) | (byte117 >>> 1);\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte117 & 1) << 22) | (byte118 << 14) | (byte119 << 6) | (byte120 >>> 2);\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte120 & 3) << 21) | (byte121 << 13) | (byte122 << 5) | (byte123 >>> 3);\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte123 & 7) << 20) | (byte124 << 12) | (byte125 << 4) | (byte126 >>> 4);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 15) << 19) | (byte127 << 11) | (byte128 << 3) | (byte129 >>> 5);\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte129 & 31) << 18) | (byte130 << 10) | (byte131 << 2) | (byte132 >>> 6);\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte132 & 63) << 17) | (byte133 << 9) | (byte134 << 1) | (byte135 >>> 7);\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte135 & 127) << 16) | (byte136 << 8) | byte137;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte138 << 15) | (byte139 << 7) | (byte140 >>> 1);\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte140 & 1) << 22) | (byte141 << 14) | (byte142 << 6) | (byte143 >>> 2);\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte143 & 3) << 21) | (byte144 << 13) | (byte145 << 5) | (byte146 >>> 3);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 7) << 20) | (byte147 << 12) | (byte148 << 4) | (byte149 >>> 4);\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte149 & 15) << 19) | (byte150 << 11) | (byte151 << 3) | (byte152 >>> 5);\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte152 & 31) << 18) | (byte153 << 10) | (byte154 << 2) | (byte155 >>> 6);\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte155 & 63) << 17) | (byte156 << 9) | (byte157 << 1) | (byte158 >>> 7);\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte158 & 127) << 16) | (byte159 << 8) | byte160;\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte161 << 15) | (byte162 << 7) | (byte163 >>> 1);\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte163 & 1) << 22) | (byte164 << 14) | (byte165 << 6) | (byte166 >>> 2);\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte166 & 3) << 21) | (byte167 << 13) | (byte168 << 5) | (byte169 >>> 3);\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte169 & 7) << 20) | (byte170 << 12) | (byte171 << 4) | (byte172 >>> 4);\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte172 & 15) << 19) | (byte173 << 11) | (byte174 << 3) | (byte175 >>> 5);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 31) << 18) | (byte176 << 10) | (byte177 << 2) | (byte178 >>> 6);\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte178 & 63) << 17) | (byte179 << 9) | (byte180 << 1) | (byte181 >>> 7);\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte181 & 127) << 16) | (byte182 << 8) | byte183;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte23 << 15) | (byte24 << 7) | (byte25 >>> 1);\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte25 & 1) << 22) | (byte26 << 14) | (byte27 << 6) | (byte28 >>> 2);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 3) << 21) | (byte29 << 13) | (byte30 << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 20) | (byte32 << 12) | (byte33 << 4) | (byte34 >>> 4);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 15) << 19) | (byte35 << 11) | (byte36 << 3) | (byte37 >>> 5);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 31) << 18) | (byte38 << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 17) | (byte41 << 9) | (byte42 << 1) | (byte43 >>> 7);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 127) << 16) | (byte44 << 8) | byte45;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte46 << 15) | (byte47 << 7) | (byte48 >>> 1);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 1) << 22) | (byte49 << 14) | (byte50 << 6) | (byte51 >>> 2);\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte51 & 3) << 21) | (byte52 << 13) | (byte53 << 5) | (byte54 >>> 3);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 7) << 20) | (byte55 << 12) | (byte56 << 4) | (byte57 >>> 4);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 15) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 31) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 17) | (byte64 << 9) | (byte65 << 1) | (byte66 >>> 7);\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte66 & 127) << 16) | (byte67 << 8) | byte68;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte69 << 15) | (byte70 << 7) | (byte71 >>> 1);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 1) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 21) | (byte75 << 13) | (byte76 << 5) | (byte77 >>> 3);\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte77 & 7) << 20) | (byte78 << 12) | (byte79 << 4) | (byte80 >>> 4);\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte80 & 15) << 19) | (byte81 << 11) | (byte82 << 3) | (byte83 >>> 5);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 31) << 18) | (byte84 << 10) | (byte85 << 2) | (byte86 >>> 6);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 63) << 17) | (byte87 << 9) | (byte88 << 1) | (byte89 >>> 7);\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte89 & 127) << 16) | (byte90 << 8) | byte91;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte92 << 15) | (byte93 << 7) | (byte94 >>> 1);\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 1) << 22) | (byte95 << 14) | (byte96 << 6) | (byte97 >>> 2);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 3) << 21) | (byte98 << 13) | (byte99 << 5) | (byte100 >>> 3);\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 7) << 20) | (byte101 << 12) | (byte102 << 4) | (byte103 >>> 4);\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte103 & 15) << 19) | (byte104 << 11) | (byte105 << 3) | (byte106 >>> 5);\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte106 & 31) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte109 & 63) << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 16) | (byte113 << 8) | byte114;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte115 << 15) | (byte116 << 7) | (byte117 >>> 1);\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte117 & 1) << 22) | (byte118 << 14) | (byte119 << 6) | (byte120 >>> 2);\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte120 & 3) << 21) | (byte121 << 13) | (byte122 << 5) | (byte123 >>> 3);\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte123 & 7) << 20) | (byte124 << 12) | (byte125 << 4) | (byte126 >>> 4);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 15) << 19) | (byte127 << 11) | (byte128 << 3) | (byte129 >>> 5);\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte129 & 31) << 18) | (byte130 << 10) | (byte131 << 2) | (byte132 >>> 6);\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte132 & 63) << 17) | (byte133 << 9) | (byte134 << 1) | (byte135 >>> 7);\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte135 & 127) << 16) | (byte136 << 8) | byte137;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte138 << 15) | (byte139 << 7) | (byte140 >>> 1);\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte140 & 1) << 22) | (byte141 << 14) | (byte142 << 6) | (byte143 >>> 2);\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte143 & 3) << 21) | (byte144 << 13) | (byte145 << 5) | (byte146 >>> 3);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 7) << 20) | (byte147 << 12) | (byte148 << 4) | (byte149 >>> 4);\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte149 & 15) << 19) | (byte150 << 11) | (byte151 << 3) | (byte152 >>> 5);\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte152 & 31) << 18) | (byte153 << 10) | (byte154 << 2) | (byte155 >>> 6);\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte155 & 63) << 17) | (byte156 << 9) | (byte157 << 1) | (byte158 >>> 7);\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte158 & 127) << 16) | (byte159 << 8) | byte160;\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte161 << 15) | (byte162 << 7) | (byte163 >>> 1);\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte163 & 1) << 22) | (byte164 << 14) | (byte165 << 6) | (byte166 >>> 2);\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte166 & 3) << 21) | (byte167 << 13) | (byte168 << 5) | (byte169 >>> 3);\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte169 & 7) << 20) | (byte170 << 12) | (byte171 << 4) | (byte172 >>> 4);\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte172 & 15) << 19) | (byte173 << 11) | (byte174 << 3) | (byte175 >>> 5);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 31) << 18) | (byte176 << 10) | (byte177 << 2) | (byte178 >>> 6);\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte178 & 63) << 17) | (byte179 << 9) | (byte180 << 1) | (byte181 >>> 7);\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte181 & 127) << 16) | (byte182 << 8) | byte183;\n      }\n    }\n\n","sourceOld":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte23 << 15) | (byte24 << 7) | (byte25 >>> 1);\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte25 & 1) << 22) | (byte26 << 14) | (byte27 << 6) | (byte28 >>> 2);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 3) << 21) | (byte29 << 13) | (byte30 << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 20) | (byte32 << 12) | (byte33 << 4) | (byte34 >>> 4);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 15) << 19) | (byte35 << 11) | (byte36 << 3) | (byte37 >>> 5);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 31) << 18) | (byte38 << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 17) | (byte41 << 9) | (byte42 << 1) | (byte43 >>> 7);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 127) << 16) | (byte44 << 8) | byte45;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte46 << 15) | (byte47 << 7) | (byte48 >>> 1);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 1) << 22) | (byte49 << 14) | (byte50 << 6) | (byte51 >>> 2);\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte51 & 3) << 21) | (byte52 << 13) | (byte53 << 5) | (byte54 >>> 3);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 7) << 20) | (byte55 << 12) | (byte56 << 4) | (byte57 >>> 4);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 15) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 31) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 17) | (byte64 << 9) | (byte65 << 1) | (byte66 >>> 7);\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte66 & 127) << 16) | (byte67 << 8) | byte68;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte69 << 15) | (byte70 << 7) | (byte71 >>> 1);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 1) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 21) | (byte75 << 13) | (byte76 << 5) | (byte77 >>> 3);\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte77 & 7) << 20) | (byte78 << 12) | (byte79 << 4) | (byte80 >>> 4);\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte80 & 15) << 19) | (byte81 << 11) | (byte82 << 3) | (byte83 >>> 5);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 31) << 18) | (byte84 << 10) | (byte85 << 2) | (byte86 >>> 6);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 63) << 17) | (byte87 << 9) | (byte88 << 1) | (byte89 >>> 7);\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte89 & 127) << 16) | (byte90 << 8) | byte91;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte92 << 15) | (byte93 << 7) | (byte94 >>> 1);\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 1) << 22) | (byte95 << 14) | (byte96 << 6) | (byte97 >>> 2);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 3) << 21) | (byte98 << 13) | (byte99 << 5) | (byte100 >>> 3);\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 7) << 20) | (byte101 << 12) | (byte102 << 4) | (byte103 >>> 4);\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte103 & 15) << 19) | (byte104 << 11) | (byte105 << 3) | (byte106 >>> 5);\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte106 & 31) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte109 & 63) << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 16) | (byte113 << 8) | byte114;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte115 << 15) | (byte116 << 7) | (byte117 >>> 1);\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte117 & 1) << 22) | (byte118 << 14) | (byte119 << 6) | (byte120 >>> 2);\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte120 & 3) << 21) | (byte121 << 13) | (byte122 << 5) | (byte123 >>> 3);\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte123 & 7) << 20) | (byte124 << 12) | (byte125 << 4) | (byte126 >>> 4);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 15) << 19) | (byte127 << 11) | (byte128 << 3) | (byte129 >>> 5);\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte129 & 31) << 18) | (byte130 << 10) | (byte131 << 2) | (byte132 >>> 6);\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte132 & 63) << 17) | (byte133 << 9) | (byte134 << 1) | (byte135 >>> 7);\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte135 & 127) << 16) | (byte136 << 8) | byte137;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte138 << 15) | (byte139 << 7) | (byte140 >>> 1);\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte140 & 1) << 22) | (byte141 << 14) | (byte142 << 6) | (byte143 >>> 2);\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte143 & 3) << 21) | (byte144 << 13) | (byte145 << 5) | (byte146 >>> 3);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 7) << 20) | (byte147 << 12) | (byte148 << 4) | (byte149 >>> 4);\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte149 & 15) << 19) | (byte150 << 11) | (byte151 << 3) | (byte152 >>> 5);\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte152 & 31) << 18) | (byte153 << 10) | (byte154 << 2) | (byte155 >>> 6);\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte155 & 63) << 17) | (byte156 << 9) | (byte157 << 1) | (byte158 >>> 7);\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte158 & 127) << 16) | (byte159 << 8) | byte160;\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte161 << 15) | (byte162 << 7) | (byte163 >>> 1);\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte163 & 1) << 22) | (byte164 << 14) | (byte165 << 6) | (byte166 >>> 2);\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte166 & 3) << 21) | (byte167 << 13) | (byte168 << 5) | (byte169 >>> 3);\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte169 & 7) << 20) | (byte170 << 12) | (byte171 << 4) | (byte172 >>> 4);\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte172 & 15) << 19) | (byte173 << 11) | (byte174 << 3) | (byte175 >>> 5);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 31) << 18) | (byte176 << 10) | (byte177 << 2) | (byte178 >>> 6);\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte178 & 63) << 17) | (byte179 << 9) | (byte180 << 1) | (byte181 >>> 7);\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte181 & 127) << 16) | (byte182 << 8) | byte183;\n      }\n    }\n\n","bugFix":null,"bugIntro":["818b04e906a094f03512fe99c83e359da8277708"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte23 << 15) | (byte24 << 7) | (byte25 >>> 1);\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte25 & 1) << 22) | (byte26 << 14) | (byte27 << 6) | (byte28 >>> 2);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 3) << 21) | (byte29 << 13) | (byte30 << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 20) | (byte32 << 12) | (byte33 << 4) | (byte34 >>> 4);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 15) << 19) | (byte35 << 11) | (byte36 << 3) | (byte37 >>> 5);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 31) << 18) | (byte38 << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 17) | (byte41 << 9) | (byte42 << 1) | (byte43 >>> 7);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 127) << 16) | (byte44 << 8) | byte45;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte46 << 15) | (byte47 << 7) | (byte48 >>> 1);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 1) << 22) | (byte49 << 14) | (byte50 << 6) | (byte51 >>> 2);\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte51 & 3) << 21) | (byte52 << 13) | (byte53 << 5) | (byte54 >>> 3);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 7) << 20) | (byte55 << 12) | (byte56 << 4) | (byte57 >>> 4);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 15) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 31) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 17) | (byte64 << 9) | (byte65 << 1) | (byte66 >>> 7);\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte66 & 127) << 16) | (byte67 << 8) | byte68;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte69 << 15) | (byte70 << 7) | (byte71 >>> 1);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 1) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 21) | (byte75 << 13) | (byte76 << 5) | (byte77 >>> 3);\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte77 & 7) << 20) | (byte78 << 12) | (byte79 << 4) | (byte80 >>> 4);\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte80 & 15) << 19) | (byte81 << 11) | (byte82 << 3) | (byte83 >>> 5);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 31) << 18) | (byte84 << 10) | (byte85 << 2) | (byte86 >>> 6);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 63) << 17) | (byte87 << 9) | (byte88 << 1) | (byte89 >>> 7);\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte89 & 127) << 16) | (byte90 << 8) | byte91;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte92 << 15) | (byte93 << 7) | (byte94 >>> 1);\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 1) << 22) | (byte95 << 14) | (byte96 << 6) | (byte97 >>> 2);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 3) << 21) | (byte98 << 13) | (byte99 << 5) | (byte100 >>> 3);\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 7) << 20) | (byte101 << 12) | (byte102 << 4) | (byte103 >>> 4);\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte103 & 15) << 19) | (byte104 << 11) | (byte105 << 3) | (byte106 >>> 5);\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte106 & 31) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte109 & 63) << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 16) | (byte113 << 8) | byte114;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte115 << 15) | (byte116 << 7) | (byte117 >>> 1);\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte117 & 1) << 22) | (byte118 << 14) | (byte119 << 6) | (byte120 >>> 2);\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte120 & 3) << 21) | (byte121 << 13) | (byte122 << 5) | (byte123 >>> 3);\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte123 & 7) << 20) | (byte124 << 12) | (byte125 << 4) | (byte126 >>> 4);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 15) << 19) | (byte127 << 11) | (byte128 << 3) | (byte129 >>> 5);\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte129 & 31) << 18) | (byte130 << 10) | (byte131 << 2) | (byte132 >>> 6);\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte132 & 63) << 17) | (byte133 << 9) | (byte134 << 1) | (byte135 >>> 7);\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte135 & 127) << 16) | (byte136 << 8) | byte137;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte138 << 15) | (byte139 << 7) | (byte140 >>> 1);\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte140 & 1) << 22) | (byte141 << 14) | (byte142 << 6) | (byte143 >>> 2);\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte143 & 3) << 21) | (byte144 << 13) | (byte145 << 5) | (byte146 >>> 3);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 7) << 20) | (byte147 << 12) | (byte148 << 4) | (byte149 >>> 4);\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte149 & 15) << 19) | (byte150 << 11) | (byte151 << 3) | (byte152 >>> 5);\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte152 & 31) << 18) | (byte153 << 10) | (byte154 << 2) | (byte155 >>> 6);\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte155 & 63) << 17) | (byte156 << 9) | (byte157 << 1) | (byte158 >>> 7);\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte158 & 127) << 16) | (byte159 << 8) | byte160;\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte161 << 15) | (byte162 << 7) | (byte163 >>> 1);\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte163 & 1) << 22) | (byte164 << 14) | (byte165 << 6) | (byte166 >>> 2);\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte166 & 3) << 21) | (byte167 << 13) | (byte168 << 5) | (byte169 >>> 3);\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte169 & 7) << 20) | (byte170 << 12) | (byte171 << 4) | (byte172 >>> 4);\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte172 & 15) << 19) | (byte173 << 11) | (byte174 << 3) | (byte175 >>> 5);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 31) << 18) | (byte176 << 10) | (byte177 << 2) | (byte178 >>> 6);\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte178 & 63) << 17) | (byte179 << 9) | (byte180 << 1) | (byte181 >>> 7);\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte181 & 127) << 16) | (byte182 << 8) | byte183;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818b04e906a094f03512fe99c83e359da8277708","date":1346427149,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      final long byte11 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n      final long byte12 = blocks[blocksOffset++] & 0xFF;\n      final long byte13 = blocks[blocksOffset++] & 0xFF;\n      final long byte14 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n      final long byte15 = blocks[blocksOffset++] & 0xFF;\n      final long byte16 = blocks[blocksOffset++] & 0xFF;\n      final long byte17 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n      final long byte18 = blocks[blocksOffset++] & 0xFF;\n      final long byte19 = blocks[blocksOffset++] & 0xFF;\n      final long byte20 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n      final long byte21 = blocks[blocksOffset++] & 0xFF;\n      final long byte22 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte23 << 15) | (byte24 << 7) | (byte25 >>> 1);\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte25 & 1) << 22) | (byte26 << 14) | (byte27 << 6) | (byte28 >>> 2);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 3) << 21) | (byte29 << 13) | (byte30 << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 20) | (byte32 << 12) | (byte33 << 4) | (byte34 >>> 4);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 15) << 19) | (byte35 << 11) | (byte36 << 3) | (byte37 >>> 5);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 31) << 18) | (byte38 << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 17) | (byte41 << 9) | (byte42 << 1) | (byte43 >>> 7);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 127) << 16) | (byte44 << 8) | byte45;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte46 << 15) | (byte47 << 7) | (byte48 >>> 1);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 1) << 22) | (byte49 << 14) | (byte50 << 6) | (byte51 >>> 2);\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte51 & 3) << 21) | (byte52 << 13) | (byte53 << 5) | (byte54 >>> 3);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 7) << 20) | (byte55 << 12) | (byte56 << 4) | (byte57 >>> 4);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 15) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 31) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 17) | (byte64 << 9) | (byte65 << 1) | (byte66 >>> 7);\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte66 & 127) << 16) | (byte67 << 8) | byte68;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte69 << 15) | (byte70 << 7) | (byte71 >>> 1);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 1) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 21) | (byte75 << 13) | (byte76 << 5) | (byte77 >>> 3);\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte77 & 7) << 20) | (byte78 << 12) | (byte79 << 4) | (byte80 >>> 4);\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte80 & 15) << 19) | (byte81 << 11) | (byte82 << 3) | (byte83 >>> 5);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 31) << 18) | (byte84 << 10) | (byte85 << 2) | (byte86 >>> 6);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 63) << 17) | (byte87 << 9) | (byte88 << 1) | (byte89 >>> 7);\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte89 & 127) << 16) | (byte90 << 8) | byte91;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte92 << 15) | (byte93 << 7) | (byte94 >>> 1);\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 1) << 22) | (byte95 << 14) | (byte96 << 6) | (byte97 >>> 2);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 3) << 21) | (byte98 << 13) | (byte99 << 5) | (byte100 >>> 3);\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 7) << 20) | (byte101 << 12) | (byte102 << 4) | (byte103 >>> 4);\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte103 & 15) << 19) | (byte104 << 11) | (byte105 << 3) | (byte106 >>> 5);\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte106 & 31) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte109 & 63) << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 16) | (byte113 << 8) | byte114;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte115 << 15) | (byte116 << 7) | (byte117 >>> 1);\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte117 & 1) << 22) | (byte118 << 14) | (byte119 << 6) | (byte120 >>> 2);\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte120 & 3) << 21) | (byte121 << 13) | (byte122 << 5) | (byte123 >>> 3);\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte123 & 7) << 20) | (byte124 << 12) | (byte125 << 4) | (byte126 >>> 4);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 15) << 19) | (byte127 << 11) | (byte128 << 3) | (byte129 >>> 5);\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte129 & 31) << 18) | (byte130 << 10) | (byte131 << 2) | (byte132 >>> 6);\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte132 & 63) << 17) | (byte133 << 9) | (byte134 << 1) | (byte135 >>> 7);\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte135 & 127) << 16) | (byte136 << 8) | byte137;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte138 << 15) | (byte139 << 7) | (byte140 >>> 1);\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte140 & 1) << 22) | (byte141 << 14) | (byte142 << 6) | (byte143 >>> 2);\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte143 & 3) << 21) | (byte144 << 13) | (byte145 << 5) | (byte146 >>> 3);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 7) << 20) | (byte147 << 12) | (byte148 << 4) | (byte149 >>> 4);\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte149 & 15) << 19) | (byte150 << 11) | (byte151 << 3) | (byte152 >>> 5);\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte152 & 31) << 18) | (byte153 << 10) | (byte154 << 2) | (byte155 >>> 6);\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte155 & 63) << 17) | (byte156 << 9) | (byte157 << 1) | (byte158 >>> 7);\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte158 & 127) << 16) | (byte159 << 8) | byte160;\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte161 << 15) | (byte162 << 7) | (byte163 >>> 1);\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte163 & 1) << 22) | (byte164 << 14) | (byte165 << 6) | (byte166 >>> 2);\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte166 & 3) << 21) | (byte167 << 13) | (byte168 << 5) | (byte169 >>> 3);\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte169 & 7) << 20) | (byte170 << 12) | (byte171 << 4) | (byte172 >>> 4);\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte172 & 15) << 19) | (byte173 << 11) | (byte174 << 3) | (byte175 >>> 5);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 31) << 18) | (byte176 << 10) | (byte177 << 2) | (byte178 >>> 6);\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte178 & 63) << 17) | (byte179 << 9) | (byte180 << 1) | (byte181 >>> 7);\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte181 & 127) << 16) | (byte182 << 8) | byte183;\n      }\n    }\n\n","bugFix":["353f5909b00345d98d079a7db9a1bbe7485b1ea6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      final long byte11 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n      final long byte12 = blocks[blocksOffset++] & 0xFF;\n      final long byte13 = blocks[blocksOffset++] & 0xFF;\n      final long byte14 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n      final long byte15 = blocks[blocksOffset++] & 0xFF;\n      final long byte16 = blocks[blocksOffset++] & 0xFF;\n      final long byte17 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n      final long byte18 = blocks[blocksOffset++] & 0xFF;\n      final long byte19 = blocks[blocksOffset++] & 0xFF;\n      final long byte20 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n      final long byte21 = blocks[blocksOffset++] & 0xFF;\n      final long byte22 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n    }\n  }\n\n","sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte23 << 15) | (byte24 << 7) | (byte25 >>> 1);\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte25 & 1) << 22) | (byte26 << 14) | (byte27 << 6) | (byte28 >>> 2);\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte28 & 3) << 21) | (byte29 << 13) | (byte30 << 5) | (byte31 >>> 3);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 7) << 20) | (byte32 << 12) | (byte33 << 4) | (byte34 >>> 4);\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte34 & 15) << 19) | (byte35 << 11) | (byte36 << 3) | (byte37 >>> 5);\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte37 & 31) << 18) | (byte38 << 10) | (byte39 << 2) | (byte40 >>> 6);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 63) << 17) | (byte41 << 9) | (byte42 << 1) | (byte43 >>> 7);\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte43 & 127) << 16) | (byte44 << 8) | byte45;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte46 << 15) | (byte47 << 7) | (byte48 >>> 1);\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte48 & 1) << 22) | (byte49 << 14) | (byte50 << 6) | (byte51 >>> 2);\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte51 & 3) << 21) | (byte52 << 13) | (byte53 << 5) | (byte54 >>> 3);\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte54 & 7) << 20) | (byte55 << 12) | (byte56 << 4) | (byte57 >>> 4);\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte57 & 15) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte60 & 31) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte63 & 63) << 17) | (byte64 << 9) | (byte65 << 1) | (byte66 >>> 7);\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte66 & 127) << 16) | (byte67 << 8) | byte68;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte69 << 15) | (byte70 << 7) | (byte71 >>> 1);\n        final long byte72 = blocks[blocksOffset++] & 0xFF;\n        final long byte73 = blocks[blocksOffset++] & 0xFF;\n        final long byte74 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte71 & 1) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);\n        final long byte75 = blocks[blocksOffset++] & 0xFF;\n        final long byte76 = blocks[blocksOffset++] & 0xFF;\n        final long byte77 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte74 & 3) << 21) | (byte75 << 13) | (byte76 << 5) | (byte77 >>> 3);\n        final long byte78 = blocks[blocksOffset++] & 0xFF;\n        final long byte79 = blocks[blocksOffset++] & 0xFF;\n        final long byte80 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte77 & 7) << 20) | (byte78 << 12) | (byte79 << 4) | (byte80 >>> 4);\n        final long byte81 = blocks[blocksOffset++] & 0xFF;\n        final long byte82 = blocks[blocksOffset++] & 0xFF;\n        final long byte83 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte80 & 15) << 19) | (byte81 << 11) | (byte82 << 3) | (byte83 >>> 5);\n        final long byte84 = blocks[blocksOffset++] & 0xFF;\n        final long byte85 = blocks[blocksOffset++] & 0xFF;\n        final long byte86 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte83 & 31) << 18) | (byte84 << 10) | (byte85 << 2) | (byte86 >>> 6);\n        final long byte87 = blocks[blocksOffset++] & 0xFF;\n        final long byte88 = blocks[blocksOffset++] & 0xFF;\n        final long byte89 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte86 & 63) << 17) | (byte87 << 9) | (byte88 << 1) | (byte89 >>> 7);\n        final long byte90 = blocks[blocksOffset++] & 0xFF;\n        final long byte91 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte89 & 127) << 16) | (byte90 << 8) | byte91;\n        final long byte92 = blocks[blocksOffset++] & 0xFF;\n        final long byte93 = blocks[blocksOffset++] & 0xFF;\n        final long byte94 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte92 << 15) | (byte93 << 7) | (byte94 >>> 1);\n        final long byte95 = blocks[blocksOffset++] & 0xFF;\n        final long byte96 = blocks[blocksOffset++] & 0xFF;\n        final long byte97 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte94 & 1) << 22) | (byte95 << 14) | (byte96 << 6) | (byte97 >>> 2);\n        final long byte98 = blocks[blocksOffset++] & 0xFF;\n        final long byte99 = blocks[blocksOffset++] & 0xFF;\n        final long byte100 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte97 & 3) << 21) | (byte98 << 13) | (byte99 << 5) | (byte100 >>> 3);\n        final long byte101 = blocks[blocksOffset++] & 0xFF;\n        final long byte102 = blocks[blocksOffset++] & 0xFF;\n        final long byte103 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte100 & 7) << 20) | (byte101 << 12) | (byte102 << 4) | (byte103 >>> 4);\n        final long byte104 = blocks[blocksOffset++] & 0xFF;\n        final long byte105 = blocks[blocksOffset++] & 0xFF;\n        final long byte106 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte103 & 15) << 19) | (byte104 << 11) | (byte105 << 3) | (byte106 >>> 5);\n        final long byte107 = blocks[blocksOffset++] & 0xFF;\n        final long byte108 = blocks[blocksOffset++] & 0xFF;\n        final long byte109 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte106 & 31) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);\n        final long byte110 = blocks[blocksOffset++] & 0xFF;\n        final long byte111 = blocks[blocksOffset++] & 0xFF;\n        final long byte112 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte109 & 63) << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);\n        final long byte113 = blocks[blocksOffset++] & 0xFF;\n        final long byte114 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte112 & 127) << 16) | (byte113 << 8) | byte114;\n        final long byte115 = blocks[blocksOffset++] & 0xFF;\n        final long byte116 = blocks[blocksOffset++] & 0xFF;\n        final long byte117 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte115 << 15) | (byte116 << 7) | (byte117 >>> 1);\n        final long byte118 = blocks[blocksOffset++] & 0xFF;\n        final long byte119 = blocks[blocksOffset++] & 0xFF;\n        final long byte120 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte117 & 1) << 22) | (byte118 << 14) | (byte119 << 6) | (byte120 >>> 2);\n        final long byte121 = blocks[blocksOffset++] & 0xFF;\n        final long byte122 = blocks[blocksOffset++] & 0xFF;\n        final long byte123 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte120 & 3) << 21) | (byte121 << 13) | (byte122 << 5) | (byte123 >>> 3);\n        final long byte124 = blocks[blocksOffset++] & 0xFF;\n        final long byte125 = blocks[blocksOffset++] & 0xFF;\n        final long byte126 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte123 & 7) << 20) | (byte124 << 12) | (byte125 << 4) | (byte126 >>> 4);\n        final long byte127 = blocks[blocksOffset++] & 0xFF;\n        final long byte128 = blocks[blocksOffset++] & 0xFF;\n        final long byte129 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte126 & 15) << 19) | (byte127 << 11) | (byte128 << 3) | (byte129 >>> 5);\n        final long byte130 = blocks[blocksOffset++] & 0xFF;\n        final long byte131 = blocks[blocksOffset++] & 0xFF;\n        final long byte132 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte129 & 31) << 18) | (byte130 << 10) | (byte131 << 2) | (byte132 >>> 6);\n        final long byte133 = blocks[blocksOffset++] & 0xFF;\n        final long byte134 = blocks[blocksOffset++] & 0xFF;\n        final long byte135 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte132 & 63) << 17) | (byte133 << 9) | (byte134 << 1) | (byte135 >>> 7);\n        final long byte136 = blocks[blocksOffset++] & 0xFF;\n        final long byte137 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte135 & 127) << 16) | (byte136 << 8) | byte137;\n        final long byte138 = blocks[blocksOffset++] & 0xFF;\n        final long byte139 = blocks[blocksOffset++] & 0xFF;\n        final long byte140 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte138 << 15) | (byte139 << 7) | (byte140 >>> 1);\n        final long byte141 = blocks[blocksOffset++] & 0xFF;\n        final long byte142 = blocks[blocksOffset++] & 0xFF;\n        final long byte143 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte140 & 1) << 22) | (byte141 << 14) | (byte142 << 6) | (byte143 >>> 2);\n        final long byte144 = blocks[blocksOffset++] & 0xFF;\n        final long byte145 = blocks[blocksOffset++] & 0xFF;\n        final long byte146 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte143 & 3) << 21) | (byte144 << 13) | (byte145 << 5) | (byte146 >>> 3);\n        final long byte147 = blocks[blocksOffset++] & 0xFF;\n        final long byte148 = blocks[blocksOffset++] & 0xFF;\n        final long byte149 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte146 & 7) << 20) | (byte147 << 12) | (byte148 << 4) | (byte149 >>> 4);\n        final long byte150 = blocks[blocksOffset++] & 0xFF;\n        final long byte151 = blocks[blocksOffset++] & 0xFF;\n        final long byte152 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte149 & 15) << 19) | (byte150 << 11) | (byte151 << 3) | (byte152 >>> 5);\n        final long byte153 = blocks[blocksOffset++] & 0xFF;\n        final long byte154 = blocks[blocksOffset++] & 0xFF;\n        final long byte155 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte152 & 31) << 18) | (byte153 << 10) | (byte154 << 2) | (byte155 >>> 6);\n        final long byte156 = blocks[blocksOffset++] & 0xFF;\n        final long byte157 = blocks[blocksOffset++] & 0xFF;\n        final long byte158 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte155 & 63) << 17) | (byte156 << 9) | (byte157 << 1) | (byte158 >>> 7);\n        final long byte159 = blocks[blocksOffset++] & 0xFF;\n        final long byte160 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte158 & 127) << 16) | (byte159 << 8) | byte160;\n        final long byte161 = blocks[blocksOffset++] & 0xFF;\n        final long byte162 = blocks[blocksOffset++] & 0xFF;\n        final long byte163 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte161 << 15) | (byte162 << 7) | (byte163 >>> 1);\n        final long byte164 = blocks[blocksOffset++] & 0xFF;\n        final long byte165 = blocks[blocksOffset++] & 0xFF;\n        final long byte166 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte163 & 1) << 22) | (byte164 << 14) | (byte165 << 6) | (byte166 >>> 2);\n        final long byte167 = blocks[blocksOffset++] & 0xFF;\n        final long byte168 = blocks[blocksOffset++] & 0xFF;\n        final long byte169 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte166 & 3) << 21) | (byte167 << 13) | (byte168 << 5) | (byte169 >>> 3);\n        final long byte170 = blocks[blocksOffset++] & 0xFF;\n        final long byte171 = blocks[blocksOffset++] & 0xFF;\n        final long byte172 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte169 & 7) << 20) | (byte170 << 12) | (byte171 << 4) | (byte172 >>> 4);\n        final long byte173 = blocks[blocksOffset++] & 0xFF;\n        final long byte174 = blocks[blocksOffset++] & 0xFF;\n        final long byte175 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte172 & 15) << 19) | (byte173 << 11) | (byte174 << 3) | (byte175 >>> 5);\n        final long byte176 = blocks[blocksOffset++] & 0xFF;\n        final long byte177 = blocks[blocksOffset++] & 0xFF;\n        final long byte178 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte175 & 31) << 18) | (byte176 << 10) | (byte177 << 2) | (byte178 >>> 6);\n        final long byte179 = blocks[blocksOffset++] & 0xFF;\n        final long byte180 = blocks[blocksOffset++] & 0xFF;\n        final long byte181 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte178 & 63) << 17) | (byte179 << 9) | (byte180 << 1) | (byte181 >>> 7);\n        final long byte182 = blocks[blocksOffset++] & 0xFF;\n        final long byte183 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte181 & 127) << 16) | (byte182 << 8) | byte183;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      final long byte11 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n      final long byte12 = blocks[blocksOffset++] & 0xFF;\n      final long byte13 = blocks[blocksOffset++] & 0xFF;\n      final long byte14 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n      final long byte15 = blocks[blocksOffset++] & 0xFF;\n      final long byte16 = blocks[blocksOffset++] & 0xFF;\n      final long byte17 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n      final long byte18 = blocks[blocksOffset++] & 0xFF;\n      final long byte19 = blocks[blocksOffset++] & 0xFF;\n      final long byte20 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n      final long byte21 = blocks[blocksOffset++] & 0xFF;\n      final long byte22 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      final long byte11 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n      final long byte12 = blocks[blocksOffset++] & 0xFF;\n      final long byte13 = blocks[blocksOffset++] & 0xFF;\n      final long byte14 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n      final long byte15 = blocks[blocksOffset++] & 0xFF;\n      final long byte16 = blocks[blocksOffset++] & 0xFF;\n      final long byte17 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n      final long byte18 = blocks[blocksOffset++] & 0xFF;\n      final long byte19 = blocks[blocksOffset++] & 0xFF;\n      final long byte20 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n      final long byte21 = blocks[blocksOffset++] & 0xFF;\n      final long byte22 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      final long byte11 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n      final long byte12 = blocks[blocksOffset++] & 0xFF;\n      final long byte13 = blocks[blocksOffset++] & 0xFF;\n      final long byte14 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n      final long byte15 = blocks[blocksOffset++] & 0xFF;\n      final long byte16 = blocks[blocksOffset++] & 0xFF;\n      final long byte17 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n      final long byte18 = blocks[blocksOffset++] & 0xFF;\n      final long byte19 = blocks[blocksOffset++] & 0xFF;\n      final long byte20 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n      final long byte21 = blocks[blocksOffset++] & 0xFF;\n      final long byte22 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n    for (int i = 0; i < 8 * iterations; ++i) {\n      final long byte0 = blocks[blocksOffset++] & 0xFF;\n      final long byte1 = blocks[blocksOffset++] & 0xFF;\n      final long byte2 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = (byte0 << 15) | (byte1 << 7) | (byte2 >>> 1);\n      final long byte3 = blocks[blocksOffset++] & 0xFF;\n      final long byte4 = blocks[blocksOffset++] & 0xFF;\n      final long byte5 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte2 & 1) << 22) | (byte3 << 14) | (byte4 << 6) | (byte5 >>> 2);\n      final long byte6 = blocks[blocksOffset++] & 0xFF;\n      final long byte7 = blocks[blocksOffset++] & 0xFF;\n      final long byte8 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte5 & 3) << 21) | (byte6 << 13) | (byte7 << 5) | (byte8 >>> 3);\n      final long byte9 = blocks[blocksOffset++] & 0xFF;\n      final long byte10 = blocks[blocksOffset++] & 0xFF;\n      final long byte11 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte8 & 7) << 20) | (byte9 << 12) | (byte10 << 4) | (byte11 >>> 4);\n      final long byte12 = blocks[blocksOffset++] & 0xFF;\n      final long byte13 = blocks[blocksOffset++] & 0xFF;\n      final long byte14 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte11 & 15) << 19) | (byte12 << 11) | (byte13 << 3) | (byte14 >>> 5);\n      final long byte15 = blocks[blocksOffset++] & 0xFF;\n      final long byte16 = blocks[blocksOffset++] & 0xFF;\n      final long byte17 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte14 & 31) << 18) | (byte15 << 10) | (byte16 << 2) | (byte17 >>> 6);\n      final long byte18 = blocks[blocksOffset++] & 0xFF;\n      final long byte19 = blocks[blocksOffset++] & 0xFF;\n      final long byte20 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte17 & 63) << 17) | (byte18 << 9) | (byte19 << 1) | (byte20 >>> 7);\n      final long byte21 = blocks[blocksOffset++] & 0xFF;\n      final long byte22 = blocks[blocksOffset++] & 0xFF;\n      values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["818b04e906a094f03512fe99c83e359da8277708"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de522d9303bd67c8473a269a1319125d1f3700e0":["818b04e906a094f03512fe99c83e359da8277708","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"818b04e906a094f03512fe99c83e359da8277708":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","818b04e906a094f03512fe99c83e359da8277708"],"001b25b42373b22a52f399dbf072f1224632e8e6":["d0d1f90e969803cc84174589b5e4a39b7935fecd"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"818b04e906a094f03512fe99c83e359da8277708":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}