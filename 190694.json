{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.liveDocs != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(docCount);\n    return docCount;\n  }\n\n","sourceOld":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.liveDocs != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(docCount);\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.liveDocs != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","sourceOld":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.liveDocs != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(docCount);\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.liveDocs != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","sourceOld":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.liveDocs != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(docCount);\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (AtomicReader reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.getLiveDocs() != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","sourceOld":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.liveDocs != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (AtomicReader reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.getLiveDocs() != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","sourceOld":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.liveDocs != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#merge(MergeState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int merge(MergeState mergeState) throws IOException {\n    int docCount = 0;\n    // Used for bulk-reading raw bytes for stored fields\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int idx = 0;\n    \n    for (AtomicReader reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40StoredFieldsReader matchingFieldsReader = null;\n      if (matchingSegmentReader != null) {\n        final StoredFieldsReader fieldsReader = matchingSegmentReader.getFieldsReader();\n        // we can only bulk-copy if the matching reader is also a Lucene40FieldsReader\n        if (fieldsReader != null && fieldsReader instanceof Lucene40StoredFieldsReader) {\n          matchingFieldsReader = (Lucene40StoredFieldsReader) fieldsReader;\n        }\n      }\n    \n      if (reader.getLiveDocs() != null) {\n        docCount += copyFieldsWithDeletions(mergeState,\n                                            reader, matchingFieldsReader, rawDocLengths);\n      } else {\n        docCount += copyFieldsNoDeletions(mergeState,\n                                          reader, matchingFieldsReader, rawDocLengths);\n      }\n    }\n    finish(mergeState.fieldInfos, docCount);\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c95a819869502635864dac0a788f874787e3395b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["c95a819869502635864dac0a788f874787e3395b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"c95a819869502635864dac0a788f874787e3395b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","22a2e66dfda83847e80095b8693c660742ab3e9c"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c95a819869502635864dac0a788f874787e3395b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}