{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","commits":[{"id":"f4fbde3b8cf6b01501201d080622f6a282d0b5df","date":1383267008,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        // OverseerCollectionProcessor.REPLICATION_FACTOR\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n\n      return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        // OverseerCollectionProcessor.REPLICATION_FACTOR\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        // OverseerCollectionProcessor.REPLICATION_FACTOR\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        // OverseerCollectionProcessor.REPLICATION_FACTOR\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        // OverseerCollectionProcessor.REPLICATION_FACTOR\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87a8da508220b3dc7f6e030a17aeaa78bd74e891","date":1418855619,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        // OverseerCollectionProcessor.REPLICATION_FACTOR\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        // OverseerCollectionProcessor.REPLICATION_FACTOR\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d959b945238803001aea70046c4f14f69a542394","date":1418941658,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        // OverseerCollectionProcessor.REPLICATION_FACTOR\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n\n      return params;\n    }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      params.set(\"async\", asyncId);\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null) {\n        params.set( \"collection.configName\", configName);\n      }\n      if (createNodeSet != null) {\n        params.set( \"createNodeSet\", createNodeSet);\n      }\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null) {\n        params.set( \"router.name\", routerName);\n      }\n      if (shards != null) {\n        params.set(\"shards\", shards);\n      }\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      params.set(\"async\", asyncId);\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      params.set(\"async\", asyncId);\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31","date":1435517625,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      params.set(CommonAdminParams.ASYNC, asyncId);\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      params.set(\"async\", asyncId);\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      params.set(CommonAdminParams.ASYNC, asyncId);\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"861a8940601b61a2fd5427f7187314d516ef1586","date":1457434409,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set(\"collection.configName\", configName);\n      params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","date":1457434419,"type":3,"author":"Alan Woodward","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set(\"collection.configName\", configName);\n      params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set( \"collection.configName\", configName);\n      params.set( \"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set(\"collection.configName\", configName);\n      params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":["d18dd44acd824af8b51a5994c9475b32b094fb76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set(\"collection.configName\", configName);\n      params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      params.set(\"collection.configName\", configName);\n      params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      params.set( \"router.name\", routerName);\n      params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d18dd44acd824af8b51a5994c9475b32b094fb76","date":1494427167,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":["5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"611797611928fc8d5afd1c468ef7522f1cc03b61","date":1496234454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(\"createNodeSet\", createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (replicationFactor != null) {\n        params.set( \"replicationFactor\", replicationFactor);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (realtimeReplicas != null) {\n        params.set(ZkStateReader.REALTIME_REPLICAS, realtimeReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e46ef1a2b9cf8410947a87a43aba2b400394e773","date":1517224576,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.REPLICATION_FACTOR, nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( \"maxShardsPerNode\", maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( \"replicationFactor\", nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if(properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if(rule != null) params.set(\"rule\", rule);\n      if(snitch != null) params.set(\"snitch\", snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"397b96a886ece05a1444aa3771e10825e1145c1f","date":1529309393,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.REPLICATION_FACTOR, nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.REPLICATION_FACTOR, nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.REPLICATION_FACTOR, nrtReplicas);// Keep both for compatibility?\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      params.setNonNull(WITH_COLLECTION, withCollection);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      params.setNonNull(WITH_COLLECTION, withCollection);\n      params.setNonNull(ALIAS, alias);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      params.setNonNull(WITH_COLLECTION, withCollection);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      params.setNonNull(WITH_COLLECTION, withCollection);\n      params.setNonNull(ALIAS, alias);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (stateFormat != null) {\n        params.set(DocCollection.STATE_FORMAT, stateFormat);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      params.setNonNull(WITH_COLLECTION, withCollection);\n      params.setNonNull(ALIAS, alias);\n      return params;\n    }\n\n","bugFix":["d959b945238803001aea70046c4f14f69a542394"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      params.setNonNull(WITH_COLLECTION, withCollection);\n      params.setNonNull(ALIAS, alias);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (maxShardsPerNode != null) {\n        params.set( ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      params.setNonNull(WITH_COLLECTION, withCollection);\n      params.setNonNull(ALIAS, alias);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(ALIAS, alias);\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n\n      if (configName != null)\n        params.set(\"collection.configName\", configName);\n      if (createNodeSet != null)\n        params.set(CREATE_NODE_SET_PARAM, createNodeSet);\n      if (numShards != null) {\n        params.set( ZkStateReader.NUM_SHARDS_PROP, numShards);\n      }\n      if (routerName != null)\n        params.set( \"router.name\", routerName);\n      if (shards != null)\n        params.set(\"shards\", shards);\n      if (routerField != null) {\n        params.set(\"router.field\", routerField);\n      }\n      if (nrtReplicas != null) {\n        params.set( ZkStateReader.NRT_REPLICAS, nrtReplicas);\n      }\n      if (autoAddReplicas != null) {\n        params.set(ZkStateReader.AUTO_ADD_REPLICAS, autoAddReplicas);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (pullReplicas != null) {\n        params.set(ZkStateReader.PULL_REPLICAS, pullReplicas);\n      }\n      if (tlogReplicas != null) {\n        params.set(ZkStateReader.TLOG_REPLICAS, tlogReplicas);\n      }\n      if (rule != null) params.set(DocCollection.RULE, rule);\n      if (snitch != null) params.set(DocCollection.SNITCH, snitch);\n      params.setNonNull(POLICY, policy);\n      params.setNonNull(WITH_COLLECTION, withCollection);\n      params.setNonNull(ALIAS, alias);\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["be320990bdc77e643388fa801e75017f19289c42","d18dd44acd824af8b51a5994c9475b32b094fb76"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"f4fbde3b8cf6b01501201d080622f6a282d0b5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["f4fbde3b8cf6b01501201d080622f6a282d0b5df"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["d959b945238803001aea70046c4f14f69a542394"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"d18dd44acd824af8b51a5994c9475b32b094fb76":["be320990bdc77e643388fa801e75017f19289c42"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["e46ef1a2b9cf8410947a87a43aba2b400394e773","397b96a886ece05a1444aa3771e10825e1145c1f"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["61c45e99cf6676da48f19d7511c73712ad39402b","611797611928fc8d5afd1c468ef7522f1cc03b61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"861a8940601b61a2fd5427f7187314d516ef1586":["3bbb741690cdafda7f1f7549c26351c912917a69"],"be320990bdc77e643388fa801e75017f19289c42":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"ab68488225b6a6c357dda72ed11dedca9914a192":["1967bed916cc89da82a1c2085f27976da6d08cbd","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["e46ef1a2b9cf8410947a87a43aba2b400394e773","397b96a886ece05a1444aa3771e10825e1145c1f"],"611797611928fc8d5afd1c468ef7522f1cc03b61":["61c45e99cf6676da48f19d7511c73712ad39402b"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"e46ef1a2b9cf8410947a87a43aba2b400394e773":["28288370235ed02234a64753cdbf0c6ec096304a"],"3bbb741690cdafda7f1f7549c26351c912917a69":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"397b96a886ece05a1444aa3771e10825e1145c1f":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"61c45e99cf6676da48f19d7511c73712ad39402b":["d18dd44acd824af8b51a5994c9475b32b094fb76"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["27639bb5e041490ce599065875dd2f6d8beef62a"],"d959b945238803001aea70046c4f14f69a542394":["87a8da508220b3dc7f6e030a17aeaa78bd74e891"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","1967bed916cc89da82a1c2085f27976da6d08cbd"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"87a8da508220b3dc7f6e030a17aeaa78bd74e891":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["3bbb741690cdafda7f1f7549c26351c912917a69","861a8940601b61a2fd5427f7187314d516ef1586"],"27639bb5e041490ce599065875dd2f6d8beef62a":["397b96a886ece05a1444aa3771e10825e1145c1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["3bbb741690cdafda7f1f7549c26351c912917a69"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"1967bed916cc89da82a1c2085f27976da6d08cbd":["be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"f4fbde3b8cf6b01501201d080622f6a282d0b5df":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"d18dd44acd824af8b51a5994c9475b32b094fb76":["b31ebc7a867ddea79d438a8fca876a94e644d11a","61c45e99cf6676da48f19d7511c73712ad39402b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4fbde3b8cf6b01501201d080622f6a282d0b5df"],"861a8940601b61a2fd5427f7187314d516ef1586":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"be320990bdc77e643388fa801e75017f19289c42":["b31ebc7a867ddea79d438a8fca876a94e644d11a","d18dd44acd824af8b51a5994c9475b32b094fb76"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"611797611928fc8d5afd1c468ef7522f1cc03b61":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46ef1a2b9cf8410947a87a43aba2b400394e773":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","397b96a886ece05a1444aa3771e10825e1145c1f"],"3bbb741690cdafda7f1f7549c26351c912917a69":["861a8940601b61a2fd5427f7187314d516ef1586","d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"397b96a886ece05a1444aa3771e10825e1145c1f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","27639bb5e041490ce599065875dd2f6d8beef62a"],"61c45e99cf6676da48f19d7511c73712ad39402b":["74aea047dff7f7c38a2d766827bd20d356f98c6a","611797611928fc8d5afd1c468ef7522f1cc03b61","28288370235ed02234a64753cdbf0c6ec096304a"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d959b945238803001aea70046c4f14f69a542394":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"28288370235ed02234a64753cdbf0c6ec096304a":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["87a8da508220b3dc7f6e030a17aeaa78bd74e891"],"87a8da508220b3dc7f6e030a17aeaa78bd74e891":["d959b945238803001aea70046c4f14f69a542394"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"27639bb5e041490ce599065875dd2f6d8beef62a":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b31ebc7a867ddea79d438a8fca876a94e644d11a","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}