{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#copyToCharArray(char[],int,int,char).mjava","sourceNew":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","sourceOld":"  /**\n   * Copies the specified number of components from this category path to the\n   * specified character array, with the components separated by a given\n   * delimiter character. The array must be large enough to hold the\n   * components and separators - the amount of needed space can be calculated\n   * with {@link #charsNeededForFullPath()}.\n   * <P>\n   * This method returns the number of characters written to the array.\n   * \n   * @param outputBuffer\n   *            The destination character array.\n   * @param outputBufferStart\n   *            The first location to write in the output array.\n   * @param numberOfComponentsToCopy\n   *            The number of path components to write to the destination\n   *            buffer.\n   * @param separatorChar\n   *            The separator inserted between every pair of path components\n   *            in the output buffer.\n   * @see #charsNeededForFullPath()\n   */\n  public int copyToCharArray(char[] outputBuffer, int outputBufferStart,\n      int numberOfComponentsToCopy, char separatorChar) {\n    if (numberOfComponentsToCopy == 0) {\n      return 0;\n    }\n    if (numberOfComponentsToCopy < 0\n        || numberOfComponentsToCopy > ncomponents) {\n      numberOfComponentsToCopy = ncomponents;\n    }\n    int outputBufferInitialStart = outputBufferStart; // for calculating\n                              // chars copied.\n    int sourceStart = 0;\n    int sourceLength = ends[0];\n    for (int component = 0; component < numberOfComponentsToCopy; component++) {\n      if (component > 0) {\n        sourceStart = ends[component - 1];\n        sourceLength = ends[component] - sourceStart;\n        outputBuffer[outputBufferStart++] = separatorChar;\n      }\n      System.arraycopy(chars, sourceStart, outputBuffer,\n          outputBufferStart, sourceLength);\n      outputBufferStart += sourceLength;\n    }\n    return outputBufferStart - outputBufferInitialStart;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}