{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","commits":[{"id":"9f6b79013f14f939d4bc18ac09c457d1d1796fd2","date":1346830387,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port, boolean internalCompression) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      \n      line = line.replace(\"COMPRESSION\", internalCompression?\"internal\":\"false\");\n\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e1c1455e91339e72d6cdc7518defd3e05a43957","date":1396304204,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port, boolean internalCompression) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), StandardCharsets.UTF_8));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), StandardCharsets.UTF_8);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      \n      line = line.replace(\"COMPRESSION\", internalCompression?\"internal\":\"false\");\n\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port, boolean internalCompression) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      \n      line = line.replace(\"COMPRESSION\", internalCompression?\"internal\":\"false\");\n\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port, boolean internalCompression) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), StandardCharsets.UTF_8));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), StandardCharsets.UTF_8);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      \n      line = line.replace(\"COMPRESSION\", internalCompression?\"internal\":\"false\");\n\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port, boolean internalCompression) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), \"UTF-8\"));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), \"UTF-8\");\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      \n      line = line.replace(\"COMPRESSION\", internalCompression?\"internal\":\"false\");\n\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1071f88e3697a2eb3ed682c527f5c35859bad0","date":1565425271,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#copyFile(File,File,Integer,boolean).mjava","sourceNew":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port, boolean internalCompression) throws IOException {\n    try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), StandardCharsets.UTF_8));\n         Writer out = new OutputStreamWriter(new FileOutputStream(dst), StandardCharsets.UTF_8)) {\n\n      for (String line = in.readLine(); null != line; line = in.readLine()) {\n        if (null != port) {\n          line = line.replace(\"TEST_PORT\", port.toString());\n        }\n        line = line.replace(\"COMPRESSION\", internalCompression ? \"internal\" : \"false\");\n        out.write(line);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * character copy of file using UTF-8. If port is non-null, will be substituted any time \"TEST_PORT\" is found.\n   */\n  private static void copyFile(File src, File dst, Integer port, boolean internalCompression) throws IOException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(src), StandardCharsets.UTF_8));\n    Writer out = new OutputStreamWriter(new FileOutputStream(dst), StandardCharsets.UTF_8);\n\n    for (String line = in.readLine(); null != line; line = in.readLine()) {\n\n      if (null != port)\n        line = line.replace(\"TEST_PORT\", port.toString());\n      \n      line = line.replace(\"COMPRESSION\", internalCompression?\"internal\":\"false\");\n\n      out.write(line);\n    }\n    in.close();\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["9f6b79013f14f939d4bc18ac09c457d1d1796fd2","6e1c1455e91339e72d6cdc7518defd3e05a43957"],"9f6b79013f14f939d4bc18ac09c457d1d1796fd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e1c1455e91339e72d6cdc7518defd3e05a43957":["9f6b79013f14f939d4bc18ac09c457d1d1796fd2"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["6e1c1455e91339e72d6cdc7518defd3e05a43957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1071f88e3697a2eb3ed682c527f5c35859bad0"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"9f6b79013f14f939d4bc18ac09c457d1d1796fd2":["5eb2511ababf862ea11e10761c70ee560cd84510","6e1c1455e91339e72d6cdc7518defd3e05a43957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f6b79013f14f939d4bc18ac09c457d1d1796fd2"],"6e1c1455e91339e72d6cdc7518defd3e05a43957":["5eb2511ababf862ea11e10761c70ee560cd84510","0d1071f88e3697a2eb3ed682c527f5c35859bad0"],"0d1071f88e3697a2eb3ed682c527f5c35859bad0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}