{"path":"src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","commits":[{"id":"bf460de117c67053b6fb9141cc7c778e81e5ef54","date":1168027938,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22","date":1177887783,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","pathOld":"src/java/org/apache/solr/schema/SchemaField#SchemaField(String,FieldType,int,String).mjava","sourceNew":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","sourceOld":" /** Create a new SchemaField with the given name and type,\n   * and with the specified properties.  Properties are *not*\n   * inherited from the type in this case, so users of this\n   * constructor should derive the properties from type.getProperties()\n   *  using all the default properties from the type.\n   */\n  public SchemaField(String name, FieldType type, int properties, String defaultValue ) {\n    this.name = name;\n    this.type = type;\n    this.properties = properties;\n    this.defaultValue = defaultValue;\n    \n    // initalize with the required property flag\n    required = (properties & REQUIRED) !=0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["335d5ef4d54c2861b4ebdc7244bd81278f1c1d22"],"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22":["bf460de117c67053b6fb9141cc7c778e81e5ef54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bf460de117c67053b6fb9141cc7c778e81e5ef54":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bf460de117c67053b6fb9141cc7c778e81e5ef54"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22":["ad94625fb8d088209f46650c8097196fec67f00c"],"bf460de117c67053b6fb9141cc7c778e81e5ef54":["335d5ef4d54c2861b4ebdc7244bd81278f1c1d22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}