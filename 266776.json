{"path":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeDecay().mjava","commits":[{"id":"3a2591037a85ef083e6588e0b846a5a34ff9b5a3","date":1326403130,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeDecay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTimeDecay() {\n    ConcurrentLFUCache<Integer, String> cacheDecay = new ConcurrentLFUCache<Integer, String>(10, 9);\n    try {\n      for (int i = 1; i < 21; i++) {\n        cacheDecay.put(i, Integer.toString(i));\n      }\n      Map<Integer, String> itemsDecay;\n\n      //11-20 now in cache.\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      for (int i = 11; i < 21; ++i) {\n        assertNotNull(itemsDecay.get(i));\n      }\n\n      // Now increase the freq count for 5 items\n      for (int i = 0; i < 5; ++i) {\n        for (int jdx = 0; jdx < 63; ++jdx) {\n          cacheDecay.get(i + 13);\n        }\n      }\n      // OK, 13 - 17 should have larger counts and should stick past next few collections. One collection should\n      // be triggered for each two insertions\n      cacheDecay.put(22, \"22\");\n      cacheDecay.put(23, \"23\"); // Surplus count at 32\n      cacheDecay.put(24, \"24\");\n      cacheDecay.put(25, \"25\"); // Surplus count at 16\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      // 13 - 17 should be in cache, but 11 and 18 (among others) should not Testing that elements before and\n      // after the ones with increased counts are removed, and all the increased count ones are still in the cache\n      assertNull(itemsDecay.get(11));\n      assertNull(itemsDecay.get(18));\n      assertNotNull(itemsDecay.get(13));\n      assertNotNull(itemsDecay.get(14));\n      assertNotNull(itemsDecay.get(15));\n      assertNotNull(itemsDecay.get(16));\n      assertNotNull(itemsDecay.get(17));\n\n\n      // Testing that all the elements in front of the ones with increased counts are gone\n      for (int idx = 26; idx < 32; ++idx) {\n        cacheDecay.put(idx, Integer.toString(idx));\n      }\n      //Surplus count should be at 0\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      assertNull(itemsDecay.get(20));\n      assertNull(itemsDecay.get(24));\n      assertNotNull(itemsDecay.get(13));\n      assertNotNull(itemsDecay.get(14));\n      assertNotNull(itemsDecay.get(15));\n      assertNotNull(itemsDecay.get(16));\n      assertNotNull(itemsDecay.get(17));\n\n      for (int idx = 32; idx < 40; ++idx) {\n        cacheDecay.put(idx, Integer.toString(idx));\n      }\n\n      // All the entries with increased counts should be gone.\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      System.out.println(itemsDecay);\n      assertNull(itemsDecay.get(13));\n      assertNull(itemsDecay.get(14));\n      assertNull(itemsDecay.get(15));\n      assertNull(itemsDecay.get(16));\n      assertNull(itemsDecay.get(17));\n      for (int idx = 30; idx < 40; ++idx) {\n        assertNotNull(itemsDecay.get(idx));\n      }\n    } finally {\n      cacheDecay.destroy();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeDecay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeDecay().mjava","sourceNew":"  @Test\n  public void testTimeDecay() {\n    ConcurrentLFUCache<Integer, String> cacheDecay = new ConcurrentLFUCache<>(10, 9);\n    try {\n      for (int i = 1; i < 21; i++) {\n        cacheDecay.put(i, Integer.toString(i));\n      }\n      Map<Integer, String> itemsDecay;\n\n      //11-20 now in cache.\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      for (int i = 11; i < 21; ++i) {\n        assertNotNull(itemsDecay.get(i));\n      }\n\n      // Now increase the freq count for 5 items\n      for (int i = 0; i < 5; ++i) {\n        for (int jdx = 0; jdx < 63; ++jdx) {\n          cacheDecay.get(i + 13);\n        }\n      }\n      // OK, 13 - 17 should have larger counts and should stick past next few collections. One collection should\n      // be triggered for each two insertions\n      cacheDecay.put(22, \"22\");\n      cacheDecay.put(23, \"23\"); // Surplus count at 32\n      cacheDecay.put(24, \"24\");\n      cacheDecay.put(25, \"25\"); // Surplus count at 16\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      // 13 - 17 should be in cache, but 11 and 18 (among others) should not Testing that elements before and\n      // after the ones with increased counts are removed, and all the increased count ones are still in the cache\n      assertNull(itemsDecay.get(11));\n      assertNull(itemsDecay.get(18));\n      assertNotNull(itemsDecay.get(13));\n      assertNotNull(itemsDecay.get(14));\n      assertNotNull(itemsDecay.get(15));\n      assertNotNull(itemsDecay.get(16));\n      assertNotNull(itemsDecay.get(17));\n\n\n      // Testing that all the elements in front of the ones with increased counts are gone\n      for (int idx = 26; idx < 32; ++idx) {\n        cacheDecay.put(idx, Integer.toString(idx));\n      }\n      //Surplus count should be at 0\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      assertNull(itemsDecay.get(20));\n      assertNull(itemsDecay.get(24));\n      assertNotNull(itemsDecay.get(13));\n      assertNotNull(itemsDecay.get(14));\n      assertNotNull(itemsDecay.get(15));\n      assertNotNull(itemsDecay.get(16));\n      assertNotNull(itemsDecay.get(17));\n\n      for (int idx = 32; idx < 40; ++idx) {\n        cacheDecay.put(idx, Integer.toString(idx));\n      }\n\n      // All the entries with increased counts should be gone.\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      System.out.println(itemsDecay);\n      assertNull(itemsDecay.get(13));\n      assertNull(itemsDecay.get(14));\n      assertNull(itemsDecay.get(15));\n      assertNull(itemsDecay.get(16));\n      assertNull(itemsDecay.get(17));\n      for (int idx = 30; idx < 40; ++idx) {\n        assertNotNull(itemsDecay.get(idx));\n      }\n    } finally {\n      cacheDecay.destroy();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTimeDecay() {\n    ConcurrentLFUCache<Integer, String> cacheDecay = new ConcurrentLFUCache<Integer, String>(10, 9);\n    try {\n      for (int i = 1; i < 21; i++) {\n        cacheDecay.put(i, Integer.toString(i));\n      }\n      Map<Integer, String> itemsDecay;\n\n      //11-20 now in cache.\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      for (int i = 11; i < 21; ++i) {\n        assertNotNull(itemsDecay.get(i));\n      }\n\n      // Now increase the freq count for 5 items\n      for (int i = 0; i < 5; ++i) {\n        for (int jdx = 0; jdx < 63; ++jdx) {\n          cacheDecay.get(i + 13);\n        }\n      }\n      // OK, 13 - 17 should have larger counts and should stick past next few collections. One collection should\n      // be triggered for each two insertions\n      cacheDecay.put(22, \"22\");\n      cacheDecay.put(23, \"23\"); // Surplus count at 32\n      cacheDecay.put(24, \"24\");\n      cacheDecay.put(25, \"25\"); // Surplus count at 16\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      // 13 - 17 should be in cache, but 11 and 18 (among others) should not Testing that elements before and\n      // after the ones with increased counts are removed, and all the increased count ones are still in the cache\n      assertNull(itemsDecay.get(11));\n      assertNull(itemsDecay.get(18));\n      assertNotNull(itemsDecay.get(13));\n      assertNotNull(itemsDecay.get(14));\n      assertNotNull(itemsDecay.get(15));\n      assertNotNull(itemsDecay.get(16));\n      assertNotNull(itemsDecay.get(17));\n\n\n      // Testing that all the elements in front of the ones with increased counts are gone\n      for (int idx = 26; idx < 32; ++idx) {\n        cacheDecay.put(idx, Integer.toString(idx));\n      }\n      //Surplus count should be at 0\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      assertNull(itemsDecay.get(20));\n      assertNull(itemsDecay.get(24));\n      assertNotNull(itemsDecay.get(13));\n      assertNotNull(itemsDecay.get(14));\n      assertNotNull(itemsDecay.get(15));\n      assertNotNull(itemsDecay.get(16));\n      assertNotNull(itemsDecay.get(17));\n\n      for (int idx = 32; idx < 40; ++idx) {\n        cacheDecay.put(idx, Integer.toString(idx));\n      }\n\n      // All the entries with increased counts should be gone.\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      System.out.println(itemsDecay);\n      assertNull(itemsDecay.get(13));\n      assertNull(itemsDecay.get(14));\n      assertNull(itemsDecay.get(15));\n      assertNull(itemsDecay.get(16));\n      assertNull(itemsDecay.get(17));\n      for (int idx = 30; idx < 40; ++idx) {\n        assertNotNull(itemsDecay.get(idx));\n      }\n    } finally {\n      cacheDecay.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeDecay().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTimeDecay() {\n    ConcurrentLFUCache<Integer, String> cacheDecay = new ConcurrentLFUCache<>(10, 9);\n    try {\n      for (int i = 1; i < 21; i++) {\n        cacheDecay.put(i, Integer.toString(i));\n      }\n      Map<Integer, String> itemsDecay;\n\n      //11-20 now in cache.\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      for (int i = 11; i < 21; ++i) {\n        assertNotNull(itemsDecay.get(i));\n      }\n\n      // Now increase the freq count for 5 items\n      for (int i = 0; i < 5; ++i) {\n        for (int jdx = 0; jdx < 63; ++jdx) {\n          cacheDecay.get(i + 13);\n        }\n      }\n      // OK, 13 - 17 should have larger counts and should stick past next few collections. One collection should\n      // be triggered for each two insertions\n      cacheDecay.put(22, \"22\");\n      cacheDecay.put(23, \"23\"); // Surplus count at 32\n      cacheDecay.put(24, \"24\");\n      cacheDecay.put(25, \"25\"); // Surplus count at 16\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      // 13 - 17 should be in cache, but 11 and 18 (among others) should not Testing that elements before and\n      // after the ones with increased counts are removed, and all the increased count ones are still in the cache\n      assertNull(itemsDecay.get(11));\n      assertNull(itemsDecay.get(18));\n      assertNotNull(itemsDecay.get(13));\n      assertNotNull(itemsDecay.get(14));\n      assertNotNull(itemsDecay.get(15));\n      assertNotNull(itemsDecay.get(16));\n      assertNotNull(itemsDecay.get(17));\n\n\n      // Testing that all the elements in front of the ones with increased counts are gone\n      for (int idx = 26; idx < 32; ++idx) {\n        cacheDecay.put(idx, Integer.toString(idx));\n      }\n      //Surplus count should be at 0\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      assertNull(itemsDecay.get(20));\n      assertNull(itemsDecay.get(24));\n      assertNotNull(itemsDecay.get(13));\n      assertNotNull(itemsDecay.get(14));\n      assertNotNull(itemsDecay.get(15));\n      assertNotNull(itemsDecay.get(16));\n      assertNotNull(itemsDecay.get(17));\n\n      for (int idx = 32; idx < 40; ++idx) {\n        cacheDecay.put(idx, Integer.toString(idx));\n      }\n\n      // All the entries with increased counts should be gone.\n      itemsDecay = cacheDecay.getMostUsedItems(10);\n      System.out.println(itemsDecay);\n      assertNull(itemsDecay.get(13));\n      assertNull(itemsDecay.get(14));\n      assertNull(itemsDecay.get(15));\n      assertNull(itemsDecay.get(16));\n      assertNull(itemsDecay.get(17));\n      for (int idx = 30; idx < 40; ++idx) {\n        assertNotNull(itemsDecay.get(idx));\n      }\n    } finally {\n      cacheDecay.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"4d7d3943904804560937e6239effeebda0f920e4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}