{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#intersectsTriangle(int,int,int,int,int,int).mjava","commits":[{"id":"9feee35369998c08f5168e0808e67e09857d5bac","date":1544618795,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#intersectsTriangle(int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","sourceNew":"  /** Checks if the rectangle intersects the provided triangle **/\n  public boolean intersectsTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (this.crossesDateline() == true) {\n      if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n          && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n        return false;\n      }\n    } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  protected boolean queryMatches(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (this.crossesDateline() == true) {\n      if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n          && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n        return false;\n      }\n    } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#intersectsTriangle(int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#intersectsTriangle(int,int,int,int,int,int).mjava","sourceNew":"  /** Checks if the rectangle intersects the provided triangle **/\n  public boolean intersectsTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (this.crossesDateline() == true) {\n      if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n          && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n        return false;\n      }\n    } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Checks if the rectangle intersects the provided triangle **/\n  public boolean intersectsTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {\n      return true;\n    }\n\n    // compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (this.crossesDateline() == true) {\n      if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)\n          && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {\n        return false;\n      }\n    } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9feee35369998c08f5168e0808e67e09857d5bac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["9feee35369998c08f5168e0808e67e09857d5bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"9feee35369998c08f5168e0808e67e09857d5bac":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9feee35369998c08f5168e0808e67e09857d5bac"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}