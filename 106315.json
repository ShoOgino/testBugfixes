{"path":"src/test/org/apache/solr/handler/component/TermsComponentTest#testEmptyLower().mjava","commits":[{"id":"b566f203e5d31fbdd07a258540e841abaaf52bcc","date":1227879002,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testEmptyLower().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyLower() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    //no lower bound\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) values.get(\"terms\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"a is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9826f1e89aa6389d20cb52f7f7ca7454c66ab676","date":1227962457,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testEmptyLower().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testEmptyLower().mjava","sourceNew":"  public void testEmptyLower() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    //no lower bound\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"a is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n  }\n\n","sourceOld":"  public void testEmptyLower() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    //no lower bound\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) values.get(\"terms\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"a is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"725326303b39157323796ef620a9ad99eb185f11","date":1241874089,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermsComponentTest#testEmptyLower().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testEmptyLower().mjava","sourceNew":"  public void testEmptyLower() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    //no lower bound\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"a is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n  }\n\n","sourceOld":"  public void testEmptyLower() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    //no lower bound\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_ROWS, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"a is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testEmptyLower().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testEmptyLower().mjava","sourceNew":"  public void testEmptyLower() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    //no lower bound\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"a is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n  }\n\n","sourceOld":"  public void testEmptyLower() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    //no lower bound\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"a is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9826f1e89aa6389d20cb52f7f7ca7454c66ab676":["b566f203e5d31fbdd07a258540e841abaaf52bcc"],"b566f203e5d31fbdd07a258540e841abaaf52bcc":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"725326303b39157323796ef620a9ad99eb185f11":["9826f1e89aa6389d20cb52f7f7ca7454c66ab676"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["725326303b39157323796ef620a9ad99eb185f11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9826f1e89aa6389d20cb52f7f7ca7454c66ab676":["725326303b39157323796ef620a9ad99eb185f11"],"b566f203e5d31fbdd07a258540e841abaaf52bcc":["9826f1e89aa6389d20cb52f7f7ca7454c66ab676"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b566f203e5d31fbdd07a258540e841abaaf52bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"725326303b39157323796ef620a9ad99eb185f11":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}