{"path":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField()\n    throws Exception\n  {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES, Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes());\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n        \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  public void testBinaryField()\n    throws Exception\n  {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES, Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes());\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n        \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES,\n        Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes());\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  public void testBinaryField()\n    throws Exception\n  {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES, Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes());\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n        \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES,\n        Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes());\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  public void testBinaryField()\n    throws Exception\n  {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES, Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes());\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n        \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", ft, binaryVal);\n    IndexableField binaryFld = new BinaryField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new BinaryField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.stored());\n    assertFalse(binaryFld.indexed());\n    assertFalse(binaryFld.tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES,\n        Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes());\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", ft, binaryVal);\n    IndexableField binaryFld = new BinaryField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new BinaryField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", ft, binaryVal);\n    IndexableField binaryFld = new BinaryField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new BinaryField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.stored());\n    assertFalse(binaryFld.indexed());\n    assertFalse(binaryFld.tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":["bf3a2fba763e7be9530194061e47182fc8675738"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new BinaryField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new BinaryField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", ft, binaryVal);\n    IndexableField binaryFld = new BinaryField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new BinaryField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new BinaryField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new BinaryField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","sourceOld":"  public void testBinaryField() throws Exception {\n    Document doc = new Document();\n    \n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    IndexableField stringFld = new Field(\"string\", binaryVal, ft);\n    IndexableField binaryFld = new StoredField(\"binary\", binaryVal.getBytes());\n    IndexableField binaryFld2 = new StoredField(\"binary\", binaryVal2.getBytes());\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.getFields().size());\n    \n    assertTrue(binaryFld.binaryValue() != null);\n    assertTrue(binaryFld.fieldType().stored());\n    assertFalse(binaryFld.fieldType().indexed());\n    assertFalse(binaryFld.fieldType().tokenized());\n    \n    String binaryTest = doc.getBinaryValue(\"binary\").utf8ToString();\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.getFields().size());\n    \n    BytesRef[] binaryTests = doc.getBinaryValues(\"binary\");\n    \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = binaryTests[0].utf8ToString();\n    String binaryTest2 = binaryTests[1].utf8ToString();\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.getFields().size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.getFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f4e87790277826a2aea119328600dfb07761f32":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["fa0f44f887719e97183771e977cfc4bfb485b766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}