{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields);\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ef4d3aeb733ae886f562af3b735f50503926a12","date":1438854939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.sort = sort;\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n      this.trackTotalHits = trackTotalHits;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.sort = sort;\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n      this.trackTotalHits = trackTotalHits;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      maxScore = Float.NEGATIVE_INFINITY;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, trackDocScores || sort.needsScores());\n      this.sort = sort;\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && trackDocScores;\n      this.trackTotalHits = trackTotalHits;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, trackDocScores || trackMaxScore || sort.needsScores());\n      this.sort = sort;\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.trackMaxScore = trackMaxScore;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && (trackDocScores || trackMaxScore);\n      this.trackTotalHits = trackTotalHits;\n\n      // Must set maxScore to NEG_INF, or otherwise Math.max always returns NaN.\n      if (trackMaxScore) {\n        maxScore = Float.NEGATIVE_INFINITY;\n      }\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, trackDocScores || sort.needsScores());\n      this.sort = sort;\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && trackDocScores;\n      this.trackTotalHits = trackTotalHits;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.PagingFieldCollector#PagingFieldCollector(Sort,FieldValueHitQueue[Entry],FieldDoc,int,boolean,boolean,boolean).mjava","sourceNew":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits,\n                                boolean trackDocScores, boolean trackTotalHits) {\n      super(queue, numHits, trackDocScores || sort.needsScores());\n      this.sort = sort;\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && trackDocScores;\n      this.trackTotalHits = trackTotalHits;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","sourceOld":"    public PagingFieldCollector(Sort sort, FieldValueHitQueue<Entry> queue, FieldDoc after, int numHits, boolean fillFields,\n                                boolean trackDocScores, boolean trackTotalHits) {\n      super(queue, numHits, fillFields, trackDocScores || sort.needsScores());\n      this.sort = sort;\n      this.queue = queue;\n      this.trackDocScores = trackDocScores;\n      this.after = after;\n      this.mayNeedScoresTwice = sort.needsScores() && trackDocScores;\n      this.trackTotalHits = trackTotalHits;\n\n      FieldComparator<?>[] comparators = queue.comparators;\n      // Tell all comparators their top value:\n      for(int i=0;i<comparators.length;i++) {\n        @SuppressWarnings(\"unchecked\")\n        FieldComparator<Object> comparator = (FieldComparator<Object>) comparators[i];\n        comparator.setTopValue(after.fields[i]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["0ef4d3aeb733ae886f562af3b735f50503926a12","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"404d1ab7f6f396235047017c88d545fec15dafb7":["0ef4d3aeb733ae886f562af3b735f50503926a12"],"0ef4d3aeb733ae886f562af3b735f50503926a12":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04c370507e5521b2eb998530736f1c19b851ed5a"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"0ef4d3aeb733ae886f562af3b735f50503926a12":["1aad05eeff7818b0833c02ac6b743aa72054963b","404d1ab7f6f396235047017c88d545fec15dafb7"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["0ef4d3aeb733ae886f562af3b735f50503926a12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"04c370507e5521b2eb998530736f1c19b851ed5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","04c370507e5521b2eb998530736f1c19b851ed5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}