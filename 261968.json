{"path":"solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest#testZkNodeLocation().mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest#testZkNodeLocation().mjava","pathOld":"/dev/null","sourceNew":"  private void testZkNodeLocation() throws Exception{\n    externalColl=true;\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName),null,stat,true);\n    assertEquals(\"\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getVersion(), stat.getVersion());\n    assertTrue(\"DocCllection#isExternal() must be true\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).isExternal() );\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest#testZkNodeLocation().mjava","sourceNew":null,"sourceOld":"  private void testZkNodeLocation() throws Exception{\n    externalColl=true;\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName),null,stat,true);\n    assertEquals(\"\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getVersion(), stat.getVersion());\n    assertTrue(\"DocCllection#isExternal() must be true\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).isExternal() );\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest#testZkNodeLocation().mjava","pathOld":"/dev/null","sourceNew":"  private void testZkNodeLocation() throws Exception{\n    externalColl=true;\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest#testZkNodeLocation().mjava","sourceNew":null,"sourceOld":"  private void testZkNodeLocation() throws Exception{\n    externalColl=true;\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest#testZkNodeLocation().mjava","pathOld":"/dev/null","sourceNew":"  private void testZkNodeLocation() throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8766ce00bfd19255fc95ae5e3110af2e94cd7623","date":1432802994,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ExternalCollectionsTest#testZkNodeLocation().mjava","sourceNew":"  private void testZkNodeLocation(CloudSolrClient client) throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  private void testZkNodeLocation() throws Exception{\n\n    String collectionName = \"myExternColl\";\n\n    createCollection(collectionName, client, 2, 2);\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"does not exist collection state externally\",\n        cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n    Stat stat = new Stat();\n    byte[] data = cloudClient.getZkStateReader().getZkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n    DocCollection c = ZkStateReader.getCollectionLive(cloudClient.getZkStateReader(), collectionName);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    assertEquals(\"The zkversion of the nodes must be same zkver:\" + stat.getVersion() , stat.getVersion(),clusterState.getCollection(collectionName).getZNodeVersion() );\n    assertTrue(\"DocCllection#getStateFormat() must be > 1\", cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getStateFormat() > 1);\n\n\n    // remove collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    if (client == null) {\n      client = createCloudClient(null);\n    }\n\n    client.request(request);\n\n    checkForMissingCollection(collectionName);\n    assertFalse(\"collection state should not exist externally\", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"8766ce00bfd19255fc95ae5e3110af2e94cd7623":["9279b175e5e66258442d2123a50f052219a9cc1b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8766ce00bfd19255fc95ae5e3110af2e94cd7623"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"8766ce00bfd19255fc95ae5e3110af2e94cd7623":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"9279b175e5e66258442d2123a50f052219a9cc1b":["8766ce00bfd19255fc95ae5e3110af2e94cd7623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}