{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.DefaultElevationProvider#getElevationForQuery(String).mjava","commits":[{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.DefaultElevationProvider#getElevationForQuery(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Elevation getElevationForQuery(String queryString) {\n      boolean hasExactMatchElevationRules = exactMatchElevationMap.size() != 0;\n      if (subsetMatcher.getSubsetCount() == 0) {\n        if (!hasExactMatchElevationRules) {\n          return null;\n        }\n        return exactMatchElevationMap.get(analyzeQuery(queryString));\n      }\n      Collection<String> queryTerms = new ArrayList<>();\n      Consumer<CharSequence> termsConsumer = term -> queryTerms.add(term.toString());\n      StringBuilder concatTerms = null;\n      if (hasExactMatchElevationRules) {\n        concatTerms = new StringBuilder();\n        termsConsumer = termsConsumer.andThen(concatTerms::append);\n      }\n      analyzeQuery(queryString, termsConsumer);\n      Elevation mergedElevation = null;\n\n      if (hasExactMatchElevationRules) {\n        mergedElevation = exactMatchElevationMap.get(concatTerms.toString());\n      }\n\n      Iterator<Elevation> elevationIterator = subsetMatcher.findSubsetsMatching(queryTerms);\n      while (elevationIterator.hasNext()) {\n        Elevation elevation = elevationIterator.next();\n        mergedElevation = mergedElevation == null ? elevation : mergedElevation.mergeWith(elevation);\n      }\n\n      return mergedElevation;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.DefaultElevationProvider#getElevationForQuery(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Elevation getElevationForQuery(String queryString) {\n      boolean hasExactMatchElevationRules = exactMatchElevationMap.size() != 0;\n      if (subsetMatcher.getSubsetCount() == 0) {\n        if (!hasExactMatchElevationRules) {\n          return null;\n        }\n        return exactMatchElevationMap.get(analyzeQuery(queryString));\n      }\n      Collection<String> queryTerms = new ArrayList<>();\n      Consumer<CharSequence> termsConsumer = term -> queryTerms.add(term.toString());\n      StringBuilder concatTerms = null;\n      if (hasExactMatchElevationRules) {\n        concatTerms = new StringBuilder();\n        termsConsumer = termsConsumer.andThen(concatTerms::append);\n      }\n      analyzeQuery(queryString, termsConsumer);\n      Elevation mergedElevation = null;\n\n      if (hasExactMatchElevationRules) {\n        mergedElevation = exactMatchElevationMap.get(concatTerms.toString());\n      }\n\n      Iterator<Elevation> elevationIterator = subsetMatcher.findSubsetsMatching(queryTerms);\n      while (elevationIterator.hasNext()) {\n        Elevation elevation = elevationIterator.next();\n        mergedElevation = mergedElevation == null ? elevation : mergedElevation.mergeWith(elevation);\n      }\n\n      return mergedElevation;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6046c615b67e878b7c0ab9257d01dd759493f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}