{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytes.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","sourceNew":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytes.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87697f76828e4cfc6dc898262de8898e5010703f","date":1276817002,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","sourceNew":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze(true);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","sourceNew":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze(true);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","sourceNew":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      if (indexDivisor < 0) {\n        this.indexDivisor = -indexDivisor;\n      } else {\n        this.indexDivisor = indexDivisor;\n      }\n      this.totalIndexInterval = indexInterval * this.indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze(true);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader#loadTermsIndex(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","sourceNew":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      if (indexDivisor < 0) {\n        this.indexDivisor = -indexDivisor;\n      } else {\n        this.indexDivisor = indexDivisor;\n      }\n      this.totalIndexInterval = indexInterval * this.indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze(true);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      if (indexDivisor < 0) {\n        this.indexDivisor = -indexDivisor;\n      } else {\n        this.indexDivisor = indexDivisor;\n      }\n      this.totalIndexInterval = indexInterval * this.indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader#loadTermsIndex(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void loadTermsIndex(int indexDivisor) throws IOException {\n    if (!indexLoaded) {\n\n      this.indexDivisor = indexDivisor;\n      this.totalIndexInterval = indexInterval * indexDivisor;\n\n      Iterator<FieldIndexReader> it = fields.values().iterator();\n      while(it.hasNext()) {\n        it.next().loadTermsIndex();\n      }\n\n      indexLoaded = true;\n      in.close();\n      termBytesReader = termBytes.freeze(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"87697f76828e4cfc6dc898262de8898e5010703f":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","87697f76828e4cfc6dc898262de8898e5010703f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["87697f76828e4cfc6dc898262de8898e5010703f"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"87697f76828e4cfc6dc898262de8898e5010703f":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["87697f76828e4cfc6dc898262de8898e5010703f","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}