{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonTextWriter#writeNamedListAsArrMap(String,NamedList).mjava","commits":[{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonTextWriter#writeNamedListAsArrMap(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter#writeNamedListAsArrMap(String,NamedList).mjava","sourceNew":"  // Represents a NamedList directly as an array of JSON objects...\n  // NamedList(\"a\"=1,\"b\"=2,null=3,null=null) => [{\"a\":1},{\"b\":2},3,null]\n  default void writeNamedListAsArrMap(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    indent();\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i = 0; i < sz; i++) {\n      String key = val.getName(i);\n\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      if (key == null) {\n        writeVal(null, val.getVal(i));\n      } else {\n        writeMapOpener(1);\n        writeKey(key, true);\n        writeVal(key, val.getVal(i));\n        writeMapCloser();\n      }\n\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  // Represents a NamedList directly as an array of JSON objects...\n  // NamedList(\"a\"=1,\"b\"=2,null=3,null=null) => [{\"a\":1},{\"b\":2},3,null]\n  protected void writeNamedListAsArrMap(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    indent();\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first=true;\n    for (int i=0; i<sz; i++) {\n      String key = val.getName(i);\n\n      if (first) {\n        first=false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      if (key==null) {\n        writeVal(null,val.getVal(i));\n      } else {\n        writeMapOpener(1);\n        writeKey(key, true);\n        writeVal(key,val.getVal(i));\n        writeMapCloser();\n      }\n\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonTextWriter#writeNamedListAsArrMap(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  // Represents a NamedList directly as an array of JSON objects...\n  // NamedList(\"a\"=1,\"b\"=2,null=3,null=null) => [{\"a\":1},{\"b\":2},3,null]\n  default void writeNamedListAsArrMap(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    indent();\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i = 0; i < sz; i++) {\n      String key = val.getName(i);\n\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      if (key == null) {\n        writeVal(null, val.getVal(i));\n      } else {\n        writeMapOpener(1);\n        writeKey(key, true);\n        writeVal(key, val.getVal(i));\n        writeMapCloser();\n      }\n\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonTextWriter#writeNamedListAsArrMap(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  // Represents a NamedList directly as an array of JSON objects...\n  // NamedList(\"a\"=1,\"b\"=2,null=3,null=null) => [{\"a\":1},{\"b\":2},3,null]\n  default void writeNamedListAsArrMap(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    indent();\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i = 0; i < sz; i++) {\n      String key = val.getName(i);\n\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      if (key == null) {\n        writeVal(null, val.getVal(i));\n      } else {\n        writeMapOpener(1);\n        writeKey(key, true);\n        writeVal(key, val.getVal(i));\n        writeMapCloser();\n      }\n\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonTextWriter#writeNamedListAsArrMap(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonTextWriter#writeNamedListAsArrMap(String,NamedList).mjava","sourceNew":"  // Represents a NamedList directly as an array of JSON objects...\n  // NamedList(\"a\"=1,\"b\"=2,null=3,null=null) => [{\"a\":1},{\"b\":2},3,null]\n  default void writeNamedListAsArrMap(String name, @SuppressWarnings({\"rawtypes\"})NamedList val) throws IOException {\n    int sz = val.size();\n    indent();\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i = 0; i < sz; i++) {\n      String key = val.getName(i);\n\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      if (key == null) {\n        writeVal(null, val.getVal(i));\n      } else {\n        writeMapOpener(1);\n        writeKey(key, true);\n        writeVal(key, val.getVal(i));\n        writeMapCloser();\n      }\n\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  // Represents a NamedList directly as an array of JSON objects...\n  // NamedList(\"a\"=1,\"b\"=2,null=3,null=null) => [{\"a\":1},{\"b\":2},3,null]\n  default void writeNamedListAsArrMap(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    indent();\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i = 0; i < sz; i++) {\n      String key = val.getName(i);\n\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      if (key == null) {\n        writeVal(null, val.getVal(i));\n      } else {\n        writeMapOpener(1);\n        writeKey(key, true);\n        writeVal(key, val.getVal(i));\n        writeMapCloser();\n      }\n\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["26dad91f15019714a045b4d8c5f40162b2058b54"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"],"26dad91f15019714a045b4d8c5f40162b2058b54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}