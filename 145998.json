{"path":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", masterClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(501, slaveQueryResult.getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":null,"sourceOld":"  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", masterClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(501, slaveQueryResult.getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", masterClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(501, slaveQueryResult.getNumFound());\n  }\n\n","sourceOld":"  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", masterClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(501, slaveQueryResult.getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", masterClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(501, slaveQueryResult.getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f72f36b556a12c6d5004378a256b03015ef24d8","date":1279497528,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(500, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(500, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(501, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(501, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(500, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n  }\n\n","sourceOld":"  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", masterClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(501, slaveQueryResult.getNumFound());\n  }\n\n","bugFix":null,"bugIntro":["379ec215b82e132c6741b5211d9cd8cfc30aa02a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(500, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(500, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(501, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(501, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(500, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n  }\n\n","sourceOld":"  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = query(\"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = query(\"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n    //sleep for pollinterval time 3s, to let slave pull data.\n    Thread.sleep(3000);\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = query(\"*:*\", masterClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(501, slaveQueryResult.getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379ec215b82e132c6741b5211d9cd8cfc30aa02a","date":1280784799,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(500, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(500, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(501, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(501, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(500, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n  }\n\n","bugFix":["dd564545498afb928bdfecf369ec06cd377413d2","9f72f36b556a12c6d5004378a256b03015ef24d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n\n    //add 500 docs to master\n    for (int i = 0; i < 500; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(500, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(500, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(500, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String masterUrl = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(501, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(501, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(500, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(500, slaveQueryResult.getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","pathOld":"solr/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379ec215b82e132c6741b5211d9cd8cfc30aa02a":["9f72f36b556a12c6d5004378a256b03015ef24d8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["379ec215b82e132c6741b5211d9cd8cfc30aa02a","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","9f72f36b556a12c6d5004378a256b03015ef24d8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","379ec215b82e132c6741b5211d9cd8cfc30aa02a"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9f72f36b556a12c6d5004378a256b03015ef24d8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["379ec215b82e132c6741b5211d9cd8cfc30aa02a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["379ec215b82e132c6741b5211d9cd8cfc30aa02a"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"379ec215b82e132c6741b5211d9cd8cfc30aa02a":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","9f72f36b556a12c6d5004378a256b03015ef24d8"],"9f72f36b556a12c6d5004378a256b03015ef24d8":["379ec215b82e132c6741b5211d9cd8cfc30aa02a","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}