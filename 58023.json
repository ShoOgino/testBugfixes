{"path":"solr/core/src/test/org/apache/solr/handler/admin/SplitHandlerTest#testSplitRecommendations().mjava","commits":[{"id":"a05f3f5161c62339ec5560b8f6958f3df8483618","date":1563550501,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/SplitHandlerTest#testSplitRecommendations().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSplitRecommendations() throws Exception {\n\n    // split whole range exactly in two\n    DocRouter.Range curr = new DocRouter.Range(10,15);\n    List<SplitOp.RangeCount> counts = new ArrayList<>();\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,15), 100));\n    Collection<DocRouter.Range> results = SplitOp.getSplits(counts, curr);\n    assertEquals(12, results.iterator().next().max);\n    verifyContiguous(results, curr);\n\n    // make sure range with docs is split in half even if current range of shard is bigger\n    curr = new DocRouter.Range(-100,101);\n    counts = new ArrayList<>();\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,15), 100));\n    results = SplitOp.getSplits(counts, curr);\n    assertEquals(12, results.iterator().next().max);\n    verifyContiguous(results, curr);\n\n    // don't freak out if we encounter some ranges outside of the current defined shard range\n    // this can happen since document routing can be overridden.\n    curr = new DocRouter.Range(-100,101);\n    counts = new ArrayList<>();\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(-1000,-990), 100));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(-980,-970), 2));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,15), 100));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(1000,1010), 5));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(1020,1030), 7));\n    results = SplitOp.getSplits(counts, curr);\n    assertEquals(12, results.iterator().next().max);\n    verifyContiguous(results, curr);\n\n\n    // splitting counts of [1,4,3] should result in [1,4],[3]\n    // splitting count sof [3,4,1] should result in [3],[4,1]\n    // The current implementation has specific code for the latter case (hence this is needed for code coverage)\n    // The random tests *should* catch this as well though.\n    curr = new DocRouter.Range(-100,101);\n    counts = new ArrayList<>();\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(0,9), 1));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,19), 4));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(20,29), 3));\n    results = SplitOp.getSplits(counts, curr);\n    assertEquals(19, results.iterator().next().max);\n    verifyContiguous(results, curr);\n\n    curr = new DocRouter.Range(-100,101);\n    counts = new ArrayList<>();\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(0,9), 3));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,19), 4));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(20,29), 1));\n    results = SplitOp.getSplits(counts, curr);\n    assertEquals(9, results.iterator().next().max);\n    verifyContiguous(results, curr);\n\n\n    // test that if largest count is first\n    curr = new DocRouter.Range(-100,101);\n    counts = new ArrayList<>();\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(0,9), 4));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,19), 1));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(20,29), 1));\n    results = SplitOp.getSplits(counts, curr);\n    assertEquals(9, results.iterator().next().max);\n    verifyContiguous(results, curr);\n\n    // test that if largest count is last (this has specific code since we don't get over midpoint until the last range and then need to back up)\n    curr = new DocRouter.Range(-100,101);\n    counts = new ArrayList<>();\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(0,9), 1));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,19), 1));\n    counts.add(new SplitOp.RangeCount(new DocRouter.Range(20,29), 4));\n    results = SplitOp.getSplits(counts, curr);\n    assertEquals(19, results.iterator().next().max);\n    verifyContiguous(results, curr);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05f3f5161c62339ec5560b8f6958f3df8483618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05f3f5161c62339ec5560b8f6958f3df8483618"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05f3f5161c62339ec5560b8f6958f3df8483618"],"a05f3f5161c62339ec5560b8f6958f3df8483618":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}