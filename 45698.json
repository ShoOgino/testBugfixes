{"path":"src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","commits":[{"id":"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b","date":1225722778,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=i;\n      threads[i] = new Thread() {\n        public void run() {\n          int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n          puts.addAndGet(ret);\n        }\n      };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n            +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n            +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}