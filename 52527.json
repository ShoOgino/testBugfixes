{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#getSlices(String,ZkStateReader,boolean).mjava","commits":[{"id":"37ba6c2d18fe05b92cb264c3d67e4cae76f75136","date":1495126259,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Collection<Slice> getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    // Check collection case sensitive\n    if(collectionsMap.containsKey(collectionName)) {\n      return collectionsMap.get(collectionName).getActiveSlices();\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlices();\n      }\n    }\n\n    if(checkAlias) {\n      // check for collection alias\n      Aliases aliases = zkStateReader.getAliases();\n      String alias = aliases.getCollectionAlias(collectionName);\n      if (alias != null) {\n        Collection<Slice> slices = new ArrayList<>();\n\n        List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n        for (String aliasCollectionName : aliasList) {\n          // Add all active slices for this alias collection\n          slices.addAll(collectionsMap.get(aliasCollectionName).getActiveSlices());\n        }\n\n        return slices;\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb7aea20cb3c5f43103724bd4ca1159e6a4ae208","date":1495127006,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":null,"sourceOld":"  public static Collection<Slice> getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    // Check collection case sensitive\n    if(collectionsMap.containsKey(collectionName)) {\n      return collectionsMap.get(collectionName).getActiveSlices();\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlices();\n      }\n    }\n\n    if(checkAlias) {\n      // check for collection alias\n      Aliases aliases = zkStateReader.getAliases();\n      String alias = aliases.getCollectionAlias(collectionName);\n      if (alias != null) {\n        Collection<Slice> slices = new ArrayList<>();\n\n        List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n        for (String aliasCollectionName : aliasList) {\n          // Add all active slices for this alias collection\n          slices.addAll(collectionsMap.get(aliasCollectionName).getActiveSlices());\n        }\n\n        return slices;\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb7aea20cb3c5f43103724bd4ca1159e6a4ae208"],"cb7aea20cb3c5f43103724bd4ca1159e6a4ae208":["37ba6c2d18fe05b92cb264c3d67e4cae76f75136"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["cb7aea20cb3c5f43103724bd4ca1159e6a4ae208"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"cb7aea20cb3c5f43103724bd4ca1159e6a4ae208":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}