{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#removeCollectionFromAlias(String,ZkStateReader.AliasesManager,String).mjava","commits":[{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":2,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MaintainRoutedAliasCmd#removeCollectionFromAlias(String,ZkStateReader.AliasesManager,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/AliasCmd#updateAlias(String,ZkStateReader.AliasesManager,String).mjava","sourceNew":"  private void removeCollectionFromAlias(String aliasName, ZkStateReader.AliasesManager aliasesManager, String createCollName) {\n    aliasesManager.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size());\n        newTargetCollections.addAll(curTargetCollections);\n        newTargetCollections.remove(createCollName);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      } else {\n        return curAliases;\n      }\n    });\n  }\n\n","sourceOld":"  void updateAlias(String aliasName, ZkStateReader.AliasesManager aliasesManager, String createCollName) {\n    aliasesManager.applyModificationAndExportToZk(curAliases -> {\n      final List<String> curTargetCollections = curAliases.getCollectionAliasListMap().get(aliasName);\n      if (curTargetCollections.contains(createCollName)) {\n        return curAliases;\n      } else {\n        List<String> newTargetCollections = new ArrayList<>(curTargetCollections.size() + 1);\n        // prepend it on purpose (thus reverse sorted). Solr alias resolution defaults to the first collection in a list\n        newTargetCollections.add(createCollName);\n        newTargetCollections.addAll(curTargetCollections);\n        return curAliases.cloneWithCollectionAlias(aliasName, StrUtils.join(newTargetCollections, ','));\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}