{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public final DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      if (maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        System.out.println(\"no: max\");\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0 && maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n        System.out.println(\"no: offsets\");\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0 && allowPayloads == false) {\n        System.out.println(\"no: payloads\");\n        return null;\n      }\n      return getSeedPostings(current.getKey().utf8ToString(), current.getValue(), false, maxAllowed, allowPayloads);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public final DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      if (maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0 && maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0 && allowPayloads == false) {\n        return null;\n      }\n      return getSeedPostings(current.getKey().utf8ToString(), current.getValue(), false, maxAllowed, allowPayloads);\n    }\n\n","sourceOld":"    @Override\n    public final DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      if (maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        System.out.println(\"no: max\");\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0 && maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n        System.out.println(\"no: offsets\");\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0 && allowPayloads == false) {\n        System.out.println(\"no: payloads\");\n        return null;\n      }\n      return getSeedPostings(current.getKey().utf8ToString(), current.getValue(), false, maxAllowed, allowPayloads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public final DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      if (maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0 && maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0 && allowPayloads == false) {\n        return null;\n      }\n      return getSeedPostings(current.getKey().utf8ToString(), current.getValue().seed, false, maxAllowed, allowPayloads);\n    }\n\n","sourceOld":"    @Override\n    public final DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      if (maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0 && maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0 && allowPayloads == false) {\n        return null;\n      }\n      return getSeedPostings(current.getKey().utf8ToString(), current.getValue(), false, maxAllowed, allowPayloads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public final DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n      if (maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0 && maxAllowed.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n        return null;\n      }\n      if ((flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0 && allowPayloads == false) {\n        return null;\n      }\n      return getSeedPostings(current.getKey().utf8ToString(), current.getValue().seed, false, maxAllowed, allowPayloads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["51f5280f31484820499077f41fcdfe92d527d9dc"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}