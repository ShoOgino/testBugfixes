{"path":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}