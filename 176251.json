{"path":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new SimpleTextCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      BKDUtil.intToBytes(i, point, 0);\n      doc.add(new DimensionalField(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    DimensionalValues values = sub.getDimensionalValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.QUERY_CROSSES_CELL;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, BKDUtil.bytesToInt(packedValue, 0));\n                       }\n                     });\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","sourceNew":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      BKDUtil.intToBytes(i, point, 0);\n      doc.add(new DimensionalField(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    DimensionalValues values = sub.getDimensionalValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.QUERY_CROSSES_CELL;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, BKDUtil.bytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new SimpleTextCodec());\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      BKDUtil.intToBytes(i, point, 0);\n      doc.add(new DimensionalField(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    DimensionalValues values = sub.getDimensionalValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.QUERY_CROSSES_CELL;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, BKDUtil.bytesToInt(packedValue, 0));\n                       }\n                     });\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","sourceNew":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      BKDUtil.intToBytes(i, point, 0);\n      doc.add(new DimensionalField(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    DimensionalValues values = sub.getDimensionalValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, BKDUtil.bytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      BKDUtil.intToBytes(i, point, 0);\n      doc.add(new DimensionalField(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    DimensionalValues values = sub.getDimensionalValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.QUERY_CROSSES_CELL;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, BKDUtil.bytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","sourceNew":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new DimensionalBinaryField(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    DimensionalValues values = sub.getDimensionalValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.bytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      BKDUtil.intToBytes(i, point, 0);\n      doc.add(new DimensionalField(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    DimensionalValues values = sub.getDimensionalValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, BKDUtil.bytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testMerge().mjava","sourceNew":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    PointValues values = sub.getPointValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.bytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testMerge() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<20;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new DimensionalBinaryField(\"dim\", point));\n      w.addDocument(doc);\n      if (i == 10) {\n        w.commit();\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    LeafReader sub = getOnlySegmentReader(r);\n    DimensionalValues values = sub.getDimensionalValues();\n\n    // Simple test: make sure intersect can visit every doc:\n    BitSet seen = new BitSet();\n    values.intersect(\"dim\",\n                     new IntersectVisitor() {\n                       @Override\n                       public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n                       public void visit(int docID, byte[] packedValue) {\n                         seen.set(docID);\n                         assertEquals(docID, NumericUtils.bytesToInt(packedValue, 0));\n                       }\n                     });\n    assertEquals(20, seen.cardinality());\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}