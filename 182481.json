{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/SimpleCharArrayReader#read(char[],int,int).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/SimpleCharArrayReader#read(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Reads up to <code>len</code> bytes of data into an array of bytes \n     * from this input stream. \n     * If <code>pos</code> equals <code>count</code>,\n     * then <code>-1</code> is returned to indicate\n     * end of file. Otherwise, the  number <code>k</code>\n     * of bytes read is equal to the smaller of\n     * <code>len</code> and <code>count-pos</code>.\n     * If <code>k</code> is positive, then bytes\n     * <code>buf[pos]</code> through <code>buf[pos+k-1]</code>\n     * are copied into <code>b[off]</code>  through\n     * <code>b[off+k-1]</code> in the manner performed\n     * by <code>System.arraycopy</code>. The\n     * value <code>k</code> is added into <code>pos</code>\n     * and <code>k</code> is returned.\n     * <p>\n     * This <code>read</code> method cannot block. \n     *\n     * @param   b     the buffer into which the data is read.\n     * @param   off   the start offset of the data.\n     * @param   len   the maximum number of bytes read.\n     * @return  the total number of bytes read into the buffer, or\n     *          <code>-1</code> if there is no more data because the end of\n     *          the stream has been reached.\n     */\n    public  int read(char b[], int off, int len) \n\t{\n\t\tif (b == null) \n\t\t{\n\t\t    throw new NullPointerException();\n\t\t} \n\t\telse if ((off < 0) || (off > b.length) || (len < 0) ||\n\t\t   ((off + len) > b.length) || ((off + len) < 0)) \n\t\t{\n\t    \tthrow new IndexOutOfBoundsException();\n\t\t}\n\t\tif (pos >= count) \n\t\t{\n\t\t    return -1;\n\t\t}\n\t\tif (pos + len > count) \n\t\t{\n\t\t    len = count - pos;\n\t\t}\n\t\tif (len <= 0) \n\t\t{\n\t\t    return 0;\n\t\t}\n\t\tSystem.arraycopy(buf, pos, b, off, len);\n\t\tpos += len;\n\t\treturn len;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/SimpleCharArrayReader#read(char[],int,int).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/SimpleCharArrayReader#read(char[],int,int).mjava","sourceNew":"    /**\n     * Reads up to <code>len</code> bytes of data into an array of bytes\n     * from this input stream.\n     * If <code>pos</code> equals <code>count</code>,\n     * then <code>-1</code> is returned to indicate\n     * end of file. Otherwise, the  number <code>k</code>\n     * of bytes read is equal to the smaller of\n     * <code>len</code> and <code>count-pos</code>.\n     * If <code>k</code> is positive, then bytes\n     * <code>buf[pos]</code> through <code>buf[pos+k-1]</code>\n     * are copied into <code>b[off]</code>  through\n     * <code>b[off+k-1]</code> in the manner performed\n     * by <code>System.arraycopy</code>. The\n     * value <code>k</code> is added into <code>pos</code>\n     * and <code>k</code> is returned.\n     * <p>\n     * This <code>read</code> method cannot block.\n     *\n     * @param   b     the buffer into which the data is read.\n     * @param   off   the start offset of the data.\n     * @param   len   the maximum number of bytes read.\n     * @return  the total number of bytes read into the buffer, or\n     *          <code>-1</code> if there is no more data because the end of\n     *          the stream has been reached.\n     */\n    public  int read(char b[], int off, int len)\n    {\n        if (b == null)\n        {\n            throw new NullPointerException();\n        }\n        else if ((off < 0) || (off > b.length) || (len < 0) ||\n           ((off + len) > b.length) || ((off + len) < 0))\n        {\n            throw new IndexOutOfBoundsException();\n        }\n        if (pos >= count)\n        {\n            return -1;\n        }\n        if (pos + len > count)\n        {\n            len = count - pos;\n        }\n        if (len <= 0)\n        {\n            return 0;\n        }\n        System.arraycopy(buf, pos, b, off, len);\n        pos += len;\n        return len;\n    }\n\n","sourceOld":"    /**\n     * Reads up to <code>len</code> bytes of data into an array of bytes \n     * from this input stream. \n     * If <code>pos</code> equals <code>count</code>,\n     * then <code>-1</code> is returned to indicate\n     * end of file. Otherwise, the  number <code>k</code>\n     * of bytes read is equal to the smaller of\n     * <code>len</code> and <code>count-pos</code>.\n     * If <code>k</code> is positive, then bytes\n     * <code>buf[pos]</code> through <code>buf[pos+k-1]</code>\n     * are copied into <code>b[off]</code>  through\n     * <code>b[off+k-1]</code> in the manner performed\n     * by <code>System.arraycopy</code>. The\n     * value <code>k</code> is added into <code>pos</code>\n     * and <code>k</code> is returned.\n     * <p>\n     * This <code>read</code> method cannot block. \n     *\n     * @param   b     the buffer into which the data is read.\n     * @param   off   the start offset of the data.\n     * @param   len   the maximum number of bytes read.\n     * @return  the total number of bytes read into the buffer, or\n     *          <code>-1</code> if there is no more data because the end of\n     *          the stream has been reached.\n     */\n    public  int read(char b[], int off, int len) \n\t{\n\t\tif (b == null) \n\t\t{\n\t\t    throw new NullPointerException();\n\t\t} \n\t\telse if ((off < 0) || (off > b.length) || (len < 0) ||\n\t\t   ((off + len) > b.length) || ((off + len) < 0)) \n\t\t{\n\t    \tthrow new IndexOutOfBoundsException();\n\t\t}\n\t\tif (pos >= count) \n\t\t{\n\t\t    return -1;\n\t\t}\n\t\tif (pos + len > count) \n\t\t{\n\t\t    len = count - pos;\n\t\t}\n\t\tif (len <= 0) \n\t\t{\n\t\t    return 0;\n\t\t}\n\t\tSystem.arraycopy(buf, pos, b, off, len);\n\t\tpos += len;\n\t\treturn len;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/util/SimpleCharArrayReader#read(char[],int,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Reads up to <code>len</code> bytes of data into an array of bytes\n     * from this input stream.\n     * If <code>pos</code> equals <code>count</code>,\n     * then <code>-1</code> is returned to indicate\n     * end of file. Otherwise, the  number <code>k</code>\n     * of bytes read is equal to the smaller of\n     * <code>len</code> and <code>count-pos</code>.\n     * If <code>k</code> is positive, then bytes\n     * <code>buf[pos]</code> through <code>buf[pos+k-1]</code>\n     * are copied into <code>b[off]</code>  through\n     * <code>b[off+k-1]</code> in the manner performed\n     * by <code>System.arraycopy</code>. The\n     * value <code>k</code> is added into <code>pos</code>\n     * and <code>k</code> is returned.\n     * <p>\n     * This <code>read</code> method cannot block.\n     *\n     * @param   b     the buffer into which the data is read.\n     * @param   off   the start offset of the data.\n     * @param   len   the maximum number of bytes read.\n     * @return  the total number of bytes read into the buffer, or\n     *          <code>-1</code> if there is no more data because the end of\n     *          the stream has been reached.\n     */\n    public  int read(char b[], int off, int len)\n    {\n        if (b == null)\n        {\n            throw new NullPointerException();\n        }\n        else if ((off < 0) || (off > b.length) || (len < 0) ||\n           ((off + len) > b.length) || ((off + len) < 0))\n        {\n            throw new IndexOutOfBoundsException();\n        }\n        if (pos >= count)\n        {\n            return -1;\n        }\n        if (pos + len > count)\n        {\n            len = count - pos;\n        }\n        if (len <= 0)\n        {\n            return 0;\n        }\n        System.arraycopy(buf, pos, b, off, len);\n        pos += len;\n        return len;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}