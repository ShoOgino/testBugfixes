{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, getMetricTag(), true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, getMetricTag(), true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), getMetricTag(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), getMetricTag(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), getMetricTag(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), getMetricTag(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), getMetricTag(), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), getMetricTag(), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, getMetricTag(), true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, getMetricTag(), true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), getMetricTag(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), getMetricTag(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), getMetricTag(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, getMetricTag(), true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, getMetricTag(), true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, getMetricTag(), true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), getMetricTag(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), getMetricTag(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), getMetricTag(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), getMetricTag(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), getMetricTag(), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), getMetricTag(), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, getMetricTag(), true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, getMetricTag(), true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), getMetricTag(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), getMetricTag(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), getMetricTag(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, getMetricTag(), true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, getMetricTag(), true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, getMetricTag(), true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), getMetricTag(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), getMetricTag(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), getMetricTag(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), getMetricTag(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), getMetricTag(), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), getMetricTag(), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, getMetricTag(), true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, getMetricTag(), true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), getMetricTag(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), getMetricTag(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), getMetricTag(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, getMetricTag(), true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"]},"commit2Childs":{"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}