{"path":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","commits":[{"id":"29252e837df815b8d01fd6dff973126cced351c5","date":1521709907,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && hasTimedOut()) {\n      Thread.sleep(500);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && hasTimedOut()) {\n      Thread.sleep(500);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd72da8bbe9aeec760515621ab61704c56b5ce08","date":1522063736,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","sourceNew":"  /**\n   * Wait until the given {@link Supplier} returns true or the time out expires which ever happens first\n   * @param messageOnTimeOut the exception message to be used in case a TimeoutException is thrown\n   * @param supplier a {@link Supplier} that returns a {@link Boolean} value\n   * @throws InterruptedException if any thread has interrupted the current thread\n   * @throws TimeoutException if the timeout expires\n   */\n  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && !hasTimedOut()) {\n      Thread.sleep(500);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","sourceOld":"  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && hasTimedOut()) {\n      Thread.sleep(500);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","sourceNew":"  /**\n   * Wait until the given {@link Supplier} returns true or the time out expires which ever happens first\n   * @param messageOnTimeOut the exception message to be used in case a TimeoutException is thrown\n   * @param supplier a {@link Supplier} that returns a {@link Boolean} value\n   * @throws InterruptedException if any thread has interrupted the current thread\n   * @throws TimeoutException if the timeout expires\n   */\n  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && !hasTimedOut()) {\n      Thread.sleep(500);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","sourceOld":"  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && hasTimedOut()) {\n      Thread.sleep(500);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","sourceNew":"  /**\n   * Wait until the given {@link Supplier} returns true or the time out expires which ever happens first\n   * @param messageOnTimeOut the exception message to be used in case a TimeoutException is thrown\n   * @param supplier a {@link Supplier} that returns a {@link Boolean} value\n   * @throws InterruptedException if any thread has interrupted the current thread\n   * @throws TimeoutException if the timeout expires\n   */\n  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && !hasTimedOut()) {\n      Thread.sleep(250);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","sourceOld":"  /**\n   * Wait until the given {@link Supplier} returns true or the time out expires which ever happens first\n   * @param messageOnTimeOut the exception message to be used in case a TimeoutException is thrown\n   * @param supplier a {@link Supplier} that returns a {@link Boolean} value\n   * @throws InterruptedException if any thread has interrupted the current thread\n   * @throws TimeoutException if the timeout expires\n   */\n  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && !hasTimedOut()) {\n      Thread.sleep(500);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","bugFix":["29252e837df815b8d01fd6dff973126cced351c5"],"bugIntro":["7a88bf4a314061a17f44d22ff6319a7cd14e6cf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a88bf4a314061a17f44d22ff6319a7cd14e6cf1","date":1545061767,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TimeOut#waitFor(String,Supplier[Boolean]).mjava","sourceNew":"  /**\n   * Wait until the given {@link Supplier} returns true or the time out expires which ever happens first\n   * @param messageOnTimeOut the exception message to be used in case a TimeoutException is thrown\n   * @param supplier a {@link Supplier} that returns a {@link Boolean} value\n   * @throws InterruptedException if any thread has interrupted the current thread\n   * @throws TimeoutException if the timeout expires\n   */\n  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && !hasTimedOut()) {\n      timeSource.sleep(250);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","sourceOld":"  /**\n   * Wait until the given {@link Supplier} returns true or the time out expires which ever happens first\n   * @param messageOnTimeOut the exception message to be used in case a TimeoutException is thrown\n   * @param supplier a {@link Supplier} that returns a {@link Boolean} value\n   * @throws InterruptedException if any thread has interrupted the current thread\n   * @throws TimeoutException if the timeout expires\n   */\n  public void waitFor(String messageOnTimeOut, Supplier<Boolean> supplier)\n      throws InterruptedException, TimeoutException {\n    while (!supplier.get() && !hasTimedOut()) {\n      Thread.sleep(250);\n    }\n    if (hasTimedOut()) throw new TimeoutException(messageOnTimeOut);\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29252e837df815b8d01fd6dff973126cced351c5"],"dd72da8bbe9aeec760515621ab61704c56b5ce08":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"29252e837df815b8d01fd6dff973126cced351c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a88bf4a314061a17f44d22ff6319a7cd14e6cf1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","dd72da8bbe9aeec760515621ab61704c56b5ce08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a88bf4a314061a17f44d22ff6319a7cd14e6cf1"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["dd72da8bbe9aeec760515621ab61704c56b5ce08","d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"dd72da8bbe9aeec760515621ab61704c56b5ce08":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"29252e837df815b8d01fd6dff973126cced351c5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"7a88bf4a314061a17f44d22ff6319a7cd14e6cf1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7a88bf4a314061a17f44d22ff6319a7cd14e6cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","29252e837df815b8d01fd6dff973126cced351c5"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}