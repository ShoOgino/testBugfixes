{"path":"modules/spatial/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distHaversineRAD(double,double,double,double).mjava","commits":[{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distHaversineRAD(double,double,double,double).mjava","pathOld":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distHaversineRAD(double,double,double,double).mjava","sourceNew":"  /**\n   *\n   * @param lat1     The y coordinate of the first point, in radians\n   * @param lon1     The x coordinate of the first point, in radians\n   * @param lat2     The y coordinate of the second point, in radians\n   * @param lon2     The x coordinate of the second point, in radians\n   * @return The distance between the two points, as determined by the Haversine formula, in radians.\n   */\n  public static double distHaversineRAD(double lat1, double lon1, double lat2, double lon2) {\n    //TODO investigate slightly different formula using asin() and min() http://www.movable-type.co.uk/scripts/gis-faq-5.1.html\n\n    // Check for same position\n    if (lat1 == lat2 && lon1 == lon2)\n      return 0.0;\n    double hsinX = Math.sin((lon1 - lon2) * 0.5);\n    double hsinY = Math.sin((lat1 - lat2) * 0.5);\n    double h = hsinY * hsinY +\n            (Math.cos(lat1) * Math.cos(lat2) * hsinX * hsinX);\n    return 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h));\n  }\n\n","sourceOld":"  /**\n   *\n   * @param lat1     The y coordinate of the first point, in radians\n   * @param lon1     The x coordinate of the first point, in radians\n   * @param lat2     The y coordinate of the second point, in radians\n   * @param lon2     The x coordinate of the second point, in radians\n   * @return The distance between the two points, as determined by the Haversine formula, in radians.\n   */\n  public static double distHaversineRAD(double lat1, double lon1, double lat2, double lon2) {\n    //TODO investigate slightly different formula using asin() and min() http://www.movable-type.co.uk/scripts/gis-faq-5.1.html\n\n    // Check for same position\n    if (lat1 == lat2 && lon1 == lon2)\n      return 0.0;\n    double hsinX = Math.sin((lon1 - lon2) * 0.5);\n    double hsinY = Math.sin((lat1 - lat2) * 0.5);\n    double h = hsinY * hsinY +\n            (Math.cos(lat1) * Math.cos(lat2) * hsinX * hsinX);\n    return 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distHaversineRAD(double,double,double,double).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distHaversineRAD(double,double,double,double).mjava","sourceNew":"  /**\n   *\n   * @param lat1     The y coordinate of the first point, in radians\n   * @param lon1     The x coordinate of the first point, in radians\n   * @param lat2     The y coordinate of the second point, in radians\n   * @param lon2     The x coordinate of the second point, in radians\n   * @return The distance between the two points, as determined by the Haversine formula, in radians.\n   */\n  public static double distHaversineRAD(double lat1, double lon1, double lat2, double lon2) {\n    //TODO investigate slightly different formula using asin() and min() http://www.movable-type.co.uk/scripts/gis-faq-5.1.html\n\n    // Check for same position\n    if (lat1 == lat2 && lon1 == lon2)\n      return 0.0;\n    double hsinX = Math.sin((lon1 - lon2) * 0.5);\n    double hsinY = Math.sin((lat1 - lat2) * 0.5);\n    double h = hsinY * hsinY +\n            (Math.cos(lat1) * Math.cos(lat2) * hsinX * hsinX);\n    return 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h));\n  }\n\n","sourceOld":"  /**\n   *\n   * @param lat1     The y coordinate of the first point, in radians\n   * @param lon1     The x coordinate of the first point, in radians\n   * @param lat2     The y coordinate of the second point, in radians\n   * @param lon2     The x coordinate of the second point, in radians\n   * @return The distance between the two points, as determined by the Haversine formula, in radians.\n   */\n  public static double distHaversineRAD(double lat1, double lon1, double lat2, double lon2) {\n    //TODO investigate slightly different formula using asin() and min() http://www.movable-type.co.uk/scripts/gis-faq-5.1.html\n\n    // Check for same position\n    if (lat1 == lat2 && lon1 == lon2)\n      return 0.0;\n    double hsinX = Math.sin((lon1 - lon2) * 0.5);\n    double hsinY = Math.sin((lat1 - lat2) * 0.5);\n    double h = hsinY * hsinY +\n            (Math.cos(lat1) * Math.cos(lat2) * hsinX * hsinX);\n    return 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33ee89d976c91275e5be5da438ca0977b1c5b90f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}