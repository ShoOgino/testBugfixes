{"path":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(readerContext, lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n    // NB the IndexSearcher parameter here can be null because Filter Weights don't\n    // actually use it.\n    Weight weight = createWeight(null, ScoreMode.COMPLETE, 1);\n    return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(weight, readerContext, lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(readerContext, lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed","date":1590169220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n    // NB the IndexSearcher parameter here can be null because Filter Weights don't\n    // actually use it.\n    Weight weight = createWeight(null, ScoreMode.COMPLETE, 1);\n    return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(weight, readerContext, lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n    // NB the IndexSearcher parameter here can be null because Filter Weights don't\n    // actually use it.\n    Weight weight = createWeight(null, ScoreMode.COMPLETE, 1);\n    return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(weight, readerContext, lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n    // NB the IndexSearcher parameter here can be null because Filter Weights don't\n    // actually use it.\n    Weight weight = createWeight(null, ScoreMode.COMPLETE, 1);\n    return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         @SuppressWarnings({\"unchecked\"})\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(weight, readerContext, lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public DocIdSet getDocIdSet(final Map context, final LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n    // NB the IndexSearcher parameter here can be null because Filter Weights don't\n    // actually use it.\n    Weight weight = createWeight(null, ScoreMode.COMPLETE, 1);\n    return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         Scorer scorer = valueSource.getValues(context, readerContext).getRangeScorer(weight, readerContext, lowerVal, upperVal, includeLower, includeUpper);\n         return scorer == null ? null : scorer.iterator();\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed"],"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}