{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    ensureOpen();\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (stream == null)\n      throw new IOException(\"Already closed\");\n    \n    entries.clear();\n    stream.close();\n    stream = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":2,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    ensureOpen();\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (stream == null)\n      throw new IOException(\"Already closed\");\n    \n    entries.clear();\n    stream.close();\n    stream = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    ensureOpen();\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      assert entries == null; \n      return; // already closed\n     }\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    ensureOpen();\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      assert entries == null; \n      return; // already closed\n     }\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    ensureOpen();\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      assert entries == null; \n      return; // already closed\n     }\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    ensureOpen();\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      return; // already closed\n     }\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    } else {\n      IOUtils.closeSafely(false, handle);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      assert entries == null; \n      return; // already closed\n     }\n    entries = null;\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      return; // already closed\n     }\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    } else {\n      IOUtils.close(handle);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      return; // already closed\n     }\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    } else {\n      IOUtils.closeSafely(false, handle);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      return; // already closed\n     }\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    } else {\n      IOUtils.close(handle);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (!isOpen) {\n      // allow double close - usually to be consistent with other closeables\n      return; // already closed\n     }\n    isOpen = false;\n    if (writer != null) {\n      assert openForWrite;\n      writer.close();\n    } else {\n      IOUtils.close(handle);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["67aadace85f701c87a4e0721eedcda25d8415a70"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","bc0b8069918917b33f361011899a1af0cdd2d462"],"67aadace85f701c87a4e0721eedcda25d8415a70":["bc0b8069918917b33f361011899a1af0cdd2d462"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["2553b00f699380c64959ccb27991289aae87be2e","bc0b8069918917b33f361011899a1af0cdd2d462"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc0b8069918917b33f361011899a1af0cdd2d462":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"67aadace85f701c87a4e0721eedcda25d8415a70":["24230fe54121f9be9d85f2c2067536296785e421"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"bc0b8069918917b33f361011899a1af0cdd2d462":["1291e4568eb7d9463d751627596ef14baf4c1603","67aadace85f701c87a4e0721eedcda25d8415a70","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["bc0b8069918917b33f361011899a1af0cdd2d462","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}