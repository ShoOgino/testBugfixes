{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator(null);\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(),\n                                                  termsEnum.docsAndPositions(acceptDocs, null, 0));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","3bd3db3e8f35bef1d4d3f0411933b3190297302a","778044e6175d398c3f128227b96c5f3ad32184f0","778044e6175d398c3f128227b96c5f3ad32184f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator(null);\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(),\n                                                  termsEnum.docsAndPositions(acceptDocs, null, 0));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator(null);\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(),\n                                                  termsEnum.docsAndPositions(acceptDocs, null, 0));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator(null);\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.FLAG_POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator(null);\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.FLAG_POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator(null);\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator(null);\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.FLAG_POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator(null);\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["fb17639909a369c1e64866842e5c213440acc17e"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"fb17639909a369c1e64866842e5c213440acc17e":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}