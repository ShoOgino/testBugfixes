{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","commits":[{"id":"c96362be7a015af2bd16ce584c1e9ac999b1e701","date":1402509045,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean checkResponseCode(HttpURLConnection urlc) throws IOException {\n    if (urlc.getResponseCode() >= 400) {\n      warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" (\" + urlc.getResponseMessage() + \") for url: \" + urlc.getURL());\n      Charset charset = StandardCharsets.ISO_8859_1;\n      final String contentType = urlc.getContentType();\n      // code cloned from ContentStreamBase, but post.jar should be standalone!\n      if (contentType != null) {\n        int idx = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (idx > 0) {\n          charset = Charset.forName(contentType.substring(idx + \"charset=\".length()).trim());\n        }\n      }\n      // Print the response returned by Solr\n      try (InputStream errStream = urlc.getErrorStream()) {\n        if (errStream != null) {\n          BufferedReader br = new BufferedReader(new InputStreamReader(errStream, charset));\n          final StringBuilder response = new StringBuilder(\"Response: \");\n          int ch;\n          while ((ch = br.read()) != -1) {\n            response.append((char) ch);\n          }\n          warn(response.toString().trim());\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean checkResponseCode(HttpURLConnection urlc) throws IOException {\n    if (urlc.getResponseCode() >= 400) {\n      warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" (\" + urlc.getResponseMessage() + \") for url: \" + urlc.getURL());\n      Charset charset = StandardCharsets.ISO_8859_1;\n      final String contentType = urlc.getContentType();\n      // code cloned from ContentStreamBase, but post.jar should be standalone!\n      if (contentType != null) {\n        int idx = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (idx > 0) {\n          charset = Charset.forName(contentType.substring(idx + \"charset=\".length()).trim());\n        }\n      }\n      // Print the response returned by Solr\n      try (InputStream errStream = urlc.getErrorStream()) {\n        if (errStream != null) {\n          BufferedReader br = new BufferedReader(new InputStreamReader(errStream, charset));\n          final StringBuilder response = new StringBuilder(\"Response: \");\n          int ch;\n          while ((ch = br.read()) != -1) {\n            response.append((char) ch);\n          }\n          warn(response.toString().trim());\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a0894b72a443a16598f92e83172b2a8ae1db03","date":1477094527,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","sourceNew":"  private static boolean checkResponseCode(HttpURLConnection urlc) throws IOException, GeneralSecurityException {\n    if (urlc.getResponseCode() >= 400) {\n      warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" (\" + urlc.getResponseMessage() + \") for url: \" + urlc.getURL());\n      Charset charset = StandardCharsets.ISO_8859_1;\n      final String contentType = urlc.getContentType();\n      // code cloned from ContentStreamBase, but post.jar should be standalone!\n      if (contentType != null) {\n        int idx = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (idx > 0) {\n          charset = Charset.forName(contentType.substring(idx + \"charset=\".length()).trim());\n        }\n      }\n      // Print the response returned by Solr\n      try (InputStream errStream = urlc.getErrorStream()) {\n        if (errStream != null) {\n          BufferedReader br = new BufferedReader(new InputStreamReader(errStream, charset));\n          final StringBuilder response = new StringBuilder(\"Response: \");\n          int ch;\n          while ((ch = br.read()) != -1) {\n            response.append((char) ch);\n          }\n          warn(response.toString().trim());\n        }\n      }\n      if (urlc.getResponseCode() == 401) {\n        throw new GeneralSecurityException(\"Solr requires authentication (response 401). Please try again with '-u' option\");\n      }\n      if (urlc.getResponseCode() == 403) {\n        throw new GeneralSecurityException(\"You are not authorized to perform this action against Solr. (response 403)\");\n      }\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private static boolean checkResponseCode(HttpURLConnection urlc) throws IOException {\n    if (urlc.getResponseCode() >= 400) {\n      warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" (\" + urlc.getResponseMessage() + \") for url: \" + urlc.getURL());\n      Charset charset = StandardCharsets.ISO_8859_1;\n      final String contentType = urlc.getContentType();\n      // code cloned from ContentStreamBase, but post.jar should be standalone!\n      if (contentType != null) {\n        int idx = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (idx > 0) {\n          charset = Charset.forName(contentType.substring(idx + \"charset=\".length()).trim());\n        }\n      }\n      // Print the response returned by Solr\n      try (InputStream errStream = urlc.getErrorStream()) {\n        if (errStream != null) {\n          BufferedReader br = new BufferedReader(new InputStreamReader(errStream, charset));\n          final StringBuilder response = new StringBuilder(\"Response: \");\n          int ch;\n          while ((ch = br.read()) != -1) {\n            response.append((char) ch);\n          }\n          warn(response.toString().trim());\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","sourceNew":"  private static boolean checkResponseCode(HttpURLConnection urlc) throws IOException, GeneralSecurityException {\n    if (urlc.getResponseCode() >= 400) {\n      warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" (\" + urlc.getResponseMessage() + \") for url: \" + urlc.getURL());\n      Charset charset = StandardCharsets.ISO_8859_1;\n      final String contentType = urlc.getContentType();\n      // code cloned from ContentStreamBase, but post.jar should be standalone!\n      if (contentType != null) {\n        int idx = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (idx > 0) {\n          charset = Charset.forName(contentType.substring(idx + \"charset=\".length()).trim());\n        }\n      }\n      // Print the response returned by Solr\n      try (InputStream errStream = urlc.getErrorStream()) {\n        if (errStream != null) {\n          BufferedReader br = new BufferedReader(new InputStreamReader(errStream, charset));\n          final StringBuilder response = new StringBuilder(\"Response: \");\n          int ch;\n          while ((ch = br.read()) != -1) {\n            response.append((char) ch);\n          }\n          warn(response.toString().trim());\n        }\n      }\n      if (urlc.getResponseCode() == 401) {\n        throw new GeneralSecurityException(\"Solr requires authentication (response 401). Please try again with '-u' option\");\n      }\n      if (urlc.getResponseCode() == 403) {\n        throw new GeneralSecurityException(\"You are not authorized to perform this action against Solr. (response 403)\");\n      }\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private static boolean checkResponseCode(HttpURLConnection urlc) throws IOException {\n    if (urlc.getResponseCode() >= 400) {\n      warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" (\" + urlc.getResponseMessage() + \") for url: \" + urlc.getURL());\n      Charset charset = StandardCharsets.ISO_8859_1;\n      final String contentType = urlc.getContentType();\n      // code cloned from ContentStreamBase, but post.jar should be standalone!\n      if (contentType != null) {\n        int idx = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (idx > 0) {\n          charset = Charset.forName(contentType.substring(idx + \"charset=\".length()).trim());\n        }\n      }\n      // Print the response returned by Solr\n      try (InputStream errStream = urlc.getErrorStream()) {\n        if (errStream != null) {\n          BufferedReader br = new BufferedReader(new InputStreamReader(errStream, charset));\n          final StringBuilder response = new StringBuilder(\"Response: \");\n          int ch;\n          while ((ch = br.read()) != -1) {\n            response.append((char) ch);\n          }\n          warn(response.toString().trim());\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#checkResponseCode(HttpURLConnection).mjava","sourceNew":"  private static boolean checkResponseCode(HttpURLConnection urlc) throws IOException, GeneralSecurityException {\n    if (urlc.getResponseCode() >= 400) {\n      warn(\"Solr returned an error #\" + urlc.getResponseCode() +\n            \" (\" + urlc.getResponseMessage() + \") for url: \" + urlc.getURL());\n      Charset charset = StandardCharsets.ISO_8859_1;\n      final String contentType = urlc.getContentType();\n      // code cloned from ContentStreamBase, but post.jar should be standalone!\n      if (contentType != null) {\n        int idx = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (idx > 0) {\n          charset = Charset.forName(contentType.substring(idx + \"charset=\".length()).trim());\n        }\n      }\n      // Print the response returned by Solr\n      try (InputStream errStream = urlc.getErrorStream()) {\n        if (errStream != null) {\n          BufferedReader br = new BufferedReader(new InputStreamReader(errStream, charset));\n          final StringBuilder response = new StringBuilder(\"Response: \");\n          int ch;\n          while ((ch = br.read()) != -1) {\n            response.append((char) ch);\n          }\n          warn(response.toString().trim());\n        }\n      }\n      if (urlc.getResponseCode() == 401) {\n        throw new GeneralSecurityException(\"Solr requires authentication (response 401). Please try again with '-u' option\");\n      }\n      if (urlc.getResponseCode() == 403) {\n        throw new GeneralSecurityException(\"You are not authorized to perform this action against Solr. (response 403)\");\n      }\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private static boolean checkResponseCode(HttpURLConnection urlc) throws IOException, GeneralSecurityException {\n    if (urlc.getResponseCode() >= 400) {\n      warn(\"Solr returned an error #\" + urlc.getResponseCode() + \n            \" (\" + urlc.getResponseMessage() + \") for url: \" + urlc.getURL());\n      Charset charset = StandardCharsets.ISO_8859_1;\n      final String contentType = urlc.getContentType();\n      // code cloned from ContentStreamBase, but post.jar should be standalone!\n      if (contentType != null) {\n        int idx = contentType.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        if (idx > 0) {\n          charset = Charset.forName(contentType.substring(idx + \"charset=\".length()).trim());\n        }\n      }\n      // Print the response returned by Solr\n      try (InputStream errStream = urlc.getErrorStream()) {\n        if (errStream != null) {\n          BufferedReader br = new BufferedReader(new InputStreamReader(errStream, charset));\n          final StringBuilder response = new StringBuilder(\"Response: \");\n          int ch;\n          while ((ch = br.read()) != -1) {\n            response.append((char) ch);\n          }\n          warn(response.toString().trim());\n        }\n      }\n      if (urlc.getResponseCode() == 401) {\n        throw new GeneralSecurityException(\"Solr requires authentication (response 401). Please try again with '-u' option\");\n      }\n      if (urlc.getResponseCode() == 403) {\n        throw new GeneralSecurityException(\"You are not authorized to perform this action against Solr. (response 403)\");\n      }\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c96362be7a015af2bd16ce584c1e9ac999b1e701":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30a0894b72a443a16598f92e83172b2a8ae1db03":["c96362be7a015af2bd16ce584c1e9ac999b1e701"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["c96362be7a015af2bd16ce584c1e9ac999b1e701","30a0894b72a443a16598f92e83172b2a8ae1db03"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["30a0894b72a443a16598f92e83172b2a8ae1db03"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c96362be7a015af2bd16ce584c1e9ac999b1e701"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"c96362be7a015af2bd16ce584c1e9ac999b1e701":["30a0894b72a443a16598f92e83172b2a8ae1db03","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"30a0894b72a443a16598f92e83172b2a8ae1db03":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c96362be7a015af2bd16ce584c1e9ac999b1e701","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}