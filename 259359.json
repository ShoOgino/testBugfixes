{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","commits":[{"id":"818fd0a17e6c7f072aba351a575916e3063ca51b","date":1475592660,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"(Synonym(b:cavy b:guinea) Synonym(t:cavy t:guinea)) (b:pig t:pig)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"(Synonym(b:cavy b:guinea) Synonym(t:cavy t:guinea)) (b:pig t:pig)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":3,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"Graph(b:guinea b:pig, b:cavy, hasBoolean=true, hasPhrase=false) \"\n        + \"Graph(t:guinea t:pig, t:cavy, hasBoolean=true, hasPhrase=false)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"(Synonym(b:cavy b:guinea) Synonym(t:cavy t:guinea)) (b:pig t:pig)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"Graph(b:guinea b:pig, b:cavy, hasBoolean=true, hasPhrase=false) \"\n        + \"Graph(t:guinea t:pig, t:cavy, hasBoolean=true, hasPhrase=false)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"(Synonym(b:cavy b:guinea) Synonym(t:cavy t:guinea)) (b:pig t:pig)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"Graph(+b:guinea +b:pig, b:cavy, hasBoolean=true, hasPhrase=false) \"\n        + \"Graph(+t:guinea +t:pig, t:cavy, hasBoolean=true, hasPhrase=false)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"Graph(b:guinea b:pig, b:cavy, hasBoolean=true, hasPhrase=false) \"\n        + \"Graph(t:guinea t:pig, t:cavy, hasBoolean=true, hasPhrase=false)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4408f3223cc4586cae91dc945fefb692e411d6d","date":1487771345,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"((+b:guinea +b:pig) (+t:guinea +t:pig)) (b:cavy t:cavy)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"Graph(+b:guinea +b:pig, b:cavy, hasBoolean=true, hasPhrase=false) \"\n        + \"Graph(+t:guinea +t:pig, t:cavy, hasBoolean=true, hasPhrase=false)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":["8d5f9da379ac10a8ebcbf30e00314c561652932b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d5f9da379ac10a8ebcbf30e00314c561652932b","date":1497616966,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"((+b:guinea +b:pig) b:cavy) ((+t:guinea +t:pig) t:cavy)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"((+b:guinea +b:pig) (+t:guinea +t:pig)) (b:cavy t:cavy)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","bugFix":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"((+b:guinea +b:pig) b:cavy) ((+t:guinea +t:pig) t:cavy)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"((+b:guinea +b:pig) (+t:guinea +t:pig)) (b:cavy t:cavy)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"((+b:guinea +b:pig) b:cavy) ((+t:guinea +t:pig) t:cavy)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","sourceOld":"  public void testSynonyms() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new MockSynonymAnalyzer());\n    Query q = parser.parse(\"dogs\");\n    assertEquals(\"Synonym(b:dog b:dogs) Synonym(t:dog t:dogs)\", q.toString());\n    q = parser.parse(\"guinea pig\");\n    assertFalse(parser.getSplitOnWhitespace());\n    assertEquals(\"((+b:guinea +b:pig) (+t:guinea +t:pig)) (b:cavy t:cavy)\", q.toString());\n    parser.setSplitOnWhitespace(true);\n    q = parser.parse(\"guinea pig\");\n    assertEquals(\"(b:guinea t:guinea) (b:pig t:pig)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e52c30617998e1bc2a946cc226f52e9b35162b1e":["818fd0a17e6c7f072aba351a575916e3063ca51b"],"8d5f9da379ac10a8ebcbf30e00314c561652932b":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4408f3223cc4586cae91dc945fefb692e411d6d":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"28288370235ed02234a64753cdbf0c6ec096304a":["b4408f3223cc4586cae91dc945fefb692e411d6d","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b4408f3223cc4586cae91dc945fefb692e411d6d","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","818fd0a17e6c7f072aba351a575916e3063ca51b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"818fd0a17e6c7f072aba351a575916e3063ca51b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e52c30617998e1bc2a946cc226f52e9b35162b1e"]},"commit2Childs":{"e52c30617998e1bc2a946cc226f52e9b35162b1e":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"8d5f9da379ac10a8ebcbf30e00314c561652932b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","818fd0a17e6c7f072aba351a575916e3063ca51b"],"b4408f3223cc4586cae91dc945fefb692e411d6d":["8d5f9da379ac10a8ebcbf30e00314c561652932b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"818fd0a17e6c7f072aba351a575916e3063ca51b":["e52c30617998e1bc2a946cc226f52e9b35162b1e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}