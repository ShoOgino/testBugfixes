{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","commits":[{"id":"35b85bcb9f4029b10b1fcd20934d760755940bb2","date":1363925237,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void doTestStressReplication() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n \n    int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n    int rounds = TEST_NIGHTLY ? 80 : 10;\n    int totalDocs = 0;\n    int id = 0;\n    for (int x = 0; x < rounds; x++) {\n      \n      // we randomly trigger a configuration replication\n      if (random().nextBoolean()) {\n        master.copyConfigFile(CONF_DIR + \"schema-replication\" + (random().nextInt(2) + 1) + \".xml\", \"schema.xml\");\n      }\n      \n      int docs = random().nextInt(maxDocs);\n      for (int i = 0; i < docs; i++) {\n        index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n      }\n      \n      totalDocs += docs;\n      masterClient.commit();\n      \n      NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n          .get(\"response\");\n      assertEquals(totalDocs, masterQueryResult.getNumFound());\n      \n      // snappull\n      pullFromMasterToSlave();\n      \n      // get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n          .get(\"response\");\n      assertEquals(totalDocs, slaveQueryResult.getNumFound());\n      // compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n          slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n      \n      assertVersions(masterClient, slaveClient);\n      \n    }\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    try {\n      \n      slave\n          .copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n      \n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        // we randomly trigger a configuration replication\n        // if (random().nextBoolean()) {\n        master.copyConfigFile(CONF_DIR + \"schema-replication\"\n            + (random().nextInt(2) + 1) + \".xml\", \"schema.xml\");\n        // }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        pullFromMasterToSlave();\n        \n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestStressReplication() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n \n    int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n    int rounds = TEST_NIGHTLY ? 80 : 10;\n    int totalDocs = 0;\n    int id = 0;\n    for (int x = 0; x < rounds; x++) {\n      \n      // we randomly trigger a configuration replication\n      if (random().nextBoolean()) {\n        master.copyConfigFile(CONF_DIR + \"schema-replication\" + (random().nextInt(2) + 1) + \".xml\", \"schema.xml\");\n      }\n      \n      int docs = random().nextInt(maxDocs);\n      for (int i = 0; i < docs; i++) {\n        index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n      }\n      \n      totalDocs += docs;\n      masterClient.commit();\n      \n      NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n      SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n          .get(\"response\");\n      assertEquals(totalDocs, masterQueryResult.getNumFound());\n      \n      // snappull\n      pullFromMasterToSlave();\n      \n      // get docs from slave and check if number is equal to master\n      NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n      SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n          .get(\"response\");\n      assertEquals(totalDocs, slaveQueryResult.getNumFound());\n      // compare results\n      String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n          slaveQueryResult, 0, null);\n      assertEquals(null, cmp);\n      \n      assertVersions(masterClient, slaveClient);\n      \n    }\n\n    // NOTE: at this point, the slave is not polling any more\n    // restore it.\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":["35b85bcb9f4029b10b1fcd20934d760755940bb2"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    try {\n      \n      slave\n          .copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n      \n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        // we randomly trigger a configuration replication\n        // if (random().nextBoolean()) {\n        master.copyConfigFile(CONF_DIR + \"schema-replication\"\n            + (random().nextInt(2) + 1) + \".xml\", \"schema.xml\");\n        // }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        pullFromMasterToSlave();\n        \n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7884a8cfd563a1793c4ccc632c4face7c51be843","date":1381690732,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test @Ignore(\"https://issues.apache.org/jira/browse/SOLR-5343\")\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b1615f6fc540ecd5dea7b03d2bac9a18bba69d5c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1615f6fc540ecd5dea7b03d2bac9a18bba69d5c","date":1385048407,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test @Ignore(\"https://issues.apache.org/jira/browse/SOLR-5343\")\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":["7884a8cfd563a1793c4ccc632c4face7c51be843"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test @Ignore(\"https://issues.apache.org/jira/browse/SOLR-5343\")\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1830bbfa7ea2827a06edb474cc81ea9e957f461f","date":1388953235,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs);\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.shutdown();\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.shutdown();\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.shutdown();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.shutdown();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.shutdown();\n      slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.shutdown();\n      masterClient = createNewSolrServer(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.shutdown();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.shutdown();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // snappull\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9","date":1523040621,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":["058801f8673d53a5abac8088204860ec29a40f0d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa62115b9e45c213699273acb13af242762232e4","date":1523184285,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n      \n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cdc53359111a5e3782f56300070ab2878ec82cb9","date":1534542016,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test \n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createAndStartJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createAndStartJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 75;\n      int rounds = TEST_NIGHTLY ? 45 : 3;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 200;\n      int rounds = TEST_NIGHTLY ? 80 : 8;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":["058801f8673d53a5abac8088204860ec29a40f0d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d09e7bab298c1fcea2f3ceb3be4c75673211e6e1","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createAndStartJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createAndStartJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 75;\n      int rounds = TEST_NIGHTLY ? 45 : 3;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        \n        if (!Constants.WINDOWS) {\n          checkForSingleIndex(slaveJetty);\n        }\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createAndStartJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createAndStartJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 75;\n      int rounds = TEST_NIGHTLY ? 45 : 3;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        checkForSingleIndex(slaveJetty);\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createAndStartJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createAndStartJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 75;\n      int rounds = TEST_NIGHTLY ? 45 : 3;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        @SuppressWarnings({\"rawtypes\"})\n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        \n        if (!Constants.WINDOWS) {\n          checkForSingleIndex(slaveJetty);\n        }\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createAndStartJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createAndStartJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 75;\n      int rounds = TEST_NIGHTLY ? 45 : 3;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        \n        if (!Constants.WINDOWS) {\n          checkForSingleIndex(slaveJetty);\n        }\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStressReplication().mjava","sourceNew":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on follower\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String FOLLOWER_SCHEMA_1 = \"schema-replication1.xml\";\n    final String FOLLOWER_SCHEMA_2 = \"schema-replication2.xml\";\n    String followerSchema = FOLLOWER_SCHEMA_1;\n\n    try {\n\n      follower.setTestPort(leaderJetty.getLocalPort());\n      follower.copyConfigFile(CONF_DIR +\"solrconfig-follower1.xml\", \"solrconfig.xml\");\n      follower.copyConfigFile(CONF_DIR +followerSchema, \"schema.xml\");\n      followerJetty.stop();\n      followerJetty = createAndStartJetty(follower);\n      followerClient.close();\n      followerClient = createNewSolrClient(followerJetty.getLocalPort());\n\n      leader.copyConfigFile(CONF_DIR + \"solrconfig-leader3.xml\",\n          \"solrconfig.xml\");\n      leaderJetty.stop();\n      leaderJetty = createAndStartJetty(leader);\n      leaderClient.close();\n      leaderClient = createNewSolrClient(leaderJetty.getLocalPort());\n      \n      leaderClient.deleteByQuery(\"*:*\");\n      followerClient.deleteByQuery(\"*:*\");\n      followerClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 75;\n      int rounds = TEST_NIGHTLY ? 45 : 3;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          followerSchema = followerSchema.equals(FOLLOWER_SCHEMA_1) ?\n            FOLLOWER_SCHEMA_2 : FOLLOWER_SCHEMA_1;\n          leader.copyConfigFile(CONF_DIR + followerSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(leaderClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        leaderClient.commit();\n        \n        @SuppressWarnings({\"rawtypes\"})\n        NamedList leaderQueryRsp = rQuery(totalDocs, \"*:*\", leaderClient);\n        SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, leaderQueryResult.getNumFound());\n        \n        // index fetch\n        Date followerCoreStart = watchCoreStartAt(followerClient, 30*1000, null);\n        pullFromLeaderToFollower();\n        if (confCoreReload) {\n          watchCoreStartAt(followerClient, 30*1000, followerCoreStart);\n        }\n\n        // get docs from follower and check if number is equal to leader\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList followerQueryRsp = rQuery(totalDocs, \"*:*\", followerClient);\n        SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, followerQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult,\n            followerQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(leaderClient, followerClient);\n        \n        checkForSingleIndex(leaderJetty);\n        \n        if (!Constants.WINDOWS) {\n          checkForSingleIndex(followerJetty);\n        }\n        \n        if (random().nextBoolean()) {\n          // move the follower ahead\n          for (int i = 0; i < 3; i++) {\n            index(followerClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          followerClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 20-Sep-2018  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void doTestStressReplication() throws Exception {\n    // change solrconfig on slave\n    // this has no entry for pollinginterval\n    \n    // get us a straight standard fs dir rather than mock*dir\n    boolean useStraightStandardDirectory = random().nextBoolean();\n    \n    if (useStraightStandardDirectory) {\n      useFactory(null);\n    }\n    final String SLAVE_SCHEMA_1 = \"schema-replication1.xml\";\n    final String SLAVE_SCHEMA_2 = \"schema-replication2.xml\";\n    String slaveSchema = SLAVE_SCHEMA_1;\n\n    try {\n\n      slave.setTestPort(masterJetty.getLocalPort());\n      slave.copyConfigFile(CONF_DIR +\"solrconfig-slave1.xml\", \"solrconfig.xml\");\n      slave.copyConfigFile(CONF_DIR +slaveSchema, \"schema.xml\");\n      slaveJetty.stop();\n      slaveJetty = createAndStartJetty(slave);\n      slaveClient.close();\n      slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n      master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n          \"solrconfig.xml\");\n      masterJetty.stop();\n      masterJetty = createAndStartJetty(master);\n      masterClient.close();\n      masterClient = createNewSolrClient(masterJetty.getLocalPort());\n      \n      masterClient.deleteByQuery(\"*:*\");\n      slaveClient.deleteByQuery(\"*:*\");\n      slaveClient.commit();\n      \n      int maxDocs = TEST_NIGHTLY ? 1000 : 75;\n      int rounds = TEST_NIGHTLY ? 45 : 3;\n      int totalDocs = 0;\n      int id = 0;\n      for (int x = 0; x < rounds; x++) {\n        \n        final boolean confCoreReload = random().nextBoolean();\n        if (confCoreReload) {\n          // toggle the schema file used\n\n          slaveSchema = slaveSchema.equals(SLAVE_SCHEMA_1) ? \n            SLAVE_SCHEMA_2 : SLAVE_SCHEMA_1;\n          master.copyConfigFile(CONF_DIR + slaveSchema, \"schema.xml\");\n        }\n        \n        int docs = random().nextInt(maxDocs) + 1;\n        for (int i = 0; i < docs; i++) {\n          index(masterClient, \"id\", id++, \"name\", \"name = \" + i);\n        }\n        \n        totalDocs += docs;\n        masterClient.commit();\n        \n        @SuppressWarnings({\"rawtypes\"})\n        NamedList masterQueryRsp = rQuery(totalDocs, \"*:*\", masterClient);\n        SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, masterQueryResult.getNumFound());\n        \n        // index fetch\n        Date slaveCoreStart = watchCoreStartAt(slaveClient, 30*1000, null);\n        pullFromMasterToSlave();\n        if (confCoreReload) {\n          watchCoreStartAt(slaveClient, 30*1000, slaveCoreStart);\n        }\n\n        // get docs from slave and check if number is equal to master\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList slaveQueryRsp = rQuery(totalDocs, \"*:*\", slaveClient);\n        SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp\n            .get(\"response\");\n        assertEquals(totalDocs, slaveQueryResult.getNumFound());\n        // compare results\n        String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult,\n            slaveQueryResult, 0, null);\n        assertEquals(null, cmp);\n        \n        assertVersions(masterClient, slaveClient);\n        \n        checkForSingleIndex(masterJetty);\n        \n        if (!Constants.WINDOWS) {\n          checkForSingleIndex(slaveJetty);\n        }\n        \n        if (random().nextBoolean()) {\n          // move the slave ahead\n          for (int i = 0; i < 3; i++) {\n            index(slaveClient, \"id\", id++, \"name\", \"name = \" + i);\n          }\n          slaveClient.commit();\n        }\n        \n      }\n      \n    } finally {\n      if (useStraightStandardDirectory) {\n        resetFactory();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e98520789adb1d5ad05afb4956eca0944a929688"],"b1615f6fc540ecd5dea7b03d2bac9a18bba69d5c":["7884a8cfd563a1793c4ccc632c4face7c51be843"],"aa62115b9e45c213699273acb13af242762232e4":["20f6b7cff3771384f27af0f059795d7e64aff6b9","1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4cba13865da71de3b9b0937fcbc66d726089356d"],"d09e7bab298c1fcea2f3ceb3be4c75673211e6e1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["aa62115b9e45c213699273acb13af242762232e4"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"1830bbfa7ea2827a06edb474cc81ea9e957f461f":["b1615f6fc540ecd5dea7b03d2bac9a18bba69d5c"],"7884a8cfd563a1793c4ccc632c4face7c51be843":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"e98520789adb1d5ad05afb4956eca0944a929688":["d09e7bab298c1fcea2f3ceb3be4c75673211e6e1"],"35b85bcb9f4029b10b1fcd20934d760755940bb2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc3b13b430571c2e169f98fe38e1e7666f88522d","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"058801f8673d53a5abac8088204860ec29a40f0d":["35b85bcb9f4029b10b1fcd20934d760755940bb2"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["1830bbfa7ea2827a06edb474cc81ea9e957f461f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7884a8cfd563a1793c4ccc632c4face7c51be843","b1615f6fc540ecd5dea7b03d2bac9a18bba69d5c"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["058801f8673d53a5abac8088204860ec29a40f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1615f6fc540ecd5dea7b03d2bac9a18bba69d5c":["1830bbfa7ea2827a06edb474cc81ea9e957f461f","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"aa62115b9e45c213699273acb13af242762232e4":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d09e7bab298c1fcea2f3ceb3be4c75673211e6e1"],"d09e7bab298c1fcea2f3ceb3be4c75673211e6e1":["e98520789adb1d5ad05afb4956eca0944a929688"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["4cba13865da71de3b9b0937fcbc66d726089356d"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9":["aa62115b9e45c213699273acb13af242762232e4"],"7884a8cfd563a1793c4ccc632c4face7c51be843":["b1615f6fc540ecd5dea7b03d2bac9a18bba69d5c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1830bbfa7ea2827a06edb474cc81ea9e957f461f":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"e98520789adb1d5ad05afb4956eca0944a929688":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"35b85bcb9f4029b10b1fcd20934d760755940bb2":["058801f8673d53a5abac8088204860ec29a40f0d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["aa62115b9e45c213699273acb13af242762232e4","1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"058801f8673d53a5abac8088204860ec29a40f0d":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35b85bcb9f4029b10b1fcd20934d760755940bb2"],"4cba13865da71de3b9b0937fcbc66d726089356d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["7884a8cfd563a1793c4ccc632c4face7c51be843"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}