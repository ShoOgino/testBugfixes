{"path":"src/java/org/apache/lucene/search/TermRangeTermEnum#termCompare(Term).mjava","commits":[{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/RangeTermEnum#termCompare(Term).mjava","sourceNew":"  protected boolean termCompare(Term term) {\n    if (collator == null) {\n      // Use Unicode code point ordering\n      boolean checkLower = false;\n      if (!includeLower) // make adjustments to set to exclusive\n        checkLower = true;\n      if (term != null && term.field() == field) { // interned comparison\n        if (!checkLower || null==lowerTermText || term.text().compareTo(lowerTermText) > 0) {\n          checkLower = false;\n          if (upperTermText != null) {\n            int compare = upperTermText.compareTo(term.text());\n            /*\n             * if beyond the upper term, or is exclusive and this is equal to\n             * the upper term, break out\n             */\n            if ((compare < 0) ||\n                (!includeUpper && compare==0)) {\n              endEnum = true;\n              return false;\n            }\n          }\n          return true;\n        }\n      } else {\n        // break\n        endEnum = true;\n        return false;\n      }\n      return false;\n    } else {\n      if (term != null && term.field() == field) { // interned comparison\n        if ((lowerTermText == null\n            || (includeLower\n                ? collator.compare(term.text(), lowerTermText) >= 0\n                : collator.compare(term.text(), lowerTermText) > 0))\n           && (upperTermText == null\n               || (includeUpper\n                   ? collator.compare(term.text(), upperTermText) <= 0\n                   : collator.compare(term.text(), upperTermText) < 0))) {\n          return true;\n        }\n        return false;\n      }\n      endEnum = true;\n      return false;\n    }\n  }\n\n","sourceOld":"  protected boolean termCompare(Term term) {\n    if (collator == null) {\n      // Use Unicode code point ordering\n      boolean checkLower = false;\n      if (!includeLower) // make adjustments to set to exclusive\n        checkLower = true;\n      if (term != null && term.field() == field) { // interned comparison\n        if (!checkLower || null==lowerTermText || term.text().compareTo(lowerTermText) > 0) {\n          checkLower = false;\n          if (upperTermText != null) {\n            int compare = upperTermText.compareTo(term.text());\n            /*\n             * if beyond the upper term, or is exclusive and this is equal to\n             * the upper term, break out\n             */\n            if ((compare < 0) ||\n                (!includeUpper && compare==0)) {\n              endEnum = true;\n              return false;\n            }\n          }\n          return true;\n        }\n      } else {\n        // break\n        endEnum = true;\n        return false;\n      }\n      return false;\n    } else {\n      if (term != null && term.field() == field) { // interned comparison\n        if ((lowerTermText == null\n            || (includeLower\n                ? collator.compare(term.text(), lowerTermText) >= 0\n                : collator.compare(term.text(), lowerTermText) > 0))\n           && (upperTermText == null\n               || (includeUpper\n                   ? collator.compare(term.text(), upperTermText) <= 0\n                   : collator.compare(term.text(), upperTermText) < 0))) {\n          return true;\n        }\n        return false;\n      }\n      endEnum = true;\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/TermRangeTermEnum#termCompare(Term).mjava","sourceNew":"  @Override\n  protected boolean termCompare(Term term) {\n    if (collator == null) {\n      // Use Unicode code point ordering\n      boolean checkLower = false;\n      if (!includeLower) // make adjustments to set to exclusive\n        checkLower = true;\n      if (term != null && term.field() == field) { // interned comparison\n        if (!checkLower || null==lowerTermText || term.text().compareTo(lowerTermText) > 0) {\n          checkLower = false;\n          if (upperTermText != null) {\n            int compare = upperTermText.compareTo(term.text());\n            /*\n             * if beyond the upper term, or is exclusive and this is equal to\n             * the upper term, break out\n             */\n            if ((compare < 0) ||\n                (!includeUpper && compare==0)) {\n              endEnum = true;\n              return false;\n            }\n          }\n          return true;\n        }\n      } else {\n        // break\n        endEnum = true;\n        return false;\n      }\n      return false;\n    } else {\n      if (term != null && term.field() == field) { // interned comparison\n        if ((lowerTermText == null\n            || (includeLower\n                ? collator.compare(term.text(), lowerTermText) >= 0\n                : collator.compare(term.text(), lowerTermText) > 0))\n           && (upperTermText == null\n               || (includeUpper\n                   ? collator.compare(term.text(), upperTermText) <= 0\n                   : collator.compare(term.text(), upperTermText) < 0))) {\n          return true;\n        }\n        return false;\n      }\n      endEnum = true;\n      return false;\n    }\n  }\n\n","sourceOld":"  protected boolean termCompare(Term term) {\n    if (collator == null) {\n      // Use Unicode code point ordering\n      boolean checkLower = false;\n      if (!includeLower) // make adjustments to set to exclusive\n        checkLower = true;\n      if (term != null && term.field() == field) { // interned comparison\n        if (!checkLower || null==lowerTermText || term.text().compareTo(lowerTermText) > 0) {\n          checkLower = false;\n          if (upperTermText != null) {\n            int compare = upperTermText.compareTo(term.text());\n            /*\n             * if beyond the upper term, or is exclusive and this is equal to\n             * the upper term, break out\n             */\n            if ((compare < 0) ||\n                (!includeUpper && compare==0)) {\n              endEnum = true;\n              return false;\n            }\n          }\n          return true;\n        }\n      } else {\n        // break\n        endEnum = true;\n        return false;\n      }\n      return false;\n    } else {\n      if (term != null && term.field() == field) { // interned comparison\n        if ((lowerTermText == null\n            || (includeLower\n                ? collator.compare(term.text(), lowerTermText) >= 0\n                : collator.compare(term.text(), lowerTermText) > 0))\n           && (upperTermText == null\n               || (includeUpper\n                   ? collator.compare(term.text(), upperTermText) <= 0\n                   : collator.compare(term.text(), upperTermText) < 0))) {\n          return true;\n        }\n        return false;\n      }\n      endEnum = true;\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/TermRangeTermEnum#termCompare(Term).mjava","sourceNew":"  @Override\n  protected boolean termCompare(Term term) {\n    if (collator == null) {\n      // Use Unicode code point ordering\n      boolean checkLower = false;\n      if (!includeLower) // make adjustments to set to exclusive\n        checkLower = true;\n      if (term != null && term.field() == field) { // interned comparison\n        if (!checkLower || null==lowerTermText || term.text().compareTo(lowerTermText) > 0) {\n          checkLower = false;\n          if (upperTermText != null) {\n            int compare = upperTermText.compareTo(term.text());\n            /*\n             * if beyond the upper term, or is exclusive and this is equal to\n             * the upper term, break out\n             */\n            if ((compare < 0) ||\n                (!includeUpper && compare==0)) {\n              endEnum = true;\n              return false;\n            }\n          }\n          return true;\n        }\n      } else {\n        // break\n        endEnum = true;\n        return false;\n      }\n      return false;\n    } else {\n      if (term != null && term.field() == field) { // interned comparison\n        if ((lowerTermText == null\n            || (includeLower\n                ? collator.compare(term.text(), lowerTermText) >= 0\n                : collator.compare(term.text(), lowerTermText) > 0))\n           && (upperTermText == null\n               || (includeUpper\n                   ? collator.compare(term.text(), upperTermText) <= 0\n                   : collator.compare(term.text(), upperTermText) < 0))) {\n          return true;\n        }\n        return false;\n      }\n      endEnum = true;\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected boolean termCompare(Term term) {\n    if (collator == null) {\n      // Use Unicode code point ordering\n      boolean checkLower = false;\n      if (!includeLower) // make adjustments to set to exclusive\n        checkLower = true;\n      if (term != null && term.field() == field) { // interned comparison\n        if (!checkLower || null==lowerTermText || term.text().compareTo(lowerTermText) > 0) {\n          checkLower = false;\n          if (upperTermText != null) {\n            int compare = upperTermText.compareTo(term.text());\n            /*\n             * if beyond the upper term, or is exclusive and this is equal to\n             * the upper term, break out\n             */\n            if ((compare < 0) ||\n                (!includeUpper && compare==0)) {\n              endEnum = true;\n              return false;\n            }\n          }\n          return true;\n        }\n      } else {\n        // break\n        endEnum = true;\n        return false;\n      }\n      return false;\n    } else {\n      if (term != null && term.field() == field) { // interned comparison\n        if ((lowerTermText == null\n            || (includeLower\n                ? collator.compare(term.text(), lowerTermText) >= 0\n                : collator.compare(term.text(), lowerTermText) > 0))\n           && (upperTermText == null\n               || (includeUpper\n                   ? collator.compare(term.text(), upperTermText) <= 0\n                   : collator.compare(term.text(), upperTermText) < 0))) {\n          return true;\n        }\n        return false;\n      }\n      endEnum = true;\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}