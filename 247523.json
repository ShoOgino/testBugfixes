{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"/dev/null","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriter.getDefaultWriteLockTimeout();\n        try {\n          IndexWriter.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        } finally {\n          IndexWriter.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriter.getDefaultWriteLockTimeout();\n        try {\n          IndexWriter.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        } finally {\n          IndexWriter.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriter.getDefaultWriteLockTimeout();\n        try {\n          IndexWriter.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriter.getDefaultWriteLockTimeout());\n\n          writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n        } finally {\n          IndexWriter.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        reader = IndexReader.open(dir, false);\n        for (i = 0; i < 40; i++) {\n            reader.deleteDocument(i);\n        }\n        reader.close();\n\n        // test doc count before segments are merged/index is optimized\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        reader = IndexReader.open(dir, true);\n        assertEquals(100, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // optimize the index and check that the new doc count is correct\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n        assertEquals(100, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.optimize();\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir, true);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}