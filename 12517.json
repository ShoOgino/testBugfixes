{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#getValue(BinaryDocValues).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#getValue(BinaryDocValues).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#getValue(BinaryDocValues,int).mjava","sourceNew":"  static long getValue(BinaryDocValues bdv) {\n    BytesRef term = bdv.binaryValue();\n    int idx = term.offset;\n    assert term.length > 0;\n    byte b = term.bytes[idx++];\n    long value = b & 0x7FL;\n    for (int shift = 7; (b & 0x80L) != 0; shift += 7) {\n      b = term.bytes[idx++];\n      value |= (b & 0x7FL) << shift;\n    }\n    return value;\n  }\n\n","sourceOld":"  static long getValue(BinaryDocValues bdv, int idx) {\n    BytesRef term = bdv.get(idx);\n    idx = term.offset;\n    byte b = term.bytes[idx++];\n    long value = b & 0x7FL;\n    for (int shift = 7; (b & 0x80L) != 0; shift += 7) {\n      b = term.bytes[idx++];\n      value |= (b & 0x7FL) << shift;\n    }\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#getValue(BinaryDocValues).mjava","pathOld":"/dev/null","sourceNew":"  static long getValue(BinaryDocValues bdv) {\n    BytesRef term = bdv.binaryValue();\n    int idx = term.offset;\n    assert term.length > 0;\n    byte b = term.bytes[idx++];\n    long value = b & 0x7FL;\n    for (int shift = 7; (b & 0x80L) != 0; shift += 7) {\n      b = term.bytes[idx++];\n      value |= (b & 0x7FL) << shift;\n    }\n    return value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#getValue(BinaryDocValues).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#getValue(BinaryDocValues).mjava","sourceNew":"  static long getValue(BinaryDocValues bdv) throws IOException {\n    BytesRef term = bdv.binaryValue();\n    int idx = term.offset;\n    assert term.length > 0;\n    byte b = term.bytes[idx++];\n    long value = b & 0x7FL;\n    for (int shift = 7; (b & 0x80L) != 0; shift += 7) {\n      b = term.bytes[idx++];\n      value |= (b & 0x7FL) << shift;\n    }\n    return value;\n  }\n\n","sourceOld":"  static long getValue(BinaryDocValues bdv) {\n    BytesRef term = bdv.binaryValue();\n    int idx = term.offset;\n    assert term.length > 0;\n    byte b = term.bytes[idx++];\n    long value = b & 0x7FL;\n    for (int shift = 7; (b & 0x80L) != 0; shift += 7) {\n      b = term.bytes[idx++];\n      value |= (b & 0x7FL) << shift;\n    }\n    return value;\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#getValue(BinaryDocValues).mjava","pathOld":"/dev/null","sourceNew":"  static long getValue(BinaryDocValues bdv) throws IOException {\n    BytesRef term = bdv.binaryValue();\n    int idx = term.offset;\n    assert term.length > 0;\n    byte b = term.bytes[idx++];\n    long value = b & 0x7FL;\n    for (int shift = 7; (b & 0x80L) != 0; shift += 7) {\n      b = term.bytes[idx++];\n      value |= (b & 0x7FL) << shift;\n    }\n    return value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}