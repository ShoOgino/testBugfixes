{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","commits":[{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String).mjava","sourceNew":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n          @Override\n          public MapWriter.EntryWriter put(String k, Object v) {\n            if (result[0] != null) return this;\n            if (k != null) {\n              if (key.equals(k)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = v;\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","sourceOld":"  private static Object getVal(Object obj, String key) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          @Override\n          public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n            if (key.equals(k)) result[0] = v;\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n\n    if (obj instanceof NamedList) return ((NamedList) obj).get(key);\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3167eae3325cf45449a75ab0468b53c0545606a3","date":1538465698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","sourceNew":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n          @Override\n          public MapWriter.EntryWriter put(String k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","sourceOld":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n          @Override\n          public MapWriter.EntryWriter put(String k, Object v) {\n            if (result[0] != null) return this;\n            if (k != null) {\n              if (key.equals(k)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = v;\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457ac99a6d7227f954082cc753a08b18225e4553","date":1540167281,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","sourceNew":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","sourceOld":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n          @Override\n          public MapWriter.EntryWriter put(String k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","sourceNew":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    } else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","sourceOld":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","sourceNew":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","sourceOld":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    } else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","sourceNew":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    } else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","sourceOld":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    }\n    else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getVal(Object,String,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    } else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","sourceOld":"  private static Object getVal(Object obj, String key, int idx) {\n    if (obj instanceof MapWriter) {\n      Object[] result = new Object[1];\n      try {\n        ((MapWriter) obj).writeMap(new MapWriter.EntryWriter() {\n          int count = -1;\n\n          @Override\n          public MapWriter.EntryWriter put(CharSequence k, Object v) {\n            if (result[0] != null) return this;\n            if (idx < 0) {\n              if (k.equals(key)) result[0] = v;\n            } else {\n              if (++count == idx) result[0] = new MapWriterEntry(k, v);\n            }\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      return result[0];\n    } else if (obj instanceof Map) return ((Map) obj).get(key);\n    else throw new RuntimeException(\"must be a NamedList or Map\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["8476949555f799dff381770c01cfad051a264487"],"457ac99a6d7227f954082cc753a08b18225e4553":["3167eae3325cf45449a75ab0468b53c0545606a3"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["457ac99a6d7227f954082cc753a08b18225e4553"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3167eae3325cf45449a75ab0468b53c0545606a3":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"457ac99a6d7227f954082cc753a08b18225e4553":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["3167eae3325cf45449a75ab0468b53c0545606a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"3167eae3325cf45449a75ab0468b53c0545606a3":["457ac99a6d7227f954082cc753a08b18225e4553"],"8476949555f799dff381770c01cfad051a264487":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}