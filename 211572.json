{"path":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parseArray(String).mjava","commits":[{"id":"928077c840ee09456eee199964d886c73fc53314","date":1468594268,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parseArray(String).mjava","pathOld":"/dev/null","sourceNew":"  private List<Object> parseArray(String path) throws ParseException {\n    List<Object> result = new ArrayList<>();\n    scan('[');\n    while (upto < input.length()) {\n      char ch = peek();\n      if (ch == ']') {\n        scan(']');\n        return result;\n      }\n\n      if (result.size() > 0) {\n        if (ch != ',') {\n          throw newParseException(\"expected ',' separating list items, but got '\" + ch + \"'\");\n        }\n\n        // skip the ,\n        upto++;\n        \n        if (upto == input.length()) {\n          throw newParseException(\"hit EOF while parsing array\");\n        }\n        ch = peek();\n      }\n\n      Object o;\n      if (ch == '[') {\n        o = parseArray(path + \".[]\");\n      } else if (ch == '{') {\n        // This is only used when parsing the \"features\" in type: FeatureCollection\n        parseObject(path + \".[]\");\n        o = null;\n      } else if (ch == '-' || ch == '.' || (ch >= '0' && ch <= '9')) {\n        o = parseNumber();\n      } else {\n        throw newParseException(\"expected another array or number while parsing array, not '\" + ch + \"'\");\n      }\n      \n      result.add(o);\n    }\n\n    throw newParseException(\"hit EOF while reading array\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parseArray(String).mjava","pathOld":"/dev/null","sourceNew":"  private List<Object> parseArray(String path) throws ParseException {\n    List<Object> result = new ArrayList<>();\n    scan('[');\n    while (upto < input.length()) {\n      char ch = peek();\n      if (ch == ']') {\n        scan(']');\n        return result;\n      }\n\n      if (result.size() > 0) {\n        if (ch != ',') {\n          throw newParseException(\"expected ',' separating list items, but got '\" + ch + \"'\");\n        }\n\n        // skip the ,\n        upto++;\n        \n        if (upto == input.length()) {\n          throw newParseException(\"hit EOF while parsing array\");\n        }\n        ch = peek();\n      }\n\n      Object o;\n      if (ch == '[') {\n        o = parseArray(path + \".[]\");\n      } else if (ch == '{') {\n        // This is only used when parsing the \"features\" in type: FeatureCollection\n        parseObject(path + \".[]\");\n        o = null;\n      } else if (ch == '-' || ch == '.' || (ch >= '0' && ch <= '9')) {\n        o = parseNumber();\n      } else {\n        throw newParseException(\"expected another array or number while parsing array, not '\" + ch + \"'\");\n      }\n      \n      result.add(o);\n    }\n\n    throw newParseException(\"hit EOF while reading array\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e401dec0639f12e4440b07ad485f3e4413420800","date":1568117728,"type":3,"author":"Alexander Reelsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parseArray(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/SimpleGeoJSONPolygonParser#parseArray(String).mjava","sourceNew":"  private List<Object> parseArray(String path) throws ParseException {\n    List<Object> result = new ArrayList<>();\n    scan('[');\n    while (upto < input.length()) {\n      char ch = peek();\n      if (ch == ']') {\n        scan(']');\n        return result;\n      }\n\n      if (result.size() > 0) {\n        if (ch != ',') {\n          throw newParseException(\"expected ',' separating list items, but got '\" + ch + \"'\");\n        }\n\n        // skip the ,\n        upto++;\n        \n        if (upto == input.length()) {\n          throw newParseException(\"hit EOF while parsing array\");\n        }\n        ch = peek();\n      }\n\n      Object o;\n      if (ch == '[') {\n        o = parseArray(path + \".[]\");\n      } else if (ch == '{') {\n        // This is only used when parsing the \"features\" in type: FeatureCollection\n        parseObject(path + \".[]\");\n        o = null;\n      } else if (ch == '-' || ch == '.' || (ch >= '0' && ch <= '9')) {\n        o = parseNumber();\n      } else if (ch == '\"') {\n        o = parseString();\n      } else {\n        throw newParseException(\"expected another array or number while parsing array, not '\" + ch + \"'\");\n      }\n      \n      result.add(o);\n    }\n\n    throw newParseException(\"hit EOF while reading array\");\n  }\n\n","sourceOld":"  private List<Object> parseArray(String path) throws ParseException {\n    List<Object> result = new ArrayList<>();\n    scan('[');\n    while (upto < input.length()) {\n      char ch = peek();\n      if (ch == ']') {\n        scan(']');\n        return result;\n      }\n\n      if (result.size() > 0) {\n        if (ch != ',') {\n          throw newParseException(\"expected ',' separating list items, but got '\" + ch + \"'\");\n        }\n\n        // skip the ,\n        upto++;\n        \n        if (upto == input.length()) {\n          throw newParseException(\"hit EOF while parsing array\");\n        }\n        ch = peek();\n      }\n\n      Object o;\n      if (ch == '[') {\n        o = parseArray(path + \".[]\");\n      } else if (ch == '{') {\n        // This is only used when parsing the \"features\" in type: FeatureCollection\n        parseObject(path + \".[]\");\n        o = null;\n      } else if (ch == '-' || ch == '.' || (ch >= '0' && ch <= '9')) {\n        o = parseNumber();\n      } else {\n        throw newParseException(\"expected another array or number while parsing array, not '\" + ch + \"'\");\n      }\n      \n      result.add(o);\n    }\n\n    throw newParseException(\"hit EOF while reading array\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"928077c840ee09456eee199964d886c73fc53314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e401dec0639f12e4440b07ad485f3e4413420800":["928077c840ee09456eee199964d886c73fc53314"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","928077c840ee09456eee199964d886c73fc53314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e401dec0639f12e4440b07ad485f3e4413420800"]},"commit2Childs":{"928077c840ee09456eee199964d886c73fc53314":["e401dec0639f12e4440b07ad485f3e4413420800","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["928077c840ee09456eee199964d886c73fc53314","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e401dec0639f12e4440b07ad485f3e4413420800":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}