{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    // NOTE: we can't wrap this with newSearcher, because when the API is abused in this way,\n    // the number of ords can exceed the number of documents, and AssertingAtomicReader will get angry,\n    // rightfully so (its a broken dv)\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b3768e97375c7a745c68f0b54710e8bedccc11","date":1406635606,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {}\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we don't throw exception on multi-valued field (LUCENE-2142) */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    // NOTE: we can't wrap this with newSearcher, because when the API is abused in this way,\n    // the number of ords can exceed the number of documents, and AssertingAtomicReader will get angry,\n    // rightfully so (its a broken dv)\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","3990ef6ed195a54c0e22c12fcf0103c2a729596e","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","6c791d1c3f1aa8656835cbe427ca5ab01ea0a460"],"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {}\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {}\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {}\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.shutdown();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {}\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {}\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {}\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {}\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["05fe562aa248790944d43cdd478f512572835ba0"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["05fe562aa248790944d43cdd478f512572835ba0","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"05fe562aa248790944d43cdd478f512572835ba0":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["05fe562aa248790944d43cdd478f512572835ba0","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","0e121d43b5a10f2df530f406f935102656e9c4e8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"05fe562aa248790944d43cdd478f512572835ba0":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}