{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","commits":[{"id":"c4d7ac4188c98a500b3ecca495071d74ccd9cbc7","date":1354368601,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","sourceNew":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = new IndexSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","sourceNew":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","sourceNew":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","sourceNew":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","date":1416362965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","sourceNew":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    doc.add(new SortedDocValuesField(\"group\", new BytesRef(\"foo\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupingSearchTest#testSetAllGroups().mjava","sourceNew":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    doc.add(new SortedDocValuesField(\"group\", new BytesRef(\"foo\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSetAllGroups() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    doc.add(newField(\"group\", \"foo\", StringField.TYPE_NOT_STORED));\n    doc.add(new SortedDocValuesField(\"group\", new BytesRef(\"foo\")));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    GroupingSearch gs = new GroupingSearch(\"group\");\n    gs.setAllGroups(true);\n    TopGroups<?> groups = gs.search(indexSearcher, null, new TermQuery(new Term(\"group\", \"foo\")), 0, 10);\n    assertEquals(1, groups.totalHitCount);\n    //assertEquals(1, groups.totalGroupCount.intValue());\n    assertEquals(1, groups.totalGroupedHitCount);\n    assertEquals(1, gs.getAllMatchingGroups().size());\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"c4d7ac4188c98a500b3ecca495071d74ccd9cbc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c4d7ac4188c98a500b3ecca495071d74ccd9cbc7"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["c4d7ac4188c98a500b3ecca495071d74ccd9cbc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4d7ac4188c98a500b3ecca495071d74ccd9cbc7":["407687e67faf6e1f02a211ca078d8e3eed631027","ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4d7ac4188c98a500b3ecca495071d74ccd9cbc7","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}