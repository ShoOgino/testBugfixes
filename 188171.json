{"path":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<String>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException | IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      } catch (IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05ecea3671609c138d91d6fe0d0aa71dd86e992","date":1446668020,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      String parseContextConfigLoc = (String) initArgs.get(PARSE_CONTEXT_CONFIG);\n      if (parseContextConfigLoc != null) {\n        try {\n          parseContextConfig = new ParseContextConfig(core.getResourceLoader(), parseContextConfigLoc);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException | IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    if (parseContextConfig == null) {\n      parseContextConfig = new ParseContextConfig();\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException | IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3","date":1514163780,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      String parseContextConfigLoc = (String) initArgs.get(PARSE_CONTEXT_CONFIG);\n      if (parseContextConfigLoc != null) {\n        try {\n          parseContextConfig = new ParseContextConfig(core.getResourceLoader(), parseContextConfigLoc);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try (InputStream is = core.getResourceLoader().getClassLoader().getResourceAsStream(\"solr-default-tika-config.xml\")){\n        config = new TikaConfig(is);\n      } catch (IOException | SAXException | TikaException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    if (parseContextConfig == null) {\n      parseContextConfig = new ParseContextConfig();\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      String parseContextConfigLoc = (String) initArgs.get(PARSE_CONTEXT_CONFIG);\n      if (parseContextConfigLoc != null) {\n        try {\n          parseContextConfig = new ParseContextConfig(core.getResourceLoader(), parseContextConfigLoc);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try {\n        config = getDefaultConfig(core.getResourceLoader().getClassLoader());\n      } catch (MimeTypeException | IOException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    if (parseContextConfig == null) {\n      parseContextConfig = new ParseContextConfig();\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0982ea5c2b7f50890065ccf2b59068efc40eaafe","date":1538167811,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      String parseContextConfigLoc = (String) initArgs.get(PARSE_CONTEXT_CONFIG);\n      if (parseContextConfigLoc != null) {\n        try {\n          parseContextConfig = new ParseContextConfig(core.getResourceLoader(), parseContextConfigLoc);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    if (config == null) {\n      try (InputStream is = core.getResourceLoader().getClassLoader().getResourceAsStream(\"solr-default-tika-config.xml\")){\n        config = new TikaConfig(is);\n      } catch (IOException | SAXException | TikaException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    if (parseContextConfig == null) {\n      parseContextConfig = new ParseContextConfig();\n    }\n    factory = createFactory();\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      String parseContextConfigLoc = (String) initArgs.get(PARSE_CONTEXT_CONFIG);\n      if (parseContextConfigLoc != null) {\n        try {\n          parseContextConfig = new ParseContextConfig(core.getResourceLoader(), parseContextConfigLoc);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      NamedList configDateFormats = (NamedList) initArgs.get(DATE_FORMATS);\n      if (configDateFormats != null && configDateFormats.size() > 0) {\n        dateFormats = new HashSet<>();\n        Iterator<Map.Entry> it = configDateFormats.iterator();\n        while (it.hasNext()) {\n          String format = (String) it.next().getValue();\n          log.info(\"Adding Date Format: \" + format);\n          dateFormats.add(format);\n        }\n      }\n    }\n    if (config == null) {\n      try (InputStream is = core.getResourceLoader().getClassLoader().getResourceAsStream(\"solr-default-tika-config.xml\")){\n        config = new TikaConfig(is);\n      } catch (IOException | SAXException | TikaException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    if (parseContextConfig == null) {\n      parseContextConfig = new ParseContextConfig();\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractingRequestHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    try {\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc == null) { // default\n        ClassLoader classLoader = core.getResourceLoader().getClassLoader();\n        try (InputStream is = classLoader.getResourceAsStream(\"solr-default-tika-config.xml\")) {\n          config = new TikaConfig(is);\n        }\n      } else {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute()) {\n          config = new TikaConfig(configFile);\n        } else { // in conf/\n          try (InputStream is = core.getResourceLoader().openResource(tikaConfigLoc)) {\n            config = new TikaConfig(is);\n          }\n        }\n      }\n\n      String parseContextConfigLoc = (String) initArgs.get(PARSE_CONTEXT_CONFIG);\n      if (parseContextConfigLoc == null) { // default:\n        parseContextConfig = new ParseContextConfig();\n      } else {\n        parseContextConfig = new ParseContextConfig(core.getResourceLoader(), parseContextConfigLoc);\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load Tika Config\", e);\n    }\n\n    factory = createFactory();\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initArgs != null) {\n      //if relative,then relative to config dir, otherwise, absolute path\n      String tikaConfigLoc = (String) initArgs.get(CONFIG_LOCATION);\n      if (tikaConfigLoc != null) {\n        File configFile = new File(tikaConfigLoc);\n        if (configFile.isAbsolute() == false) {\n          configFile = new File(core.getResourceLoader().getConfigDir(), configFile.getPath());\n        }\n        try {\n          config = new TikaConfig(configFile);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n\n      String parseContextConfigLoc = (String) initArgs.get(PARSE_CONTEXT_CONFIG);\n      if (parseContextConfigLoc != null) {\n        try {\n          parseContextConfig = new ParseContextConfig(core.getResourceLoader(), parseContextConfigLoc);\n        } catch (Exception e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    if (config == null) {\n      try (InputStream is = core.getResourceLoader().getClassLoader().getResourceAsStream(\"solr-default-tika-config.xml\")){\n        config = new TikaConfig(is);\n      } catch (IOException | SAXException | TikaException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n    if (parseContextConfig == null) {\n      parseContextConfig = new ParseContextConfig();\n    }\n    factory = createFactory();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"c05ecea3671609c138d91d6fe0d0aa71dd86e992":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3":["c05ecea3671609c138d91d6fe0d0aa71dd86e992"],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c05ecea3671609c138d91d6fe0d0aa71dd86e992":["b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["c05ecea3671609c138d91d6fe0d0aa71dd86e992"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"b73eb4421b19c0b0aab08f8a5f99acd9b7e140b3":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}