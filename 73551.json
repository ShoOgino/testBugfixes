{"path":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"d38eb16935a27250e66a031c80560615df637f95","date":1288085332,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    Directory dir = state.dir;\n    Set<String> files = new HashSet<String>();\n\n    other.files(dir, state.segmentInfo, files);\n    for (String string : files) {\n      if (dir.fileExists(string))\n        return new WrappingFielsdProducer(state.segmentInfo, state.dir,\n            state.fieldInfos, other.fieldsProducer(state));\n    }\n    return new WrappingFielsdProducer(state.segmentInfo, state.dir,\n        state.fieldInfos, FieldsProducer.EMPTY);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    Directory dir = state.dir;\n    Set<String> files = new HashSet<String>();\n\n    other.files(dir, state.segmentInfo, state.codecId, files);\n    for (String string : files) {\n      if (dir.fileExists(string))\n        return new WrappingFielsdProducer(state, other.fieldsProducer(state));\n    }\n    return new WrappingFielsdProducer(state, FieldsProducer.EMPTY);\n\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    Directory dir = state.dir;\n    Set<String> files = new HashSet<String>();\n\n    other.files(dir, state.segmentInfo, files);\n    for (String string : files) {\n      if (dir.fileExists(string))\n        return new WrappingFielsdProducer(state.segmentInfo, state.dir,\n            state.fieldInfos, other.fieldsProducer(state));\n    }\n    return new WrappingFielsdProducer(state.segmentInfo, state.dir,\n        state.fieldInfos, FieldsProducer.EMPTY);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    Directory dir = state.dir;\n    Set<String> files = new HashSet<String>();\n\n    other.files(dir, state.segmentInfo, state.codecId, files);\n    for (String string : files) { // for now we just check if one of the files\n                                  // exists and open the producer\n      if (dir.fileExists(string))\n        return new WrappingFielsdProducer(state, other.fieldsProducer(state));\n    }\n    return new WrappingFielsdProducer(state, FieldsProducer.EMPTY);\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    Directory dir = state.dir;\n    Set<String> files = new HashSet<String>();\n\n    other.files(dir, state.segmentInfo, state.codecId, files);\n    for (String string : files) {\n      if (dir.fileExists(string))\n        return new WrappingFielsdProducer(state, other.fieldsProducer(state));\n    }\n    return new WrappingFielsdProducer(state, FieldsProducer.EMPTY);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    final FieldInfos fieldInfos = state.fieldInfos;\n    boolean indexed = false;\n    boolean docValues = false;\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == state.codecId) {\n        indexed |= fieldInfo.isIndexed;\n        docValues |= fieldInfo.hasDocValues();\n        if (indexed && docValues)\n          break;\n      }\n    }\n    final FieldsProducer indexedProducer = indexed ? other.fieldsProducer(state) : FieldsProducer.EMPTY;\n    if (docValues) {\n      return new WrappingFielsdProducer(state, indexedProducer);\n    } else {\n      return FieldsProducer.EMPTY;\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    Directory dir = state.dir;\n    Set<String> files = new HashSet<String>();\n\n    other.files(dir, state.segmentInfo, state.codecId, files);\n    for (String string : files) { // for now we just check if one of the files\n                                  // exists and open the producer\n      if (dir.fileExists(string))\n        return new WrappingFielsdProducer(state, other.fieldsProducer(state));\n    }\n    return new WrappingFielsdProducer(state, FieldsProducer.EMPTY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    return other.fieldsProducer(state);\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    final FieldInfos fieldInfos = state.fieldInfos;\n    boolean indexed = false;\n    boolean docValues = false;\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (fieldInfo.getCodecId() == state.codecId) {\n        indexed |= fieldInfo.isIndexed;\n        docValues |= fieldInfo.hasDocValues();\n        if (indexed && docValues)\n          break;\n      }\n    }\n    final FieldsProducer indexedProducer = indexed ? other.fieldsProducer(state) : FieldsProducer.EMPTY;\n    if (docValues) {\n      return new WrappingFielsdProducer(state, indexedProducer);\n    } else {\n      return FieldsProducer.EMPTY;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d47326e0c6ce589b6962777df409aad0550940fa","date":1304584540,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state)\n      throws IOException {\n    return other.fieldsProducer(state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d84736c4614acce6720851cbd2c823d7cd516e4":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["d38eb16935a27250e66a031c80560615df637f95","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2d84736c4614acce6720851cbd2c823d7cd516e4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d38eb16935a27250e66a031c80560615df637f95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d47326e0c6ce589b6962777df409aad0550940fa":["135621f3a0670a9394eb563224a3b76cc4dddc0f"]},"commit2Childs":{"2d84736c4614acce6720851cbd2c823d7cd516e4":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","d619839baa8ce5503e496b94a9e42ad6f079293f","135621f3a0670a9394eb563224a3b76cc4dddc0f","d38eb16935a27250e66a031c80560615df637f95","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d47326e0c6ce589b6962777df409aad0550940fa"],"d38eb16935a27250e66a031c80560615df637f95":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d47326e0c6ce589b6962777df409aad0550940fa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d47326e0c6ce589b6962777df409aad0550940fa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}