{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(SolrDocument,String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(SolrDocument,String).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(SolrDocument,String).mjava","sourceNew":"  protected String getValue(SolrDocument sdoc, String field) {\n    StringBuilder result = new StringBuilder();\n    Collection<Object> vals = sdoc.getFieldValues(field);\n    if(vals == null) return \"\";\n    Iterator<Object> ite = vals.iterator();\n    while(ite.hasNext()){\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append((String)ite.next()).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  protected String getValue(SolrDocument sdoc, String field) {\n    StringBuilder result = new StringBuilder();\n    Collection<Object> vals = sdoc.getFieldValues(field);\n    if(vals == null) return \"\";\n    Iterator<Object> ite = vals.iterator();\n    while(ite.hasNext()){\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append((String)ite.next()).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(SolrDocument,String).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(SolrDocument,String).mjava","sourceNew":"  protected String getValue(SolrDocument sdoc, String field) {\n    StringBuilder result = new StringBuilder();\n    Collection<Object> vals = sdoc.getFieldValues(field);\n    if(vals == null) return \"\";\n    Iterator<Object> ite = vals.iterator();\n    while(ite.hasNext()){\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append((String)ite.next()).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  protected String getValue(SolrDocument sdoc, String field) {\n    StringBuilder result = new StringBuilder();\n    Collection<Object> vals = sdoc.getFieldValues(field);\n    if(vals == null) return \"\";\n    Iterator<Object> ite = vals.iterator();\n    while(ite.hasNext()){\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append((String)ite.next()).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f25fe5576647e3bdd2a797a9900982532d5e2e97","date":1323446322,"type":4,"author":"Stanisław Osiński","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(SolrDocument,String).mjava","sourceNew":null,"sourceOld":"  protected String getValue(SolrDocument sdoc, String field) {\n    StringBuilder result = new StringBuilder();\n    Collection<Object> vals = sdoc.getFieldValues(field);\n    if(vals == null) return \"\";\n    Iterator<Object> ite = vals.iterator();\n    while(ite.hasNext()){\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append((String)ite.next()).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(SolrDocument,String).mjava","sourceNew":null,"sourceOld":"  protected String getValue(SolrDocument sdoc, String field) {\n    StringBuilder result = new StringBuilder();\n    Collection<Object> vals = sdoc.getFieldValues(field);\n    if(vals == null) return \"\";\n    Iterator<Object> ite = vals.iterator();\n    while(ite.hasNext()){\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append((String)ite.next()).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["c26f00b574427b55127e869b935845554afde1fa","f25fe5576647e3bdd2a797a9900982532d5e2e97"],"f25fe5576647e3bdd2a797a9900982532d5e2e97":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f25fe5576647e3bdd2a797a9900982532d5e2e97"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","f25fe5576647e3bdd2a797a9900982532d5e2e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"f25fe5576647e3bdd2a797a9900982532d5e2e97":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}