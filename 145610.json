{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForcedMergesUseLeastNumberOfMerges().mjava","commits":[{"id":"79ba4baff197d5691f403962548d82fe855e4101","date":1552642047,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForcedMergesUseLeastNumberOfMerges().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-8688 reports that force merges merged more segments that necessary to respect maxSegmentCount as a result\n  // of LUCENE-7976 so we ensure that it only does the minimum number of merges here.\n  public void testForcedMergesUseLeastNumberOfMerges() throws Exception {\n    final TieredMergePolicy tmp = new TieredMergePolicy();\n    final double oneSegmentSize = 1.0D;\n    final double maxSegmentSize = 10 * oneSegmentSize;\n    tmp.setMaxMergedSegmentMB(maxSegmentSize);\n\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    for (int j = 0; j < 30; ++j) {\n      infos.add(makeSegmentCommitInfo(\"_\" + j, 1000, 0, oneSegmentSize, IndexWriter.SOURCE_MERGE));\n    }\n\n    final int expectedCount = random().nextInt(10) + 3;\n    final MergeSpecification specification =\n        tmp.findForcedMerges(infos, expectedCount, segmentsToMerge(infos), new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertMaxSize(specification, maxSegmentSize);\n    final int resultingCount =\n        infos.size() + specification.merges.size() - specification.merges.stream().mapToInt(spec -> spec.segments.size()).sum();\n    assertEquals(expectedCount, resultingCount);\n\n    SegmentInfos manySegmentsInfos = new SegmentInfos(Version.LATEST.major);\n    final int manySegmentsCount = atLeast(100);\n    for (int j = 0; j < manySegmentsCount; ++j) {\n      manySegmentsInfos.add(makeSegmentCommitInfo(\"_\" + j, 1000, 0, 0.1D, IndexWriter.SOURCE_MERGE));\n    }\n\n    final MergeSpecification specificationManySegments = tmp.findForcedMerges(\n        manySegmentsInfos, expectedCount, segmentsToMerge(manySegmentsInfos), new MockMergeContext(SegmentCommitInfo::getDelCount));\n    assertMaxSize(specificationManySegments, maxSegmentSize);\n    final int resultingCountManySegments = manySegmentsInfos.size() + specificationManySegments.merges.size()\n        - specificationManySegments.merges.stream().mapToInt(spec -> spec.segments.size()).sum();\n    assertTrue(resultingCountManySegments >= expectedCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79ba4baff197d5691f403962548d82fe855e4101":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["79ba4baff197d5691f403962548d82fe855e4101"]},"commit2Childs":{"79ba4baff197d5691f403962548d82fe855e4101":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79ba4baff197d5691f403962548d82fe855e4101"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}