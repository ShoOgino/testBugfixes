{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","commits":[{"id":"db5a3aeba34624ea274f34df5691d40ca25f2b67","date":1358965297,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    throw new AssertionError();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb","date":1359046870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10e89cbe24422ef92a37fc037a955728de2e12cf","date":1359053475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4772ea9604873dc0b22ea724398008998afc8e41","date":1359133954,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (data.getFilePointer() != data.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n        }\n        if (index.getFilePointer() != index.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (data.getFilePointer() != data.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n        }\n        if (index.getFilePointer() != index.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(data);\n        CodecUtil.checkEOF(index);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (data.getFilePointer() != data.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n        }\n        if (index.getFilePointer() != index.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(data);\n        CodecUtil.checkEOF(index);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (data.getFilePointer() != data.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + dataName + \"\\\": read \" + data.getFilePointer() + \" vs size \" + data.length() + \" (resource: \" + data + \")\");\n        }\n        if (index.getFilePointer() != index.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + indexName + \"\\\": read \" + index.getFilePointer() + \" vs size \" + index.length() + \" (resource: \" + index + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(data);\n        CodecUtil.checkEOF(index);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(data);\n        CodecUtil.checkEOF(index);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(data);\n        CodecUtil.checkEOF(index);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedDocValues getSorted(FieldInfo field) throws IOException {\n    SortedDocValues instance = sortedInstances.get(field.number);\n    if (instance == null) {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      IndexInput data = null;\n      IndexInput index = null;\n      boolean success = false;\n      try {\n        data = dir.openInput(dataName, state.context);\n        index = dir.openInput(indexName, state.context);\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case BYTES_FIXED_SORTED:\n            instance = loadBytesFixedSorted(field, data, index);\n            break;\n          case BYTES_VAR_SORTED:\n            instance = loadBytesVarSorted(field, data, index);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(data);\n        CodecUtil.checkEOF(index);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n      sortedInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb":["db5a3aeba34624ea274f34df5691d40ca25f2b67"],"db5a3aeba34624ea274f34df5691d40ca25f2b67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["d4d69c535930b5cce125cff868d40f6373dc27d4","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4772ea9604873dc0b22ea724398008998afc8e41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"4772ea9604873dc0b22ea724398008998afc8e41":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["1f3b037cd083286b2af89f96e768f85dcd8072d6","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"db5a3aeba34624ea274f34df5691d40ca25f2b67":["9f5b43ddb6d3ea6e4dfe2103a0d75679caa01abb"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db5a3aeba34624ea274f34df5691d40ca25f2b67","d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4772ea9604873dc0b22ea724398008998afc8e41":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["4772ea9604873dc0b22ea724398008998afc8e41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}