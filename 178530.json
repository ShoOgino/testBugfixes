{"path":"src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}