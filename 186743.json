{"path":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caa40272511a69bd4ad04b8242ae420932f5799b","date":1359341326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new PagedBytes.Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new PagedBytes.Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new Reader(this);\n  }\n\n","bugFix":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    addBlock(currentBlock);\n    frozen = true;\n    currentBlock = null;\n    return new PagedBytes.Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new PagedBytes.Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#freeze(boolean).mjava","sourceNew":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    addBlock(currentBlock);\n    frozen = true;\n    currentBlock = null;\n    return new PagedBytes.Reader(this);\n  }\n\n","sourceOld":"  /** Commits final byte[], trimming it if necessary and if trim=true */\n  public Reader freeze(boolean trim) {\n    if (frozen) {\n      throw new IllegalStateException(\"already frozen\");\n    }\n    if (didSkipBytes) {\n      throw new IllegalStateException(\"cannot freeze when copy(BytesRef, BytesRef) was used\");\n    }\n    if (trim && upto < blockSize) {\n      final byte[] newBlock = new byte[upto];\n      System.arraycopy(currentBlock, 0, newBlock, 0, upto);\n      currentBlock = newBlock;\n    }\n    if (currentBlock == null) {\n      currentBlock = EMPTY_BYTES;\n    }\n    blocks.add(currentBlock);\n    blockEnd.add(upto); \n    frozen = true;\n    currentBlock = null;\n    return new PagedBytes.Reader(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","caa40272511a69bd4ad04b8242ae420932f5799b"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["d4d69c535930b5cce125cff868d40f6373dc27d4","d943163030bbd7a9caf93cb5fea92257390a2a99"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"caa40272511a69bd4ad04b8242ae420932f5799b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d943163030bbd7a9caf93cb5fea92257390a2a99"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","caa40272511a69bd4ad04b8242ae420932f5799b"],"caa40272511a69bd4ad04b8242ae420932f5799b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}