{"path":"lucene/core/src/test/org/apache/lucene/search/TestBlendedTermQuery#testBlendedScores().mjava","commits":[{"id":"f2e0b693f44c4d48acb66e289f04ec7309118a1a","date":1437989791,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBlendedTermQuery#testBlendedScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testBlendedScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"a\", Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"b\", Store.NO));\n    for (int i = 0; i < 10; ++i) {\n      w.addDocument(doc);\n    }\n\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    BlendedTermQuery query = new BlendedTermQuery.Builder()\n        .setRewriteMethod(new BlendedTermQuery.DisjunctionMaxRewrite(0f))\n        .add(new Term(\"f\", \"a\"))\n        .add(new Term(\"f\", \"b\"))\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 20);\n    assertEquals(11, topDocs.totalHits);\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBlendedTermQuery#testBlendedScores().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBlendedTermQuery#testBlendedScores().mjava","sourceNew":"  public void testBlendedScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"a\", Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"b\", Store.NO));\n    for (int i = 0; i < 10; ++i) {\n      w.addDocument(doc);\n    }\n\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    BlendedTermQuery query = new BlendedTermQuery.Builder()\n        .setRewriteMethod(new BlendedTermQuery.DisjunctionMaxRewrite(0f))\n        .add(new Term(\"f\", \"a\"))\n        .add(new Term(\"f\", \"b\"))\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 20);\n    assertEquals(11, topDocs.totalHits.value);\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBlendedScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"a\", Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"b\", Store.NO));\n    for (int i = 0; i < 10; ++i) {\n      w.addDocument(doc);\n    }\n\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    BlendedTermQuery query = new BlendedTermQuery.Builder()\n        .setRewriteMethod(new BlendedTermQuery.DisjunctionMaxRewrite(0f))\n        .add(new Term(\"f\", \"a\"))\n        .add(new Term(\"f\", \"b\"))\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 20);\n    assertEquals(11, topDocs.totalHits);\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}